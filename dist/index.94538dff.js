// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"dHVtd":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "4a236f9275d0a351";
module.bundle.HMR_BUNDLE_ID = "071135d094538dff";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.
    if (!parents.length) return true;
    return parents.some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"int3P":[function(require,module,exports) {
var _functions = require("./functions");
document.getElementById('myFile').onchange = function(evt) {
    var tgt = evt.target || window.event.srcElement, files = tgt.files;
    // FileReader support
    if (FileReader && files && files.length) {
        var fr = new FileReader();
        fr.onload = ()=>_functions.showImage(fr)
        ;
        fr.readAsDataURL(files[0]);
    }
};
_functions.playButton();
_functions.pianoButton();
_functions.acousticButton();
_functions.edmButton();
_functions.organButton();
_functions.manualButton();
_functions.sineButton();
_functions.squareButton();
_functions.sawtoothButton();
_functions.triangleButton();

},{"./functions":"1mtU9"}],"1mtU9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "showImage", ()=>showImage
);
parcelHelpers.export(exports, "playButton", ()=>playButton
);
parcelHelpers.export(exports, "pianoButton", ()=>pianoButton
);
parcelHelpers.export(exports, "acousticButton", ()=>acousticButton
);
parcelHelpers.export(exports, "edmButton", ()=>edmButton
);
parcelHelpers.export(exports, "organButton", ()=>organButton
);
parcelHelpers.export(exports, "manualButton", ()=>manualButton
);
parcelHelpers.export(exports, "sineButton", ()=>sineButton
);
parcelHelpers.export(exports, "squareButton", ()=>squareButton
);
parcelHelpers.export(exports, "sawtoothButton", ()=>sawtoothButton
);
parcelHelpers.export(exports, "triangleButton", ()=>triangleButton
);
var _lodash = require("lodash");
var _lodashDefault = parcelHelpers.interopDefault(_lodash);
var _simpleStatistics = require("simple-statistics");
var _mathjs = require("mathjs");
const config = {
};
const math = _mathjs.create(_mathjs.all, config);
const c = new AudioContext;
//Input vars
var SoundType = "acoustic"; // This can be manual, piano, acoustic, edm or organ, when it is manual we use the other params, if it is any of the other we only use duration2, ScaleType, NumTimes and threshold
var ScaleType = "Chromatic"; // Can be any from the object "Scales" defined above
// All this are in seconds, they are to parametrize the waveform
var attack = 0.06;
var release = 0.1;
var decay = 0.05;
var sustain = 0.15;
//----------------
var oscType = "square"; // can be sine, square, sawtooth, triangle
var baseFreq = 440; // Base note freq
var threshold = 0.4; //Value from 0 to 1, it is a threshold to decide if a pixel is played or not, when 0 all pixels are played, higher values means only very edgy objets are played
//Filter
var filterTyp = "lowpass"; // can be: lowpass, highpass, bandpass, lowshelf, highshelf, peaking, notch, allpass
var filtFreq = 1000; // filter freq reference
var filtQslider = -4; // Some other parameter for the filter that I don't remember, have to be positive
var filtGain = 0; // Other parameter of the filter. can be either negative or positve
//Distortion
var ApplyDist = "false"; // true or false
var DistValue = 0; //Ammount of distortion
var DistOver = "none"; //Oversampling after distortion. Valid values are 'none', '2x', or '4x'.
var NumFreqs = 12; //How many frequencies we want to have in total
var NumTimes = 20; //How many time steps we want to have in total 
var detune1 = true; //Detune the oscilators can only be true or false
var unisonWidth = 1; //Detune value, it can be a low number, from 1 to 20 more or less
var harmonics = [
    1,
    0.5,
    1,
    0.5,
    1
]; // Weigths for the harmonics, the size of the array is the number of harmonics, and the values are the weigths.
var duration2 = 1; //Duration of notes when preset synth is used
// harmonics values
var harmonic1;
var harmonic2;
var harmonic3;
var harmonic4;
var harmonic5;
//------------------------------------
var duration; // duration when manual
var norm = 0;
var piano = Synth.createInstrument('piano');
var acoustic = Synth.createInstrument('acoustic');
var organ = Synth.createInstrument('organ');
var edm = Synth.createInstrument('edm');
//Scales
const Scales = {
    Chromatic: [
        "C",
        "C#",
        "D",
        "D#",
        "E",
        "F",
        "F#",
        "G",
        "G#",
        "A",
        "A#",
        "B"
    ],
    Ionian: [
        "C",
        "D",
        "E",
        "F",
        "G",
        "A",
        "B",
        "C"
    ],
    Dorian: [
        "D",
        "E",
        "F",
        "G",
        "A",
        "B",
        "C",
        "D"
    ],
    Phrygian: [
        "E",
        "F",
        "G",
        "A",
        "B",
        "C",
        "D",
        "E"
    ],
    Lydian: [
        "F",
        "G",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F"
    ],
    Mixo: [
        "G",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G"
    ],
    Aeolian: [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "A"
    ],
    Locrian: [
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "A",
        "B"
    ],
    Melodic: [
        "C",
        "D",
        "D#",
        "F",
        "G",
        "A",
        "B",
        "C"
    ],
    Harmonic: [
        "D",
        "E",
        "F",
        "G",
        "A",
        "A#",
        "C#",
        "D"
    ],
    Blues: [
        "E",
        "G",
        "A",
        "A#",
        "B",
        "D",
        "E"
    ],
    FPenta: [
        "F",
        "G",
        "A",
        "C",
        "D",
        "F"
    ],
    CPenta: [
        "C",
        "D",
        "E",
        "G",
        "A",
        "C"
    ],
    GPenta: [
        "G",
        "A#",
        "C",
        "D",
        "F",
        "G"
    ],
    APenta: [
        "A",
        "C",
        "D",
        "E",
        "G",
        "A"
    ]
};
var W;
var Waux;
var H;
var imageData;
var data2Play;
var A;
// Dial Button
// Duration2 Button
var knobPositionXDuration2;
var knobPositionYDuration2;
var mouseXDuration2;
var mouseYDuration2;
var knobCenterXDuration2;
var knobCenterYDuration2;
var adjacentSideDuration2;
var oppositeSideDuration2;
var currentRadiansAngleDuration2;
var getRadiansInDegreesDuration2;
var finalAngleInDegreesDuration2;
var volumeSettingDuration2;
var tickHighlightPositionDuration2;
var startingTickAngleDuration2 = -135;
var tickContainerDuration2 = document.getElementById("tickContainer-duration2");
var volumeKnobDuration2 = document.getElementById("knob-duration2");
var boundingRectangleDuration2 = volumeKnobDuration2.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// NumTimes
var knobPositionXNumTimes;
var knobPositionYNumTimes;
var mouseXNumTimes;
var mouseYNumTimes;
var knobCenterXNumTimes;
var knobCenterYNumTimes;
var adjacentSideNumTimes;
var oppositeSideNumTimes;
var currentRadiansAngleNumTimes;
var getRadiansInDegreesNumTimes;
var finalAngleInDegreesNumTimes;
var volumeSettingNumTimes;
var tickHighlightPositionNumTimes;
var startingTickAngleNumTimes = -135;
var tickContainerNumTimes = document.getElementById("tickContainer-numTimes");
var volumeKnobNumTimes = document.getElementById("knob-numTimes");
var boundingRectangleNumTimes = volumeKnobNumTimes.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// Threshold
var knobPositionXThreshold;
var knobPositionYThreshold;
var mouseXThreshold;
var mouseYThreshold;
var knobCenterXThreshold;
var knobCenterYThreshold;
var adjacentSideThreshold;
var oppositeSideThreshold;
var currentRadiansAngleThreshold;
var getRadiansInDegreesThreshold;
var finalAngleInDegreesThreshold;
var volumeSettingThreshold;
var tickHighlightPositionThreshold;
var startingTickAngleThreshold = -135;
var tickContainerThreshold = document.getElementById("tickContainer-threshold");
var volumeKnobThreshold = document.getElementById("knob-threshold");
var boundingRectangleThreshold = volumeKnobThreshold.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// Attack
var knobPositionXAttack;
var knobPositionYAttack;
var mouseXAttack;
var mouseYAttack;
var knobCenterXAttack;
var knobCenterYAttack;
var adjacentSideAttack;
var oppositeSideAttack;
var currentRadiansAngleAttack;
var getRadiansInDegreesAttack;
var finalAngleInDegreesAttack;
var volumeSettingAttack;
var tickHighlightPositionAttack;
var startingTickAngleAttack = -135;
var tickContainerAttack = document.getElementById("tickContainer-attack");
var volumeKnobAttack = document.getElementById("knob-attack");
var boundingRectangleAttack = volumeKnobAttack.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// Release
var knobPositionXRelease;
var knobPositionYRelease;
var mouseXRelease;
var mouseYRelease;
var knobCenterXRelease;
var knobCenterYRelease;
var adjacentSideRelease;
var oppositeSideRelease;
var currentRadiansAngleRelease;
var getRadiansInDegreesRelease;
var finalAngleInDegreesRelease;
var volumeSettingRelease;
var tickHighlightPositionRelease;
var startingTickAngleRelease = -135;
var tickContainerRelease = document.getElementById("tickContainer-release");
var volumeKnobRelease = document.getElementById("knob-release");
var boundingRectangleRelease = volumeKnobRelease.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// Decay
var knobPositionXDecay;
var knobPositionYDecay;
var mouseXDecay;
var mouseYDecay;
var knobCenterXDecay;
var knobCenterYDecay;
var adjacentSideDecay;
var oppositeSideDecay;
var currentRadiansAngleDecay;
var getRadiansInDegreesDecay;
var finalAngleInDegreesDecay;
var volumeSettingDecay;
var tickHighlightPositionDecay;
var startingTickAngleDecay = -135;
var tickContainerDecay = document.getElementById("tickContainer-decay");
var volumeKnobDecay = document.getElementById("knob-decay");
var boundingRectangleDecay = volumeKnobDecay.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// Sustain
var knobPositionXSustain;
var knobPositionYSustain;
var mouseXSustain;
var mouseYSustain;
var knobCenterXSustain;
var knobCenterYSustain;
var adjacentSideSustain;
var oppositeSideSustain;
var currentRadiansAngleSustain;
var getRadiansInDegreesSustain;
var finalAngleInDegreesSustain;
var volumeSettingSustain;
var tickHighlightPositionSustain;
var startingTickAngleSustain = -135;
var tickContainerSustain = document.getElementById("tickContainer-sustain");
var volumeKnobSustain = document.getElementById("knob-sustain");
var boundingRectangleSustain = volumeKnobSustain.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// Frequency
var knobPositionXFrequency;
var knobPositionYFrequency;
var mouseXFrequency;
var mouseYFrequency;
var knobCenterXFrequency;
var knobCenterYFrequency;
var adjacentSideFrequency;
var oppositeSideFrequency;
var currentRadiansAngleFrequency;
var getRadiansInDegreesFrequency;
var finalAngleInDegreesFrequency;
var volumeSettingFrequency;
var tickHighlightPositionFrequency;
var startingTickAngleFrequency = -135;
var tickContainerFrequency = document.getElementById("tickContainer-frequency");
var volumeKnobFrequency = document.getElementById("knob-frequency");
var boundingRectangleFrequency = volumeKnobFrequency.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// FiltSlid
var knobPositionXFiltSlid;
var knobPositionYFiltSlid;
var mouseXFiltSlid;
var mouseYFiltSlid;
var knobCenterXFiltSlid;
var knobCenterYFiltSlid;
var adjacentSideFiltSlid;
var oppositeSideFiltSlid;
var currentRadiansAngleFiltSlid;
var getRadiansInDegreesFiltSlid;
var finalAngleInDegreesFiltSlid;
var volumeSettingFiltSlid;
var tickHighlightPositionFiltSlid;
var startingTickAngleFiltSlid = -135;
var tickContainerFiltSlid = document.getElementById("tickContainer-filtSlid");
var volumeKnobFiltSlid = document.getElementById("knob-filtSlid");
var boundingRectangleFiltSlid = volumeKnobFiltSlid.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// FiltGain
var knobPositionXFiltGain;
var knobPositionYFiltGain;
var mouseXFiltGain;
var mouseYFiltGain;
var knobCenterXFiltGain;
var knobCenterYFiltGain;
var adjacentSideFiltGain;
var oppositeSideFiltGain;
var currentRadiansAngleFiltGain;
var getRadiansInDegreesFiltGain;
var finalAngleInDegreesFiltGain;
var volumeSettingFiltGain;
var tickHighlightPositionFiltGain;
var startingTickAngleFiltGain = -135;
var tickContainerFiltGain = document.getElementById("tickContainer-filtGain");
var volumeKnobFiltGain = document.getElementById("knob-filtGain");
var boundingRectangleFiltGain = volumeKnobFiltGain.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// DistValue
var knobPositionXDistValue;
var knobPositionYDistValue;
var mouseXDistValue;
var mouseYDistValue;
var knobCenterXDistValue;
var knobCenterYDistValue;
var adjacentSideDistValue;
var oppositeSideDistValue;
var currentRadiansAngleDistValue;
var getRadiansInDegreesDistValue;
var finalAngleInDegreesDistValue;
var volumeSettingDistValue;
var tickHighlightPositionDistValue;
var startingTickAngleDistValue = -135;
var tickContainerDistValue = document.getElementById("tickContainer-distValue");
var volumeKnobDistValue = document.getElementById("knob-distValue");
var boundingRectangleDistValue = volumeKnobDistValue.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// NumFreqs
var knobPositionXNumFreqs;
var knobPositionYNumFreqs;
var mouseXNumFreqs;
var mouseYNumFreqs;
var knobCenterXNumFreqs;
var knobCenterYNumFreqs;
var adjacentSideNumFreqs;
var oppositeSideNumFreqs;
var currentRadiansAngleNumFreqs;
var getRadiansInDegreesNumFreqs;
var finalAngleInDegreesNumFreqs;
var volumeSettingNumFreqs;
var tickHighlightPositionNumFreqs;
var startingTickAngleNumFreqs = -135;
var tickContainerNumFreqs = document.getElementById("tickContainer-numFreqs");
var volumeKnobNumFreqs = document.getElementById("knob-numFreqs");
var boundingRectangleNumFreqs = volumeKnobNumFreqs.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// UnisonWidth
var knobPositionXUnisonWidth;
var knobPositionYUnisonWidth;
var mouseXUnisonWidth;
var mouseYUnisonWidth;
var knobCenterXUnisonWidth;
var knobCenterYUnisonWidth;
var adjacentSideUnisonWidth;
var oppositeSideUnisonWidth;
var currentRadiansAngleUnisonWidth;
var getRadiansInDegreesUnisonWidth;
var finalAngleInDegreesUnisonWidth;
var volumeSettingUnisonWidth;
var tickHighlightPositionUnisonWidth;
var startingTickAngleUnisonWidth = -135;
var tickContainerUnisonWidth = document.getElementById("tickContainer-unisonWidth");
var volumeKnobUnisonWidth = document.getElementById("knob-unisonWidth");
var boundingRectangleUnisonWidth = volumeKnobUnisonWidth.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
// BaseFreq
var knobPositionXBaseFreq;
var knobPositionYBaseFreq;
var mouseXBaseFreq;
var mouseYBaseFreq;
var knobCenterXBaseFreq;
var knobCenterYBaseFreq;
var adjacentSideBaseFreq;
var oppositeSideBaseFreq;
var currentRadiansAngleBaseFreq;
var getRadiansInDegreesBaseFreq;
var finalAngleInDegreesBaseFreq;
var volumeSettingBaseFreq;
var tickHighlightPositionBaseFreq;
var startingTickAngleBaseFreq = -135;
var tickContainerBaseFreq = document.getElementById("tickContainer-baseFreq");
var volumeKnobBaseFreq = document.getElementById("knob-baseFreq");
var boundingRectangleBaseFreq = volumeKnobBaseFreq.getBoundingClientRect(); //get rectangular geometric data of knob (x, y, width, height)
//
const canvas = document.createElement("canvas");
const ctx = canvas.getContext("2d");
const canv = document.getElementById("bar");
//const context = canv.getContext("2d")
function drawLine(x) {
    /*console.log(x,canv.width);
    context.beginPath();
    context.clearRect(0,0,canv.width,canv.height);
    context.moveTo(x,0);
    context.lineTo(x, canv.height);
    context.stroke();    */ var img = document.getElementById("myImage");
    var imagePercentage = img.width / window.screen.width;
    canv.style.width = x / img.width * imagePercentage * 100 + 0.6 + "%";
    canv.style.height = "30px";
    canv.style.backgroundColor = "#F6D0B1";
    canv.style.border = "1px solid black";
    canv.style.borderRadius = "12px";
}
function playButton() {
    //document.getElementById('hihi').addEventListener('click',function () { playImage(reduceImage(data2Play)); });
    //--------- Play Code --------//
    document.getElementById('hihi').addEventListener('click', function() {
        // Scales Select
        var e = document.getElementById("ScaleSelect");
        var value = e.options[e.selectedIndex].value;
        ScaleType = value;
        console.log(value);
        // DistOver Select
        var d = document.getElementById("DistOverSelect");
        var distOverValue = d.options[d.selectedIndex].value;
        DistOver = distOverValue;
        console.log(distOverValue);
        // Filter Select
        var f = document.getElementById("FilterSelect");
        var filterValue = f.options[f.selectedIndex].value;
        filterTyp = filterValue;
        console.log(filterTyp);
        // Get Armonics
        harmonic1 = document.getElementById('Harmonic1').value;
        harmonic2 = document.getElementById('Harmonic2').value;
        harmonic3 = document.getElementById('Harmonic3').value;
        harmonic4 = document.getElementById('Harmonic4').value;
        harmonic5 = document.getElementById('Harmonic5').value;
        harmonics[0] = harmonic1;
        harmonics[1] = harmonic2;
        harmonics[2] = harmonic3;
        harmonics[3] = harmonic4;
        harmonics[4] = harmonic5;
        if (SoundType == "piano" || SoundType == "acoustic" || SoundType == "organ" || SoundType == "edm" || SoundType == "manual") {
            if (SoundType != "manual") NumFreqs = Scales[ScaleType].length;
            playImage(normalizeImage(horizontalDerivative(medianFilter(data2Play)), NumFreqs, NumTimes));
        } else alert("Please select a valid SoundType");
    });
}
function pianoButton() {
    //document.getElementById('hihi').addEventListener('click',function () { playImage(reduceImage(data2Play)); });
    document.getElementById('Piano').addEventListener('click', function() {
        $(document).ready(function() {
            $('#HideManualParameters1').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideDistortion').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideWaveform').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideFilter').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideDuration2').delay(1).fadeOut(100);
        });
        $(document).ready(function() {
            $('#HideScales').delay(1).fadeOut(100);
        });
        SoundType = "piano";
    });
}
function acousticButton() {
    //document.getElementById('hihi').addEventListener('click',function () { playImage(reduceImage(data2Play)); });
    document.getElementById('Acoustic').addEventListener('click', function() {
        $(document).ready(function() {
            $('#HideManualParameters1').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideDistortion').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideWaveform').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideFilter').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideDuration2').delay(1).fadeOut(100);
        });
        $(document).ready(function() {
            $('#HideScales').delay(1).fadeOut(100);
        });
        SoundType = "acoustic";
    });
}
function edmButton() {
    //document.getElementById('hihi').addEventListener('click',function () { playImage(reduceImage(data2Play)); });
    document.getElementById('Edm').addEventListener('click', function() {
        $(document).ready(function() {
            $('#HideManualParameters1').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideDistortion').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideWaveform').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideFilter').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideDuration2').delay(1).fadeOut(100);
        });
        $(document).ready(function() {
            $('#HideScales').delay(1).fadeOut(100);
        });
        SoundType = "edm";
    });
}
function organButton() {
    //document.getElementById('hihi').addEventListener('click',function () { playImage(reduceImage(data2Play)); });
    document.getElementById('Organ').addEventListener('click', function() {
        $(document).ready(function() {
            $('#HideManualParameters1').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideDistortion').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideWaveform').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideFilter').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideDuration2').delay(1).fadeOut(100);
        });
        $(document).ready(function() {
            $('#HideScales').delay(1).fadeOut(100);
        });
        SoundType = "organ";
    });
}
function manualButton() {
    //document.getElementById('hihi').addEventListener('click',function () { playImage(reduceImage(data2Play)); });
    document.getElementById('Manual').addEventListener('click', function() {
        SoundType = "manual";
        console.log(SoundType);
        $(document).ready(function() {
            $('#HideManualParameters1').delay(1).fadeOut(100);
        });
        $(document).ready(function() {
            $('#HideDistortion').delay(1).fadeOut(100);
        });
        $(document).ready(function() {
            $('#HideWaveform').delay(1).fadeOut(100);
        });
        $(document).ready(function() {
            $('#HideFilter').delay(1).fadeOut(100);
        });
        $(document).ready(function() {
            $('#HideDuration2').delay(1).fadeIn(100);
        });
        $(document).ready(function() {
            $('#HideScales').delay(1).fadeIn(100);
        });
        document.getElementById("HideScales").style.display = "flex";
        document.getElementById("HideDuration2").style.display = "flex";
    });
}
function sineButton() {
    document.getElementById('Sine').addEventListener('click', function() {
        oscType = "sine";
        console.log(oscType);
    });
}
function squareButton() {
    document.getElementById('Square').addEventListener('click', function() {
        oscType = "square";
        console.log(oscType);
    });
}
function sawtoothButton() {
    document.getElementById('Sawtooth').addEventListener('click', function() {
        oscType = "sawtooth";
        console.log(oscType);
    });
}
function triangleButton() {
    document.getElementById('Triangle').addEventListener('click', function() {
        oscType = "triangle";
        console.log(oscType);
    });
}
function playImage(data) {
    //console.log(data);
    var durationAux;
    if (SoundType == "manual") durationAux = (attack + release + decay + sustain) * 1000;
    else durationAux = duration2 * 1000;
    console.log("Aux : " + durationAux);
    for(var j = 0; j < data[0].length; j++){
        amps = selectColumn(data, j);
        setTimeout(playOscillators, durationAux * j, amps);
        setTimeout(drawLine, durationAux * j, (j + 1) * Waux / NumTimes);
    }
}
function image2OneChannel(imgData, height, width) {
    var data = [];
    for(var i = 0; i < height; i++)data[i] = new Array(width);
    for(var y = 0; y < height; y++)for(var x = 0; x < width; x++){
        var pos = (y * width + x) * 4;
        data[y][x] = Math.floor((imgData[pos] + imgData[pos + 1] + imgData[pos + 2]) / 3);
    }
    return data;
}
function selectColumn(array, number) {
    var col = array.map(function(value, index) {
        return value[number];
    });
    return col;
}
// function generateImg(width, height){
//     var buffer = new Uint8ClampedArray(width* height* 4);
//     for(var y = 0; y< height; y++) {
//         for(var x = 0; x< width; x++) {
//             var pos = (y*width + x)*4;
//             buffer[pos] = Math.floor(Math.random() * 256);
//             buffer[pos+1] = Math.floor(Math.random() * 256);
//             buffer[pos+2] = Math.floor(Math.random() * 256);
//             buffer[pos+3] = 255;
//         }
//     }
//     return buffer;
// }
function playOscillators(amps) {
    //console.log(amps.length);
    // Detune check
    var isDetune = document.getElementById("DetuneCheckBox").checked;
    detune1 = isDetune;
    norm = 0;
    for(i = 0; i < amps.length; i++)if (amps[i] > threshold) norm = norm + 1;
    for(i = 0; i < amps.length; i++)if (amps[i] > threshold) {
        Synth.setVolume(amps[i] / norm - 0.01);
        console.log(Synth.getVolume());
        n = amps.length - i - 1;
        //console.log(amps[i]);
        f = baseFreq * Math.pow(2, n / 12);
        if (SoundType == "manual") {
            harmonicsWeigths = math.multiply(harmonics, amps[i]);
            createHarmonics(f, harmonicsWeigths, detune1);
        }
        if (SoundType == "piano") piano.play(Scales[ScaleType][n], 4, duration2);
        if (SoundType == "acoustic") acoustic.play(Scales[ScaleType][n], 4, duration2);
        if (SoundType == "organ") organ.play(Scales[ScaleType][n], 4, duration2);
        //console.log("volume is " + Synth.getVolume());}
        if (SoundType == "edm") edm.play(Scales[ScaleType][n], 4, duration2);
    }
}
function createOscillators(f, amplitud, detune) {
    var o = c.createOscillator();
    var g = c.createGain();
    var filter = c.createBiquadFilter();
    var distortion = c.createWaveShaper();
    //Filter
    filter.type = filterTyp;
    filter.frequency.value = filtFreq;
    filter.Q.value = filtQslider;
    filter.gain.value = filtGain;
    //Distortion
    distortion.curve = makeDistortionCurve(DistValue);
    distortion.oversample = DistOver;
    //Oscillator
    o.type = oscType;
    o.frequency.value = f;
    o.detune.value = detune;
    var isApplyDist = document.getElementById("DistCheckBox").checked;
    ApplyDist = isApplyDist;
    if (ApplyDist) {
        o.connect(distortion);
        distortion.connect(filter);
        filter.connect(g);
        g.connect(c.destination);
    //console.log("Estoy en el apllyDistTrue");
    } else {
        o.connect(filter);
        filter.connect(g);
        g.connect(c.destination);
    //console.log("Estoy en el apllyDistFalse");
    }
    now = c.currentTime;
    //Waveform
    g.gain.setValueAtTime(0, now);
    g.gain.linearRampToValueAtTime(amplitud / (norm * harmonicsWeigths.length), now + attack);
    //console.log(norm);
    g.gain.setTargetAtTime(0.7 * amplitud / (norm * harmonicsWeigths.length), now + attack, decay);
    g.gain.setTargetAtTime(0, attack + decay + sustain, release);
    //Start and stop
    duration = attack + release + decay + sustain;
    o.start(now);
    o.stop(now + duration);
}
function createHarmonics(f, harmonicsWeigths, detune) {
    //createOscillators(f,amps[i], 0); 
    for(var i = 0; i < harmonicsWeigths.length; i++){
        //console.log(harmonicsWeigths.length);
        createOscillators(f * (i + 1), harmonicsWeigths[i], 0);
        if (detune) {
            //console.log("DetuneTrue");
            createOscillators(f * (i + 1), harmonicsWeigths[i], -unisonWidth);
            createOscillators(f * (i + 1), harmonicsWeigths[i], unisonWidth);
        }
    }
}
//get image from user and plot
function showImage(fileReader) {
    // Reset Time bar
    canv.style.backgroundColor = "transparent";
    var img = document.getElementById("myImage");
    var realImg = document.getElementById("realImage");
    img.onload = ()=>getImageData(img, realImg)
    ;
    canv.style.backgroundColor = "transparent";
    canv.style.border = "0px";
    img.src = fileReader.result;
    realImg.src = fileReader.result;
}
function getImageData(img, realImg) {
    W = realImg.width;
    Waux = img.width;
    H = realImg.height;
    console.log(W, H);
    canvas.width = W;
    canvas.height = H;
    canv.height = "30px";
    canv.width = img.width;
    canv.style.position = "absolute";
    canv.style.marginLeft = img.x - 8 + "px";
    canv.style.marginTop = img.y + img.height + window.scrollY - 5 + "px";
    ctx.drawImage(realImg, 0, 0);
    imageData = ctx.getImageData(0, 0, W, H).data;
    data2Play = image2OneChannel(imageData, H, W);
    data2Play = math.abs(math.add(data2Play, -modeOfMatrix(data2Play)));
//console.log(data2Play);
//console.log("image data:", imageData);
//getRGB(imageData);
}
function reduceImage(matrix) {
    y_len = matrix.length;
    x_len = matrix[0].length;
    //console.log(y_len);
    A = new Array(12).fill(0);
    temp = new Array(y_len);
    for(var i = 0; i < A.length; i++)A[i] = new Array(20).fill(0);
    for(var i = 0; i < temp.length; i++)temp[i] = new Array(20).fill(0);
    for(var j = 0; j < y_len; j++)for(var i = 0; i < 20; i++){
        avg_row = matrix[j].slice(i * Math.floor(x_len / 20), (i + 1) * Math.floor(x_len / 20)).reduce((a, b)=>a + b
        , 0) / Math.floor(x_len / 20);
        temp[j][i] = avg_row;
    }
    for(var i = 0; i < 20; i++)for(var j = 0; j < 12; j++){
        avg_col = selectColumn(temp, i).slice(j * Math.floor(y_len / 12), (j + 1) * Math.floor(y_len / 12)).reduce((a, b)=>a + b
        , 0) / Math.floor(y_len / 12);
        A[j][i] = avg_col;
    }
    return A;
}
function modeOfMatrix(matrix) {
    a1d = [].concat(...matrix);
    mode = _simpleStatistics.mode(a1d);
    return mode;
}
// function getRGB(imgData) {
//     for (var i=0;i<imgData.length;i+=4) {
//         R[i/4] = imgData[i];
//         G[i/4] = imgData[i+1];
//         B[i/4] = imgData[i+2];
//     }
// }
function normalizeImage(matrix, freqBins, timeStp) {
    y_len = matrix.length;
    x_len = matrix[0].length;
    new_y = Math.floor(y_len / freqBins);
    new_x = Math.floor(x_len / timeStp);
    Q = 0;
    var data = [];
    for(var i = 0; i < freqBins; i++)data[i] = new Array(timeStp).fill(0);
    //data = data / Math.max(data);
    //console.log(y_len);
    // tengo que definir indices para caminar por imagen
    for(var k = 0; k < freqBins; k++)for(var m = 0; m < timeStp; m++){
        for(var j = 0; j < new_y; j++)for(var i = 0; i < new_x; i++)data[k][m] += matrix[k * new_y + j][m * new_x + i] / (new_x * new_y);
        if (data[k][m] > Q) Q = data[k][m];
    }
    for(var k = 0; k < freqBins; k++)for(var m = 0; m < timeStp; m++)data[k][m] /= Q;
    return data;
}
function medianFilter(matrix) {
    y_len = matrix.length;
    x_len = matrix[0].length;
    var data = [];
    for(var i = 0; i < y_len; i++)data[i] = new Array(x_len);
    var knl = [];
    //console.log(y_len);
    //aca lleno los bordes de la imagen de salida con los bordes de la imagen de entrada
    for(var j = 0; j < y_len - 1; j++){
        data[j][0] = matrix[j][0];
        data[j][x_len - 1] = matrix[j][x_len - 1];
    }
    for(var i = 1; i < x_len - 2; i++){
        data[0][i] = matrix[0][i];
        data[y_len - 1][i] = matrix[y_len - 1][i];
    }
    // aca aplico el filtro de mediana
    for(var j = 1; j < y_len - 1; j++)for(var i = 1; i < x_len - 1; i++){
        knl = [
            matrix[j - 1][i - 1],
            matrix[j][i - 1],
            matrix[j + 1][i - 1],
            matrix[j - 1][i],
            matrix[j][i],
            matrix[j + 1][i],
            matrix[j - 1][i + 1],
            matrix[j][i + 1],
            matrix[j + 1][i + 1]
        ];
        data[j - 1][i - 1] = median(knl);
    }
    return data;
}
function horizontalDerivative(matrix) {
    y_len = matrix.length;
    x_len = matrix[0].length;
    var data = [];
    for(var i = 0; i < y_len - 2; i++)data[i] = new Array(x_len - 2);
    /*
    var sbl_knl = [-1 , -2 ,-1 ,0, 0, 0, 1, 2, 1];
    //console.log(y_len);
     for (var j = 1 ; j < y_len-2 ; j++){
        for (var i = 1 ; i  < x_len-2 ; i++){
            data[j-1][i-1]=matrix[j-1][i-1]*sbl_knl[0] + matrix[j][i-1]*sbl_knl[1] + matrix[j+1][i-1]*sbl_knl[2] +
            matrix[j-1][i]*sbl_knl[3] + matrix[j][i]*sbl_knl[4] + matrix[j+1][i]*sbl_knl[5] +
            matrix[j-1][i+1]*sbl_knl[6] + matrix[j][i+1]*sbl_knl[7] + matrix[j+1][i+1]*sbl_knl[8]
              
        }
    
        //console.log(j);
     }
     */ var sbl_knl = [
        -1,
        -1,
        1,
        1
    ];
    //console.log(y_len);
    for(var j = 1; j < y_len - 1; j++)for(var i = 1; i < x_len - 1; i++)data[j - 1][i - 1] = Math.abs(matrix[j - 1][i - 1] * sbl_knl[0] + matrix[j][i - 1] * sbl_knl[1] + matrix[j - 1][i] * sbl_knl[2] + matrix[j][i] * sbl_knl[3]);
    return data;
}
const median = (arr)=>{
    const mid = Math.floor(arr.length / 2), nums = [
        ...arr
    ].sort((a, b)=>a - b
    );
    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
};
function makeDistortionCurve(amount) {
    var k = typeof amount === 'number' ? amount : 50, n_samples = 44100, curve = new Float32Array(n_samples), deg = Math.PI / 180, i = 0, x;
    for(; i < n_samples; ++i){
        x = i * 2 / n_samples - 1;
        curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
    }
    return curve;
}
// Slider Duration2
function mainDuration2() {
    volumeKnobDuration2.addEventListener(getMouseDownDuration2(), onMouseDownDuration2); //listen for mouse button click
    document.addEventListener(getMouseUpDuration2(), onMouseUpDuration2); //listen for mouse button release
    createTicksDuration2(27, 14);
}
//on mouse button down
function onMouseDownDuration2() {
    document.addEventListener(getMouseMoveDuration2(), onMouseMoveDuration2); //start drag
}
//on mouse button release
function onMouseUpDuration2() {
    document.removeEventListener(getMouseMoveDuration2(), onMouseMoveDuration2); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveDuration2(event) {
    knobPositionXDuration2 = boundingRectangleDuration2.left; //get knob's global x position
    knobPositionYDuration2 = boundingRectangleDuration2.top; //get knob's global y position
    if (detectMobileDuration2() == "desktop") {
        mouseXDuration2 = event.pageX; //get mouse's x global position
        mouseYDuration2 = event.pageY; //get mouse's y global position
    } else {
        mouseXDuration2 = event.touches[0].pageX; //get finger's x global position
        mouseYDuration2 = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXDuration2 = boundingRectangleDuration2.width / 2 + knobPositionXDuration2; //get global horizontal center position of knob relative to mouse position
    knobCenterYDuration2 = boundingRectangleDuration2.height / 2 + knobPositionYDuration2; //get global vertical center position of knob relative to mouse position
    adjacentSideDuration2 = knobCenterXDuration2 - mouseXDuration2; //compute adjacent value of imaginary right angle triangle
    oppositeSideDuration2 = knobCenterYDuration2 - mouseYDuration2; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleDuration2 = Math.atan2(adjacentSideDuration2, oppositeSideDuration2);
    getRadiansInDegreesDuration2 = currentRadiansAngleDuration2 * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesDuration2 = -(getRadiansInDegreesDuration2 - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesDuration2 >= 0 && finalAngleInDegreesDuration2 <= 270) {
        volumeKnobDuration2.style.transform = "rotate(" + finalAngleInDegreesDuration2 + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingDuration2 = Math.ceil(finalAngleInDegreesDuration2 * (2 / 270) * 100 + 0.007) / 100;
        tickHighlightPositionDuration2 = Math.round(volumeSettingDuration2 * 27 / 2); //interpolate how many ticks need to be highlighted
        duration2 = volumeSettingDuration2;
        console.log("Dur");
        createTicksDuration2(27, tickHighlightPositionDuration2); //highlight ticks
        document.getElementById("volumeValue-duration2").innerHTML = volumeSettingDuration2 + " sec"; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksDuration2(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerDuration2.firstChild)tickContainerDuration2.removeChild(tickContainerDuration2.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickDuration2 = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickDuration2.className = "tick activetick";
        else tickDuration2.className = "tick";
        tickContainerDuration2.appendChild(tickDuration2);
        tickDuration2.style.transform = "rotate(" + startingTickAngleDuration2 + "deg)";
        startingTickAngleDuration2 += 10;
    }
    startingTickAngleDuration2 = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileDuration2() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownDuration2() {
    if (detectMobileDuration2() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpDuration2() {
    if (detectMobileDuration2() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveDuration2() {
    if (detectMobileDuration2() == "desktop") return "mousemove";
    else return "touchmove";
}
// Slider NumTimes
function mainNumTimes() {
    volumeSettingNumTimes = 1;
    volumeKnobNumTimes.addEventListener(getMouseDownNumTimes(), onMouseDownNumTimes); //listen for mouse button click
    document.addEventListener(getMouseUpNumTimes(), onMouseUpNumTimes); //listen for mouse button release
    createTicksNumTimes(27, 1);
}
//on mouse button down
function onMouseDownNumTimes() {
    document.addEventListener(getMouseMoveNumTimes(), onMouseMoveNumTimes); //start drag
}
//on mouse button release
function onMouseUpNumTimes() {
    document.removeEventListener(getMouseMoveNumTimes(), onMouseMoveNumTimes); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveNumTimes(event) {
    knobPositionXNumTimes = boundingRectangleNumTimes.left; //get knob's global x position
    knobPositionYNumTimes = boundingRectangleNumTimes.top; //get knob's global y position
    if (detectMobileNumTimes() == "desktop") {
        mouseXNumTimes = event.pageX; //get mouse's x global position
        mouseYNumTimes = event.pageY; //get mouse's y global position
    } else {
        mouseXNumTimes = event.touches[0].pageX; //get finger's x global position
        mouseYNumTimes = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXNumTimes = boundingRectangleNumTimes.width / 2 + knobPositionXNumTimes; //get global horizontal center position of knob relative to mouse position
    knobCenterYNumTimes = boundingRectangleNumTimes.height / 2 + knobPositionYNumTimes; //get global vertical center position of knob relative to mouse position
    adjacentSideNumTimes = knobCenterXNumTimes - mouseXNumTimes; //compute adjacent value of imaginary right angle triangle
    oppositeSideNumTimes = knobCenterYNumTimes - mouseYNumTimes; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleNumTimes = Math.atan2(adjacentSideNumTimes, oppositeSideNumTimes);
    getRadiansInDegreesNumTimes = currentRadiansAngleNumTimes * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesNumTimes = -(getRadiansInDegreesNumTimes - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesNumTimes >= 0 && finalAngleInDegreesNumTimes <= 270) {
        volumeKnobNumTimes.style.transform = "rotate(" + finalAngleInDegreesNumTimes + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingNumTimes = Math.ceil(finalAngleInDegreesNumTimes * (499 / 270) + 0.7);
        tickHighlightPositionNumTimes = Math.round(volumeSettingNumTimes * 27 / 500); //interpolate how many ticks need to be highlighted
        NumTimes = volumeSettingNumTimes;
        createTicksNumTimes(27, tickHighlightPositionNumTimes); //highlight ticks
        document.getElementById("volumeValue-numTimes").innerHTML = volumeSettingNumTimes; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksNumTimes(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerNumTimes.firstChild)tickContainerNumTimes.removeChild(tickContainerNumTimes.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickNumTimes = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickNumTimes.className = "tick activetick";
        else tickNumTimes.className = "tick";
        tickContainerNumTimes.appendChild(tickNumTimes);
        tickNumTimes.style.transform = "rotate(" + startingTickAngleNumTimes + "deg)";
        startingTickAngleNumTimes += 10;
    }
    startingTickAngleNumTimes = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileNumTimes() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownNumTimes() {
    if (detectMobileNumTimes() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpNumTimes() {
    if (detectMobileNumTimes() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveNumTimes() {
    if (detectMobileNumTimes() == "desktop") return "mousemove";
    else return "touchmove";
}
// Slider Threshold
function mainThreshold() {
    volumeKnobThreshold.addEventListener(getMouseDownThreshold(), onMouseDownThreshold); //listen for mouse button click
    document.addEventListener(getMouseUpThreshold(), onMouseUpThreshold); //listen for mouse button release
    createTicksThreshold(27, 11);
}
//on mouse button down
function onMouseDownThreshold() {
    document.addEventListener(getMouseMoveThreshold(), onMouseMoveThreshold); //start drag
}
//on mouse button release
function onMouseUpThreshold() {
    document.removeEventListener(getMouseMoveThreshold(), onMouseMoveThreshold); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveThreshold(event) {
    knobPositionXThreshold = boundingRectangleThreshold.left; //get knob's global x position
    knobPositionYThreshold = boundingRectangleThreshold.top; //get knob's global y position
    if (detectMobileThreshold() == "desktop") {
        mouseXThreshold = event.pageX; //get mouse's x global position
        mouseYThreshold = event.pageY; //get mouse's y global position
    } else {
        mouseXThreshold = event.touches[0].pageX; //get finger's x global position
        mouseYThreshold = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXThreshold = boundingRectangleThreshold.width / 2 + knobPositionXThreshold; //get global horizontal center position of knob relative to mouse position
    knobCenterYThreshold = boundingRectangleThreshold.height / 2 + knobPositionYThreshold; //get global vertical center position of knob relative to mouse position
    adjacentSideThreshold = knobCenterXThreshold - mouseXThreshold; //compute adjacent value of imaginary right angle triangle
    oppositeSideThreshold = knobCenterYThreshold - mouseYThreshold; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleThreshold = Math.atan2(adjacentSideThreshold, oppositeSideThreshold);
    getRadiansInDegreesThreshold = currentRadiansAngleThreshold * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesThreshold = -(getRadiansInDegreesThreshold - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesThreshold >= 0 && finalAngleInDegreesThreshold <= 270) {
        volumeKnobThreshold.style.transform = "rotate(" + finalAngleInDegreesThreshold + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingThreshold = Math.round(finalAngleInDegreesThreshold * (1 / 270) * 100) / 100;
        tickHighlightPositionThreshold = Math.round(volumeSettingThreshold * 27 / 1); //interpolate how many ticks need to be highlighted
        threshold = volumeSettingThreshold;
        createTicksThreshold(27, tickHighlightPositionThreshold); //highlight ticks
        document.getElementById("volumeValue-threshold").innerHTML = volumeSettingThreshold; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksThreshold(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerThreshold.firstChild)tickContainerThreshold.removeChild(tickContainerThreshold.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickThreshold = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickThreshold.className = "tick activetick";
        else tickThreshold.className = "tick";
        tickContainerThreshold.appendChild(tickThreshold);
        tickThreshold.style.transform = "rotate(" + startingTickAngleThreshold + "deg)";
        startingTickAngleThreshold += 10;
    }
    startingTickAngleThreshold = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileThreshold() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownThreshold() {
    if (detectMobileThreshold() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpThreshold() {
    if (detectMobileThreshold() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveThreshold() {
    if (detectMobileThreshold() == "desktop") return "mousemove";
    else return "touchmove";
}
// Slider Attack
function mainAttack() {
    volumeKnobAttack.addEventListener(getMouseDownAttack(), onMouseDownAttack); //listen for mouse button click
    document.addEventListener(getMouseUpAttack(), onMouseUpAttack); //listen for mouse button release
    createTicksAttack(27, 4);
}
//on mouse button down
function onMouseDownAttack() {
    document.addEventListener(getMouseMoveAttack(), onMouseMoveAttack); //start drag
}
//on mouse button release
function onMouseUpAttack() {
    document.removeEventListener(getMouseMoveAttack(), onMouseMoveAttack); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveAttack(event) {
    knobPositionXAttack = boundingRectangleAttack.left; //get knob's global x position
    knobPositionYAttack = boundingRectangleAttack.top; //get knob's global y position
    if (detectMobileAttack() == "desktop") {
        mouseXAttack = event.pageX; //get mouse's x global position
        mouseYAttack = event.pageY; //get mouse's y global position
    } else {
        mouseXAttack = event.touches[0].pageX; //get finger's x global position
        mouseYAttack = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXAttack = boundingRectangleAttack.width / 2 + knobPositionXAttack; //get global horizontal center position of knob relative to mouse position
    knobCenterYAttack = boundingRectangleAttack.height / 2 + knobPositionYAttack; //get global vertical center position of knob relative to mouse position
    adjacentSideAttack = knobCenterXAttack - mouseXAttack; //compute adjacent value of imaginary right angle triangle
    oppositeSideAttack = knobCenterYAttack - mouseYAttack; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleAttack = Math.atan2(adjacentSideAttack, oppositeSideAttack);
    getRadiansInDegreesAttack = currentRadiansAngleAttack * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesAttack = -(getRadiansInDegreesAttack - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesAttack >= 0 && finalAngleInDegreesAttack <= 270) {
        volumeKnobAttack.style.transform = "rotate(" + finalAngleInDegreesAttack + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingAttack = Math.round(finalAngleInDegreesAttack * (1 / 270) * 100) / 100;
        tickHighlightPositionAttack = Math.round(volumeSettingAttack * 27 / 1); //interpolate how many ticks need to be highlighted
        attack = volumeSettingAttack;
        createTicksAttack(27, tickHighlightPositionAttack); //highlight ticks
        document.getElementById("volumeValue-attack").innerHTML = volumeSettingAttack; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksAttack(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerAttack.firstChild)tickContainerAttack.removeChild(tickContainerAttack.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickAttack = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickAttack.className = "tick activetick";
        else tickAttack.className = "tick";
        tickContainerAttack.appendChild(tickAttack);
        tickAttack.style.transform = "rotate(" + startingTickAngleAttack + "deg)";
        startingTickAngleAttack += 10;
    }
    startingTickAngleAttack = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileAttack() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownAttack() {
    if (detectMobileAttack() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpAttack() {
    if (detectMobileAttack() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveAttack() {
    if (detectMobileAttack() == "desktop") return "mousemove";
    else return "touchmove";
}
// Release Button
function mainRelease() {
    volumeKnobRelease.addEventListener(getMouseDownRelease(), onMouseDownRelease); //listen for mouse button click
    document.addEventListener(getMouseUpRelease(), onMouseUpRelease); //listen for mouse button release
    createTicksRelease(27, 0);
}
//on mouse button down
function onMouseDownRelease() {
    document.addEventListener(getMouseMoveRelease(), onMouseMoveRelease); //start drag
}
//on mouse button release
function onMouseUpRelease() {
    document.removeEventListener(getMouseMoveRelease(), onMouseMoveRelease); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveRelease(event) {
    knobPositionXRelease = boundingRectangleRelease.left; //get knob's global x position
    knobPositionYRelease = boundingRectangleRelease.top; //get knob's global y position
    if (detectMobileRelease() == "desktop") {
        mouseXRelease = event.pageX; //get mouse's x global position
        mouseYRelease = event.pageY; //get mouse's y global position
    } else {
        mouseXRelease = event.touches[0].pageX; //get finger's x global position
        mouseYRelease = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXRelease = boundingRectangleRelease.width / 2 + knobPositionXRelease; //get global horizontal center position of knob relative to mouse position
    knobCenterYRelease = boundingRectangleRelease.height / 2 + knobPositionYRelease; //get global vertical center position of knob relative to mouse position
    adjacentSideRelease = knobCenterXRelease - mouseXRelease; //compute adjacent value of imaginary right angle triangle
    oppositeSideRelease = knobCenterYRelease - mouseYRelease; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleRelease = Math.atan2(adjacentSideRelease, oppositeSideRelease);
    getRadiansInDegreesRelease = currentRadiansAngleRelease * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesRelease = -(getRadiansInDegreesRelease - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesRelease >= 0 && finalAngleInDegreesRelease <= 270) {
        volumeKnobRelease.style.transform = "rotate(" + finalAngleInDegreesRelease + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingRelease = Math.round(finalAngleInDegreesRelease * (1 / 270) * 100) / 100;
        tickHighlightPositionRelease = Math.round(volumeSettingRelease * 27 / 1); //interpolate how many ticks need to be highlighted
        release = volumeSettingRelease;
        createTicksRelease(27, tickHighlightPositionRelease); //highlight ticks
        document.getElementById("volumeValue-release").innerHTML = volumeSettingRelease; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksRelease(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerRelease.firstChild)tickContainerRelease.removeChild(tickContainerRelease.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickRelease = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickRelease.className = "tick activetick";
        else tickRelease.className = "tick";
        tickContainerRelease.appendChild(tickRelease);
        tickRelease.style.transform = "rotate(" + startingTickAngleRelease + "deg)";
        startingTickAngleRelease += 10;
    }
    startingTickAngleRelease = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileRelease() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownRelease() {
    if (detectMobileRelease() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpRelease() {
    if (detectMobileRelease() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveRelease() {
    if (detectMobileRelease() == "desktop") return "mousemove";
    else return "touchmove";
}
// Decay Button
function mainDecay() {
    volumeKnobDecay.addEventListener(getMouseDownDecay(), onMouseDownDecay); //listen for mouse button click
    document.addEventListener(getMouseUpDecay(), onMouseUpDecay); //listen for mouse button decay
    createTicksDecay(27, 1);
}
//on mouse button down
function onMouseDownDecay() {
    document.addEventListener(getMouseMoveDecay(), onMouseMoveDecay); //start drag
}
//on mouse button decay
function onMouseUpDecay() {
    document.removeEventListener(getMouseMoveDecay(), onMouseMoveDecay); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveDecay(event) {
    knobPositionXDecay = boundingRectangleDecay.left; //get knob's global x position
    knobPositionYDecay = boundingRectangleDecay.top; //get knob's global y position
    if (detectMobileDecay() == "desktop") {
        mouseXDecay = event.pageX; //get mouse's x global position
        mouseYDecay = event.pageY; //get mouse's y global position
    } else {
        mouseXDecay = event.touches[0].pageX; //get finger's x global position
        mouseYDecay = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXDecay = boundingRectangleDecay.width / 2 + knobPositionXDecay; //get global horizontal center position of knob relative to mouse position
    knobCenterYDecay = boundingRectangleDecay.height / 2 + knobPositionYDecay; //get global vertical center position of knob relative to mouse position
    adjacentSideDecay = knobCenterXDecay - mouseXDecay; //compute adjacent value of imaginary right angle triangle
    oppositeSideDecay = knobCenterYDecay - mouseYDecay; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleDecay = Math.atan2(adjacentSideDecay, oppositeSideDecay);
    getRadiansInDegreesDecay = currentRadiansAngleDecay * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesDecay = -(getRadiansInDegreesDecay - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesDecay >= 0 && finalAngleInDegreesDecay <= 270) {
        volumeKnobDecay.style.transform = "rotate(" + finalAngleInDegreesDecay + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingDecay = Math.round(finalAngleInDegreesDecay * (1 / 270) * 100) / 100;
        tickHighlightPositionDecay = Math.round(volumeSettingDecay * 27 / 1); //interpolate how many ticks need to be highlighted
        decay = volumeSettingDecay;
        createTicksDecay(27, tickHighlightPositionDecay); //highlight ticks
        document.getElementById("volumeValue-decay").innerHTML = volumeSettingDecay; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksDecay(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerDecay.firstChild)tickContainerDecay.removeChild(tickContainerDecay.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickDecay = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickDecay.className = "tick activetick";
        else tickDecay.className = "tick";
        tickContainerDecay.appendChild(tickDecay);
        tickDecay.style.transform = "rotate(" + startingTickAngleDecay + "deg)";
        startingTickAngleDecay += 10;
    }
    startingTickAngleDecay = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileDecay() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownDecay() {
    if (detectMobileDecay() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpDecay() {
    if (detectMobileDecay() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveDecay() {
    if (detectMobileDecay() == "desktop") return "mousemove";
    else return "touchmove";
}
// Sustain Button
function mainSustain() {
    volumeKnobSustain.addEventListener(getMouseDownSustain(), onMouseDownSustain); //listen for mouse button click
    document.addEventListener(getMouseUpSustain(), onMouseUpSustain); //listen for mouse button sustain
    createTicksSustain(27, 4);
}
//on mouse button down
function onMouseDownSustain() {
    document.addEventListener(getMouseMoveSustain(), onMouseMoveSustain); //start drag
}
//on mouse button sustain
function onMouseUpSustain() {
    document.removeEventListener(getMouseMoveSustain(), onMouseMoveSustain); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveSustain(event) {
    knobPositionXSustain = boundingRectangleSustain.left; //get knob's global x position
    knobPositionYSustain = boundingRectangleSustain.top; //get knob's global y position
    if (detectMobileSustain() == "desktop") {
        mouseXSustain = event.pageX; //get mouse's x global position
        mouseYSustain = event.pageY; //get mouse's y global position
    } else {
        mouseXSustain = event.touches[0].pageX; //get finger's x global position
        mouseYSustain = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXSustain = boundingRectangleSustain.width / 2 + knobPositionXSustain; //get global horizontal center position of knob relative to mouse position
    knobCenterYSustain = boundingRectangleSustain.height / 2 + knobPositionYSustain; //get global vertical center position of knob relative to mouse position
    adjacentSideSustain = knobCenterXSustain - mouseXSustain; //compute adjacent value of imaginary right angle triangle
    oppositeSideSustain = knobCenterYSustain - mouseYSustain; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleSustain = Math.atan2(adjacentSideSustain, oppositeSideSustain);
    getRadiansInDegreesSustain = currentRadiansAngleSustain * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesSustain = -(getRadiansInDegreesSustain - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesSustain >= 0 && finalAngleInDegreesSustain <= 270) {
        volumeKnobSustain.style.transform = "rotate(" + finalAngleInDegreesSustain + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingSustain = Math.round(finalAngleInDegreesSustain * (1 / 270) * 100) / 100;
        tickHighlightPositionSustain = Math.round(volumeSettingSustain * 27 / 1); //interpolate how many ticks need to be highlighted
        sustain = volumeSettingSustain;
        createTicksSustain(27, tickHighlightPositionSustain); //highlight ticks
        document.getElementById("volumeValue-sustain").innerHTML = volumeSettingSustain; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksSustain(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerSustain.firstChild)tickContainerSustain.removeChild(tickContainerSustain.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickSustain = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickSustain.className = "tick activetick";
        else tickSustain.className = "tick";
        tickContainerSustain.appendChild(tickSustain);
        tickSustain.style.transform = "rotate(" + startingTickAngleSustain + "deg)";
        startingTickAngleSustain += 10;
    }
    startingTickAngleSustain = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileSustain() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownSustain() {
    if (detectMobileSustain() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpSustain() {
    if (detectMobileSustain() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveSustain() {
    if (detectMobileSustain() == "desktop") return "mousemove";
    else return "touchmove";
}
// Frequency Button
function mainFrequency() {
    volumeKnobFrequency.addEventListener(getMouseDownFrequency(), onMouseDownFrequency); //listen for mouse button click
    document.addEventListener(getMouseUpFrequency(), onMouseUpFrequency); //listen for mouse button frequency
    createTicksFrequency(27, 0);
}
//on mouse button down
function onMouseDownFrequency() {
    document.addEventListener(getMouseMoveFrequency(), onMouseMoveFrequency); //start drag
}
//on mouse button frequency
function onMouseUpFrequency() {
    document.removeEventListener(getMouseMoveFrequency(), onMouseMoveFrequency); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveFrequency(event) {
    knobPositionXFrequency = boundingRectangleFrequency.left; //get knob's global x position
    knobPositionYFrequency = boundingRectangleFrequency.top; //get knob's global y position
    if (detectMobileFrequency() == "desktop") {
        mouseXFrequency = event.pageX; //get mouse's x global position
        mouseYFrequency = event.pageY; //get mouse's y global position
    } else {
        mouseXFrequency = event.touches[0].pageX; //get finger's x global position
        mouseYFrequency = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXFrequency = boundingRectangleFrequency.width / 2 + knobPositionXFrequency; //get global horizontal center position of knob relative to mouse position
    knobCenterYFrequency = boundingRectangleFrequency.height / 2 + knobPositionYFrequency; //get global vertical center position of knob relative to mouse position
    adjacentSideFrequency = knobCenterXFrequency - mouseXFrequency; //compute adjacent value of imaginary right angle triangle
    oppositeSideFrequency = knobCenterYFrequency - mouseYFrequency; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleFrequency = Math.atan2(adjacentSideFrequency, oppositeSideFrequency);
    getRadiansInDegreesFrequency = currentRadiansAngleFrequency * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesFrequency = -(getRadiansInDegreesFrequency - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesFrequency >= 0 && finalAngleInDegreesFrequency <= 270) {
        volumeKnobFrequency.style.transform = "rotate(" + finalAngleInDegreesFrequency + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingFrequency = Math.round(finalAngleInDegreesFrequency * (99999 / 270) + 0.7);
        tickHighlightPositionFrequency = Math.round(volumeSettingFrequency * 27 / 100000); //interpolate how many ticks need to be highlighted
        filtFreq = volumeSettingFrequency;
        createTicksFrequency(27, tickHighlightPositionFrequency); //highlight ticks
        document.getElementById("volumeValue-frequency").innerHTML = volumeSettingFrequency + " Hz"; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksFrequency(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerFrequency.firstChild)tickContainerFrequency.removeChild(tickContainerFrequency.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickFrequency = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickFrequency.className = "tick activetick";
        else tickFrequency.className = "tick";
        tickContainerFrequency.appendChild(tickFrequency);
        tickFrequency.style.transform = "rotate(" + startingTickAngleFrequency + "deg)";
        startingTickAngleFrequency += 10;
    }
    startingTickAngleFrequency = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileFrequency() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownFrequency() {
    if (detectMobileFrequency() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpFrequency() {
    if (detectMobileFrequency() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveFrequency() {
    if (detectMobileFrequency() == "desktop") return "mousemove";
    else return "touchmove";
}
// FiltSlid Button
function mainFiltSlid() {
    volumeKnobFiltSlid.addEventListener(getMouseDownFiltSlid(), onMouseDownFiltSlid); //listen for mouse button click
    document.addEventListener(getMouseUpFiltSlid(), onMouseUpFiltSlid); //listen for mouse button filtSlid
    createTicksFiltSlid(27, 0);
}
//on mouse button down
function onMouseDownFiltSlid() {
    document.addEventListener(getMouseMoveFiltSlid(), onMouseMoveFiltSlid); //start drag
}
//on mouse button filtSlid
function onMouseUpFiltSlid() {
    document.removeEventListener(getMouseMoveFiltSlid(), onMouseMoveFiltSlid); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveFiltSlid(event) {
    knobPositionXFiltSlid = boundingRectangleFiltSlid.left; //get knob's global x position
    knobPositionYFiltSlid = boundingRectangleFiltSlid.top; //get knob's global y position
    if (detectMobileFiltSlid() == "desktop") {
        mouseXFiltSlid = event.pageX; //get mouse's x global position
        mouseYFiltSlid = event.pageY; //get mouse's y global position
    } else {
        mouseXFiltSlid = event.touches[0].pageX; //get finger's x global position
        mouseYFiltSlid = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXFiltSlid = boundingRectangleFiltSlid.width / 2 + knobPositionXFiltSlid; //get global horizontal center position of knob relative to mouse position
    knobCenterYFiltSlid = boundingRectangleFiltSlid.height / 2 + knobPositionYFiltSlid; //get global vertical center position of knob relative to mouse position
    adjacentSideFiltSlid = knobCenterXFiltSlid - mouseXFiltSlid; //compute adjacent value of imaginary right angle triangle
    oppositeSideFiltSlid = knobCenterYFiltSlid - mouseYFiltSlid; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleFiltSlid = Math.atan2(adjacentSideFiltSlid, oppositeSideFiltSlid);
    getRadiansInDegreesFiltSlid = currentRadiansAngleFiltSlid * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesFiltSlid = -(getRadiansInDegreesFiltSlid - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesFiltSlid >= 0 && finalAngleInDegreesFiltSlid <= 270) {
        volumeKnobFiltSlid.style.transform = "rotate(" + finalAngleInDegreesFiltSlid + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingFiltSlid = Math.round(finalAngleInDegreesFiltSlid * (99999 / 270) + 0.7);
        tickHighlightPositionFiltSlid = Math.round(volumeSettingFiltSlid * 27 / 100000); //interpolate how many ticks need to be highlighted
        filtFreq = volumeSettingFiltSlid;
        createTicksFiltSlid(27, tickHighlightPositionFiltSlid); //highlight ticks
        document.getElementById("volumeValue-filtSlid").innerHTML = volumeSettingFiltSlid + " Hz"; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksFiltSlid(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerFiltSlid.firstChild)tickContainerFiltSlid.removeChild(tickContainerFiltSlid.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickFiltSlid = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickFiltSlid.className = "tick activetick";
        else tickFiltSlid.className = "tick";
        tickContainerFiltSlid.appendChild(tickFiltSlid);
        tickFiltSlid.style.transform = "rotate(" + startingTickAngleFiltSlid + "deg)";
        startingTickAngleFiltSlid += 10;
    }
    startingTickAngleFiltSlid = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileFiltSlid() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownFiltSlid() {
    if (detectMobileFiltSlid() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpFiltSlid() {
    if (detectMobileFiltSlid() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveFiltSlid() {
    if (detectMobileFiltSlid() == "desktop") return "mousemove";
    else return "touchmove";
}
// FiltSlid Button
function mainFiltSlid() {
    volumeKnobFiltSlid.addEventListener(getMouseDownFiltSlid(), onMouseDownFiltSlid); //listen for mouse button click
    document.addEventListener(getMouseUpFiltSlid(), onMouseUpFiltSlid); //listen for mouse button filtSlid
    createTicksFiltSlid(27, 0);
}
//on mouse button down
function onMouseDownFiltSlid() {
    document.addEventListener(getMouseMoveFiltSlid(), onMouseMoveFiltSlid); //start drag
}
//on mouse button filtSlid
function onMouseUpFiltSlid() {
    document.removeEventListener(getMouseMoveFiltSlid(), onMouseMoveFiltSlid); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveFiltSlid(event) {
    knobPositionXFiltSlid = boundingRectangleFiltSlid.left; //get knob's global x position
    knobPositionYFiltSlid = boundingRectangleFiltSlid.top; //get knob's global y position
    if (detectMobileFiltSlid() == "desktop") {
        mouseXFiltSlid = event.pageX; //get mouse's x global position
        mouseYFiltSlid = event.pageY; //get mouse's y global position
    } else {
        mouseXFiltSlid = event.touches[0].pageX; //get finger's x global position
        mouseYFiltSlid = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXFiltSlid = boundingRectangleFiltSlid.width / 2 + knobPositionXFiltSlid; //get global horizontal center position of knob relative to mouse position
    knobCenterYFiltSlid = boundingRectangleFiltSlid.height / 2 + knobPositionYFiltSlid; //get global vertical center position of knob relative to mouse position
    adjacentSideFiltSlid = knobCenterXFiltSlid - mouseXFiltSlid; //compute adjacent value of imaginary right angle triangle
    oppositeSideFiltSlid = knobCenterYFiltSlid - mouseYFiltSlid; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleFiltSlid = Math.atan2(adjacentSideFiltSlid, oppositeSideFiltSlid);
    getRadiansInDegreesFiltSlid = currentRadiansAngleFiltSlid * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesFiltSlid = -(getRadiansInDegreesFiltSlid - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesFiltSlid >= 0 && finalAngleInDegreesFiltSlid <= 270) {
        volumeKnobFiltSlid.style.transform = "rotate(" + finalAngleInDegreesFiltSlid + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingFiltSlid = Math.round(finalAngleInDegreesFiltSlid * (7 / 270) - 3.7);
        tickHighlightPositionFiltSlid = Math.round((volumeSettingFiltSlid + 4) * 27 / 7); //interpolate how many ticks need to be highlighted
        filtQslider = 10 ^ volumeSettingFiltSlid;
        createTicksFiltSlid(27, tickHighlightPositionFiltSlid); //highlight ticks
        document.getElementById("volumeValue-filtSlid").innerHTML = volumeSettingFiltSlid; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksFiltSlid(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerFiltSlid.firstChild)tickContainerFiltSlid.removeChild(tickContainerFiltSlid.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickFiltSlid = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickFiltSlid.className = "tick activetick";
        else tickFiltSlid.className = "tick";
        tickContainerFiltSlid.appendChild(tickFiltSlid);
        tickFiltSlid.style.transform = "rotate(" + startingTickAngleFiltSlid + "deg)";
        startingTickAngleFiltSlid += 10;
    }
    startingTickAngleFiltSlid = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileFiltSlid() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownFiltSlid() {
    if (detectMobileFiltSlid() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpFiltSlid() {
    if (detectMobileFiltSlid() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveFiltSlid() {
    if (detectMobileFiltSlid() == "desktop") return "mousemove";
    else return "touchmove";
}
// FiltGain
function mainFiltGain() {
    volumeKnobFiltGain.addEventListener(getMouseDownFiltGain(), onMouseDownFiltGain); //listen for mouse button click
    document.addEventListener(getMouseUpFiltGain(), onMouseUpFiltGain); //listen for mouse button filtGain
    createTicksFiltGain(27, 14);
}
//on mouse button down
function onMouseDownFiltGain() {
    document.addEventListener(getMouseMoveFiltGain(), onMouseMoveFiltGain); //start drag
}
//on mouse button filtGain
function onMouseUpFiltGain() {
    document.removeEventListener(getMouseMoveFiltGain(), onMouseMoveFiltGain); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveFiltGain(event) {
    knobPositionXFiltGain = boundingRectangleFiltGain.left; //get knob's global x position
    knobPositionYFiltGain = boundingRectangleFiltGain.top; //get knob's global y position
    if (detectMobileFiltGain() == "desktop") {
        mouseXFiltGain = event.pageX; //get mouse's x global position
        mouseYFiltGain = event.pageY; //get mouse's y global position
    } else {
        mouseXFiltGain = event.touches[0].pageX; //get finger's x global position
        mouseYFiltGain = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXFiltGain = boundingRectangleFiltGain.width / 2 + knobPositionXFiltGain; //get global horizontal center position of knob relative to mouse position
    knobCenterYFiltGain = boundingRectangleFiltGain.height / 2 + knobPositionYFiltGain; //get global vertical center position of knob relative to mouse position
    adjacentSideFiltGain = knobCenterXFiltGain - mouseXFiltGain; //compute adjacent value of imaginary right angle triangle
    oppositeSideFiltGain = knobCenterYFiltGain - mouseYFiltGain; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleFiltGain = Math.atan2(adjacentSideFiltGain, oppositeSideFiltGain);
    getRadiansInDegreesFiltGain = currentRadiansAngleFiltGain * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesFiltGain = -(getRadiansInDegreesFiltGain - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesFiltGain >= 0 && finalAngleInDegreesFiltGain <= 270) {
        volumeKnobFiltGain.style.transform = "rotate(" + finalAngleInDegreesFiltGain + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingFiltGain = Math.round(finalAngleInDegreesFiltGain * (80 / 270) - 39.7);
        tickHighlightPositionFiltGain = Math.round((volumeSettingFiltGain + 40) * 27 / 80); //interpolate how many ticks need to be highlighted
        filtGain = volumeSettingFiltGain;
        createTicksFiltGain(27, tickHighlightPositionFiltGain); //highlight ticks
        document.getElementById("volumeValue-filtGain").innerHTML = volumeSettingFiltGain + " dB"; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksFiltGain(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerFiltGain.firstChild)tickContainerFiltGain.removeChild(tickContainerFiltGain.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickFiltGain = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickFiltGain.className = "tick activetick";
        else tickFiltGain.className = "tick";
        tickContainerFiltGain.appendChild(tickFiltGain);
        tickFiltGain.style.transform = "rotate(" + startingTickAngleFiltGain + "deg)";
        startingTickAngleFiltGain += 10;
    }
    startingTickAngleFiltGain = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileFiltGain() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownFiltGain() {
    if (detectMobileFiltGain() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpFiltGain() {
    if (detectMobileFiltGain() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveFiltGain() {
    if (detectMobileFiltGain() == "desktop") return "mousemove";
    else return "touchmove";
}
// DistValue
function mainDistValue() {
    volumeKnobDistValue.addEventListener(getMouseDownDistValue(), onMouseDownDistValue); //listen for mouse button click
    document.addEventListener(getMouseUpDistValue(), onMouseUpDistValue); //listen for mouse button distValue
    createTicksDistValue(27, 0);
}
//on mouse button down
function onMouseDownDistValue() {
    document.addEventListener(getMouseMoveDistValue(), onMouseMoveDistValue); //start drag
}
//on mouse button distValue
function onMouseUpDistValue() {
    document.removeEventListener(getMouseMoveDistValue(), onMouseMoveDistValue); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveDistValue(event) {
    knobPositionXDistValue = boundingRectangleDistValue.left; //get knob's global x position
    knobPositionYDistValue = boundingRectangleDistValue.top; //get knob's global y position
    if (detectMobileDistValue() == "desktop") {
        mouseXDistValue = event.pageX; //get mouse's x global position
        mouseYDistValue = event.pageY; //get mouse's y global position
    } else {
        mouseXDistValue = event.touches[0].pageX; //get finger's x global position
        mouseYDistValue = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXDistValue = boundingRectangleDistValue.width / 2 + knobPositionXDistValue; //get global horizontal center position of knob relative to mouse position
    knobCenterYDistValue = boundingRectangleDistValue.height / 2 + knobPositionYDistValue; //get global vertical center position of knob relative to mouse position
    adjacentSideDistValue = knobCenterXDistValue - mouseXDistValue; //compute adjacent value of imaginary right angle triangle
    oppositeSideDistValue = knobCenterYDistValue - mouseYDistValue; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleDistValue = Math.atan2(adjacentSideDistValue, oppositeSideDistValue);
    getRadiansInDegreesDistValue = currentRadiansAngleDistValue * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesDistValue = -(getRadiansInDegreesDistValue - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesDistValue >= 0 && finalAngleInDegreesDistValue <= 270) {
        volumeKnobDistValue.style.transform = "rotate(" + finalAngleInDegreesDistValue + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingDistValue = Math.round(finalAngleInDegreesDistValue * (80 / 270) - 39.7);
        tickHighlightPositionDistValue = Math.round((volumeSettingDistValue + 40) * 27 / 80); //interpolate how many ticks need to be highlighted
        distValue = volumeSettingDistValue;
        createTicksDistValue(27, tickHighlightPositionDistValue); //highlight ticks
        document.getElementById("volumeValue-distValue").innerHTML = volumeSettingDistValue + " dB"; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksDistValue(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerDistValue.firstChild)tickContainerDistValue.removeChild(tickContainerDistValue.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickDistValue = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickDistValue.className = "tick activetick";
        else tickDistValue.className = "tick";
        tickContainerDistValue.appendChild(tickDistValue);
        tickDistValue.style.transform = "rotate(" + startingTickAngleDistValue + "deg)";
        startingTickAngleDistValue += 10;
    }
    startingTickAngleDistValue = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileDistValue() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownDistValue() {
    if (detectMobileDistValue() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpDistValue() {
    if (detectMobileDistValue() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveDistValue() {
    if (detectMobileDistValue() == "desktop") return "mousemove";
    else return "touchmove";
}
// DistValue
function mainDistValue() {
    volumeKnobDistValue.addEventListener(getMouseDownDistValue(), onMouseDownDistValue); //listen for mouse button click
    document.addEventListener(getMouseUpDistValue(), onMouseUpDistValue); //listen for mouse button distValue
    createTicksDistValue(27, 0);
}
//on mouse button down
function onMouseDownDistValue() {
    document.addEventListener(getMouseMoveDistValue(), onMouseMoveDistValue); //start drag
}
//on mouse button distValue
function onMouseUpDistValue() {
    document.removeEventListener(getMouseMoveDistValue(), onMouseMoveDistValue); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveDistValue(event) {
    knobPositionXDistValue = boundingRectangleDistValue.left; //get knob's global x position
    knobPositionYDistValue = boundingRectangleDistValue.top; //get knob's global y position
    if (detectMobileDistValue() == "desktop") {
        mouseXDistValue = event.pageX; //get mouse's x global position
        mouseYDistValue = event.pageY; //get mouse's y global position
    } else {
        mouseXDistValue = event.touches[0].pageX; //get finger's x global position
        mouseYDistValue = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXDistValue = boundingRectangleDistValue.width / 2 + knobPositionXDistValue; //get global horizontal center position of knob relative to mouse position
    knobCenterYDistValue = boundingRectangleDistValue.height / 2 + knobPositionYDistValue; //get global vertical center position of knob relative to mouse position
    adjacentSideDistValue = knobCenterXDistValue - mouseXDistValue; //compute adjacent value of imaginary right angle triangle
    oppositeSideDistValue = knobCenterYDistValue - mouseYDistValue; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleDistValue = Math.atan2(adjacentSideDistValue, oppositeSideDistValue);
    getRadiansInDegreesDistValue = currentRadiansAngleDistValue * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesDistValue = -(getRadiansInDegreesDistValue - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesDistValue >= 0 && finalAngleInDegreesDistValue <= 270) {
        volumeKnobDistValue.style.transform = "rotate(" + finalAngleInDegreesDistValue + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingDistValue = Math.round(finalAngleInDegreesDistValue * (400 / 270));
        tickHighlightPositionDistValue = Math.round(volumeSettingDistValue * 27 / 400); //interpolate how many ticks need to be highlighted
        DistValue = volumeSettingDistValue;
        createTicksDistValue(27, tickHighlightPositionDistValue); //highlight ticks
        document.getElementById("volumeValue-distValue").innerHTML = volumeSettingDistValue; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksDistValue(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerDistValue.firstChild)tickContainerDistValue.removeChild(tickContainerDistValue.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickDistValue = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickDistValue.className = "tick activetick";
        else tickDistValue.className = "tick";
        tickContainerDistValue.appendChild(tickDistValue);
        tickDistValue.style.transform = "rotate(" + startingTickAngleDistValue + "deg)";
        startingTickAngleDistValue += 10;
    }
    startingTickAngleDistValue = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileDistValue() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownDistValue() {
    if (detectMobileDistValue() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpDistValue() {
    if (detectMobileDistValue() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveDistValue() {
    if (detectMobileDistValue() == "desktop") return "mousemove";
    else return "touchmove";
}
// NumFreqs
function mainNumFreqs() {
    volumeKnobNumFreqs.addEventListener(getMouseDownNumFreqs(), onMouseDownNumFreqs); //listen for mouse button click
    document.addEventListener(getMouseUpNumFreqs(), onMouseUpNumFreqs); //listen for mouse button numFreqs
    createTicksNumFreqs(27, 12);
}
//on mouse button down
function onMouseDownNumFreqs() {
    document.addEventListener(getMouseMoveNumFreqs(), onMouseMoveNumFreqs); //start drag
}
//on mouse button numFreqs
function onMouseUpNumFreqs() {
    document.removeEventListener(getMouseMoveNumFreqs(), onMouseMoveNumFreqs); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveNumFreqs(event) {
    knobPositionXNumFreqs = boundingRectangleNumFreqs.left; //get knob's global x position
    knobPositionYNumFreqs = boundingRectangleNumFreqs.top; //get knob's global y position
    if (detectMobileNumFreqs() == "desktop") {
        mouseXNumFreqs = event.pageX; //get mouse's x global position
        mouseYNumFreqs = event.pageY; //get mouse's y global position
    } else {
        mouseXNumFreqs = event.touches[0].pageX; //get finger's x global position
        mouseYNumFreqs = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXNumFreqs = boundingRectangleNumFreqs.width / 2 + knobPositionXNumFreqs; //get global horizontal center position of knob relative to mouse position
    knobCenterYNumFreqs = boundingRectangleNumFreqs.height / 2 + knobPositionYNumFreqs; //get global vertical center position of knob relative to mouse position
    adjacentSideNumFreqs = knobCenterXNumFreqs - mouseXNumFreqs; //compute adjacent value of imaginary right angle triangle
    oppositeSideNumFreqs = knobCenterYNumFreqs - mouseYNumFreqs; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleNumFreqs = Math.atan2(adjacentSideNumFreqs, oppositeSideNumFreqs);
    getRadiansInDegreesNumFreqs = currentRadiansAngleNumFreqs * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesNumFreqs = -(getRadiansInDegreesNumFreqs - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesNumFreqs >= 0 && finalAngleInDegreesNumFreqs <= 270) {
        volumeKnobNumFreqs.style.transform = "rotate(" + finalAngleInDegreesNumFreqs + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingNumFreqs = Math.round(finalAngleInDegreesNumFreqs * (25 / 270) + 0.7);
        tickHighlightPositionNumFreqs = Math.round(volumeSettingNumFreqs * 27 / 26); //interpolate how many ticks need to be highlighted
        NumFreqs = volumeSettingNumFreqs;
        createTicksNumFreqs(27, tickHighlightPositionNumFreqs); //highlight ticks
        document.getElementById("volumeValue-numFreqs").innerHTML = volumeSettingNumFreqs; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksNumFreqs(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerNumFreqs.firstChild)tickContainerNumFreqs.removeChild(tickContainerNumFreqs.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickNumFreqs = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickNumFreqs.className = "tick activetick";
        else tickNumFreqs.className = "tick";
        tickContainerNumFreqs.appendChild(tickNumFreqs);
        tickNumFreqs.style.transform = "rotate(" + startingTickAngleNumFreqs + "deg)";
        startingTickAngleNumFreqs += 10;
    }
    startingTickAngleNumFreqs = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileNumFreqs() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownNumFreqs() {
    if (detectMobileNumFreqs() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpNumFreqs() {
    if (detectMobileNumFreqs() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveNumFreqs() {
    if (detectMobileNumFreqs() == "desktop") return "mousemove";
    else return "touchmove";
}
// UnisonWidth
function mainUnisonWidth() {
    volumeKnobUnisonWidth.addEventListener(getMouseDownUnisonWidth(), onMouseDownUnisonWidth); //listen for mouse button click
    document.addEventListener(getMouseUpUnisonWidth(), onMouseUpUnisonWidth); //listen for mouse button unisonWidth
    createTicksUnisonWidth(27, 0);
}
//on mouse button down
function onMouseDownUnisonWidth() {
    document.addEventListener(getMouseMoveUnisonWidth(), onMouseMoveUnisonWidth); //start drag
}
//on mouse button unisonWidth
function onMouseUpUnisonWidth() {
    document.removeEventListener(getMouseMoveUnisonWidth(), onMouseMoveUnisonWidth); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveUnisonWidth(event) {
    knobPositionXUnisonWidth = boundingRectangleUnisonWidth.left; //get knob's global x position
    knobPositionYUnisonWidth = boundingRectangleUnisonWidth.top; //get knob's global y position
    if (detectMobileUnisonWidth() == "desktop") {
        mouseXUnisonWidth = event.pageX; //get mouse's x global position
        mouseYUnisonWidth = event.pageY; //get mouse's y global position
    } else {
        mouseXUnisonWidth = event.touches[0].pageX; //get finger's x global position
        mouseYUnisonWidth = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXUnisonWidth = boundingRectangleUnisonWidth.width / 2 + knobPositionXUnisonWidth; //get global horizontal center position of knob relative to mouse position
    knobCenterYUnisonWidth = boundingRectangleUnisonWidth.height / 2 + knobPositionYUnisonWidth; //get global vertical center position of knob relative to mouse position
    adjacentSideUnisonWidth = knobCenterXUnisonWidth - mouseXUnisonWidth; //compute adjacent value of imaginary right angle triangle
    oppositeSideUnisonWidth = knobCenterYUnisonWidth - mouseYUnisonWidth; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleUnisonWidth = Math.atan2(adjacentSideUnisonWidth, oppositeSideUnisonWidth);
    getRadiansInDegreesUnisonWidth = currentRadiansAngleUnisonWidth * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesUnisonWidth = -(getRadiansInDegreesUnisonWidth - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesUnisonWidth >= 0 && finalAngleInDegreesUnisonWidth <= 270) {
        volumeKnobUnisonWidth.style.transform = "rotate(" + finalAngleInDegreesUnisonWidth + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingUnisonWidth = Math.round(finalAngleInDegreesUnisonWidth * (19 / 270) + 0.7);
        tickHighlightPositionUnisonWidth = Math.round(volumeSettingUnisonWidth * 27 / 20); //interpolate how many ticks need to be highlighted
        unisonWidth = volumeSettingUnisonWidth;
        createTicksUnisonWidth(27, tickHighlightPositionUnisonWidth); //highlight ticks
        document.getElementById("volumeValue-unisonWidth").innerHTML = volumeSettingUnisonWidth; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksUnisonWidth(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerUnisonWidth.firstChild)tickContainerUnisonWidth.removeChild(tickContainerUnisonWidth.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickUnisonWidth = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickUnisonWidth.className = "tick activetick";
        else tickUnisonWidth.className = "tick";
        tickContainerUnisonWidth.appendChild(tickUnisonWidth);
        tickUnisonWidth.style.transform = "rotate(" + startingTickAngleUnisonWidth + "deg)";
        startingTickAngleUnisonWidth += 10;
    }
    startingTickAngleUnisonWidth = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileUnisonWidth() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownUnisonWidth() {
    if (detectMobileUnisonWidth() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpUnisonWidth() {
    if (detectMobileUnisonWidth() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveUnisonWidth() {
    if (detectMobileUnisonWidth() == "desktop") return "mousemove";
    else return "touchmove";
}
// BaseFreq
function mainBaseFreq() {
    volumeKnobBaseFreq.addEventListener(getMouseDownBaseFreq(), onMouseDownBaseFreq); //listen for mouse button click
    document.addEventListener(getMouseUpBaseFreq(), onMouseUpBaseFreq); //listen for mouse button baseFreq
    createTicksBaseFreq(27, 2);
}
//on mouse button down
function onMouseDownBaseFreq() {
    document.addEventListener(getMouseMoveBaseFreq(), onMouseMoveBaseFreq); //start drag
}
//on mouse button baseFreq
function onMouseUpBaseFreq() {
    document.removeEventListener(getMouseMoveBaseFreq(), onMouseMoveBaseFreq); //stop drag
}
//compute mouse angle relative to center of volume knob
//For clarification, see my basic trig explanation at:
//https://www.quora.com/What-is-the-significance-of-the-number-pi-to-the-universe/answer/Kevin-Lam-15
function onMouseMoveBaseFreq(event) {
    knobPositionXBaseFreq = boundingRectangleBaseFreq.left; //get knob's global x position
    knobPositionYBaseFreq = boundingRectangleBaseFreq.top; //get knob's global y position
    if (detectMobileBaseFreq() == "desktop") {
        mouseXBaseFreq = event.pageX; //get mouse's x global position
        mouseYBaseFreq = event.pageY; //get mouse's y global position
    } else {
        mouseXBaseFreq = event.touches[0].pageX; //get finger's x global position
        mouseYBaseFreq = event.touches[0].pageY; //get finger's y global position
    }
    knobCenterXBaseFreq = boundingRectangleBaseFreq.width / 2 + knobPositionXBaseFreq; //get global horizontal center position of knob relative to mouse position
    knobCenterYBaseFreq = boundingRectangleBaseFreq.height / 2 + knobPositionYBaseFreq; //get global vertical center position of knob relative to mouse position
    adjacentSideBaseFreq = knobCenterXBaseFreq - mouseXBaseFreq; //compute adjacent value of imaginary right angle triangle
    oppositeSideBaseFreq = knobCenterYBaseFreq - mouseYBaseFreq; //compute opposite value of imaginary right angle triangle
    //arc-tangent function returns circular angle in radians
    //use atan2() instead of atan() because atan() returns only 180 degree max (PI radians) but atan2() returns four quadrant's 360 degree max (2PI radians)
    currentRadiansAngleBaseFreq = Math.atan2(adjacentSideBaseFreq, oppositeSideBaseFreq);
    getRadiansInDegreesBaseFreq = currentRadiansAngleBaseFreq * 180 / Math.PI; //convert radians into degrees
    finalAngleInDegreesBaseFreq = -(getRadiansInDegreesBaseFreq - 135); //knob is already starting at -135 degrees due to visual design so 135 degrees needs to be subtracted to compensate for the angle offset, negative value represents clockwise direction
    //only allow rotate if greater than zero degrees or lesser than 270 degrees
    if (finalAngleInDegreesBaseFreq >= 0 && finalAngleInDegreesBaseFreq <= 270) {
        volumeKnobBaseFreq.style.transform = "rotate(" + finalAngleInDegreesBaseFreq + "deg)"; //use dynamic CSS transform to rotate volume knob
        //270 degrees maximum freedom of rotation / 100% volume = 1% of volume difference per 2.7 degrees of rotation
        volumeSettingBaseFreq = Math.round(finalAngleInDegreesBaseFreq * (4950 / 270) + 49.7);
        tickHighlightPositionBaseFreq = Math.round((volumeSettingBaseFreq - 49.7) * 27 / 5000); //interpolate how many ticks need to be highlighted
        baseFreq = volumeSettingBaseFreq;
        createTicksBaseFreq(27, tickHighlightPositionBaseFreq); //highlight ticks
        document.getElementById("volumeValue-baseFreq").innerHTML = volumeSettingBaseFreq + " Hz"; //update volume text
    }
}
//dynamically create volume knob "ticks"
function createTicksBaseFreq(numTicks, highlightNumTicks) {
    //reset first by deleting all existing ticks
    while(tickContainerBaseFreq.firstChild)tickContainerBaseFreq.removeChild(tickContainerBaseFreq.firstChild);
    //create ticks
    for(var i = 0; i < numTicks; i++){
        var tickBaseFreq = document.createElement("div");
        //highlight only the appropriate ticks using dynamic CSS
        if (i < highlightNumTicks) tickBaseFreq.className = "tick activetick";
        else tickBaseFreq.className = "tick";
        tickContainerBaseFreq.appendChild(tickBaseFreq);
        tickBaseFreq.style.transform = "rotate(" + startingTickAngleBaseFreq + "deg)";
        startingTickAngleBaseFreq += 10;
    }
    startingTickAngleBaseFreq = -135; //reset
}
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
function detectMobileBaseFreq() {
    var result = navigator.userAgent.match(/(iphone)|(ipod)|(ipad)|(android)|(blackberry)|(windows phone)|(symbian)/i);
    if (result !== null) return "mobile";
    else return "desktop";
}
function getMouseDownBaseFreq() {
    if (detectMobileBaseFreq() == "desktop") return "mousedown";
    else return "touchstart";
}
function getMouseUpBaseFreq() {
    if (detectMobileBaseFreq() == "desktop") return "mouseup";
    else return "touchend";
}
function getMouseMoveBaseFreq() {
    if (detectMobileBaseFreq() == "desktop") return "mousemove";
    else return "touchmove";
}
// Slider Button
//detect for mobile devices from https://www.sitepoint.com/navigator-useragent-mobiles-including-ipad/
mainDuration2();
mainNumTimes();
mainThreshold();
mainAttack();
mainRelease();
mainDecay();
mainSustain();
mainFrequency();
mainFiltSlid();
mainFiltGain();
mainDistValue();
mainNumFreqs();
mainUnisonWidth();
mainBaseFreq();

},{"lodash":"1vR8I","simple-statistics":"7O0Hq","mathjs":"6SWGe","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1vR8I":[function(require,module,exports) {
var global = arguments[3];
(function() {
    /** Used as a safe reference for `undefined` in pre-ES5 environments. */ var undefined;
    /** Used as the semantic version number. */ var VERSION = '4.17.21';
    /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
    /** Error message constants. */ var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.', FUNC_ERROR_TEXT = 'Expected a function', INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
    /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
    /** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
    /** Used as the internal argument placeholder. */ var PLACEHOLDER = '__lodash_placeholder__';
    /** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    /** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    /** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    /** Used as default options for `_.truncate`. */ var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
    /** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
    /** Used to indicate the type of lazy iteratees. */ var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, NAN = 0 / 0;
    /** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    /** Used to associate wrap methods with their bit flags. */ var wrapFlags = [
        [
            'ary',
            WRAP_ARY_FLAG
        ],
        [
            'bind',
            WRAP_BIND_FLAG
        ],
        [
            'bindKey',
            WRAP_BIND_KEY_FLAG
        ],
        [
            'curry',
            WRAP_CURRY_FLAG
        ],
        [
            'curryRight',
            WRAP_CURRY_RIGHT_FLAG
        ],
        [
            'flip',
            WRAP_FLIP_FLAG
        ],
        [
            'partial',
            WRAP_PARTIAL_FLAG
        ],
        [
            'partialRight',
            WRAP_PARTIAL_RIGHT_FLAG
        ],
        [
            'rearg',
            WRAP_REARG_FLAG
        ]
    ];
    /** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', domExcTag = '[object DOMException]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', nullTag = '[object Null]', objectTag = '[object Object]', promiseTag = '[object Promise]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', undefinedTag = '[object Undefined]', weakMapTag = '[object WeakMap]', weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
    /** Used to match empty string literals in compiled template source. */ var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    /** Used to match HTML entities and HTML characters. */ var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    /** Used to match template delimiters. */ var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    /** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    /** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
    /** Used to match a single whitespace character. */ var reWhitespace = /\s/;
    /** Used to match wrap detail comments. */ var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    /** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */ var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    /** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
    /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */ var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    /** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
    /** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    /** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
    /** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
    /** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
    /** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
    /** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    /** Used to ensure capturing order of template delimiters. */ var reNoMatch = /($^)/;
    /** Used to match unescaped characters in compiled string literals. */ var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    /** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    /** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsAstral = '[' + rsAstralRange + ']', rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
    /** Used to compose unicode regexes. */ var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
        rsNonAstral,
        rsRegional,
        rsSurrPair
    ].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])', rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
        rsDingbat,
        rsRegional,
        rsSurrPair
    ].join('|') + ')' + rsSeq, rsSymbol = '(?:' + [
        rsNonAstral + rsCombo + '?',
        rsCombo,
        rsRegional,
        rsSurrPair,
        rsAstral
    ].join('|') + ')';
    /** Used to match apostrophes. */ var reApos = RegExp(rsApos, 'g');
    /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */ var reComboMark = RegExp(rsCombo, 'g');
    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    /** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [
            rsBreak,
            rsUpper,
            '$'
        ].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [
            rsBreak,
            rsUpper + rsMiscLower,
            '$'
        ].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
    ].join('|'), 'g');
    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    /** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    /** Used to assign default `context` object properties. */ var contextProps = [
        'Array',
        'Buffer',
        'DataView',
        'Date',
        'Error',
        'Float32Array',
        'Float64Array',
        'Function',
        'Int8Array',
        'Int16Array',
        'Int32Array',
        'Map',
        'Math',
        'Object',
        'Promise',
        'RegExp',
        'Set',
        'String',
        'Symbol',
        'TypeError',
        'Uint8Array',
        'Uint8ClampedArray',
        'Uint16Array',
        'Uint32Array',
        'WeakMap',
        '_',
        'clearTimeout',
        'isFinite',
        'parseInt',
        'setTimeout'
    ];
    /** Used to make template sourceURLs easier to identify. */ var templateCounter = -1;
    /** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {
    };
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    /** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {
    };
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    /** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
        // Latin-1 Supplement block.
        '\xc0': 'A',
        '\xc1': 'A',
        '\xc2': 'A',
        '\xc3': 'A',
        '\xc4': 'A',
        '\xc5': 'A',
        '\xe0': 'a',
        '\xe1': 'a',
        '\xe2': 'a',
        '\xe3': 'a',
        '\xe4': 'a',
        '\xe5': 'a',
        '\xc7': 'C',
        '\xe7': 'c',
        '\xd0': 'D',
        '\xf0': 'd',
        '\xc8': 'E',
        '\xc9': 'E',
        '\xca': 'E',
        '\xcb': 'E',
        '\xe8': 'e',
        '\xe9': 'e',
        '\xea': 'e',
        '\xeb': 'e',
        '\xcc': 'I',
        '\xcd': 'I',
        '\xce': 'I',
        '\xcf': 'I',
        '\xec': 'i',
        '\xed': 'i',
        '\xee': 'i',
        '\xef': 'i',
        '\xd1': 'N',
        '\xf1': 'n',
        '\xd2': 'O',
        '\xd3': 'O',
        '\xd4': 'O',
        '\xd5': 'O',
        '\xd6': 'O',
        '\xd8': 'O',
        '\xf2': 'o',
        '\xf3': 'o',
        '\xf4': 'o',
        '\xf5': 'o',
        '\xf6': 'o',
        '\xf8': 'o',
        '\xd9': 'U',
        '\xda': 'U',
        '\xdb': 'U',
        '\xdc': 'U',
        '\xf9': 'u',
        '\xfa': 'u',
        '\xfb': 'u',
        '\xfc': 'u',
        '\xdd': 'Y',
        '\xfd': 'y',
        '\xff': 'y',
        '\xc6': 'Ae',
        '\xe6': 'ae',
        '\xde': 'Th',
        '\xfe': 'th',
        '\xdf': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',
        '\u0102': 'A',
        '\u0104': 'A',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u0105': 'a',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010a': 'C',
        '\u010c': 'C',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010b': 'c',
        '\u010d': 'c',
        '\u010e': 'D',
        '\u0110': 'D',
        '\u010f': 'd',
        '\u0111': 'd',
        '\u0112': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u0118': 'E',
        '\u011a': 'E',
        '\u0113': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u0119': 'e',
        '\u011b': 'e',
        '\u011c': 'G',
        '\u011e': 'G',
        '\u0120': 'G',
        '\u0122': 'G',
        '\u011d': 'g',
        '\u011f': 'g',
        '\u0121': 'g',
        '\u0123': 'g',
        '\u0124': 'H',
        '\u0126': 'H',
        '\u0125': 'h',
        '\u0127': 'h',
        '\u0128': 'I',
        '\u012a': 'I',
        '\u012c': 'I',
        '\u012e': 'I',
        '\u0130': 'I',
        '\u0129': 'i',
        '\u012b': 'i',
        '\u012d': 'i',
        '\u012f': 'i',
        '\u0131': 'i',
        '\u0134': 'J',
        '\u0135': 'j',
        '\u0136': 'K',
        '\u0137': 'k',
        '\u0138': 'k',
        '\u0139': 'L',
        '\u013b': 'L',
        '\u013d': 'L',
        '\u013f': 'L',
        '\u0141': 'L',
        '\u013a': 'l',
        '\u013c': 'l',
        '\u013e': 'l',
        '\u0140': 'l',
        '\u0142': 'l',
        '\u0143': 'N',
        '\u0145': 'N',
        '\u0147': 'N',
        '\u014a': 'N',
        '\u0144': 'n',
        '\u0146': 'n',
        '\u0148': 'n',
        '\u014b': 'n',
        '\u014c': 'O',
        '\u014e': 'O',
        '\u0150': 'O',
        '\u014d': 'o',
        '\u014f': 'o',
        '\u0151': 'o',
        '\u0154': 'R',
        '\u0156': 'R',
        '\u0158': 'R',
        '\u0155': 'r',
        '\u0157': 'r',
        '\u0159': 'r',
        '\u015a': 'S',
        '\u015c': 'S',
        '\u015e': 'S',
        '\u0160': 'S',
        '\u015b': 's',
        '\u015d': 's',
        '\u015f': 's',
        '\u0161': 's',
        '\u0162': 'T',
        '\u0164': 'T',
        '\u0166': 'T',
        '\u0163': 't',
        '\u0165': 't',
        '\u0167': 't',
        '\u0168': 'U',
        '\u016a': 'U',
        '\u016c': 'U',
        '\u016e': 'U',
        '\u0170': 'U',
        '\u0172': 'U',
        '\u0169': 'u',
        '\u016b': 'u',
        '\u016d': 'u',
        '\u016f': 'u',
        '\u0171': 'u',
        '\u0173': 'u',
        '\u0174': 'W',
        '\u0175': 'w',
        '\u0176': 'Y',
        '\u0177': 'y',
        '\u0178': 'Y',
        '\u0179': 'Z',
        '\u017b': 'Z',
        '\u017d': 'Z',
        '\u017a': 'z',
        '\u017c': 'z',
        '\u017e': 'z',
        '\u0132': 'IJ',
        '\u0133': 'ij',
        '\u0152': 'Oe',
        '\u0153': 'oe',
        '\u0149': "'n",
        '\u017f': 's'
    };
    /** Used to map characters to HTML entities. */ var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
    };
    /** Used to map HTML entities to characters. */ var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'"
    };
    /** Used to escape characters for inclusion in compiled string literals. */ var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
    };
    /** Built-in method references without a dependency on `root`. */ var freeParseFloat = parseFloat, freeParseInt = parseInt;
    /** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    /** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    /** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
    /** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */ var nodeUtil = function() {
        try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require('util').types;
            if (types) return types;
            // Legacy `process.binding('util')` for Node.js < 10.
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {
        }
    }();
    /* Node.js helper references. */ var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    /*--------------------------------------------------------------------------*/ /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */ function apply(func, thisArg, args) {
        switch(args.length){
            case 0:
                return func.call(thisArg);
            case 1:
                return func.call(thisArg, args[0]);
            case 2:
                return func.call(thisArg, args[0], args[1]);
            case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */ function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (iteratee(array[index], index, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while(length--){
            if (iteratee(array[length], length, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */ function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (!predicate(array[index], index, array)) return false;
        }
        return true;
    }
    /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */ function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (predicate(value, index, array)) result[resIndex++] = value;
        }
        return result;
    }
    /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
    }
    /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (comparator(value, array[index])) return true;
        }
        return false;
    }
    /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */ function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while(++index < length)result[index] = iteratee(array[index], index, array);
        return result;
    }
    /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */ function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while(++index < length)array[offset + index] = values[index];
        return array;
    }
    /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[++index];
        while(++index < length)accumulator = iteratee(accumulator, array[index], index, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[--length];
        while(length--)accumulator = iteratee(accumulator, array[length], length, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */ function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (predicate(array[index], index, array)) return true;
        }
        return false;
    }
    /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ var asciiSize = baseProperty('length');
    /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function asciiToArray(string) {
        return string.split('');
    }
    /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function asciiWords(string) {
        return string.match(reAsciiWord) || [];
    }
    /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */ function baseFindKey(collection1, predicate, eachFunc) {
        var result;
        eachFunc(collection1, function(value, key, collection) {
            if (predicate(value, key, collection)) {
                result = key;
                return false;
            }
        });
        return result;
    }
    /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while(fromRight ? index-- : ++index < length){
            if (predicate(array[index], index, array)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (comparator(array[index], value)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */ function baseIsNaN(value) {
        return value !== value;
    }
    /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */ function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */ function baseProperty(key) {
        return function(object) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */ function basePropertyOf(object) {
        return function(key) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */ function baseReduce(collection2, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection2, function(value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */ function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while(length--)array[length] = array[length].value;
        return array;
    }
    /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */ function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while(++index < length){
            var current = iteratee(array[index]);
            if (current !== undefined) result = result === undefined ? current : result + current;
        }
        return result;
    }
    /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */ function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while(++index < n)result[index] = iteratee(index);
        return result;
    }
    /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */ function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
            return [
                key,
                object[key]
            ];
        });
    }
    /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */ function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
    }
    /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */ function baseUnary(func) {
        return function(value) {
            return func(value);
        };
    }
    /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */ function baseValues(object, props) {
        return arrayMap(props, function(key) {
            return object[key];
        });
    }
    /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */ function cacheHas(cache, key) {
        return cache.has(key);
    }
    /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */ function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while(++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */ function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while((index--) && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */ function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while(length--)if (array[length] === placeholder) ++result;
        return result;
    }
    /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */ var deburrLetter = basePropertyOf(deburredLetters);
    /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ var escapeHtmlChar = basePropertyOf(htmlEscapes);
    /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
    }
    /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */ function getValue(object, key) {
        return object == null ? undefined : object[key];
    }
    /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */ function hasUnicode(string) {
        return reHasUnicode.test(string);
    }
    /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */ function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
    }
    /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */ function iteratorToArray(iterator) {
        var data, result = [];
        while(!(data = iterator.next()).done)result.push(data.value);
        return result;
    }
    /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */ function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
            result[++index] = [
                key,
                value
            ];
        });
        return result;
    }
    /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */ function overArg(func, transform) {
        return function(arg) {
            return func(transform(arg));
        };
    }
    /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */ function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */ function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = value;
        });
        return result;
    }
    /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */ function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = [
                value,
                value
            ];
        });
        return result;
    }
    /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (array[index] === value) return index;
        }
        return -1;
    }
    /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while(index--){
            if (array[index] === value) return index;
        }
        return index;
    }
    /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */ function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */ function trimmedEndIndex(string) {
        var index = string.length;
        while(index-- && reWhitespace.test(string.charAt(index)));
        return index;
    }
    /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */ var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while(reUnicode.test(string))++result;
        return result;
    }
    /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function unicodeToArray(string) {
        return string.match(reUnicode) || [];
    }
    /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
    }
    /*--------------------------------------------------------------------------*/ /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */ var runInContext1 = function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        /** Built-in constructor references. */ var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
        /** Used for built-in method references. */ var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
        /** Used to detect overreaching core-js shims. */ var coreJsData = context['__core-js_shared__'];
        /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
        /** Used to generate unique IDs. */ var idCounter = 0;
        /** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? 'Symbol(src)_1.' + uid : '';
        }();
        /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */ var nativeObjectToString = objectProto.toString;
        /** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
        /** Used to restore the original `_` reference in `_.noConflict`. */ var oldDash = root._;
        /** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
        /** Built-in value references. */ var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        var defineProperty = function() {
            try {
                var func = getNative(Object, 'defineProperty');
                func({
                }, '', {
                });
                return func;
            } catch (e) {
            }
        }();
        /** Mocked built-ins. */ var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        /* Built-in method references that are verified to be native. */ var DataView = getNative(context, 'DataView'), Map = getNative(context, 'Map'), Promise = getNative(context, 'Promise'), Set = getNative(context, 'Set'), WeakMap = getNative(context, 'WeakMap'), nativeCreate = getNative(Object, 'create');
        /** Used to store function metadata. */ var metaMap = WeakMap && new WeakMap;
        /** Used to lookup unminified function names. */ var realNames = {
        };
        /** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        /** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */ function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) return value;
                if (hasOwnProperty.call(value, '__wrapped__')) return wrapperClone(value);
            }
            return new LodashWrapper(value);
        }
        /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */ var baseCreate = function() {
            function object() {
            }
            return function(proto) {
                if (!isObject(proto)) return {
                };
                if (objectCreate) return objectCreate(proto);
                object.prototype = proto;
                var result = new object;
                object.prototype = undefined;
                return result;
            };
        }();
        /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */ function baseLodash() {
        // No operation performed.
        }
        /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */ function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */ lodash.templateSettings = {
            /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ 'escape': reEscape,
            /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ 'evaluate': reEvaluate,
            /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ 'interpolate': reInterpolate,
            /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */ 'variable': '',
            /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */ 'imports': {
                /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */ '_': lodash
            }
        };
        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */ function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
        }
        /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */ function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        }
        /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */ function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */ function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) return baseWrapperValue(array, this.__actions__);
            var result = [];
            outer: while((length--) && resIndex < takeCount){
                index += dir;
                var iterIndex = -1, value = array[index];
                while(++iterIndex < iterLength){
                    var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                    if (type == LAZY_MAP_FLAG) value = computed;
                    else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) continue outer;
                        else break outer;
                    }
                }
                result[resIndex++] = value;
            }
            return result;
        }
        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */ function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {
            };
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */ function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */ function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) return false;
            var lastIndex = data.length - 1;
            if (index == lastIndex) data.pop();
            else splice.call(data, index, 1);
            --this.size;
            return true;
        }
        /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */ function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([
                    key,
                    value
                ]);
            } else data[index][1] = value;
            return this;
        }
        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */ function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                'hash': new Hash,
                'map': new (Map || ListCache),
                'string': new Hash
            };
        }
        /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */ function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        /*------------------------------------------------------------------------*/ /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */ function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache;
            while(++index < length)this.add(values[index]);
        }
        /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */ function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */ function setCacheHas(value) {
            return this.__data__.has(value);
        }
        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        /*------------------------------------------------------------------------*/ /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */ function stackClear() {
            this.__data__ = new ListCache;
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function stackDelete(key) {
            var data = this.__data__, result = data['delete'](key);
            this.size = data.size;
            return result;
        }
        /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function stackGet(key) {
            return this.__data__.get(key);
        }
        /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function stackHas(key) {
            return this.__data__.has(key);
        }
        /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */ function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([
                        key,
                        value
                    ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */ function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
            isIndex(key, length)))) result.push(key);
            return result;
        }
        /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */ function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
        }
        /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */ function assocIndexOf(array, key) {
            var length = array.length;
            while(length--){
                if (eq(array[length][0], key)) return length;
            }
            return -1;
        }
        /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */ function baseAggregator(collection3, setter, iteratee, accumulator) {
            baseEach(collection3, function(value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
        }
        /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function baseAssignValue(object, key, value) {
            if (key == '__proto__' && defineProperty) defineProperty(object, key, {
                'configurable': true,
                'enumerable': true,
                'value': value,
                'writable': true
            });
            else object[key] = value;
        }
        /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */ function baseAt(object, paths) {
            var index = -1, length = paths.length, result = Array(length), skip = object == null;
            while(++index < length)result[index] = skip ? undefined : get(object, paths[index]);
            return result;
        }
        /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */ function baseClamp(number, lower, upper) {
            if (number === number) {
                if (upper !== undefined) number = number <= upper ? number : upper;
                if (lower !== undefined) number = number >= lower ? number : lower;
            }
            return number;
        }
        /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */ function baseClone(value, bitmask, customizer, key1, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) result = object ? customizer(value, key1, object, stack) : customizer(value);
            if (result !== undefined) return result;
            if (!isObject(value)) return value;
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) return copyArray(value, result);
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) return cloneBuffer(value, isDeep);
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {
                    } : initCloneObject(value);
                    if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                } else {
                    if (!cloneableTags[tag]) return object ? value : {
                    };
                    result = initCloneByTag(value, tag, isDeep);
                }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new Stack);
            var stacked = stack.get(value);
            if (stacked) return stacked;
            stack.set(value, result);
            if (isSet(value)) value.forEach(function(subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
            else if (isMap(value)) value.forEach(function(subValue, key) {
                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function(subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }
        /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */ function baseConforms(source) {
            var props = keys(source);
            return function(object) {
                return baseConformsTo(object, source, props);
            };
        }
        /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */ function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) return !length;
            object = Object(object);
            while(length--){
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined && !(key in object) || !predicate(value)) return false;
            }
            return true;
        }
        /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ function baseDelay(func, wait, args) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }
        /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */ function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
            if (!length) return result;
            if (iteratee) values = arrayMap(values, baseUnary(iteratee));
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
            }
            outer: while(++index < length){
                var value = array[index], computed = iteratee == null ? value : iteratee(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var valuesIndex = valuesLength;
                    while(valuesIndex--){
                        if (values[valuesIndex] === computed) continue outer;
                    }
                    result.push(value);
                } else if (!includes(values, computed, comparator)) result.push(value);
            }
            return result;
        }
        /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEach = createBaseEach(baseForOwn);
        /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEachRight = createBaseEach(baseForOwnRight, true);
        /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */ function baseEvery(collection4, predicate) {
            var result = true;
            baseEach(collection4, function(value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */ function baseExtremum(array, iteratee, comparator) {
            var index = -1, length = array.length;
            while(++index < length){
                var value = array[index], current = iteratee(value);
                if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) var computed = current, result = value;
            }
            return result;
        }
        /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */ function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end === undefined || end > length ? length : toInteger(end);
            if (end < 0) end += length;
            end = start > end ? 0 : toLength(end);
            while(start < end)array[start++] = value;
            return array;
        }
        /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */ function baseFilter(collection5, predicate) {
            var result = [];
            baseEach(collection5, function(value, index, collection) {
                if (predicate(value, index, collection)) result.push(value);
            });
            return result;
        }
        /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */ function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while(++index < length){
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                    else arrayPush(result, value);
                } else if (!isStrict) result[result.length] = value;
            }
            return result;
        }
        /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseFor = createBaseFor();
        /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseForRight = createBaseFor(true);
        /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */ function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
                return isFunction(object[key]);
            });
        }
        /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */ function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while(object != null && index < length)object = object[toKey(path[index++])];
            return index && index == length ? object : undefined;
        }
        /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ function baseGetTag(value) {
            if (value == null) return value === undefined ? undefinedTag : nullTag;
            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */ function baseGt(value, other) {
            return value > other;
        }
        /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
        }
        /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }
        /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */ function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */ function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
            while(othIndex--){
                var array = arrays[othIndex];
                if (othIndex && iteratee) array = arrayMap(array, baseUnary(iteratee));
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer: while(++index < length && result.length < maxLength){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                    othIndex = othLength;
                    while(--othIndex){
                        var cache = caches[othIndex];
                        if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) continue outer;
                    }
                    if (seen) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */ function baseInverter(object1, setter, iteratee, accumulator) {
            baseForOwn(object1, function(value, key, object) {
                setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */ function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent1(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined : apply(func, object, args);
        }
        /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */ function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */ function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */ function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */ function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) return true;
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) return false;
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) return false;
            stack || (stack = new Stack);
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */ function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */ function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) return !length;
            object = Object(object);
            while(index--){
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
            }
            while(++index < length){
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) return false;
                } else {
                    var stack = new Stack;
                    if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
                }
            }
            return true;
        }
        /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */ function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) return false;
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */ function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */ function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */ function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */ function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == 'function') return value;
            if (value == null) return identity;
            if (typeof value == 'object') return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            return property(value);
        }
        /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeys(object) {
            if (!isPrototype(object)) return nativeKeys(object);
            var result = [];
            for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeysIn(object) {
            if (!isObject(object)) return nativeKeysIn(object);
            var isProto = isPrototype(object), result = [];
            for(var key in object)if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */ function baseLt(value, other) {
            return value < other;
        }
        /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */ function baseMap(collection6, iteratee) {
            var index = -1, result = isArrayLike(collection6) ? Array(collection6.length) : [];
            baseEach(collection6, function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
            return function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) return;
            baseFor(source, function(srcValue, key) {
                stack || (stack = new Stack);
                if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                else {
                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
                    if (newValue === undefined) newValue = srcValue;
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) newValue = objValue;
                    else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
                    else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    } else newValue = [];
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) newValue = toPlainObject(objValue);
                    else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
                } else isCommon = false;
            }
            if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack['delete'](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */ function baseNth(array, n) {
            var length = array.length;
            if (!length) return;
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined;
        }
        /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */ function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) iteratees = arrayMap(iteratees, function(iteratee) {
                if (isArray(iteratee)) return function(value) {
                    return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                };
                return iteratee;
            });
            else iteratees = [
                identity
            ];
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result = baseMap(collection, function(value, key, collection) {
                var criteria = arrayMap(iteratees, function(iteratee) {
                    return iteratee(value);
                });
                return {
                    'criteria': criteria,
                    'index': ++index,
                    'value': value
                };
            });
            return baseSortBy(result, function(object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */ function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
                return hasIn(object, path);
            });
        }
        /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */ function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result = {
            };
            while(++index < length){
                var path = paths[index], value = baseGet(object, path);
                if (predicate(value, path)) baseSet(result, castPath(path, object), value);
            }
            return result;
        }
        /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */ function basePropertyDeep(path) {
            return function(object) {
                return baseGet(object, path);
            };
        }
        /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */ function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            if (array === values) values = copyArray(values);
            if (iteratee) seen = arrayMap(array, baseUnary(iteratee));
            while(++index < length){
                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                while((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1){
                    if (seen !== array) splice.call(seen, fromIndex, 1);
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */ function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while(length--){
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                    var previous = index;
                    if (isIndex(index)) splice.call(array, index, 1);
                    else baseUnset(array, index);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */ function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */ function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
            while(length--){
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */ function baseRepeat(string, n) {
            var result = '';
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) return result;
            // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
            do {
                if (n % 2) result += string;
                n = nativeFloor(n / 2);
                if (n) string += string;
            }while (n)
            return result;
        }
        /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */ function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + '');
        }
        /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */ function baseSample(collection) {
            return arraySample(values1(collection));
        }
        /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function baseSampleSize(collection, n) {
            var array = values1(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseSet(object, path, value, customizer) {
            if (!isObject(object)) return object;
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while(nested != null && ++index < length){
                var key = toKey(path[index]), newValue = value;
                if (key === '__proto__' || key === 'constructor' || key === 'prototype') return object;
                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {
                    };
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
        };
        /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, 'toString', {
                'configurable': true,
                'enumerable': false,
                'value': constant(string),
                'writable': true
            });
        };
        /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function baseShuffle(collection) {
            return shuffleSelf(values1(collection));
        }
        /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end > length ? length : end;
            if (end < 0) end += length;
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array(length);
            while(++index < length)result[index] = array[index + start];
            return result;
        }
        /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */ function baseSome(collection7, predicate) {
            var result;
            baseEach(collection7, function(value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while(low < high){
                    var mid = low + high >>> 1, computed = array[mid];
                    if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) low = mid + 1;
                    else high = mid;
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndexBy(array, value, iteratee, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) return 0;
            value = iteratee(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
            while(low < high){
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) var setLow = retHighest || othIsReflexive;
                else if (valIsUndefined) setLow = othIsReflexive && (retHighest || othIsDefined);
                else if (valIsNull) setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                else if (valIsSymbol) setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                else if (othIsNull || othIsSymbol) setLow = false;
                else setLow = retHighest ? computed <= value : computed < value;
                if (setLow) low = mid + 1;
                else high = mid;
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseSortedUniq(array, iteratee) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = value === 0 ? 0 : value;
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */ function baseToNumber(value) {
            if (typeof value == 'number') return value;
            if (isSymbol(value)) return NAN;
            return +value;
        }
        /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */ function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == 'string') return value;
            if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
            if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : '';
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) return setToArray(set);
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache;
            } else seen = iteratee ? [] : result;
            outer: while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var seenIndex = seen.length;
                    while(seenIndex--){
                        if (seen[seenIndex] === computed) continue outer;
                    }
                    if (iteratee) seen.push(computed);
                    result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                    if (seen !== result) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */ function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent1(object, path);
            return object == null || delete object[toKey(last(path))];
        }
        /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */ function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while((fromRight ? index-- : ++index < length) && predicate(array[index], index, array));
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */ function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) result2 = result2.value();
            return arrayReduce(actions, function(result, action) {
                return action.func.apply(action.thisArg, arrayPush([
                    result
                ], action.args));
            }, result2);
        }
        /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */ function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;
            if (length < 2) return length ? baseUniq(arrays[0]) : [];
            var index = -1, result = Array(length);
            while(++index < length){
                var array = arrays[index], othIndex = -1;
                while(++othIndex < length)if (othIndex != index) result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
        /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */ function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {
            };
            while(++index < length){
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */ function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */ function castFunction(value) {
            return typeof value == 'function' ? value : identity;
        }
        /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */ function castPath(value, object) {
            if (isArray(value)) return value;
            return isKey(value, object) ? [
                value
            ] : stringToPath(toString(value));
        }
        /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ var castRest = baseRest;
        /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */ function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
        }
        /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */ var clearTimeout = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
        };
        /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */ function cloneBuffer(buffer, isDeep) {
            if (isDeep) return buffer.slice();
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
        }
        /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */ function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */ function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */ function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */ function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {
            };
        }
        /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */ function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */ function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;
            }
            return 0;
        }
        /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */ function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while(++index < length){
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                    if (index >= ordersLength) return result;
                    var order = orders[index];
                    return result * (order == 'desc' ? -1 : 1);
                }
            }
            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
            // that causes it, under certain circumstances, to provide the same value for
            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
            // for more details.
            //
            // This also ensures a stable sort in V8 and other engines.
            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
            return object.index - other.index;
        }
        /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
            while(++leftIndex < leftLength)result[leftIndex] = partials[leftIndex];
            while(++argsIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[holders[argsIndex]] = args[argsIndex];
            while(rangeLength--)result[leftIndex++] = args[argsIndex++];
            return result;
        }
        /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
            while(++argsIndex < rangeLength)result[argsIndex] = args[argsIndex];
            var offset = argsIndex;
            while(++rightIndex < rightLength)result[offset + rightIndex] = partials[rightIndex];
            while(++holdersIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[offset + holders[holdersIndex]] = args[argsIndex++];
            return result;
        }
        /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */ function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while(++index < length)array[index] = source[index];
            return array;
        }
        /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */ function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {
            });
            var index = -1, length = props.length;
            while(++index < length){
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) newValue = source[key];
                if (isNew) baseAssignValue(object, key, newValue);
                else assignValue(object, key, newValue);
            }
            return object;
        }
        /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
        }
        /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */ function createAggregator(setter, initializer) {
            return function(collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {
                };
                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
        }
        /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */ function createAssigner(assigner) {
            return baseRest(function(object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object(object);
                while(++index < length){
                    var source = sources[index];
                    if (source) assigner(object, source, index, customizer);
                }
                return object;
            });
        }
        /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
                if (collection == null) return collection;
                if (!isArrayLike(collection)) return eachFunc(collection, iteratee);
                var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
                while(fromRight ? index-- : ++index < length){
                    if (iteratee(iterable[index], index, iterable) === false) break;
                }
                return collection;
            };
        }
        /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                while(length--){
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) break;
                }
                return object;
            };
        }
        /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */ function createCaseFirst(methodName) {
            return function(string) {
                string = toString(string);
                var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */ function createCompounder(callback) {
            return function(string) {
                return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
            };
        }
        /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */ function createCtor(Ctor) {
            return function() {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch(args.length){
                    case 0:
                        return new Ctor;
                    case 1:
                        return new Ctor(args[0]);
                    case 2:
                        return new Ctor(args[0], args[1]);
                    case 3:
                        return new Ctor(args[0], args[1], args[2]);
                    case 4:
                        return new Ctor(args[0], args[1], args[2], args[3]);
                    case 5:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                    case 6:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                    case 7:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
            };
        }
        /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
                while(index--)args[index] = arguments[index];
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */ function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function(key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */ function createFlow(fromRight) {
            return flatRest(function(funcs) {
                var length = funcs.length, index1 = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) funcs.reverse();
                while(index1--){
                    var func = funcs[index1];
                    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
                    if (prereq && !wrapper && getFuncName(func) == 'wrapper') var wrapper = new LodashWrapper([], true);
                }
                index1 = wrapper ? index1 : length;
                while(++index1 < length){
                    func = funcs[index1];
                    var funcName = getFuncName(func), data = funcName == 'wrapper' ? getData(func) : undefined;
                    if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    else wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
                return function() {
                    var args = arguments, value = args[0];
                    if (wrapper && args.length == 1 && isArray(value)) return wrapper.plant(value).value();
                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                    while(++index < length)result = funcs[index].call(this, result);
                    return result;
                };
            });
        }
        /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length;
                while(index--)args[index] = arguments[index];
                if (isCurried) var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                if (partials) args = composeArgs(args, partials, holders, isCurried);
                if (partialsRight) args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) args = reorder(args, argPos);
                else if (isFlip && length > 1) args.reverse();
                if (isAry && ary < length) args.length = ary;
                if (this && this !== root && this instanceof wrapper) fn = Ctor || createCtor(fn);
                return fn.apply(thisBinding, args);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */ function createInverter(setter, toIteratee) {
            return function(object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {
                });
            };
        }
        /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */ function createMathOperation(operator, defaultValue) {
            return function(value, other) {
                var result;
                if (value === undefined && other === undefined) return defaultValue;
                if (value !== undefined) result = value;
                if (other !== undefined) {
                    if (result === undefined) return other;
                    if (typeof value == 'string' || typeof other == 'string') {
                        value = baseToString(value);
                        other = baseToString(other);
                    } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                    }
                    result = operator(value, other);
                }
                return result;
            };
        }
        /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */ function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function(args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */ function createPadding(length, chars) {
            chars = chars === undefined ? ' ' : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) return charsLength ? baseRepeat(chars, length) : chars;
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
        }
        /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */ function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                while(++leftIndex < leftLength)args[leftIndex] = partials[leftIndex];
                while(argsLength--)args[leftIndex++] = arguments[++argsIndex];
                return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */ function createRange(fromRight) {
            return function(start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) end = step = undefined;
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else end = toFinite(end);
                step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }
        /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */ function createRelationalOperation(operator) {
            return function(value, other) {
                if (!(typeof value == 'string' && typeof other == 'string')) {
                    value = toNumber(value);
                    other = toNumber(other);
                }
                return operator(value, other);
            };
        }
        /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity
            ];
            var result = wrapFunc.apply(undefined, newData);
            if (isLaziable(func)) setData(result, newData);
            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
        }
        /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */ function createRound(methodName) {
            var func = Math[methodName];
            return function(number, precision) {
                number = toNumber(number);
                precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                    // Shift with exponential notation to avoid floating-point issues.
                    // See [MDN](https://mdn.io/round#Examples) for more details.
                    var pair = (toString(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
                    pair = (toString(value) + 'e').split('e');
                    return +(pair[0] + 'e' + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */ var createSet = !(Set && 1 / setToArray(new Set([
            ,
            -0
        ]))[1] == INFINITY) ? noop : function(values) {
            return new Set(values);
        };
        /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */ function createToPairs(keysFunc) {
            return function(object) {
                var tag = getTag(object);
                if (tag == mapTag) return mapToArray(object);
                if (tag == setTag) return setToPairs(object);
                return baseToPairs(object, keysFunc(object));
            };
        }
        /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func);
            var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ];
            if (data) mergeData(newData, data);
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            if (!bitmask || bitmask == WRAP_BIND_FLAG) var result = createBind(func, bitmask, thisArg);
            else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result = createCurry(func, bitmask, arity);
            else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result = createPartial(func, bitmask, thisArg, partials);
            else result = createHybrid.apply(undefined, newData);
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result, newData), func, bitmask);
        }
        /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) return srcValue;
            return objValue;
        }
        /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack['delete'](srcValue);
            }
            return objValue;
        }
        /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */ function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
            // Check that cyclic values are equal.
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
            stack.set(array, other);
            stack.set(other, array);
            // Ignore non-index properties.
            while(++index < arrLength){
                var arrValue = array[index], othValue1 = other[index];
                if (customizer) var compared = isPartial ? customizer(othValue1, arrValue, index, other, array, stack) : customizer(arrValue, othValue1, index, array, other, stack);
                if (compared !== undefined) {
                    if (compared) continue;
                    result = false;
                    break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                    if (!arraySome(other, function(othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
                    })) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue1 || equalFunc(arrValue, othValue1, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            stack['delete'](other);
            return result;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch(tag){
                case dataViewTag:
                    if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
                    object = object.buffer;
                    other = other.buffer;
                case arrayBufferTag:
                    if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
                    return true;
                case boolTag:
                case dateTag:
                case numberTag:
                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                    // Invalid dates are coerced to `NaN`.
                    return eq(+object, +other);
                case errorTag:
                    return object.name == other.name && object.message == other.message;
                case regexpTag:
                case stringTag:
                    // Coerce regexes to strings and treat strings, primitives and objects,
                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                    // for more details.
                    return object == other + '';
                case mapTag:
                    var convert = mapToArray;
                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);
                    if (object.size != other.size && !isPartial) return false;
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked) return stacked == other;
                    bitmask |= COMPARE_UNORDERED_FLAG;
                    // Recursively compare objects (susceptible to call stack limits).
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack['delete'](object);
                    return result;
                case symbolTag:
                    if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
            return false;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) return false;
            var index = objLength;
            while(index--){
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
            }
            // Check that cyclic values are equal.
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) return objStacked == other && othStacked == object;
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while(++index < objLength){
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                // Recursively compare objects (susceptible to call stack limits).
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) result = false;
            }
            stack['delete'](object);
            stack['delete'](other);
            return result;
        }
        /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + '');
        }
        /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */ var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
        };
        /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */ function getFuncName(func) {
            var result = func.name + '', array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
            while(length--){
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) return data.name;
            }
            return result;
        }
        /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */ function getHolder(func) {
            var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
            return object.placeholder;
        }
        /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */ function getIteratee() {
            var result = lodash.iteratee || iteratee1;
            result = result === iteratee1 ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */ function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
        }
        /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */ function getMatchData(object) {
            var result = keys(object), length = result.length;
            while(length--){
                var key = result[length], value = object[key];
                result[length] = [
                    key,
                    value,
                    isStrictComparable(value)
                ];
            }
            return result;
        }
        /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */ function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */ function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {
            }
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) value[symToStringTag] = tag;
                else delete value[symToStringTag];
            }
            return result;
        }
        /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) return [];
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };
        /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result = [];
            while(object){
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ var getTag = baseGetTag;
        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
            var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
            if (ctorString) switch(ctorString){
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
            return result;
        };
        /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */ function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while(++index < length){
                var data = transforms[index], size = data.size;
                switch(data.type){
                    case 'drop':
                        start += size;
                        break;
                    case 'dropRight':
                        end -= size;
                        break;
                    case 'take':
                        end = nativeMin(end, start + size);
                        break;
                    case 'takeRight':
                        start = nativeMax(start, end - size);
                        break;
                }
            }
            return {
                'start': start,
                'end': end
            };
        }
        /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */ function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
        }
        /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */ function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while(++index < length){
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) break;
                object = object[key];
            }
            if (result || ++index != length) return result;
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */ function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneObject(object) {
            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {
            };
        }
        /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch(tag){
                case arrayBufferTag:
                    return cloneArrayBuffer(object);
                case boolTag:
                case dateTag:
                    return new Ctor(+object);
                case dataViewTag:
                    return cloneDataView(object, isDeep);
                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                    return cloneTypedArray(object, isDeep);
                case mapTag:
                    return new Ctor;
                case numberTag:
                case stringTag:
                    return new Ctor(object);
                case regexpTag:
                    return cloneRegExp(object);
                case setTag:
                    return new Ctor;
                case symbolTag:
                    return cloneSymbol(object);
            }
        }
        /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */ function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) return source;
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
            details = details.join(length > 2 ? ', ' : ' ');
            return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }
        /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */ function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */ function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */ function isIterateeCall(value, index, object) {
            if (!isObject(object)) return false;
            var type = typeof index;
            if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) return eq(object[index], value);
            return false;
        }
        /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */ function isKey(value, object) {
            if (isArray(value)) return false;
            var type = typeof value;
            if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) return true;
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
        }
        /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */ function isKeyable(value) {
            var type = typeof value;
            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
        }
        /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */ function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) return false;
            if (func === other) return true;
            var data = getData(other);
            return !!data && func === data[0];
        }
        /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */ function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */ var isMaskable = coreJsData ? isFunction : stubFalse;
        /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */ function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
            return value === proto;
        }
        /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */ function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function matchesStrictComparable(key, srcValue) {
            return function(object) {
                if (object == null) return false;
                return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
        }
        /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */ function memoizeCapped(func) {
            var result = memoize(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
                return key;
            });
            var cache = result.cache;
            return result;
        }
        /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */ function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            // Exit early if metadata can't be merged.
            if (!(isCommon || isCombo)) return data;
            // Use source `thisArg` if available.
            if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            // Compose partial arguments.
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            // Compose partial right arguments.
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            // Use source `argPos` if available.
            value = source[7];
            if (value) data[7] = value;
            // Use source `ary` if it's smaller.
            if (srcBitmask & WRAP_ARY_FLAG) data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            // Use source `arity` if one is not provided.
            if (data[9] == null) data[9] = source[9];
            // Use source `func` and merge bitmasks.
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function nativeKeysIn(object) {
            var result = [];
            if (object != null) for(var key in Object(object))result.push(key);
            return result;
        }
        /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */ function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */ function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function() {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                while(++index < length)array[index] = args[start + index];
                index = -1;
                var otherArgs = Array(start + 1);
                while(++index < start)otherArgs[index] = args[index];
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */ function parent1(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */ function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while(length--){
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */ function safeGet(object, key) {
            if (key === 'constructor' && typeof object[key] === 'function') return;
            if (key == '__proto__') return;
            return object[key];
        }
        /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var setData = shortOut(baseSetData);
        /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ var setTimeout = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
        };
        /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var setToString = shortOut(baseSetToString);
        /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */ function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + '';
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */ function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) return arguments[0];
                } else count = 0;
                return func.apply(undefined, arguments);
            };
        }
        /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */ function shuffleSelf(array, size) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size = size === undefined ? length : size;
            while(++index < size){
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
            }
            array.length = size;
            return array;
        }
        /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */ var stringToPath = memoizeCapped(function(string) {
            var result = [];
            if (string.charCodeAt(0) === 46 /* . */ ) result.push('');
            string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
            });
            return result;
        });
        /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */ function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) return value;
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */ function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {
                }
                try {
                    return func + '';
                } catch (e1) {
                }
            }
            return '';
        }
        /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */ function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
                var value = '_.' + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) details.push(value);
            });
            return details.sort();
        }
        /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */ function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) return wrapper.clone();
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */ function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) size = 1;
            else size = nativeMax(toInteger(size), 0);
            var length = array == null ? 0 : array.length;
            if (!length || size < 1) return [];
            var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
            while(index < length)result[resIndex++] = baseSlice(array, index, index += size);
            return result;
        }
        /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */ function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index];
                if (value) result[resIndex++] = value;
            }
            return result;
        }
        /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */ function concat() {
            var length = arguments.length;
            if (!length) return [];
            var args = Array(length - 1), array = arguments[0], index = length;
            while(index--)args[index - 1] = arguments[index];
            return arrayPush(isArray(array) ? copyArray(array) : [
                array
            ], baseFlatten(args, 1));
        }
        /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */ var difference = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var differenceBy = baseRest(function(array, values) {
            var iteratee = last(values);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */ var differenceWith = baseRest(function(array, values) {
            var comparator = last(values);
            if (isArrayLikeObject(comparator)) comparator = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */ function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */ function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */ function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length - 1;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */ function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }
        /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */ function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
        }
        /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */ function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
        }
        /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */ function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result = {
            };
            while(++index < length){
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        }
        /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */ function head(array) {
            return array && array.length ? array[0] : undefined;
        }
        /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */ function indexOf1(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseIndexOf(array, value, index);
        }
        /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */ function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
        }
        /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */ var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */ var intersectionBy = baseRest(function(arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee === last(mapped)) iteratee = undefined;
            else mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */ var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            if (comparator) mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */ function join(array, separator) {
            return array == null ? '' : nativeJoin.call(array, separator);
        }
        /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */ function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */ function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */ function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        }
        /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */ var pull = baseRest(pullAll);
        /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */ function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */ function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */ function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        }
        /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */ var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
                return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
        });
        /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */ function remove(array, predicate) {
            var result = [];
            if (!(array && array.length)) return result;
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while(++index < length){
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
        }
        /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        }
        /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */ function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
        }
        /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */ function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
        /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */ function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */ function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
        }
        /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */ function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
        /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */ function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */ function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        }
        /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */ function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */ function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */ function take(array, n, guard) {
            if (!(array && array.length)) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */ function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */ function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */ function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */ var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ var unionBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */ function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */ function uniqWith(array, comparator) {
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */ function unzip(array) {
            if (!(array && array.length)) return [];
            var length = 0;
            array = arrayFilter(array, function(group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                }
            });
            return baseTimes(length, function(index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */ function unzipWith(array, iteratee) {
            if (!(array && array.length)) return [];
            var result = unzip(array);
            if (iteratee == null) return result;
            return arrayMap(result, function(group) {
                return apply(iteratee, undefined, group);
            });
        }
        /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */ var without = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */ var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var xorBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */ var zip = baseRest(unzip);
        /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */ function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */ function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        }
        /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */ var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */ function chain1(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */ function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */ function thru(value, interceptor) {
            return interceptor(value);
        }
        /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */ var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
                return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) return this.thru(interceptor);
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
                'func': thru,
                'args': [
                    interceptor
                ],
                'thisArg': undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
                if (length && !array.length) array.push(undefined);
                return array;
            });
        });
        /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */ function wrapperChain() {
            return chain1(this);
        }
        /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */ function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */ function wrapperNext() {
            if (this.__values__ === undefined) this.__values__ = toArray(this.value());
            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
            return {
                'done': done,
                'value': value
            };
        }
        /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */ function wrapperToIterator() {
            return this;
        }
        /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */ function wrapperPlant(value) {
            var result, parent = this;
            while(parent instanceof baseLodash){
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) previous.__wrapped__ = clone;
                else result = clone;
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) wrapped = new LazyWrapper(this);
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    'func': thru,
                    'args': [
                        reverse
                    ],
                    'thisArg': undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        }
        /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */ function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */ var countBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) ++result[key];
            else baseAssignValue(result, key, 1);
        });
        /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */ function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */ function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */ var find = createFind(findIndex);
        /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */ var findLast = createFind(findLastIndex);
        /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMap(collection, iteratee) {
            return baseFlatten(map1(collection, iteratee), 1);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMapDeep(collection, iteratee) {
            return baseFlatten(map1(collection, iteratee), INFINITY);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */ function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map1(collection, iteratee), depth);
        }
        /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */ function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */ var groupBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) result[key].push(value);
            else baseAssignValue(result, key, [
                value
            ]);
        });
        /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */ function includes1(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values1(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) fromIndex = nativeMax(length + fromIndex, 0);
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */ var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == 'function', result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function(value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
        });
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */ var keyBy = createAggregator(function(result, value, key) {
            baseAssignValue(result, key, value);
        });
        /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */ function map1(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */ function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) return [];
            if (!isArray(iteratees)) iteratees = iteratees == null ? [] : [
                iteratees
            ];
            orders = guard ? undefined : orders;
            if (!isArray(orders)) orders = orders == null ? [] : [
                orders
            ];
            return baseOrderBy(collection, iteratees, orders);
        }
        /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */ var partition = createAggregator(function(result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function() {
            return [
                [],
                []
            ];
        });
        /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */ function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */ function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
        /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */ function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
        }
        /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */ function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
        }
        /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */ function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
        }
        /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */ function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
        }
        /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */ function size1(collection) {
            if (collection == null) return 0;
            if (isArrayLike(collection)) return isString(collection) ? stringSize(collection) : collection.length;
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) return collection.size;
            return baseKeys(collection).length;
        }
        /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */ function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */ var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) return [];
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) iteratees = [];
            else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) iteratees = [
                iteratees[0]
            ];
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        /*------------------------------------------------------------------------*/ /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */ var now = ctxNow || function() {
            return root.Date.now();
        };
        /*------------------------------------------------------------------------*/ /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */ function after(n, func) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n < 1) return func.apply(this, arguments);
            };
        }
        /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */ function ary1(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */ function before(n, func) {
            var result;
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n > 0) result = func.apply(this, arguments);
                if (n <= 1) func = undefined;
                return result;
            };
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */ var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
        });
        /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */ var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
        });
        /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */ function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */ function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */ function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = 'maxWait' in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }
            function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
            }
            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) return trailingEdge(time);
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
                timerId = undefined;
                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) return invokeFunc(time);
                lastArgs = lastThis = undefined;
                return result;
            }
            function cancel() {
                if (timerId !== undefined) clearTimeout(timerId);
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }
            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) return leadingEdge(lastCallTime);
                    if (maxing) {
                        // Handle invocations in a tight loop.
                        clearTimeout(timerId);
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }
        /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */ var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
        });
        /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */ var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */ function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
        }
        /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */ function memoize(func, resolver) {
            if (typeof func != 'function' || resolver != null && typeof resolver != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            var memoized = function() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) return cache.get(key);
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache);
            return memoized;
        }
        // Expose `MapCache`.
        memoize.Cache = MapCache;
        /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */ function negate(predicate) {
            if (typeof predicate != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            return function() {
                var args = arguments;
                switch(args.length){
                    case 0:
                        return !predicate.call(this);
                    case 1:
                        return !predicate.call(this, args[0]);
                    case 2:
                        return !predicate.call(this, args[0], args[1]);
                    case 3:
                        return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
            };
        }
        /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */ function once(func) {
            return before(2, func);
        }
        /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */ var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while(++index < length)args[index] = transforms[index].call(this, args[index]);
                return apply(func, this, args);
            });
        });
        /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */ var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
        /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */ var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */ var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */ function rest(func, start) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            start = start === undefined ? start : toInteger(start);
            return baseRest(func, start);
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */ function spread(func, start) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) arrayPush(otherArgs, array);
                return apply(func, this, otherArgs);
            });
        }
        /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */ function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            if (isObject(options)) {
                leading = 'leading' in options ? !!options.leading : leading;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                'leading': leading,
                'maxWait': wait,
                'trailing': trailing
            });
        }
        /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */ function unary(func) {
            return ary1(func, 1);
        }
        /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */ function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */ function castArray() {
            if (!arguments.length) return [];
            var value = arguments[0];
            return isArray(value) ? value : [
                value
            ];
        }
        /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */ function clone1(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */ function cloneWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */ function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */ function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */ function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
        }
        /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */ function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */ var gt = createRelationalOperation(baseGt);
        /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */ var gte = createRelationalOperation(function(value, other) {
            return value >= other;
        });
        /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */ var isArguments = baseIsArguments(function() {
            return arguments;
        }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
        };
        /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */ var isArray = Array.isArray;
        /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */ var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */ function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */ function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */ function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */ var isBuffer = nativeIsBuffer || stubFalse;
        /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */ var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */ function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */ function isEmpty(value) {
            if (value == null) return true;
            if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) return !value.length;
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) return !value.size;
            if (isPrototype(value)) return !baseKeys(value).length;
            for(var key in value){
                if (hasOwnProperty.call(value, key)) return false;
            }
            return true;
        }
        /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */ function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */ function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
        /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */ function isError(value) {
            if (!isObjectLike(value)) return false;
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
        }
        /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */ function isFinite(value) {
            return typeof value == 'number' && nativeIsFinite(value);
        }
        /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */ function isFunction(value) {
            if (!isObject(value)) return false;
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */ function isInteger(value) {
            return typeof value == 'number' && value == toInteger(value);
        }
        /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */ function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */ function isObject(value) {
            var type = typeof value;
            return value != null && (type == 'object' || type == 'function');
        }
        /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */ function isObjectLike(value) {
            return value != null && typeof value == 'object';
        }
        /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */ function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */ function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */ function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some
            // ActiveX objects in IE.
            return isNumber(value) && value != +value;
        }
        /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */ function isNative(value) {
            if (isMaskable(value)) throw new Error(CORE_ERROR_TEXT);
            return baseIsNative(value);
        }
        /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */ function isNull(value) {
            return value === null;
        }
        /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */ function isNil(value) {
            return value == null;
        }
        /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */ function isNumber(value) {
            return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */ function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
            var proto = getPrototype(value);
            if (proto === null) return true;
            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */ var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */ function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */ function isString(value) {
            return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */ function isSymbol(value) {
            return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */ function isUndefined(value) {
            return value === undefined;
        }
        /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */ function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */ function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */ var lt = createRelationalOperation(baseLt);
        /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */ var lte = createRelationalOperation(function(value, other) {
            return value <= other;
        });
        /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */ function toArray(value) {
            if (!value) return [];
            if (isArrayLike(value)) return isString(value) ? stringToArray(value) : copyArray(value);
            if (symIterator && value[symIterator]) return iteratorToArray(value[symIterator]());
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values1;
            return func(value);
        }
        /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */ function toFinite(value) {
            if (!value) return value === 0 ? value : 0;
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }
        /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */ function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
        }
        /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */ function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */ function toNumber(value) {
            if (typeof value == 'number') return value;
            if (isSymbol(value)) return NAN;
            if (isObject(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject(other) ? other + '' : other;
            }
            if (typeof value != 'string') return value === 0 ? value : +value;
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */ function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */ function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */ function toString(value) {
            return value == null ? '' : baseToString(value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */ var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
            }
            for(var key in source)if (hasOwnProperty.call(source, key)) assignValue(object, key, source[key]);
        });
        /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */ var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
        });
        /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
        });
        /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
        });
        /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */ var at = flatRest(baseAt);
        /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */ function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties == null ? result : baseAssign(result, properties);
        }
        /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var defaults = baseRest(function(object, sources) {
            object = Object(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) length = 1;
            while(++index < length){
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;
                while(++propsIndex < propsLength){
                    var key = props[propsIndex];
                    var value = object[key];
                    if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) object[key] = source[key];
                }
            }
            return object;
        });
        /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */ var defaultsDeep = baseRest(function(args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
        });
        /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */ function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */ function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */ function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */ function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */ function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
        /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */ function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
        }
        /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */ function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */ function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */ function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */ function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */ var invert = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != 'function') value = nativeObjectToString.call(value);
            result[value] = key;
        }, constant(identity));
        /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */ var invertBy = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != 'function') value = nativeObjectToString.call(value);
            if (hasOwnProperty.call(result, value)) result[value].push(key);
            else result[value] = [
                key
            ];
        }, getIteratee);
        /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */ var invoke = baseRest(baseInvoke);
        /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */ function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */ function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */ function mapKeys(object2, iteratee) {
            var result = {
            };
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object2, function(value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
        }
        /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */ function mapValues(object3, iteratee) {
            var result = {
            };
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object3, function(value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        }
        /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */ var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        });
        /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */ var omit = flatRest(function(object, paths) {
            var result = {
            };
            if (object == null) return result;
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
            });
            copyObject(object, getAllKeysIn(object), result);
            if (isDeep) result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            var length = paths.length;
            while(length--)baseUnset(result, paths[length]);
            return result;
        });
        /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */ function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
        }
        /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */ var pick = flatRest(function(object, paths) {
            return object == null ? {
            } : basePick(object, paths);
        });
        /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */ function pickBy(object, predicate) {
            if (object == null) return {
            };
            var props = arrayMap(getAllKeysIn(object), function(prop) {
                return [
                    prop
                ];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
                return predicate(value, path[0]);
            });
        }
        /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */ function result1(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            // Ensure the loop is entered when path is empty.
            if (!length) {
                length = 1;
                object = undefined;
            }
            while(++index < length){
                var value = object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        }
        /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */ function set1(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
        }
        /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */ function setWith(object, path, value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
        }
        /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */ var toPairs = createToPairs(keys);
        /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */ var toPairsIn = createToPairs(keysIn);
        /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */ function transform1(object4, iteratee, accumulator) {
            var isArr = isArray(object4), isArrLike = isArr || isBuffer(object4) || isTypedArray(object4);
            iteratee = getIteratee(iteratee, 4);
            if (accumulator == null) {
                var Ctor = object4 && object4.constructor;
                if (isArrLike) accumulator = isArr ? new Ctor : [];
                else if (isObject(object4)) accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object4)) : {
                };
                else accumulator = {
                };
            }
            (isArrLike ? arrayEach : baseForOwn)(object4, function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */ function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
        }
        /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */ function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */ function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */ function values1(object) {
            return object == null ? [] : baseValues(object, keys(object));
        }
        /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */ function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
        }
        /*------------------------------------------------------------------------*/ /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */ function clamp(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
        }
        /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */ function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
                end = start;
                start = 0;
            } else end = toFinite(end);
            number = toNumber(number);
            return baseInRange(number, start, end);
        }
        /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */ function random(lower, upper, floating) {
            if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) upper = floating = undefined;
            if (floating === undefined) {
                if (typeof upper == 'boolean') {
                    floating = upper;
                    upper = undefined;
                } else if (typeof lower == 'boolean') {
                    floating = lower;
                    lower = undefined;
                }
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else upper = toFinite(upper);
            }
            if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
            }
            return baseRandom(lower, upper);
        }
        /*------------------------------------------------------------------------*/ /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */ var camelCase = createCompounder(function(result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */ function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */ function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }
        /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */ function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
        }
        /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */ function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */ function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
        }
        /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */ var kebabCase = createCompounder(function(result, word, index) {
            return result + (index ? '-' : '') + word.toLowerCase();
        });
        /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */ var lowerCase = createCompounder(function(result, word, index) {
            return result + (index ? ' ' : '') + word.toLowerCase();
        });
        /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */ var lowerFirst = createCaseFirst('toLowerCase');
        /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */ function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) return string;
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */ function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */ function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */ function parseInt(string, radix, guard) {
            if (guard || radix == null) radix = 0;
            else if (radix) radix = +radix;
            return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }
        /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */ function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            return baseRepeat(toString(string), n);
        }
        /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */ function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */ var snakeCase = createCompounder(function(result, word, index) {
            return result + (index ? '_' : '') + word.toLowerCase();
        });
        /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */ function split(string, separator, limit) {
            if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) separator = limit = undefined;
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) return [];
            string = toString(string);
            if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) return castSlice(stringToArray(string), 0, limit);
            }
            return string.split(separator, limit);
        }
        /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */ var startCase = createCompounder(function(result, word, index) {
            return result + (index ? ' ' : '') + upperFirst(word);
        });
        /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */ function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
        }
        /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */ function template(string, options, guard) {
            // Based on John Resig's `tmpl` implementation
            // (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) options = undefined;
            string = toString(string);
            options = assignInWith({
            }, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({
            }, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            // Compile the regexp to match each delimiter.
            var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
            // Use a sourceURL for easier debugging.
            // The sourceURL gets injected into the source that's eval-ed, so be careful
            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
            // and escape the comment, thus injecting code that gets evaled.
            var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/\s/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                // Escape characters that can't be included in string literals.
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                // Replace delimiters with snippets.
                if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                index = offset + match.length;
                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match;
            });
            source += "';\n";
            // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.
            var variable = hasOwnProperty.call(options, 'variable') && options.variable;
            if (!variable) source = 'with (obj) {\n' + source + '\n}\n';
            else if (reForbiddenIdentifierChars.test(variable)) throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
            // Cleanup code by stripping empty strings.
            source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
            // Frame code as the function body.
            source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
            var result = attempt(function() {
                return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
            });
            // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.
            result.source = source;
            if (isError(result)) throw result;
            return result;
        }
        /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */ function toLower(value) {
            return toString(value).toLowerCase();
        }
        /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */ function toUpper(value) {
            return toString(value).toUpperCase();
        }
        /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */ function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return baseTrim(string);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join('');
        }
        /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */ function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.slice(0, trimmedEndIndex(string) + 1);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join('');
        }
        /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */ function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.replace(reTrimStart, '');
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join('');
        }
        /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */ function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
                var separator = 'separator' in options ? options.separator : separator;
                length = 'length' in options ? toInteger(options.length) : length;
                omission = 'omission' in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (length >= strLength) return string;
            var end = length - stringSize(omission);
            if (end < 1) return omission;
            var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);
            if (separator === undefined) return result + omission;
            if (strSymbols) end += result.length - end;
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    if (!separator.global) separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                    separator.lastIndex = 0;
                    while(match = separator.exec(substring))var newEnd = match.index;
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) result = result.slice(0, index);
            }
            return result + omission;
        }
        /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */ function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */ var upperCase = createCompounder(function(result, word, index) {
            return result + (index ? ' ' : '') + word.toUpperCase();
        });
        /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */ var upperFirst = createCaseFirst('toUpperCase');
        /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */ function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;
            if (pattern === undefined) return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            return string.match(pattern) || [];
        }
        /*------------------------------------------------------------------------*/ /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */ var attempt = baseRest(function(func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        });
        /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */ var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
        });
        /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */ function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
                if (typeof pair[1] != 'function') throw new TypeError(FUNC_ERROR_TEXT);
                return [
                    toIteratee(pair[0]),
                    pair[1]
                ];
            });
            return baseRest(function(args) {
                var index = -1;
                while(++index < length){
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) return apply(pair[1], this, args);
                }
            });
        }
        /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */ function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */ function constant(value) {
            return function() {
                return value;
            };
        }
        /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */ function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
        }
        /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */ var flow = createFlow();
        /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */ var flowRight = createFlow(true);
        /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */ function identity(value) {
            return value;
        }
        /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */ function iteratee1(func) {
            return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */ var method = baseRest(function(path, args) {
            return function(object) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */ var methodOf = baseRest(function(object, args) {
            return function(path) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */ function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = !(isObject(options) && 'chain' in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) object.prototype[methodName] = function() {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                        var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                        actions.push({
                            'func': func,
                            'args': arguments,
                            'thisArg': object
                        });
                        result.__chain__ = chainAll;
                        return result;
                    }
                    return func.apply(object, arrayPush([
                        this.value()
                    ], arguments));
                };
            });
            return object;
        }
        /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */ function noConflict() {
            if (root._ === this) root._ = oldDash;
            return this;
        }
        /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */ function noop() {
        // No operation performed.
        }
        /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */ function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
                return baseNth(args, n);
            });
        }
        /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */ var over = createOver(arrayMap);
        /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */ var overEvery = createOver(arrayEvery);
        /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */ var overSome = createOver(arraySome);
        /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */ function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */ function propertyOf(object) {
            return function(path) {
                return object == null ? undefined : baseGet(object, path);
            };
        }
        /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */ var range = createRange();
        /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */ var rangeRight = createRange(true);
        /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */ function stubArray() {
            return [];
        }
        /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */ function stubFalse() {
            return false;
        }
        /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */ function stubObject() {
            return {
            };
        }
        /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */ function stubString() {
            return '';
        }
        /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */ function stubTrue() {
            return true;
        }
        /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */ function times(n, iteratee) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) return [];
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);
            while(++index < n)iteratee(index);
            return result;
        }
        /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */ function toPath(value) {
            if (isArray(value)) return arrayMap(value, toKey);
            return isSymbol(value) ? [
                value
            ] : copyArray(stringToPath(toString(value)));
        }
        /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */ function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        /*------------------------------------------------------------------------*/ /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */ var add = createMathOperation(function(augend, addend) {
            return augend + addend;
        }, 0);
        /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */ var ceil = createRound('ceil');
        /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */ var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
        }, 1);
        /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */ var floor = createRound('floor');
        /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */ function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */ function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
        }
        /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */ function mean(array) {
            return baseMean(array, identity);
        }
        /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */ function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
        }
        /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */ function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */ function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
        }
        /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */ var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
        }, 1);
        /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */ var round = createRound('round');
        /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */ var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
        }, 0);
        /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */ function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        }
        /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */ function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
        }
        /*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary1;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain1;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee1;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map1;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set1;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform1;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values1;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);
        /*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone1;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes1;
        lodash.indexOf = indexOf1;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result1;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size1;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
            var source = {
            };
            baseForOwn(lodash, function(func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) source[methodName] = func;
            });
            return source;
        }(), {
            'chain': false
        });
        /*------------------------------------------------------------------------*/ /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */ lodash.VERSION = VERSION;
        // Assign default placeholders.
        arrayEach([
            'bind',
            'bindKey',
            'curry',
            'curryRight',
            'partial',
            'partialRight'
        ], function(methodName) {
            lodash[methodName].placeholder = lodash;
        });
        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach([
            'drop',
            'take'
        ], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                if (result.__filtered__) result.__takeCount__ = nativeMin(n, result.__takeCount__);
                else result.__views__.push({
                    'size': nativeMin(n, MAX_ARRAY_LENGTH),
                    'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                });
                return result;
            };
            LazyWrapper.prototype[methodName + 'Right'] = function(n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach([
            'filter',
            'map',
            'takeWhile'
        ], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    'iteratee': getIteratee(iteratee, 3),
                    'type': type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach([
            'head',
            'last'
        ], function(methodName, index) {
            var takeName = 'take' + (index ? 'Right' : '');
            LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
            };
        });
        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach([
            'initial',
            'tail'
        ], function(methodName, index) {
            var dropName = 'drop' + (index ? '' : 'Right');
            LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == 'function') return new LazyWrapper(this);
            return this.map(function(value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) return new LazyWrapper(result);
            if (start < 0) result = result.takeRight(-start);
            else if (start) result = result.drop(start);
            if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
        };
        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) return;
            lodash.prototype[methodName] = function() {
                var value1 = this.__wrapped__, args = isTaker ? [
                    1
                ] : arguments, isLazy = value1 instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value1);
                var interceptor = function(value) {
                    var result = lodashFunc.apply(lodash, arrayPush([
                        value
                    ], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) // Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = false;
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value1 = onlyLazy ? value1 : new LazyWrapper(this);
                    var result3 = func.apply(value1, args);
                    result3.__actions__.push({
                        'func': thru,
                        'args': [
                            interceptor
                        ],
                        'thisArg': undefined
                    });
                    return new LodashWrapper(result3, chainAll);
                }
                if (isUnwrapped && onlyLazy) return func.apply(this, args);
                result3 = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result3.value()[0] : result3.value() : result3;
            };
        });
        // Add `Array` methods to `lodash.prototype`.
        arrayEach([
            'pop',
            'push',
            'shift',
            'sort',
            'splice',
            'unshift'
        ], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function(value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
            };
        });
        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + '';
                if (!hasOwnProperty.call(realNames, key)) realNames[key] = [];
                realNames[key].push({
                    'name': methodName,
                    'func': lodashFunc
                });
            }
        });
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
            {
                'name': 'wrapper',
                'func': undefined
            }
        ];
        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) lodash.prototype[symIterator] = wrapperToIterator;
        return lodash;
    };
    /*--------------------------------------------------------------------------*/ // Export lodash.
    var _ = runInContext1();
    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        // Expose Lodash on the global object to prevent errors when Lodash is
        // loaded by a script tag in the presence of an AMD loader.
        // See http://requirejs.org/docs/errors.html#mismatch for more details.
        // Use `_.noConflict` to remove Lodash from the global object.
        root._ = _;
        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
            return _;
        });
    } else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
    } else // Export to the global object.
    root._ = _;
}).call(this);

},{}],"7O0Hq":[function(require,module,exports) {
!function(r, t) {
    "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define([
        "exports"
    ], t) : t((r = "undefined" != typeof globalThis ? globalThis : r || self).ss = {
    });
}(this, function(r1) {
    "use strict";
    function t1(r) {
        if (0 === r.length) return 0;
        for(var t, n = r[0], e = 0, a = 1; a < r.length; a++)t = n + r[a], Math.abs(n) >= Math.abs(r[a]) ? e += n - t + r[a] : e += r[a] - t + n, n = t;
        return n + e;
    }
    function n1(r) {
        if (0 === r.length) throw new Error("mean requires at least one data point");
        return t1(r) / r.length;
    }
    function e1(r, t) {
        var e, a, o = n1(r), i = 0;
        if (2 === t) for(a = 0; a < r.length; a++)i += (e = r[a] - o) * e;
        else for(a = 0; a < r.length; a++)i += Math.pow(r[a] - o, t);
        return i;
    }
    function a1(r) {
        if (0 === r.length) throw new Error("variance requires at least one data point");
        return e1(r, 2) / r.length;
    }
    function o1(r) {
        if (1 === r.length) return 0;
        var t = a1(r);
        return Math.sqrt(t);
    }
    function i1(r) {
        if (0 === r.length) throw new Error("mode requires at least one data point");
        if (1 === r.length) return r[0];
        for(var t = r[0], n = NaN, e = 0, a = 1, o = 1; o < r.length + 1; o++)r[o] !== t ? (a > e && (e = a, n = t), a = 1, t = r[o]) : a++;
        return n;
    }
    function u1(r2) {
        return r2.slice().sort(function(r, t) {
            return r - t;
        });
    }
    function h1(r) {
        if (0 === r.length) throw new Error("min requires at least one data point");
        for(var t = r[0], n = 1; n < r.length; n++)r[n] < t && (t = r[n]);
        return t;
    }
    function f1(r) {
        if (0 === r.length) throw new Error("max requires at least one data point");
        for(var t = r[0], n = 1; n < r.length; n++)r[n] > t && (t = r[n]);
        return t;
    }
    function l1(r) {
        for(var t = 0, n = 0; n < r.length; n++)t += r[n];
        return t;
    }
    function s1(r, t) {
        var n = r.length * t;
        if (0 === r.length) throw new Error("quantile requires at least one data point.");
        if (t < 0 || t > 1) throw new Error("quantiles must be between 0 and 1");
        return 1 === t ? r[r.length - 1] : 0 === t ? r[0] : n % 1 != 0 ? r[Math.ceil(n) - 1] : r.length % 2 == 0 ? (r[n - 1] + r[n]) / 2 : r[n];
    }
    function c1(r, t, n, e) {
        for(n = n || 0, e = e || r.length - 1; e > n;){
            if (e - n > 600) {
                var a = e - n + 1, o = t - n + 1, i = Math.log(a), u = 0.5 * Math.exp(2 * i / 3), h = 0.5 * Math.sqrt(i * u * (a - u) / a);
                o - a / 2 < 0 && (h *= -1), c1(r, t, Math.max(n, Math.floor(t - o * u / a + h)), Math.min(e, Math.floor(t + (a - o) * u / a + h)));
            }
            var f = r[t], l = n, s = e;
            for(g1(r, n, t), r[e] > f && g1(r, n, e); l < s;){
                for(g1(r, l, s), l++, s--; r[l] < f;)l++;
                for(; r[s] > f;)s--;
            }
            r[n] === f ? g1(r, n, s) : g1(r, ++s, e), s <= t && (n = s + 1), t <= s && (e = s - 1);
        }
    }
    function g1(r, t, n) {
        var e = r[t];
        r[t] = r[n], r[n] = e;
    }
    function v1(r3, t2) {
        var n2 = r3.slice();
        if (Array.isArray(t2)) {
            !function(r, t) {
                for(var n = [
                    0
                ], e = 0; e < t.length; e++)n.push(w1(r.length, t[e]));
                n.push(r.length - 1), n.sort(m1);
                var a = [
                    0,
                    n.length - 1
                ];
                for(; a.length;){
                    var o = Math.ceil(a.pop()), i = Math.floor(a.pop());
                    if (!(o - i <= 1)) {
                        var u = Math.floor((i + o) / 2);
                        p1(r, n[u], Math.floor(n[i]), Math.ceil(n[o])), a.push(i, u, u, o);
                    }
                }
            }(n2, t2);
            for(var e2 = [], a2 = 0; a2 < t2.length; a2++)e2[a2] = s1(n2, t2[a2]);
            return e2;
        }
        return p1(n2, w1(n2.length, t2), 0, n2.length - 1), s1(n2, t2);
    }
    function p1(r, t, n, e) {
        t % 1 == 0 ? c1(r, t, n, e) : (c1(r, t = Math.floor(t), n, e), c1(r, t + 1, t + 1, e));
    }
    function m1(r, t) {
        return r - t;
    }
    function w1(r, t) {
        var n = r * t;
        return 1 === t ? r - 1 : 0 === t ? 0 : n % 1 != 0 ? Math.ceil(n) - 1 : r % 2 == 0 ? n - 0.5 : n;
    }
    function M(r4, t3) {
        if (t3 < r4[0]) return 0;
        if (t3 > r4[r4.length - 1]) return 1;
        var n3 = function(r, t) {
            var n = 0, e = 0, a = r.length;
            for(; e < a;)t <= r[n = e + a >>> 1] ? a = n : e = -~n;
            return e;
        }(r4, t3);
        if (r4[n3] !== t3) return n3 / r4.length;
        n3++;
        var e3 = function(r, t) {
            var n = 0, e = 0, a = r.length;
            for(; e < a;)t >= r[n = e + a >>> 1] ? e = -~n : a = n;
            return e;
        }(r4, t3);
        if (e3 === n3) return n3 / r4.length;
        var a3 = e3 - n3 + 1;
        return a3 * (e3 + n3) / 2 / a3 / r4.length;
    }
    function d(r) {
        var t = v1(r, 0.75), n = v1(r, 0.25);
        if ("number" == typeof t && "number" == typeof n) return t - n;
    }
    function b(r) {
        return +v1(r, 0.5);
    }
    function q(r) {
        for(var t = b(r), n = [], e = 0; e < r.length; e++)n.push(Math.abs(r[e] - t));
        return b(n);
    }
    function E(r, t) {
        t = t || Math.random;
        for(var n, e, a = r.length; a > 0;)e = Math.floor(t() * a--), n = r[a], r[a] = r[e], r[e] = n;
        return r;
    }
    function y(r, t) {
        return E(r.slice(), t);
    }
    function x(r, t, n) {
        return y(r, n).slice(0, t);
    }
    function S(r, t) {
        for(var n = [], e = 0; e < r; e++){
            for(var a = [], o = 0; o < t; o++)a.push(0);
            n.push(a);
        }
        return n;
    }
    function k(r) {
        for(var t, n = 0, e = 0; e < r.length; e++)0 !== e && r[e] === t || (t = r[e], n++);
        return n;
    }
    function A(r, t, n, e) {
        var a;
        if (r > 0) {
            var o = (n[t] - n[r - 1]) / (t - r + 1);
            a = e[t] - e[r - 1] - (t - r + 1) * o * o;
        } else a = e[t] - n[t] * n[t] / (t + 1);
        return a < 0 ? 0 : a;
    }
    function P(r, t, n, e, a, o, i) {
        if (!(r > t)) {
            var u = Math.floor((r + t) / 2);
            e[n][u] = e[n - 1][u - 1], a[n][u] = u;
            var h = n;
            r > n && (h = Math.max(h, a[n][r - 1] || 0)), h = Math.max(h, a[n - 1][u] || 0);
            var f, l, s, c = u - 1;
            t < e[0].length - 1 && (c = Math.min(c, a[n][t + 1] || 0));
            for(var g = c; g >= h && !((f = A(g, u, o, i)) + e[n - 1][h - 1] >= e[n][u]); --g)(l = A(h, u, o, i) + e[n - 1][h - 1]) < e[n][u] && (e[n][u] = l, a[n][u] = h), h++, (s = f + e[n - 1][g - 1]) < e[n][u] && (e[n][u] = s, a[n][u] = g);
            P(r, u - 1, n, e, a, o, i), P(u + 1, t, n, e, a, o, i);
        }
    }
    function I(r, t) {
        if (r.length !== t.length) throw new Error("sampleCovariance requires samples with equal lengths");
        if (r.length < 2) throw new Error("sampleCovariance requires at least two data points in each sample");
        for(var e = n1(r), a = n1(t), o = 0, i = 0; i < r.length; i++)o += (r[i] - e) * (t[i] - a);
        return o / (r.length - 1);
    }
    function C(r) {
        if (r.length < 2) throw new Error("sampleVariance requires at least two data points");
        return e1(r, 2) / (r.length - 1);
    }
    function N(r) {
        var t = C(r);
        return Math.sqrt(t);
    }
    function T(r, t) {
        return I(r, t) / N(r) / N(t);
    }
    function _(r, t, n, e) {
        return (r * t + n * e) / (t + e);
    }
    function D(r) {
        if (0 === r.length) throw new Error("meanSimple requires at least one data point");
        return l1(r) / r.length;
    }
    function R(r) {
        if (0 === r.length) throw new Error("rootMeanSquare requires at least one data point");
        for(var t = 0, n = 0; n < r.length; n++)t += Math.pow(r[n], 2);
        return Math.sqrt(t / r.length);
    }
    var V = function() {
        this.totalCount = 0, this.data = {
        };
    };
    V.prototype.train = function(r, t) {
        for(var n in this.data[t] || (this.data[t] = {
        }), r){
            var e = r[n];
            void 0 === this.data[t][n] && (this.data[t][n] = {
            }), void 0 === this.data[t][n][e] && (this.data[t][n][e] = 0), this.data[t][n][e]++;
        }
        this.totalCount++;
    }, V.prototype.score = function(r) {
        var t, n = {
        };
        for(var e in r){
            var a = r[e];
            for(t in this.data)n[t] = {
            }, this.data[t][e] ? n[t][e + "_" + a] = (this.data[t][e][a] || 0) / this.totalCount : n[t][e + "_" + a] = 0;
        }
        var o = {
        };
        for(t in n)for(var i in o[t] = 0, n[t])o[t] += n[t][i];
        return o;
    };
    var F = function() {
        this.weights = [], this.bias = 0;
    };
    F.prototype.predict = function(r) {
        if (r.length !== this.weights.length) return null;
        for(var t = 0, n = 0; n < this.weights.length; n++)t += this.weights[n] * r[n];
        return (t += this.bias) > 0 ? 1 : 0;
    }, F.prototype.train = function(r, t) {
        if (0 !== t && 1 !== t) return null;
        r.length !== this.weights.length && (this.weights = r, this.bias = 1);
        var n = this.predict(r);
        if ("number" == typeof n && n !== t) {
            for(var e = t - n, a = 0; a < this.weights.length; a++)this.weights[a] += e * r[a];
            this.bias += e;
        }
        return this;
    };
    var L = 0.0001;
    function U(r) {
        if (r < 0) throw new Error("factorial requires a non-negative value");
        if (Math.floor(r) !== r) throw new Error("factorial requires an integer input");
        for(var t = 1, n = 2; n <= r; n++)t *= n;
        return t;
    }
    var z = [
        0.9999999999999971,
        57.15623566586292,
        -59.59796035547549,
        14.136097974741746,
        -0.4919138160976202,
        0.00003399464998481189,
        0.00004652362892704858,
        -0.00009837447530487956,
        0.0001580887032249125,
        -0.00021026444172410488,
        0.00021743961811521265,
        -0.0001643181065367639,
        0.00008441822398385275,
        -0.000026190838401581408,
        0.0000036899182659531625
    ], O = Math.log(Math.sqrt(2 * Math.PI));
    var X = {
        1: {
            0.995: 0,
            0.99: 0,
            0.975: 0,
            0.95: 0,
            0.9: 0.02,
            0.5: 0.45,
            0.1: 2.71,
            0.05: 3.84,
            0.025: 5.02,
            0.01: 6.63,
            0.005: 7.88
        },
        2: {
            0.995: 0.01,
            0.99: 0.02,
            0.975: 0.05,
            0.95: 0.1,
            0.9: 0.21,
            0.5: 1.39,
            0.1: 4.61,
            0.05: 5.99,
            0.025: 7.38,
            0.01: 9.21,
            0.005: 10.6
        },
        3: {
            0.995: 0.07,
            0.99: 0.11,
            0.975: 0.22,
            0.95: 0.35,
            0.9: 0.58,
            0.5: 2.37,
            0.1: 6.25,
            0.05: 7.81,
            0.025: 9.35,
            0.01: 11.34,
            0.005: 12.84
        },
        4: {
            0.995: 0.21,
            0.99: 0.3,
            0.975: 0.48,
            0.95: 0.71,
            0.9: 1.06,
            0.5: 3.36,
            0.1: 7.78,
            0.05: 9.49,
            0.025: 11.14,
            0.01: 13.28,
            0.005: 14.86
        },
        5: {
            0.995: 0.41,
            0.99: 0.55,
            0.975: 0.83,
            0.95: 1.15,
            0.9: 1.61,
            0.5: 4.35,
            0.1: 9.24,
            0.05: 11.07,
            0.025: 12.83,
            0.01: 15.09,
            0.005: 16.75
        },
        6: {
            0.995: 0.68,
            0.99: 0.87,
            0.975: 1.24,
            0.95: 1.64,
            0.9: 2.2,
            0.5: 5.35,
            0.1: 10.65,
            0.05: 12.59,
            0.025: 14.45,
            0.01: 16.81,
            0.005: 18.55
        },
        7: {
            0.995: 0.99,
            0.99: 1.25,
            0.975: 1.69,
            0.95: 2.17,
            0.9: 2.83,
            0.5: 6.35,
            0.1: 12.02,
            0.05: 14.07,
            0.025: 16.01,
            0.01: 18.48,
            0.005: 20.28
        },
        8: {
            0.995: 1.34,
            0.99: 1.65,
            0.975: 2.18,
            0.95: 2.73,
            0.9: 3.49,
            0.5: 7.34,
            0.1: 13.36,
            0.05: 15.51,
            0.025: 17.53,
            0.01: 20.09,
            0.005: 21.96
        },
        9: {
            0.995: 1.73,
            0.99: 2.09,
            0.975: 2.7,
            0.95: 3.33,
            0.9: 4.17,
            0.5: 8.34,
            0.1: 14.68,
            0.05: 16.92,
            0.025: 19.02,
            0.01: 21.67,
            0.005: 23.59
        },
        10: {
            0.995: 2.16,
            0.99: 2.56,
            0.975: 3.25,
            0.95: 3.94,
            0.9: 4.87,
            0.5: 9.34,
            0.1: 15.99,
            0.05: 18.31,
            0.025: 20.48,
            0.01: 23.21,
            0.005: 25.19
        },
        11: {
            0.995: 2.6,
            0.99: 3.05,
            0.975: 3.82,
            0.95: 4.57,
            0.9: 5.58,
            0.5: 10.34,
            0.1: 17.28,
            0.05: 19.68,
            0.025: 21.92,
            0.01: 24.72,
            0.005: 26.76
        },
        12: {
            0.995: 3.07,
            0.99: 3.57,
            0.975: 4.4,
            0.95: 5.23,
            0.9: 6.3,
            0.5: 11.34,
            0.1: 18.55,
            0.05: 21.03,
            0.025: 23.34,
            0.01: 26.22,
            0.005: 28.3
        },
        13: {
            0.995: 3.57,
            0.99: 4.11,
            0.975: 5.01,
            0.95: 5.89,
            0.9: 7.04,
            0.5: 12.34,
            0.1: 19.81,
            0.05: 22.36,
            0.025: 24.74,
            0.01: 27.69,
            0.005: 29.82
        },
        14: {
            0.995: 4.07,
            0.99: 4.66,
            0.975: 5.63,
            0.95: 6.57,
            0.9: 7.79,
            0.5: 13.34,
            0.1: 21.06,
            0.05: 23.68,
            0.025: 26.12,
            0.01: 29.14,
            0.005: 31.32
        },
        15: {
            0.995: 4.6,
            0.99: 5.23,
            0.975: 6.27,
            0.95: 7.26,
            0.9: 8.55,
            0.5: 14.34,
            0.1: 22.31,
            0.05: 25,
            0.025: 27.49,
            0.01: 30.58,
            0.005: 32.8
        },
        16: {
            0.995: 5.14,
            0.99: 5.81,
            0.975: 6.91,
            0.95: 7.96,
            0.9: 9.31,
            0.5: 15.34,
            0.1: 23.54,
            0.05: 26.3,
            0.025: 28.85,
            0.01: 32,
            0.005: 34.27
        },
        17: {
            0.995: 5.7,
            0.99: 6.41,
            0.975: 7.56,
            0.95: 8.67,
            0.9: 10.09,
            0.5: 16.34,
            0.1: 24.77,
            0.05: 27.59,
            0.025: 30.19,
            0.01: 33.41,
            0.005: 35.72
        },
        18: {
            0.995: 6.26,
            0.99: 7.01,
            0.975: 8.23,
            0.95: 9.39,
            0.9: 10.87,
            0.5: 17.34,
            0.1: 25.99,
            0.05: 28.87,
            0.025: 31.53,
            0.01: 34.81,
            0.005: 37.16
        },
        19: {
            0.995: 6.84,
            0.99: 7.63,
            0.975: 8.91,
            0.95: 10.12,
            0.9: 11.65,
            0.5: 18.34,
            0.1: 27.2,
            0.05: 30.14,
            0.025: 32.85,
            0.01: 36.19,
            0.005: 38.58
        },
        20: {
            0.995: 7.43,
            0.99: 8.26,
            0.975: 9.59,
            0.95: 10.85,
            0.9: 12.44,
            0.5: 19.34,
            0.1: 28.41,
            0.05: 31.41,
            0.025: 34.17,
            0.01: 37.57,
            0.005: 40
        },
        21: {
            0.995: 8.03,
            0.99: 8.9,
            0.975: 10.28,
            0.95: 11.59,
            0.9: 13.24,
            0.5: 20.34,
            0.1: 29.62,
            0.05: 32.67,
            0.025: 35.48,
            0.01: 38.93,
            0.005: 41.4
        },
        22: {
            0.995: 8.64,
            0.99: 9.54,
            0.975: 10.98,
            0.95: 12.34,
            0.9: 14.04,
            0.5: 21.34,
            0.1: 30.81,
            0.05: 33.92,
            0.025: 36.78,
            0.01: 40.29,
            0.005: 42.8
        },
        23: {
            0.995: 9.26,
            0.99: 10.2,
            0.975: 11.69,
            0.95: 13.09,
            0.9: 14.85,
            0.5: 22.34,
            0.1: 32.01,
            0.05: 35.17,
            0.025: 38.08,
            0.01: 41.64,
            0.005: 44.18
        },
        24: {
            0.995: 9.89,
            0.99: 10.86,
            0.975: 12.4,
            0.95: 13.85,
            0.9: 15.66,
            0.5: 23.34,
            0.1: 33.2,
            0.05: 36.42,
            0.025: 39.36,
            0.01: 42.98,
            0.005: 45.56
        },
        25: {
            0.995: 10.52,
            0.99: 11.52,
            0.975: 13.12,
            0.95: 14.61,
            0.9: 16.47,
            0.5: 24.34,
            0.1: 34.28,
            0.05: 37.65,
            0.025: 40.65,
            0.01: 44.31,
            0.005: 46.93
        },
        26: {
            0.995: 11.16,
            0.99: 12.2,
            0.975: 13.84,
            0.95: 15.38,
            0.9: 17.29,
            0.5: 25.34,
            0.1: 35.56,
            0.05: 38.89,
            0.025: 41.92,
            0.01: 45.64,
            0.005: 48.29
        },
        27: {
            0.995: 11.81,
            0.99: 12.88,
            0.975: 14.57,
            0.95: 16.15,
            0.9: 18.11,
            0.5: 26.34,
            0.1: 36.74,
            0.05: 40.11,
            0.025: 43.19,
            0.01: 46.96,
            0.005: 49.65
        },
        28: {
            0.995: 12.46,
            0.99: 13.57,
            0.975: 15.31,
            0.95: 16.93,
            0.9: 18.94,
            0.5: 27.34,
            0.1: 37.92,
            0.05: 41.34,
            0.025: 44.46,
            0.01: 48.28,
            0.005: 50.99
        },
        29: {
            0.995: 13.12,
            0.99: 14.26,
            0.975: 16.05,
            0.95: 17.71,
            0.9: 19.77,
            0.5: 28.34,
            0.1: 39.09,
            0.05: 42.56,
            0.025: 45.72,
            0.01: 49.59,
            0.005: 52.34
        },
        30: {
            0.995: 13.79,
            0.99: 14.95,
            0.975: 16.79,
            0.95: 18.49,
            0.9: 20.6,
            0.5: 29.34,
            0.1: 40.26,
            0.05: 43.77,
            0.025: 46.98,
            0.01: 50.89,
            0.005: 53.67
        },
        40: {
            0.995: 20.71,
            0.99: 22.16,
            0.975: 24.43,
            0.95: 26.51,
            0.9: 29.05,
            0.5: 39.34,
            0.1: 51.81,
            0.05: 55.76,
            0.025: 59.34,
            0.01: 63.69,
            0.005: 66.77
        },
        50: {
            0.995: 27.99,
            0.99: 29.71,
            0.975: 32.36,
            0.95: 34.76,
            0.9: 37.69,
            0.5: 49.33,
            0.1: 63.17,
            0.05: 67.5,
            0.025: 71.42,
            0.01: 76.15,
            0.005: 79.49
        },
        60: {
            0.995: 35.53,
            0.99: 37.48,
            0.975: 40.48,
            0.95: 43.19,
            0.9: 46.46,
            0.5: 59.33,
            0.1: 74.4,
            0.05: 79.08,
            0.025: 83.3,
            0.01: 88.38,
            0.005: 91.95
        },
        70: {
            0.995: 43.28,
            0.99: 45.44,
            0.975: 48.76,
            0.95: 51.74,
            0.9: 55.33,
            0.5: 69.33,
            0.1: 85.53,
            0.05: 90.53,
            0.025: 95.02,
            0.01: 100.42,
            0.005: 104.22
        },
        80: {
            0.995: 51.17,
            0.99: 53.54,
            0.975: 57.15,
            0.95: 60.39,
            0.9: 64.28,
            0.5: 79.33,
            0.1: 96.58,
            0.05: 101.88,
            0.025: 106.63,
            0.01: 112.33,
            0.005: 116.32
        },
        90: {
            0.995: 59.2,
            0.99: 61.75,
            0.975: 65.65,
            0.95: 69.13,
            0.9: 73.29,
            0.5: 89.33,
            0.1: 107.57,
            0.05: 113.14,
            0.025: 118.14,
            0.01: 124.12,
            0.005: 128.3
        },
        100: {
            0.995: 67.33,
            0.99: 70.06,
            0.975: 74.22,
            0.95: 77.93,
            0.9: 82.36,
            0.5: 99.33,
            0.1: 118.5,
            0.05: 124.34,
            0.025: 129.56,
            0.01: 135.81,
            0.005: 140.17
        }
    };
    var j = Math.sqrt(2 * Math.PI), B = {
        gaussian: function(r) {
            return Math.exp(-0.5 * r * r) / j;
        }
    }, K = {
        nrd: function(r) {
            var t = N(r), n = d(r);
            return "number" == typeof n && (t = Math.min(t, n / 1.34)), 1.06 * t * Math.pow(r.length, -0.2);
        }
    };
    function G(r, t4, n4) {
        var e, a;
        if (void 0 === t4) e = B.gaussian;
        else if ("string" == typeof t4) {
            if (!B[t4]) throw new Error('Unknown kernel "' + t4 + '"');
            e = B[t4];
        } else e = t4;
        if (void 0 === n4) a = K.nrd(r);
        else if ("string" == typeof n4) {
            if (!K[n4]) throw new Error('Unknown bandwidth method "' + n4 + '"');
            a = K[n4](r);
        } else a = n4;
        return function(t) {
            var n = 0, o = 0;
            for(n = 0; n < r.length; n++)o += e((t - r[n]) / a);
            return o / a / r.length;
        };
    }
    var H = Math.sqrt(2 * Math.PI);
    function W(r) {
        for(var t = r, n = r, e = 1; e < 15; e++)t += n *= r * r / (2 * e + 1);
        return Math.round(10000 * (0.5 + t / H * Math.exp(-r * r / 2))) / 10000;
    }
    for(var J = [], Q = 0; Q <= 3.09; Q += 0.01)J.push(W(Q));
    function Y(r) {
        var t = 1 / (1 + 0.5 * Math.abs(r)), n = t * Math.exp(-r * r + ((((((((0.17087277 * t - 0.82215223) * t + 1.48851587) * t - 1.13520398) * t + 0.27886807) * t - 0.18628806) * t + 0.09678418) * t + 0.37409196) * t + 1.00002368) * t - 1.26551223);
        return r >= 0 ? 1 - n : n - 1;
    }
    function Z(r) {
        var t = 8 * (Math.PI - 3) / (3 * Math.PI * (4 - Math.PI)), n = Math.sqrt(Math.sqrt(Math.pow(2 / (Math.PI * t) + Math.log(1 - r * r) / 2, 2) - Math.log(1 - r * r) / t) - (2 / (Math.PI * t) + Math.log(1 - r * r) / 2));
        return r >= 0 ? n : -n;
    }
    function $(r) {
        if ("number" == typeof r) return r < 0 ? -1 : 0 === r ? 0 : 1;
        throw new TypeError("not a number");
    }
    function rr(r, t) {
        for(var n = 0, e = 0; e < r.length; e++){
            var a = r[e] - t[e];
            n += a * a;
        }
        return Math.sqrt(n);
    }
    function tr(r5, t) {
        return r5.map(function(r) {
            for(var n = Number.MAX_VALUE, e = -1, a = 0; a < t.length; a++){
                var o = rr(r, t[a]);
                o < n && (n = o, e = a);
            }
            return e;
        });
    }
    function nr(r, t, n) {
        for(var e = r[0].length, a = S(n, e), o = Array(n).fill(0), i = r.length, u = 0; u < i; u++){
            for(var h = r[u], f = t[u], l = a[f], s = 0; s < e; s++)l[s] += h[s];
            o[f] += 1;
        }
        for(var c = 0; c < n; c++){
            if (0 === o[c]) throw new Error("Centroid " + c + " has no friends");
            for(var g = a[c], v = 0; v < e; v++)g[v] /= o[c];
        }
        return a;
    }
    function er(r, t) {
        for(var n = 0, e = 0; e < r.length; e++)n += rr(r[e], t[e]);
        return n;
    }
    function ar(r6, t5) {
        if (r6.length !== t5.length) throw new Error("must have exactly as many labels as points");
        for(var n5 = function(r) {
            for(var t = 1 + f1(r), n = Array(t), e = 0; e < r.length; e++){
                var a = r[e];
                void 0 === n[a] && (n[a] = []), n[a].push(e);
            }
            return n;
        }(t5), e4 = function(r) {
            for(var t = r.length, n = S(t, t), e = 0; e < t; e++)for(var a = 0; a < e; a++)n[e][a] = rr(r[e], r[a]), n[a][e] = n[e][a];
            return n;
        }(r6), a4 = [], o = 0; o < r6.length; o++){
            var i = 0;
            if (n5[t5[o]].length > 1) {
                var u = ir(o, n5[t5[o]], e4), h = or(o, t5, n5, e4);
                i = (h - u) / Math.max(u, h);
            }
            a4.push(i);
        }
        return a4;
    }
    function or(r, t, n, e) {
        for(var a = t[r], o = Number.MAX_VALUE, i = 0; i < n.length; i++)if (i !== a) {
            var u = ir(r, n[i], e);
            u < o && (o = u);
        }
        return o;
    }
    function ir(r, t, n) {
        for(var e = 0, a = 0; a < t.length; a++)e += n[r][t[a]];
        return e / t.length;
    }
    function ur(r, t) {
        return 0 === r && 0 === t ? 0 : Math.abs((r - t) / t);
    }
    r1.BayesianClassifier = V, r1.PerceptronModel = F, r1.addToMean = function(r, t, n) {
        return r + (n - r) / (t + 1);
    }, r1.approxEqual = function(r, t, n) {
        return void 0 === n && (n = L), ur(r, t) <= n;
    }, r1.average = n1, r1.averageSimple = D, r1.bayesian = V, r1.bernoulliDistribution = function(r) {
        if (r < 0 || r > 1) throw new Error("bernoulliDistribution requires probability to be between 0 and 1 inclusive");
        return [
            1 - r,
            r
        ];
    }, r1.binomialDistribution = function(r, t) {
        if (!(t < 0 || t > 1 || r <= 0 || r % 1 != 0)) {
            var n = 0, e = 0, a = [], o = 1;
            do a[n] = o * Math.pow(t, n) * Math.pow(1 - t, r - n), e += a[n], o = o * (r - ++n + 1) / n;
            while (e < 0.9999)
            return a;
        }
    }, r1.bisect = function(r, t, n, e, a) {
        if ("function" != typeof r) throw new TypeError("func must be a function");
        for(var o = 0; o < e; o++){
            var i = (t + n) / 2;
            if (0 === r(i) || Math.abs((n - t) / 2) < a) return i;
            $(r(i)) === $(r(t)) ? t = i : n = i;
        }
        throw new Error("maximum number of iterations exceeded");
    }, r1.chiSquaredDistributionTable = X, r1.chiSquaredGoodnessOfFit = function(r, t, e) {
        for(var a = 0, o = t(n1(r)), i = [], u = [], h = 0; h < r.length; h++)void 0 === i[r[h]] && (i[r[h]] = 0), i[r[h]]++;
        for(var f = 0; f < i.length; f++)void 0 === i[f] && (i[f] = 0);
        for(var l in o)l in i && (u[+l] = o[l] * r.length);
        for(var s = u.length - 1; s >= 0; s--)u[s] < 3 && (u[s - 1] += u[s], u.pop(), i[s - 1] += i[s], i.pop());
        for(var c = 0; c < i.length; c++)a += Math.pow(i[c] - u[c], 2) / u[c];
        var g = i.length - 1 - 1;
        return X[g][e] < a;
    }, r1.chunk = function(r, t) {
        var n = [];
        if (t < 1) throw new Error("chunk size must be a positive number");
        if (Math.floor(t) !== t) throw new Error("chunk size must be an integer");
        for(var e = 0; e < r.length; e += t)n.push(r.slice(e, e + t));
        return n;
    }, r1.ckmeans = function(r7, t6) {
        if (t6 > r7.length) throw new Error("cannot generate more classes than there are data values");
        var n6 = u1(r7);
        if (1 === k(n6)) return [
            n6
        ];
        var e5 = S(t6, n6.length), a5 = S(t6, n6.length);
        !function(r, t, n) {
            for(var e = t[0].length, a = r[Math.floor(e / 2)], o = [], i = [], u = 0, h = void 0; u < e; ++u)h = r[u] - a, 0 === u ? (o.push(h), i.push(h * h)) : (o.push(o[u - 1] + h), i.push(i[u - 1] + h * h)), t[0][u] = A(0, u, o, i), n[0][u] = 0;
            for(var f = 1; f < t.length; ++f)P(f < t.length - 1 ? f : e - 1, e - 1, f, t, n, o, i);
        }(n6, e5, a5);
        for(var o2 = [], i2 = a5[0].length - 1, h2 = a5.length - 1; h2 >= 0; h2--){
            var f2 = a5[h2][i2];
            o2[h2] = n6.slice(f2, i2 + 1), h2 > 0 && (i2 = f2 - 1);
        }
        return o2;
    }, r1.coefficientOfVariation = function(r) {
        return N(r) / n1(r);
    }, r1.combinations = function r(t, n) {
        var e, a, o, i, u = [];
        for(e = 0; e < t.length; e++)if (1 === n) u.push([
            t[e]
        ]);
        else for(o = r(t.slice(e + 1, t.length), n - 1), a = 0; a < o.length; a++)(i = o[a]).unshift(t[e]), u.push(i);
        return u;
    }, r1.combinationsReplacement = function r(t, n) {
        for(var e = [], a = 0; a < t.length; a++)if (1 === n) e.push([
            t[a]
        ]);
        else for(var o = r(t.slice(a, t.length), n - 1), i = 0; i < o.length; i++)e.push([
            t[a]
        ].concat(o[i]));
        return e;
    }, r1.combineMeans = _, r1.combineVariances = function(r, t, n, e, a, o) {
        var i = _(t, n, a, o);
        return (n * (r + Math.pow(t - i, 2)) + o * (e + Math.pow(a - i, 2))) / (n + o);
    }, r1.cumulativeStdLogisticProbability = function(r) {
        return 1 / (Math.exp(-r) + 1);
    }, r1.cumulativeStdNormalProbability = function(r) {
        var t = Math.abs(r), n = Math.min(Math.round(100 * t), J.length - 1);
        return r >= 0 ? J[n] : +(1 - J[n]).toFixed(4);
    }, r1.epsilon = L, r1.equalIntervalBreaks = function(r, t) {
        if (r.length < 2) return r;
        for(var n = h1(r), e = f1(r), a = [
            n
        ], o = (e - n) / t, i = 1; i < t; i++)a.push(a[0] + o * i);
        return a.push(e), a;
    }, r1.erf = Y, r1.errorFunction = Y, r1.extent = function(r) {
        if (0 === r.length) throw new Error("extent requires at least one data point");
        for(var t = r[0], n = r[0], e = 1; e < r.length; e++)r[e] > n && (n = r[e]), r[e] < t && (t = r[e]);
        return [
            t,
            n
        ];
    }, r1.extentSorted = function(r) {
        return [
            r[0],
            r[r.length - 1]
        ];
    }, r1.factorial = U, r1.gamma = function r(t) {
        if (Number.isInteger(t)) return t <= 0 ? NaN : U(t - 1);
        if (--t < 0) return Math.PI / (Math.sin(Math.PI * -t) * r(-t));
        var n = t + 1 / 4;
        return Math.pow(t / Math.E, t) * Math.sqrt(2 * Math.PI * (t + 1 / 6)) * (1 + 1 / 144 / Math.pow(n, 2) - 1 / 12960 / Math.pow(n, 3) - 257 / 207360 / Math.pow(n, 4) - 52 / 2612736 / Math.pow(n, 5) + 5741173 / 9405849600 / Math.pow(n, 6) + 37529 / 18811699200 / Math.pow(n, 7));
    }, r1.gammaln = function(r) {
        if (r <= 0) return 1 / 0;
        r--;
        for(var t = z[0], n = 1; n < 15; n++)t += z[n] / (r + n);
        var e = 5.2421875 + r;
        return O + Math.log(t) - e + (r + 0.5) * Math.log(e);
    }, r1.geometricMean = function(r) {
        if (0 === r.length) throw new Error("geometricMean requires at least one data point");
        for(var t = 1, n = 0; n < r.length; n++){
            if (r[n] < 0) throw new Error("geometricMean requires only non-negative numbers as input");
            t *= r[n];
        }
        return Math.pow(t, 1 / r.length);
    }, r1.harmonicMean = function(r) {
        if (0 === r.length) throw new Error("harmonicMean requires at least one data point");
        for(var t = 0, n = 0; n < r.length; n++){
            if (r[n] <= 0) throw new Error("harmonicMean requires only positive numbers as input");
            t += 1 / r[n];
        }
        return r.length / t;
    }, r1.interquartileRange = d, r1.inverseErrorFunction = Z, r1.iqr = d, r1.kMeansCluster = function(r, t, n) {
        void 0 === n && (n = Math.random);
        for(var e = null, a = x(r, t, n), o = null, i = Number.MAX_VALUE; 0 !== i;)e = a, i = er(a = nr(r, o = tr(r, a), t), e);
        return {
            labels: o,
            centroids: a
        };
    }, r1.kde = G, r1.kernelDensityEstimation = G, r1.linearRegression = function(r) {
        var t, n, e = r.length;
        if (1 === e) t = 0, n = r[0][1];
        else {
            for(var a, o, i, u = 0, h = 0, f = 0, l = 0, s = 0; s < e; s++)u += o = (a = r[s])[0], h += i = a[1], f += o * o, l += o * i;
            n = h / e - (t = (e * l - u * h) / (e * f - u * u)) * u / e;
        }
        return {
            m: t,
            b: n
        };
    }, r1.linearRegressionLine = function(r) {
        return function(t) {
            return r.b + r.m * t;
        };
    }, r1.logAverage = function(r) {
        if (0 === r.length) throw new Error("logAverage requires at least one data point");
        for(var t = 0, n = 0; n < r.length; n++){
            if (r[n] < 0) throw new Error("logAverage requires only non-negative numbers as input");
            t += Math.log(r[n]);
        }
        return Math.exp(t / r.length);
    }, r1.logit = function(r) {
        if (r <= 0 || r >= 1) throw new Error("p must be strictly between zero and one");
        return Math.log(r / (1 - r));
    }, r1.mad = q, r1.max = f1, r1.maxSorted = function(r) {
        return r[r.length - 1];
    }, r1.mean = n1, r1.meanSimple = D, r1.median = b, r1.medianAbsoluteDeviation = q, r1.medianSorted = function(r) {
        return s1(r, 0.5);
    }, r1.min = h1, r1.minSorted = function(r) {
        return r[0];
    }, r1.mode = function(r) {
        return i1(u1(r));
    }, r1.modeFast = function(r) {
        for(var t, n = new Map, e = 0, a = 0; a < r.length; a++){
            var o = n.get(r[a]);
            void 0 === o ? o = 1 : o++, o > e && (t = r[a], e = o), n.set(r[a], o);
        }
        if (0 === e) throw new Error("mode requires at last one data point");
        return t;
    }, r1.modeSorted = i1, r1.numericSort = u1, r1.perceptron = F, r1.permutationTest = function(r, t, e, a, o) {
        if (void 0 === a && (a = 10000), void 0 === e && (e = "two_side"), "two_side" !== e && "greater" !== e && "less" !== e) throw new Error("`alternative` must be either 'two_side', 'greater', or 'less'");
        for(var i = n1(r) - n1(t), u = new Array(a), h = r.concat(t), f = Math.floor(h.length / 2), l = 0; l < a; l++){
            E(h, o);
            var s = h.slice(0, f), c = h.slice(f, h.length), g = n1(s) - n1(c);
            u[l] = g;
        }
        var v = 0;
        if ("two_side" === e) for(var p = 0; p <= a; p++)Math.abs(u[p]) >= Math.abs(i) && (v += 1);
        else if ("greater" === e) for(var m = 0; m <= a; m++)u[m] >= i && (v += 1);
        else for(var w = 0; w <= a; w++)u[w] <= i && (v += 1);
        return v / a;
    }, r1.permutationsHeap = function(r) {
        for(var t = new Array(r.length), n = [
            r.slice()
        ], e = 0; e < r.length; e++)t[e] = 0;
        for(var a = 0; a < r.length;)if (t[a] < a) {
            var o = 0;
            a % 2 != 0 && (o = t[a]);
            var i = r[o];
            r[o] = r[a], r[a] = i, n.push(r.slice()), t[a]++, a = 0;
        } else t[a] = 0, a++;
        return n;
    }, r1.poissonDistribution = function(r) {
        if (!(r <= 0)) {
            var t = 0, n = 0, e = [], a = 1;
            do e[t] = Math.exp(-r) * Math.pow(r, t) / a, n += e[t], a *= ++t;
            while (n < 0.9999)
            return e;
        }
    }, r1.probit = function(r) {
        return 0 === r ? r = L : r >= 1 && (r = 0.9999), Math.sqrt(2) * Z(2 * r - 1);
    }, r1.product = function(r) {
        for(var t = 1, n = 0; n < r.length; n++)t *= r[n];
        return t;
    }, r1.quantile = v1, r1.quantileRank = function(r, t) {
        return M(u1(r), t);
    }, r1.quantileRankSorted = M, r1.quantileSorted = s1, r1.quickselect = c1, r1.rSquared = function(r, t) {
        if (r.length < 2) return 1;
        for(var n = 0, e = 0; e < r.length; e++)n += r[e][1];
        for(var a = n / r.length, o = 0, i = 0; i < r.length; i++)o += Math.pow(a - r[i][1], 2);
        for(var u = 0, h = 0; h < r.length; h++)u += Math.pow(r[h][1] - t(r[h][0]), 2);
        return 1 - u / o;
    }, r1.relativeError = ur, r1.rms = R, r1.rootMeanSquare = R, r1.sample = x, r1.sampleCorrelation = T, r1.sampleCovariance = I, r1.sampleKurtosis = function(r) {
        var t = r.length;
        if (t < 4) throw new Error("sampleKurtosis requires at least four data points");
        for(var e, a = n1(r), o = 0, i = 0, u = 0; u < t; u++)o += (e = r[u] - a) * e, i += e * e * e * e;
        return (t - 1) / ((t - 2) * (t - 3)) * (t * (t + 1) * i / (o * o) - 3 * (t - 1));
    }, r1.sampleRankCorrelation = function(r8, t7) {
        for(var n = r8.map(function(r, t) {
            return [
                r,
                t
            ];
        }).sort(function(r, t) {
            return r[0] - t[0];
        }).map(function(r) {
            return r[1];
        }), e = t7.map(function(r, t) {
            return [
                r,
                t
            ];
        }).sort(function(r, t) {
            return r[0] - t[0];
        }).map(function(r) {
            return r[1];
        }), a = Array(n.length), o = Array(n.length), i = 0; i < n.length; i++)a[n[i]] = i, o[e[i]] = i;
        return T(a, o);
    }, r1.sampleSkewness = function(r) {
        if (r.length < 3) throw new Error("sampleSkewness requires at least three data points");
        for(var t, e = n1(r), a = 0, o = 0, i = 0; i < r.length; i++)a += (t = r[i] - e) * t, o += t * t * t;
        var u = r.length - 1, h = Math.sqrt(a / u), f = r.length;
        return f * o / ((f - 1) * (f - 2) * Math.pow(h, 3));
    }, r1.sampleStandardDeviation = N, r1.sampleVariance = C, r1.sampleWithReplacement = function(r, t, n) {
        if (0 === r.length) return [];
        n = n || Math.random;
        for(var e = r.length, a = [], o = 0; o < t; o++){
            var i = Math.floor(n() * e);
            a.push(r[i]);
        }
        return a;
    }, r1.shuffle = y, r1.shuffleInPlace = E, r1.sign = $, r1.silhouette = ar, r1.silhouetteMetric = function(r, t) {
        return f1(ar(r, t));
    }, r1.standardDeviation = o1, r1.standardNormalTable = J, r1.subtractFromMean = function(r, t, n) {
        return (r * t - n) / (t - 1);
    }, r1.sum = t1, r1.sumNthPowerDeviations = e1, r1.sumSimple = l1, r1.tTest = function(r, t) {
        return (n1(r) - t) / (o1(r) / Math.sqrt(r.length));
    }, r1.tTestTwoSample = function(r, t, e) {
        var a = r.length, o = t.length;
        if (!a || !o) return null;
        e || (e = 0);
        var i = n1(r), u = n1(t), h = C(r), f = C(t);
        if ("number" == typeof i && "number" == typeof u && "number" == typeof h && "number" == typeof f) {
            var l = ((a - 1) * h + (o - 1) * f) / (a + o - 2);
            return (i - u - e) / Math.sqrt(l * (1 / a + 1 / o));
        }
    }, r1.uniqueCountSorted = k, r1.variance = a1, r1.wilcoxonRankSum = function(r9, t8) {
        if (!r9.length || !t8.length) throw new Error("Neither sample can be empty");
        for(var n7 = r9.map(function(r) {
            return {
                label: "x",
                value: r
            };
        }).concat(t8.map(function(r) {
            return {
                label: "y",
                value: r
            };
        })).sort(function(r, t) {
            return r.value - t.value;
        }), e6 = 0; e6 < n7.length; e6++)n7[e6].rank = e6;
        for(var a = [
            n7[0].rank
        ], o = 1; o < n7.length; o++)n7[o].value === n7[o - 1].value ? (a.push(n7[o].rank), o === n7.length - 1 && i(n7, a)) : a.length > 1 ? i(n7, a) : a = [
            n7[o].rank
        ];
        function i(r, t) {
            for(var n = (t[0] + t[t.length - 1]) / 2, e = 0; e < t.length; e++)r[t[e]].rank = n;
        }
        for(var u = 0, h = 0; h < n7.length; h++){
            var f = n7[h];
            "x" === f.label && (u += f.rank + 1);
        }
        return u;
    }, r1.zScore = function(r, t, n) {
        return (r - t) / n;
    }, Object.defineProperty(r1, "__esModule", {
        value: !0
    });
});

},{}],"6SWGe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mainAnyJs = require("./entry/mainAny.js");
parcelHelpers.exportAll(_mainAnyJs, exports);

},{"./entry/mainAny.js":"lihRy","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lihRy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// configuration
parcelHelpers.export(exports, "config", ()=>_configReadonlyJs.config
) // functions and constants
;
parcelHelpers.export(exports, "IndexError", ()=>_indexErrorJs.IndexError
);
parcelHelpers.export(exports, "DimensionError", ()=>_dimensionErrorJs.DimensionError
);
parcelHelpers.export(exports, "ArgumentsError", ()=>_argumentsErrorJs.ArgumentsError
) // dependency groups
;
parcelHelpers.export(exports, "create", ()=>_createJs.create
);
parcelHelpers.export(exports, "factory", ()=>_factoryJs.factory
);
var _configReadonlyJs = require("./configReadonly.js");
var _pureFunctionsAnyGeneratedJs = require("./pureFunctionsAny.generated.js");
parcelHelpers.exportAll(_pureFunctionsAnyGeneratedJs, exports);
var _impureFunctionsAnyGeneratedJs = require("./impureFunctionsAny.generated.js");
parcelHelpers.exportAll(_impureFunctionsAnyGeneratedJs, exports);
var _typeChecksJs = require("./typeChecks.js"); // error classes
parcelHelpers.exportAll(_typeChecksJs, exports);
var _indexErrorJs = require("../error/IndexError.js");
var _dimensionErrorJs = require("../error/DimensionError.js");
var _argumentsErrorJs = require("../error/ArgumentsError.js");
var _dependenciesAnyGeneratedJs = require("./dependenciesAny.generated.js"); // factory functions
parcelHelpers.exportAll(_dependenciesAnyGeneratedJs, exports);
var _factoriesAnyJs = require("../factoriesAny.js"); // core
parcelHelpers.exportAll(_factoriesAnyJs, exports);
var _createJs = require("../core/create.js");
var _factoryJs = require("../utils/factory.js");

},{"./configReadonly.js":"lfECl","./pureFunctionsAny.generated.js":"f3Dk1","./impureFunctionsAny.generated.js":"2XNXv","./typeChecks.js":"bBAmF","../error/IndexError.js":"bCMLn","../error/DimensionError.js":"49REC","../error/ArgumentsError.js":"botyZ","./dependenciesAny.generated.js":"2BTct","../factoriesAny.js":"epPmk","../core/create.js":"hdeGv","../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lfECl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "config", ()=>config
);
var _extends = require("@babel/runtime/helpers/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _configJs = require("../core/config.js");
var _configJs1 = require("../core/function/config.js"); // create a read-only version of config
var config = /* #__PURE__ */ function config(options) {
    if (options) throw new Error("The global config is readonly. \nPlease create a mathjs instance if you want to change the default configuration. \nExample:\n\n  import { create, all } from 'mathjs';\n  const mathjs = create(all);\n  mathjs.config({ number: 'BigNumber' });\n");
    return Object.freeze(_configJs.DEFAULT_CONFIG);
};
_extendsDefault.default(config, _configJs.DEFAULT_CONFIG, {
    MATRIX_OPTIONS: _configJs1.MATRIX_OPTIONS,
    NUMBER_OPTIONS: _configJs1.NUMBER_OPTIONS
});

},{"@babel/runtime/helpers/extends":"gyhTZ","../core/config.js":"jWj50","../core/function/config.js":"5CHjx","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gyhTZ":[function(require,module,exports) {
function _extends() {
    module.exports = _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _extends.apply(this, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"jWj50":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_CONFIG", ()=>DEFAULT_CONFIG
);
var DEFAULT_CONFIG = {
    // minimum relative difference between two compared values,
    // used by all comparison functions
    epsilon: 0.000000000001,
    // type of default matrix output. Choose 'matrix' (default) or 'array'
    matrix: 'Matrix',
    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
    number: 'number',
    // number of significant digits in BigNumbers
    precision: 64,
    // predictable output type of functions. When true, output type depends only
    // on the input types. When false (default), output type can vary depending
    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
    // predictable is false, and returns `NaN` when true.
    predictable: false,
    // random seed for seeded pseudo random number generation
    // null = randomly seed
    randomSeed: null
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ciiiV":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"5CHjx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MATRIX_OPTIONS", ()=>MATRIX_OPTIONS
);
parcelHelpers.export(exports, "NUMBER_OPTIONS", ()=>NUMBER_OPTIONS
);
parcelHelpers.export(exports, "configFactory", ()=>configFactory
);
var _objectJs = require("../../utils/object.js");
var _configJs = require("../config.js");
var MATRIX_OPTIONS = [
    'Matrix',
    'Array'
]; // valid values for option matrix
var NUMBER_OPTIONS = [
    'number',
    'BigNumber',
    'Fraction'
]; // valid values for option number
function configFactory(config, emit) {
    /**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev, changes).
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *
   *     import { create, all } from 'mathjs'
   *
   *     // create a mathjs instance
   *     const math = create(all)
   *
   *     math.config().number                // outputs 'number'
   *     math.evaluate('0.4')                // outputs number 0.4
   *     math.config({number: 'Fraction'})
   *     math.evaluate('0.4')                // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} epsilon
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   *                            {string} randomSeed
   *                              Random seed for seeded pseudo random number generator.
   *                              Set to null to randomly seed.
   * @return {Object} Returns the current configuration
   */ function _config(options) {
        if (options) {
            var prev = _objectJs.mapObject(config, _objectJs.clone); // validate some of the options
            validateOption(options, 'matrix', MATRIX_OPTIONS);
            validateOption(options, 'number', NUMBER_OPTIONS); // merge options
            _objectJs.deepExtend(config, options);
            var curr = _objectJs.mapObject(config, _objectJs.clone);
            var changes = _objectJs.mapObject(options, _objectJs.clone); // emit 'config' event
            emit('config', curr, prev, changes);
            return curr;
        } else return _objectJs.mapObject(config, _objectJs.clone);
    } // attach the valid options to the function so they can be extended
    _config.MATRIX_OPTIONS = MATRIX_OPTIONS;
    _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function
    Object.keys(_configJs.DEFAULT_CONFIG).forEach((key)=>{
        Object.defineProperty(_config, key, {
            get: ()=>config[key]
            ,
            enumerable: true,
            configurable: true
        });
    });
    return _config;
}
/**
 * Test whether an Array contains a specific item.
 * @param {Array.<string>} array
 * @param {string} item
 * @return {boolean}
 */ function contains(array, item) {
    return array.indexOf(item) !== -1;
}
/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */ function validateOption(options, name, values) {
    if (options[name] !== undefined && !contains(values, options[name])) // unknown value
    console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". ' + 'Available options: ' + values.map((value)=>JSON.stringify(value)
    ).join(', ') + '.');
}

},{"../../utils/object.js":"eRHhH","../config.js":"jWj50","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eRHhH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Clone an object
 *
 *     clone(x)
 *
 * Can clone any primitive type, array, and object.
 * If x has a function clone, this function will be invoked to clone the object.
 *
 * @param {*} x
 * @return {*} clone
 */ parcelHelpers.export(exports, "clone", ()=>clone1
);
/**
 * Apply map to all properties of an object
 * @param {Object} object
 * @param {function} callback
 * @return {Object} Returns a copy of the object with mapped properties
 */ parcelHelpers.export(exports, "mapObject", ()=>mapObject
);
/**
 * Extend object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 */ parcelHelpers.export(exports, "extend", ()=>extend
);
/**
 * Deep extend an object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */ parcelHelpers.export(exports, "deepExtend", ()=>deepExtend
);
/**
 * Deep test equality of all fields in two pairs of arrays or objects.
 * Compares values and functions strictly (ie. 2 is not the same as '2').
 * @param {Array | Object} a
 * @param {Array | Object} b
 * @returns {boolean}
 */ parcelHelpers.export(exports, "deepStrictEqual", ()=>deepStrictEqual
);
/**
 * Recursively flatten a nested object.
 * @param {Object} nestedObject
 * @return {Object} Returns the flattened object
 */ parcelHelpers.export(exports, "deepFlatten", ()=>deepFlatten
) // helper function used by deepFlatten
;
/**
 * Test whether the current JavaScript engine supports Object.defineProperty
 * @returns {boolean} returns true if supported
 */ parcelHelpers.export(exports, "canDefineProperty", ()=>canDefineProperty
);
/**
 * Attach a lazy loading property to a constant.
 * The given function `fn` is called once when the property is first requested.
 *
 * @param {Object} object         Object where to add the property
 * @param {string} prop           Property name
 * @param {Function} valueResolver Function returning the property value. Called
 *                                without arguments.
 */ parcelHelpers.export(exports, "lazy", ()=>lazy
);
/**
 * Traverse a path into an object.
 * When a namespace is missing, it will be created
 * @param {Object} object
 * @param {string | string[]} path   A dot separated string like 'name.space'
 * @return {Object} Returns the object at the end of the path
 */ parcelHelpers.export(exports, "traverse", ()=>traverse
);
/**
 * A safe hasOwnProperty
 * @param {Object} object
 * @param {string} property
 */ parcelHelpers.export(exports, "hasOwnProperty", ()=>hasOwnProperty
);
/**
 * Test whether an object is a factory. a factory has fields:
 *
 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
 * - name: string (optional)
 * - path: string    A dot separated path (optional)
 * - math: boolean   If true (false by default), the math namespace is passed
 *                   as fifth argument of the factory function
 *
 * @param {*} object
 * @returns {boolean}
 */ parcelHelpers.export(exports, "isLegacyFactory", ()=>isLegacyFactory
);
/**
 * Get a nested property from an object
 * @param {Object} object
 * @param {string | string[]} path
 * @returns {Object}
 */ parcelHelpers.export(exports, "get", ()=>get
);
/**
 * Set a nested property in an object
 * Mutates the object itself
 * If the path doesn't exist, it will be created
 * @param {Object} object
 * @param {string | string[]} path
 * @param {*} value
 * @returns {Object}
 */ parcelHelpers.export(exports, "set", ()=>set
);
/**
 * Create an object composed of the picked object properties
 * @param {Object} object
 * @param {string[]} properties
 * @param {function} [transform] Optional value to transform a value when picking it
 * @return {Object}
 */ parcelHelpers.export(exports, "pick", ()=>pick
);
/**
 * Shallow version of pick, creating an object composed of the picked object properties
 * but not for nested properties
 * @param {Object} object
 * @param {string[]} properties
 * @return {Object}
 */ parcelHelpers.export(exports, "pickShallow", ()=>pickShallow
);
parcelHelpers.export(exports, "values", ()=>values
) // helper function to test whether a string contains a path like 'user.name'
;
var _isJs = require("./is.js");
function clone1(x) {
    var type = typeof x; // immutable primitive types
    if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) return x;
     // use clone function of the object when available
    if (typeof x.clone === 'function') return x.clone();
     // array
    if (Array.isArray(x)) return x.map(function(value) {
        return clone1(value);
    });
    if (x instanceof Date) return new Date(x.valueOf());
    if (_isJs.isBigNumber(x)) return x; // bignumbers are immutable
    if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
    // object
    return mapObject(x, clone1);
}
function mapObject(object, callback) {
    var clone = {
    };
    for(var key in object)if (hasOwnProperty(object, key)) clone[key] = callback(object[key]);
    return clone;
}
function extend(a, b) {
    for(var prop in b)if (hasOwnProperty(b, prop)) a[prop] = b[prop];
    return a;
}
function deepExtend(a, b) {
    // TODO: add support for Arrays to deepExtend
    if (Array.isArray(b)) throw new TypeError('Arrays are not supported by deepExtend');
    for(var prop in b)// We check against prop not being in Object.prototype or Function.prototype
    // to prevent polluting for example Object.__proto__.
    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {
        if (b[prop] && b[prop].constructor === Object) {
            if (a[prop] === undefined) a[prop] = {
            };
            if (a[prop] && a[prop].constructor === Object) deepExtend(a[prop], b[prop]);
            else a[prop] = b[prop];
        } else if (Array.isArray(b[prop])) throw new TypeError('Arrays are not supported by deepExtend');
        else a[prop] = b[prop];
    }
    return a;
}
function deepStrictEqual(a, b) {
    var prop, i, len;
    if (Array.isArray(a)) {
        if (!Array.isArray(b)) return false;
        if (a.length !== b.length) return false;
        for(i = 0, len = a.length; i < len; i++){
            if (!deepStrictEqual(a[i], b[i])) return false;
        }
        return true;
    } else if (typeof a === 'function') return a === b;
    else if (a instanceof Object) {
        if (Array.isArray(b) || !(b instanceof Object)) return false;
        for(prop in a){
            // noinspection JSUnfilteredForInLoop
            if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) return false;
        }
        for(prop in b){
            // noinspection JSUnfilteredForInLoop
            if (!(prop in a)) return false;
        }
        return true;
    } else return a === b;
}
function deepFlatten(nestedObject) {
    var flattenedObject = {
    };
    _deepFlatten(nestedObject, flattenedObject);
    return flattenedObject;
}
function _deepFlatten(nestedObject, flattenedObject) {
    for(var prop in nestedObject)if (hasOwnProperty(nestedObject, prop)) {
        var value = nestedObject[prop];
        if (typeof value === 'object' && value !== null) _deepFlatten(value, flattenedObject);
        else flattenedObject[prop] = value;
    }
}
function canDefineProperty() {
    // test needed for broken IE8 implementation
    try {
        if (Object.defineProperty) {
            Object.defineProperty({
            }, 'x', {
                get: function get() {
                }
            });
            return true;
        }
    } catch (e) {
    }
    return false;
}
function lazy(object, prop, valueResolver) {
    var _uninitialized = true;
    var _value;
    Object.defineProperty(object, prop, {
        get: function get() {
            if (_uninitialized) {
                _value = valueResolver();
                _uninitialized = false;
            }
            return _value;
        },
        set: function set(value) {
            _value = value;
            _uninitialized = false;
        },
        configurable: true,
        enumerable: true
    });
}
function traverse(object, path) {
    if (path && typeof path === 'string') return traverse(object, path.split('.'));
    var obj = object;
    if (path) for(var i = 0; i < path.length; i++){
        var key = path[i];
        if (!(key in obj)) obj[key] = {
        };
        obj = obj[key];
    }
    return obj;
}
function hasOwnProperty(object, property) {
    return object && Object.hasOwnProperty.call(object, property);
}
function isLegacyFactory(object) {
    return object && typeof object.factory === 'function';
}
function get(object, path) {
    if (typeof path === 'string') {
        if (isPath(path)) return get(object, path.split('.'));
        else return object[path];
    }
    var child = object;
    for(var i = 0; i < path.length; i++){
        var key = path[i];
        child = child ? child[key] : undefined;
    }
    return child;
}
function set(object, path, value) {
    if (typeof path === 'string') {
        if (isPath(path)) return set(object, path.split('.'), value);
        else {
            object[path] = value;
            return object;
        }
    }
    var child = object;
    for(var i = 0; i < path.length - 1; i++){
        var key = path[i];
        if (child[key] === undefined) child[key] = {
        };
        child = child[key];
    }
    if (path.length > 0) {
        var lastKey = path[path.length - 1];
        child[lastKey] = value;
    }
    return object;
}
function pick(object, properties, transform) {
    var copy = {
    };
    for(var i = 0; i < properties.length; i++){
        var key = properties[i];
        var value = get(object, key);
        if (value !== undefined) set(copy, key, transform ? transform(value, key) : value);
    }
    return copy;
}
function pickShallow(object, properties) {
    var copy = {
    };
    for(var i = 0; i < properties.length; i++){
        var key = properties[i];
        var value = object[key];
        if (value !== undefined) copy[key] = value;
    }
    return copy;
}
function values(object) {
    return Object.keys(object).map((key)=>object[key]
    );
}
function isPath(str) {
    return str.indexOf('.') !== -1;
}

},{"./is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iwdlF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// type checks for all known types
//
// note that:
//
// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
//   instanceof cannot be used because that would not allow to pass data from
//   one instance of math.js to another since each has it's own instance of Unit.
// - check the `isUnit` property via the constructor, so there will be no
//   matches for "fake" instances like plain objects with a property `isUnit`.
//   That is important for security reasons.
// - It must not be possible to override the type checks used internally,
//   for security reasons, so these functions are not exposed in the expression
//   parser.
parcelHelpers.export(exports, "isNumber", ()=>isNumber
);
parcelHelpers.export(exports, "isBigNumber", ()=>isBigNumber
);
parcelHelpers.export(exports, "isComplex", ()=>isComplex
);
parcelHelpers.export(exports, "isFraction", ()=>isFraction
);
parcelHelpers.export(exports, "isUnit", ()=>isUnit
);
parcelHelpers.export(exports, "isString", ()=>isString
);
parcelHelpers.export(exports, "isArray", ()=>isArray
);
parcelHelpers.export(exports, "isMatrix", ()=>isMatrix
);
/**
 * Test whether a value is a collection: an Array or Matrix
 * @param {*} x
 * @returns {boolean} isCollection
 */ parcelHelpers.export(exports, "isCollection", ()=>isCollection
);
parcelHelpers.export(exports, "isDenseMatrix", ()=>isDenseMatrix
);
parcelHelpers.export(exports, "isSparseMatrix", ()=>isSparseMatrix
);
parcelHelpers.export(exports, "isRange", ()=>isRange
);
parcelHelpers.export(exports, "isIndex", ()=>isIndex
);
parcelHelpers.export(exports, "isBoolean", ()=>isBoolean
);
parcelHelpers.export(exports, "isResultSet", ()=>isResultSet
);
parcelHelpers.export(exports, "isHelp", ()=>isHelp
);
parcelHelpers.export(exports, "isFunction", ()=>isFunction
);
parcelHelpers.export(exports, "isDate", ()=>isDate
);
parcelHelpers.export(exports, "isRegExp", ()=>isRegExp
);
parcelHelpers.export(exports, "isObject", ()=>isObject
);
parcelHelpers.export(exports, "isNull", ()=>isNull
);
parcelHelpers.export(exports, "isUndefined", ()=>isUndefined
);
parcelHelpers.export(exports, "isAccessorNode", ()=>isAccessorNode
);
parcelHelpers.export(exports, "isArrayNode", ()=>isArrayNode
);
parcelHelpers.export(exports, "isAssignmentNode", ()=>isAssignmentNode
);
parcelHelpers.export(exports, "isBlockNode", ()=>isBlockNode
);
parcelHelpers.export(exports, "isConditionalNode", ()=>isConditionalNode
);
parcelHelpers.export(exports, "isConstantNode", ()=>isConstantNode
);
parcelHelpers.export(exports, "isFunctionAssignmentNode", ()=>isFunctionAssignmentNode
);
parcelHelpers.export(exports, "isFunctionNode", ()=>isFunctionNode
);
parcelHelpers.export(exports, "isIndexNode", ()=>isIndexNode
);
parcelHelpers.export(exports, "isNode", ()=>isNode
);
parcelHelpers.export(exports, "isObjectNode", ()=>isObjectNode
);
parcelHelpers.export(exports, "isOperatorNode", ()=>isOperatorNode
);
parcelHelpers.export(exports, "isParenthesisNode", ()=>isParenthesisNode
);
parcelHelpers.export(exports, "isRangeNode", ()=>isRangeNode
);
parcelHelpers.export(exports, "isSymbolNode", ()=>isSymbolNode
);
parcelHelpers.export(exports, "isChain", ()=>isChain
);
parcelHelpers.export(exports, "typeOf", ()=>typeOf
);
function isNumber(x) {
    return typeof x === 'number';
}
function isBigNumber(x) {
    if (!x || typeof x !== 'object' || typeof x.constructor !== 'function') return false;
    if (x.isBigNumber === true && typeof x.constructor.prototype === 'object' && x.constructor.prototype.isBigNumber === true) return true;
    if (typeof x.constructor.isDecimal === 'function' && x.constructor.isDecimal(x) === true) return true;
    return false;
}
function isComplex(x) {
    return x && typeof x === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
}
function isFraction(x) {
    return x && typeof x === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
}
function isUnit(x) {
    return x && x.constructor.prototype.isUnit === true || false;
}
function isString(x) {
    return typeof x === 'string';
}
var isArray = Array.isArray;
function isMatrix(x) {
    return x && x.constructor.prototype.isMatrix === true || false;
}
function isCollection(x) {
    return Array.isArray(x) || isMatrix(x);
}
function isDenseMatrix(x) {
    return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
}
function isSparseMatrix(x) {
    return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
}
function isRange(x) {
    return x && x.constructor.prototype.isRange === true || false;
}
function isIndex(x) {
    return x && x.constructor.prototype.isIndex === true || false;
}
function isBoolean(x) {
    return typeof x === 'boolean';
}
function isResultSet(x) {
    return x && x.constructor.prototype.isResultSet === true || false;
}
function isHelp(x) {
    return x && x.constructor.prototype.isHelp === true || false;
}
function isFunction(x) {
    return typeof x === 'function';
}
function isDate(x) {
    return x instanceof Date;
}
function isRegExp(x) {
    return x instanceof RegExp;
}
function isObject(x) {
    return !!(x && typeof x === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
}
function isNull(x) {
    return x === null;
}
function isUndefined(x) {
    return x === undefined;
}
function isAccessorNode(x) {
    return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
}
function isArrayNode(x) {
    return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
}
function isAssignmentNode(x) {
    return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}
function isBlockNode(x) {
    return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
}
function isConditionalNode(x) {
    return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
}
function isConstantNode(x) {
    return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
}
function isFunctionAssignmentNode(x) {
    return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}
function isFunctionNode(x) {
    return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
}
function isIndexNode(x) {
    return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
}
function isNode(x) {
    return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
}
function isObjectNode(x) {
    return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
}
function isOperatorNode(x) {
    return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
}
function isParenthesisNode(x) {
    return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
}
function isRangeNode(x) {
    return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
}
function isSymbolNode(x) {
    return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
}
function isChain(x) {
    return x && x.constructor.prototype.isChain === true || false;
}
function typeOf(x) {
    var t = typeof x;
    if (t === 'object') {
        // JavaScript types
        if (x === null) return 'null';
        if (Array.isArray(x)) return 'Array';
        if (x instanceof Date) return 'Date';
        if (x instanceof RegExp) return 'RegExp'; // math.js types
        if (isBigNumber(x)) return 'BigNumber';
        if (isComplex(x)) return 'Complex';
        if (isFraction(x)) return 'Fraction';
        if (isMatrix(x)) return 'Matrix';
        if (isUnit(x)) return 'Unit';
        if (isIndex(x)) return 'Index';
        if (isRange(x)) return 'Range';
        if (isResultSet(x)) return 'ResultSet';
        if (isNode(x)) return x.type;
        if (isChain(x)) return 'Chain';
        if (isHelp(x)) return 'Help';
        return 'Object';
    }
    if (t === 'function') return 'Function';
    return t; // can be 'string', 'number', 'boolean', ...
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"f3Dk1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BigNumber", ()=>BigNumber
);
parcelHelpers.export(exports, "Complex", ()=>Complex
);
parcelHelpers.export(exports, "e", ()=>e
);
parcelHelpers.export(exports, "_false", ()=>_false
);
parcelHelpers.export(exports, "fineStructure", ()=>fineStructure
);
parcelHelpers.export(exports, "Fraction", ()=>Fraction
);
parcelHelpers.export(exports, "i", ()=>i
);
parcelHelpers.export(exports, "_Infinity", ()=>_Infinity
);
parcelHelpers.export(exports, "LN10", ()=>LN10
);
parcelHelpers.export(exports, "LOG10E", ()=>LOG10E
);
parcelHelpers.export(exports, "Matrix", ()=>Matrix
);
parcelHelpers.export(exports, "_NaN", ()=>_NaN
);
parcelHelpers.export(exports, "_null", ()=>_null
);
parcelHelpers.export(exports, "phi", ()=>phi
);
parcelHelpers.export(exports, "Range", ()=>Range
);
parcelHelpers.export(exports, "ResultSet", ()=>ResultSet
);
parcelHelpers.export(exports, "SQRT1_2", ()=>SQRT1_2
);
parcelHelpers.export(exports, "sackurTetrode", ()=>sackurTetrode
);
parcelHelpers.export(exports, "tau", ()=>tau
);
parcelHelpers.export(exports, "_true", ()=>_true
);
parcelHelpers.export(exports, "version", ()=>version
);
parcelHelpers.export(exports, "DenseMatrix", ()=>DenseMatrix
);
parcelHelpers.export(exports, "efimovFactor", ()=>efimovFactor
);
parcelHelpers.export(exports, "LN2", ()=>LN2
);
parcelHelpers.export(exports, "pi", ()=>pi
);
parcelHelpers.export(exports, "replacer", ()=>replacer
);
parcelHelpers.export(exports, "SQRT2", ()=>SQRT2
);
parcelHelpers.export(exports, "typed", ()=>typed
);
parcelHelpers.export(exports, "unaryPlus", ()=>unaryPlus
);
parcelHelpers.export(exports, "weakMixingAngle", ()=>weakMixingAngle
);
parcelHelpers.export(exports, "abs", ()=>abs
);
parcelHelpers.export(exports, "acos", ()=>acos
);
parcelHelpers.export(exports, "acot", ()=>acot
);
parcelHelpers.export(exports, "acsc", ()=>acsc
);
parcelHelpers.export(exports, "addScalar", ()=>addScalar
);
parcelHelpers.export(exports, "arg", ()=>arg
);
parcelHelpers.export(exports, "asech", ()=>asech
);
parcelHelpers.export(exports, "asinh", ()=>asinh
);
parcelHelpers.export(exports, "atan", ()=>atan
);
parcelHelpers.export(exports, "atanh", ()=>atanh
);
parcelHelpers.export(exports, "bignumber", ()=>bignumber
);
parcelHelpers.export(exports, "bitNot", ()=>bitNot
);
parcelHelpers.export(exports, "boolean", ()=>boolean
);
parcelHelpers.export(exports, "clone", ()=>clone
);
parcelHelpers.export(exports, "combinations", ()=>combinations
);
parcelHelpers.export(exports, "complex", ()=>complex
);
parcelHelpers.export(exports, "conj", ()=>conj
);
parcelHelpers.export(exports, "cosh", ()=>cosh
);
parcelHelpers.export(exports, "coth", ()=>coth
);
parcelHelpers.export(exports, "csc", ()=>csc
);
parcelHelpers.export(exports, "cube", ()=>cube
);
parcelHelpers.export(exports, "equalScalar", ()=>equalScalar
);
parcelHelpers.export(exports, "erf", ()=>erf
);
parcelHelpers.export(exports, "exp", ()=>exp
);
parcelHelpers.export(exports, "expm1", ()=>expm1
);
parcelHelpers.export(exports, "filter", ()=>filter
);
parcelHelpers.export(exports, "forEach", ()=>forEach
);
parcelHelpers.export(exports, "format", ()=>format
);
parcelHelpers.export(exports, "getMatrixDataType", ()=>getMatrixDataType
);
parcelHelpers.export(exports, "hex", ()=>hex
);
parcelHelpers.export(exports, "im", ()=>im
);
parcelHelpers.export(exports, "isInteger", ()=>isInteger
);
parcelHelpers.export(exports, "isNegative", ()=>isNegative
);
parcelHelpers.export(exports, "isPositive", ()=>isPositive
);
parcelHelpers.export(exports, "isZero", ()=>isZero
);
parcelHelpers.export(exports, "LOG2E", ()=>LOG2E
);
parcelHelpers.export(exports, "log10", ()=>log10
);
parcelHelpers.export(exports, "log2", ()=>log2
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "multiplyScalar", ()=>multiplyScalar
);
parcelHelpers.export(exports, "not", ()=>not
);
parcelHelpers.export(exports, "number", ()=>number
);
parcelHelpers.export(exports, "oct", ()=>oct
);
parcelHelpers.export(exports, "pickRandom", ()=>pickRandom
);
parcelHelpers.export(exports, "print", ()=>print
);
parcelHelpers.export(exports, "random", ()=>random
);
parcelHelpers.export(exports, "re", ()=>re
);
parcelHelpers.export(exports, "sec", ()=>sec
);
parcelHelpers.export(exports, "sign", ()=>sign
);
parcelHelpers.export(exports, "sin", ()=>sin
);
parcelHelpers.export(exports, "SparseMatrix", ()=>SparseMatrix
);
parcelHelpers.export(exports, "splitUnit", ()=>splitUnit
);
parcelHelpers.export(exports, "square", ()=>square
);
parcelHelpers.export(exports, "string", ()=>string
);
parcelHelpers.export(exports, "tan", ()=>tan
);
parcelHelpers.export(exports, "typeOf", ()=>typeOf
);
parcelHelpers.export(exports, "acosh", ()=>acosh
);
parcelHelpers.export(exports, "acsch", ()=>acsch
);
parcelHelpers.export(exports, "apply", ()=>apply
);
parcelHelpers.export(exports, "asec", ()=>asec
);
parcelHelpers.export(exports, "bin", ()=>bin
);
parcelHelpers.export(exports, "combinationsWithRep", ()=>combinationsWithRep
);
parcelHelpers.export(exports, "cos", ()=>cos
);
parcelHelpers.export(exports, "csch", ()=>csch
);
parcelHelpers.export(exports, "isNaN", ()=>isNaN
);
parcelHelpers.export(exports, "isPrime", ()=>isPrime
);
parcelHelpers.export(exports, "randomInt", ()=>randomInt
);
parcelHelpers.export(exports, "sech", ()=>sech
);
parcelHelpers.export(exports, "sinh", ()=>sinh
);
parcelHelpers.export(exports, "sparse", ()=>sparse
);
parcelHelpers.export(exports, "sqrt", ()=>sqrt
);
parcelHelpers.export(exports, "tanh", ()=>tanh
);
parcelHelpers.export(exports, "unaryMinus", ()=>unaryMinus
);
parcelHelpers.export(exports, "acoth", ()=>acoth
);
parcelHelpers.export(exports, "cot", ()=>cot
);
parcelHelpers.export(exports, "fraction", ()=>fraction
);
parcelHelpers.export(exports, "isNumeric", ()=>isNumeric
);
parcelHelpers.export(exports, "matrix", ()=>matrix
);
parcelHelpers.export(exports, "matrixFromFunction", ()=>matrixFromFunction
);
parcelHelpers.export(exports, "mod", ()=>mod
);
parcelHelpers.export(exports, "nthRoot", ()=>nthRoot
);
parcelHelpers.export(exports, "numeric", ()=>numeric
);
parcelHelpers.export(exports, "or", ()=>or
);
parcelHelpers.export(exports, "prod", ()=>prod
);
parcelHelpers.export(exports, "reshape", ()=>reshape
);
parcelHelpers.export(exports, "size", ()=>size
);
parcelHelpers.export(exports, "smaller", ()=>smaller
);
parcelHelpers.export(exports, "squeeze", ()=>squeeze
);
parcelHelpers.export(exports, "subset", ()=>subset
);
parcelHelpers.export(exports, "subtract", ()=>subtract
);
parcelHelpers.export(exports, "to", ()=>to
);
parcelHelpers.export(exports, "transpose", ()=>transpose
);
parcelHelpers.export(exports, "xgcd", ()=>xgcd
);
parcelHelpers.export(exports, "zeros", ()=>zeros
);
parcelHelpers.export(exports, "and", ()=>and
);
parcelHelpers.export(exports, "bitAnd", ()=>bitAnd
);
parcelHelpers.export(exports, "bitXor", ()=>bitXor
);
parcelHelpers.export(exports, "cbrt", ()=>cbrt
);
parcelHelpers.export(exports, "compare", ()=>compare
);
parcelHelpers.export(exports, "compareText", ()=>compareText
);
parcelHelpers.export(exports, "concat", ()=>concat
);
parcelHelpers.export(exports, "count", ()=>count
);
parcelHelpers.export(exports, "ctranspose", ()=>ctranspose
);
parcelHelpers.export(exports, "diag", ()=>diag
);
parcelHelpers.export(exports, "divideScalar", ()=>divideScalar
);
parcelHelpers.export(exports, "dotDivide", ()=>dotDivide
);
parcelHelpers.export(exports, "equal", ()=>equal
);
parcelHelpers.export(exports, "flatten", ()=>flatten
);
parcelHelpers.export(exports, "gcd", ()=>gcd
);
parcelHelpers.export(exports, "hasNumericValue", ()=>hasNumericValue
);
parcelHelpers.export(exports, "hypot", ()=>hypot
);
parcelHelpers.export(exports, "ImmutableDenseMatrix", ()=>ImmutableDenseMatrix
);
parcelHelpers.export(exports, "Index", ()=>Index
);
parcelHelpers.export(exports, "kron", ()=>kron
);
parcelHelpers.export(exports, "largerEq", ()=>largerEq
);
parcelHelpers.export(exports, "leftShift", ()=>leftShift
);
parcelHelpers.export(exports, "lsolve", ()=>lsolve
);
parcelHelpers.export(exports, "matrixFromColumns", ()=>matrixFromColumns
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "mode", ()=>mode
);
parcelHelpers.export(exports, "nthRoots", ()=>nthRoots
);
parcelHelpers.export(exports, "ones", ()=>ones
);
parcelHelpers.export(exports, "partitionSelect", ()=>partitionSelect
);
parcelHelpers.export(exports, "resize", ()=>resize
);
parcelHelpers.export(exports, "rightLogShift", ()=>rightLogShift
);
parcelHelpers.export(exports, "round", ()=>round
);
parcelHelpers.export(exports, "smallerEq", ()=>smallerEq
);
parcelHelpers.export(exports, "unequal", ()=>unequal
);
parcelHelpers.export(exports, "usolve", ()=>usolve
);
parcelHelpers.export(exports, "xor", ()=>xor
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "atan2", ()=>atan2
);
parcelHelpers.export(exports, "bitOr", ()=>bitOr
);
parcelHelpers.export(exports, "catalan", ()=>catalan
);
parcelHelpers.export(exports, "compareNatural", ()=>compareNatural
);
parcelHelpers.export(exports, "deepEqual", ()=>deepEqual
);
parcelHelpers.export(exports, "diff", ()=>diff
);
parcelHelpers.export(exports, "dot", ()=>dot
);
parcelHelpers.export(exports, "equalText", ()=>equalText
);
parcelHelpers.export(exports, "floor", ()=>floor
);
parcelHelpers.export(exports, "identity", ()=>identity
);
parcelHelpers.export(exports, "larger", ()=>larger
);
parcelHelpers.export(exports, "log", ()=>log
);
parcelHelpers.export(exports, "lsolveAll", ()=>lsolveAll
);
parcelHelpers.export(exports, "matrixFromRows", ()=>matrixFromRows
);
parcelHelpers.export(exports, "multiply", ()=>multiply
);
parcelHelpers.export(exports, "pow", ()=>pow
);
parcelHelpers.export(exports, "qr", ()=>qr
);
parcelHelpers.export(exports, "range", ()=>range
);
parcelHelpers.export(exports, "rightArithShift", ()=>rightArithShift
);
parcelHelpers.export(exports, "row", ()=>row
);
parcelHelpers.export(exports, "setCartesian", ()=>setCartesian
);
parcelHelpers.export(exports, "setDistinct", ()=>setDistinct
);
parcelHelpers.export(exports, "setIsSubset", ()=>setIsSubset
);
parcelHelpers.export(exports, "setPowerset", ()=>setPowerset
);
parcelHelpers.export(exports, "slu", ()=>slu
);
parcelHelpers.export(exports, "sum", ()=>sum
);
parcelHelpers.export(exports, "trace", ()=>trace
);
parcelHelpers.export(exports, "usolveAll", ()=>usolveAll
);
parcelHelpers.export(exports, "asin", ()=>asin
);
parcelHelpers.export(exports, "ceil", ()=>ceil
);
parcelHelpers.export(exports, "column", ()=>column
);
parcelHelpers.export(exports, "composition", ()=>composition
);
parcelHelpers.export(exports, "cross", ()=>cross
);
parcelHelpers.export(exports, "distance", ()=>distance
);
parcelHelpers.export(exports, "dotMultiply", ()=>dotMultiply
);
parcelHelpers.export(exports, "FibonacciHeap", ()=>FibonacciHeap
);
parcelHelpers.export(exports, "fix", ()=>fix
);
parcelHelpers.export(exports, "gamma", ()=>gamma
);
parcelHelpers.export(exports, "index", ()=>index
);
parcelHelpers.export(exports, "lcm", ()=>lcm
);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "quantileSeq", ()=>quantileSeq
);
parcelHelpers.export(exports, "setDifference", ()=>setDifference
);
parcelHelpers.export(exports, "setMultiplicity", ()=>setMultiplicity
);
parcelHelpers.export(exports, "setSymDifference", ()=>setSymDifference
);
parcelHelpers.export(exports, "sort", ()=>sort
);
parcelHelpers.export(exports, "Unit", ()=>Unit
);
parcelHelpers.export(exports, "vacuumImpedance", ()=>vacuumImpedance
);
parcelHelpers.export(exports, "wienDisplacement", ()=>wienDisplacement
);
parcelHelpers.export(exports, "atomicMass", ()=>atomicMass
);
parcelHelpers.export(exports, "bohrMagneton", ()=>bohrMagneton
);
parcelHelpers.export(exports, "boltzmann", ()=>boltzmann
);
parcelHelpers.export(exports, "conductanceQuantum", ()=>conductanceQuantum
);
parcelHelpers.export(exports, "createUnit", ()=>createUnit
);
parcelHelpers.export(exports, "deuteronMass", ()=>deuteronMass
);
parcelHelpers.export(exports, "dotPow", ()=>dotPow
);
parcelHelpers.export(exports, "electricConstant", ()=>electricConstant
);
parcelHelpers.export(exports, "elementaryCharge", ()=>elementaryCharge
);
parcelHelpers.export(exports, "factorial", ()=>factorial
);
parcelHelpers.export(exports, "fermiCoupling", ()=>fermiCoupling
);
parcelHelpers.export(exports, "gasConstant", ()=>gasConstant
);
parcelHelpers.export(exports, "gravity", ()=>gravity
);
parcelHelpers.export(exports, "intersect", ()=>intersect
);
parcelHelpers.export(exports, "inverseConductanceQuantum", ()=>inverseConductanceQuantum
);
parcelHelpers.export(exports, "klitzing", ()=>klitzing
);
parcelHelpers.export(exports, "loschmidt", ()=>loschmidt
);
parcelHelpers.export(exports, "magneticConstant", ()=>magneticConstant
);
parcelHelpers.export(exports, "molarMass", ()=>molarMass
);
parcelHelpers.export(exports, "molarPlanckConstant", ()=>molarPlanckConstant
);
parcelHelpers.export(exports, "neutronMass", ()=>neutronMass
);
parcelHelpers.export(exports, "nuclearMagneton", ()=>nuclearMagneton
);
parcelHelpers.export(exports, "permutations", ()=>permutations
);
parcelHelpers.export(exports, "planckConstant", ()=>planckConstant
);
parcelHelpers.export(exports, "planckMass", ()=>planckMass
);
parcelHelpers.export(exports, "planckTime", ()=>planckTime
);
parcelHelpers.export(exports, "quantumOfCirculation", ()=>quantumOfCirculation
);
parcelHelpers.export(exports, "reducedPlanckConstant", ()=>reducedPlanckConstant
);
parcelHelpers.export(exports, "rydberg", ()=>rydberg
);
parcelHelpers.export(exports, "setIntersect", ()=>setIntersect
);
parcelHelpers.export(exports, "setUnion", ()=>setUnion
);
parcelHelpers.export(exports, "Spa", ()=>Spa
);
parcelHelpers.export(exports, "stefanBoltzmann", ()=>stefanBoltzmann
);
parcelHelpers.export(exports, "unit", ()=>unit
);
parcelHelpers.export(exports, "avogadro", ()=>avogadro
);
parcelHelpers.export(exports, "bohrRadius", ()=>bohrRadius
);
parcelHelpers.export(exports, "coulomb", ()=>coulomb
);
parcelHelpers.export(exports, "electronMass", ()=>electronMass
);
parcelHelpers.export(exports, "faraday", ()=>faraday
);
parcelHelpers.export(exports, "hartreeEnergy", ()=>hartreeEnergy
);
parcelHelpers.export(exports, "log1p", ()=>log1p
);
parcelHelpers.export(exports, "magneticFluxQuantum", ()=>magneticFluxQuantum
);
parcelHelpers.export(exports, "molarMassC12", ()=>molarMassC12
);
parcelHelpers.export(exports, "planckCharge", ()=>planckCharge
);
parcelHelpers.export(exports, "planckTemperature", ()=>planckTemperature
);
parcelHelpers.export(exports, "secondRadiation", ()=>secondRadiation
);
parcelHelpers.export(exports, "speedOfLight", ()=>speedOfLight
);
parcelHelpers.export(exports, "stirlingS2", ()=>stirlingS2
);
parcelHelpers.export(exports, "bellNumbers", ()=>bellNumbers
);
parcelHelpers.export(exports, "firstRadiation", ()=>firstRadiation
);
parcelHelpers.export(exports, "lup", ()=>lup
);
parcelHelpers.export(exports, "molarVolume", ()=>molarVolume
);
parcelHelpers.export(exports, "protonMass", ()=>protonMass
);
parcelHelpers.export(exports, "setSize", ()=>setSize
);
parcelHelpers.export(exports, "thomsonCrossSection", ()=>thomsonCrossSection
);
parcelHelpers.export(exports, "classicalElectronRadius", ()=>classicalElectronRadius
);
parcelHelpers.export(exports, "det", ()=>det
);
parcelHelpers.export(exports, "gravitationConstant", ()=>gravitationConstant
);
parcelHelpers.export(exports, "inv", ()=>inv
);
parcelHelpers.export(exports, "lusolve", ()=>lusolve
);
parcelHelpers.export(exports, "sqrtm", ()=>sqrtm
);
parcelHelpers.export(exports, "divide", ()=>divide
);
parcelHelpers.export(exports, "expm", ()=>expm
);
parcelHelpers.export(exports, "kldivergence", ()=>kldivergence
);
parcelHelpers.export(exports, "mean", ()=>mean
);
parcelHelpers.export(exports, "median", ()=>median
);
parcelHelpers.export(exports, "planckLength", ()=>planckLength
);
parcelHelpers.export(exports, "variance", ()=>variance
);
parcelHelpers.export(exports, "std", ()=>std
);
parcelHelpers.export(exports, "eigs", ()=>eigs
);
parcelHelpers.export(exports, "multinomial", ()=>multinomial
);
parcelHelpers.export(exports, "mad", ()=>mad
);
parcelHelpers.export(exports, "norm", ()=>norm
);
parcelHelpers.export(exports, "rotationMatrix", ()=>rotationMatrix
);
parcelHelpers.export(exports, "rotate", ()=>rotate
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _configReadonlyJs = require("./configReadonly.js");
var _factoriesAnyJs = require("../factoriesAny.js");
var BigNumber = /* #__PURE__ */ _factoriesAnyJs.createBigNumberClass({
    config: _configReadonlyJs.config
});
var Complex = /* #__PURE__ */ _factoriesAnyJs.createComplexClass({
});
var e = /* #__PURE__ */ _factoriesAnyJs.createE({
    BigNumber,
    config: _configReadonlyJs.config
});
var _false = /* #__PURE__ */ _factoriesAnyJs.createFalse({
});
var fineStructure = /* #__PURE__ */ _factoriesAnyJs.createFineStructure({
    BigNumber,
    config: _configReadonlyJs.config
});
var Fraction = /* #__PURE__ */ _factoriesAnyJs.createFractionClass({
});
var i = /* #__PURE__ */ _factoriesAnyJs.createI({
    Complex
});
var _Infinity = /* #__PURE__ */ _factoriesAnyJs.createInfinity({
    BigNumber,
    config: _configReadonlyJs.config
});
var LN10 = /* #__PURE__ */ _factoriesAnyJs.createLN10({
    BigNumber,
    config: _configReadonlyJs.config
});
var LOG10E = /* #__PURE__ */ _factoriesAnyJs.createLOG10E({
    BigNumber,
    config: _configReadonlyJs.config
});
var Matrix = /* #__PURE__ */ _factoriesAnyJs.createMatrixClass({
});
var _NaN = /* #__PURE__ */ _factoriesAnyJs.createNaN({
    BigNumber,
    config: _configReadonlyJs.config
});
var _null = /* #__PURE__ */ _factoriesAnyJs.createNull({
});
var phi = /* #__PURE__ */ _factoriesAnyJs.createPhi({
    BigNumber,
    config: _configReadonlyJs.config
});
var Range = /* #__PURE__ */ _factoriesAnyJs.createRangeClass({
});
var ResultSet = /* #__PURE__ */ _factoriesAnyJs.createResultSet({
});
var SQRT1_2 = /* #__PURE__ */ _factoriesAnyJs.createSQRT1_2({
    BigNumber,
    config: _configReadonlyJs.config
});
var sackurTetrode = /* #__PURE__ */ _factoriesAnyJs.createSackurTetrode({
    BigNumber,
    config: _configReadonlyJs.config
});
var tau = /* #__PURE__ */ _factoriesAnyJs.createTau({
    BigNumber,
    config: _configReadonlyJs.config
});
var _true = /* #__PURE__ */ _factoriesAnyJs.createTrue({
});
var version = /* #__PURE__ */ _factoriesAnyJs.createVersion({
});
var DenseMatrix = /* #__PURE__ */ _factoriesAnyJs.createDenseMatrixClass({
    Matrix
});
var efimovFactor = /* #__PURE__ */ _factoriesAnyJs.createEfimovFactor({
    BigNumber,
    config: _configReadonlyJs.config
});
var LN2 = /* #__PURE__ */ _factoriesAnyJs.createLN2({
    BigNumber,
    config: _configReadonlyJs.config
});
var pi = /* #__PURE__ */ _factoriesAnyJs.createPi({
    BigNumber,
    config: _configReadonlyJs.config
});
var replacer = /* #__PURE__ */ _factoriesAnyJs.createReplacer({
});
var SQRT2 = /* #__PURE__ */ _factoriesAnyJs.createSQRT2({
    BigNumber,
    config: _configReadonlyJs.config
});
var typed = /* #__PURE__ */ _factoriesAnyJs.createTyped({
    BigNumber,
    Complex,
    DenseMatrix,
    Fraction
});
var unaryPlus = /* #__PURE__ */ _factoriesAnyJs.createUnaryPlus({
    BigNumber,
    config: _configReadonlyJs.config,
    typed
});
var weakMixingAngle = /* #__PURE__ */ _factoriesAnyJs.createWeakMixingAngle({
    BigNumber,
    config: _configReadonlyJs.config
});
var abs = /* #__PURE__ */ _factoriesAnyJs.createAbs({
    typed
});
var acos = /* #__PURE__ */ _factoriesAnyJs.createAcos({
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var acot = /* #__PURE__ */ _factoriesAnyJs.createAcot({
    BigNumber,
    typed
});
var acsc = /* #__PURE__ */ _factoriesAnyJs.createAcsc({
    BigNumber,
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var addScalar = /* #__PURE__ */ _factoriesAnyJs.createAddScalar({
    typed
});
var arg = /* #__PURE__ */ _factoriesAnyJs.createArg({
    typed
});
var asech = /* #__PURE__ */ _factoriesAnyJs.createAsech({
    BigNumber,
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var asinh = /* #__PURE__ */ _factoriesAnyJs.createAsinh({
    typed
});
var atan = /* #__PURE__ */ _factoriesAnyJs.createAtan({
    typed
});
var atanh = /* #__PURE__ */ _factoriesAnyJs.createAtanh({
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var bignumber = /* #__PURE__ */ _factoriesAnyJs.createBignumber({
    BigNumber,
    typed
});
var bitNot = /* #__PURE__ */ _factoriesAnyJs.createBitNot({
    typed
});
var boolean = /* #__PURE__ */ _factoriesAnyJs.createBoolean({
    typed
});
var clone = /* #__PURE__ */ _factoriesAnyJs.createClone({
    typed
});
var combinations = /* #__PURE__ */ _factoriesAnyJs.createCombinations({
    typed
});
var complex = /* #__PURE__ */ _factoriesAnyJs.createComplex({
    Complex,
    typed
});
var conj = /* #__PURE__ */ _factoriesAnyJs.createConj({
    typed
});
var cosh = /* #__PURE__ */ _factoriesAnyJs.createCosh({
    typed
});
var coth = /* #__PURE__ */ _factoriesAnyJs.createCoth({
    BigNumber,
    typed
});
var csc = /* #__PURE__ */ _factoriesAnyJs.createCsc({
    BigNumber,
    typed
});
var cube = /* #__PURE__ */ _factoriesAnyJs.createCube({
    typed
});
var equalScalar = /* #__PURE__ */ _factoriesAnyJs.createEqualScalar({
    config: _configReadonlyJs.config,
    typed
});
var erf = /* #__PURE__ */ _factoriesAnyJs.createErf({
    typed
});
var exp = /* #__PURE__ */ _factoriesAnyJs.createExp({
    typed
});
var expm1 = /* #__PURE__ */ _factoriesAnyJs.createExpm1({
    Complex,
    typed
});
var filter = /* #__PURE__ */ _factoriesAnyJs.createFilter({
    typed
});
var forEach = /* #__PURE__ */ _factoriesAnyJs.createForEach({
    typed
});
var format = /* #__PURE__ */ _factoriesAnyJs.createFormat({
    typed
});
var getMatrixDataType = /* #__PURE__ */ _factoriesAnyJs.createGetMatrixDataType({
    typed
});
var hex = /* #__PURE__ */ _factoriesAnyJs.createHex({
    format,
    typed
});
var im = /* #__PURE__ */ _factoriesAnyJs.createIm({
    typed
});
var isInteger = /* #__PURE__ */ _factoriesAnyJs.createIsInteger({
    typed
});
var isNegative = /* #__PURE__ */ _factoriesAnyJs.createIsNegative({
    typed
});
var isPositive = /* #__PURE__ */ _factoriesAnyJs.createIsPositive({
    typed
});
var isZero = /* #__PURE__ */ _factoriesAnyJs.createIsZero({
    typed
});
var LOG2E = /* #__PURE__ */ _factoriesAnyJs.createLOG2E({
    BigNumber,
    config: _configReadonlyJs.config
});
var log10 = /* #__PURE__ */ _factoriesAnyJs.createLog10({
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var log2 = /* #__PURE__ */ _factoriesAnyJs.createLog2({
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var map = /* #__PURE__ */ _factoriesAnyJs.createMap({
    typed
});
var multiplyScalar = /* #__PURE__ */ _factoriesAnyJs.createMultiplyScalar({
    typed
});
var not = /* #__PURE__ */ _factoriesAnyJs.createNot({
    typed
});
var number = /* #__PURE__ */ _factoriesAnyJs.createNumber({
    typed
});
var oct = /* #__PURE__ */ _factoriesAnyJs.createOct({
    format,
    typed
});
var pickRandom = /* #__PURE__ */ _factoriesAnyJs.createPickRandom({
    config: _configReadonlyJs.config,
    typed
});
var print = /* #__PURE__ */ _factoriesAnyJs.createPrint({
    typed
});
var random = /* #__PURE__ */ _factoriesAnyJs.createRandom({
    config: _configReadonlyJs.config,
    typed
});
var re = /* #__PURE__ */ _factoriesAnyJs.createRe({
    typed
});
var sec = /* #__PURE__ */ _factoriesAnyJs.createSec({
    BigNumber,
    typed
});
var sign = /* #__PURE__ */ _factoriesAnyJs.createSign({
    BigNumber,
    Fraction,
    complex,
    typed
});
var sin = /* #__PURE__ */ _factoriesAnyJs.createSin({
    typed
});
var SparseMatrix = /* #__PURE__ */ _factoriesAnyJs.createSparseMatrixClass({
    Matrix,
    equalScalar,
    typed
});
var splitUnit = /* #__PURE__ */ _factoriesAnyJs.createSplitUnit({
    typed
});
var square = /* #__PURE__ */ _factoriesAnyJs.createSquare({
    typed
});
var string = /* #__PURE__ */ _factoriesAnyJs.createString({
    typed
});
var tan = /* #__PURE__ */ _factoriesAnyJs.createTan({
    typed
});
var typeOf = /* #__PURE__ */ _factoriesAnyJs.createTypeOf({
    typed
});
var acosh = /* #__PURE__ */ _factoriesAnyJs.createAcosh({
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var acsch = /* #__PURE__ */ _factoriesAnyJs.createAcsch({
    BigNumber,
    typed
});
var apply = /* #__PURE__ */ _factoriesAnyJs.createApply({
    isInteger,
    typed
});
var asec = /* #__PURE__ */ _factoriesAnyJs.createAsec({
    BigNumber,
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var bin = /* #__PURE__ */ _factoriesAnyJs.createBin({
    format,
    typed
});
var combinationsWithRep = /* #__PURE__ */ _factoriesAnyJs.createCombinationsWithRep({
    typed
});
var cos = /* #__PURE__ */ _factoriesAnyJs.createCos({
    typed
});
var csch = /* #__PURE__ */ _factoriesAnyJs.createCsch({
    BigNumber,
    typed
});
var isNaN = /* #__PURE__ */ _factoriesAnyJs.createIsNaN({
    typed
});
var isPrime = /* #__PURE__ */ _factoriesAnyJs.createIsPrime({
    typed
});
var randomInt = /* #__PURE__ */ _factoriesAnyJs.createRandomInt({
    config: _configReadonlyJs.config,
    typed
});
var sech = /* #__PURE__ */ _factoriesAnyJs.createSech({
    BigNumber,
    typed
});
var sinh = /* #__PURE__ */ _factoriesAnyJs.createSinh({
    typed
});
var sparse = /* #__PURE__ */ _factoriesAnyJs.createSparse({
    SparseMatrix,
    typed
});
var sqrt = /* #__PURE__ */ _factoriesAnyJs.createSqrt({
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var tanh = /* #__PURE__ */ _factoriesAnyJs.createTanh({
    typed
});
var unaryMinus = /* #__PURE__ */ _factoriesAnyJs.createUnaryMinus({
    typed
});
var acoth = /* #__PURE__ */ _factoriesAnyJs.createAcoth({
    BigNumber,
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var cot = /* #__PURE__ */ _factoriesAnyJs.createCot({
    BigNumber,
    typed
});
var fraction = /* #__PURE__ */ _factoriesAnyJs.createFraction({
    Fraction,
    typed
});
var isNumeric = /* #__PURE__ */ _factoriesAnyJs.createIsNumeric({
    typed
});
var matrix = /* #__PURE__ */ _factoriesAnyJs.createMatrix({
    DenseMatrix,
    Matrix,
    SparseMatrix,
    typed
});
var matrixFromFunction = /* #__PURE__ */ _factoriesAnyJs.createMatrixFromFunction({
    isZero,
    matrix,
    typed
});
var mod = /* #__PURE__ */ _factoriesAnyJs.createMod({
    DenseMatrix,
    equalScalar,
    matrix,
    typed
});
var nthRoot = /* #__PURE__ */ _factoriesAnyJs.createNthRoot({
    BigNumber,
    equalScalar,
    matrix,
    typed
});
var numeric = /* #__PURE__ */ _factoriesAnyJs.createNumeric({
    bignumber,
    fraction,
    number
});
var or = /* #__PURE__ */ _factoriesAnyJs.createOr({
    DenseMatrix,
    equalScalar,
    matrix,
    typed
});
var prod = /* #__PURE__ */ _factoriesAnyJs.createProd({
    config: _configReadonlyJs.config,
    multiplyScalar,
    numeric,
    typed
});
var reshape = /* #__PURE__ */ _factoriesAnyJs.createReshape({
    isInteger,
    matrix,
    typed
});
var size = /* #__PURE__ */ _factoriesAnyJs.createSize({
    matrix,
    config: _configReadonlyJs.config,
    typed
});
var smaller = /* #__PURE__ */ _factoriesAnyJs.createSmaller({
    DenseMatrix,
    config: _configReadonlyJs.config,
    matrix,
    typed
});
var squeeze = /* #__PURE__ */ _factoriesAnyJs.createSqueeze({
    matrix,
    typed
});
var subset = /* #__PURE__ */ _factoriesAnyJs.createSubset({
    matrix,
    typed
});
var subtract = /* #__PURE__ */ _factoriesAnyJs.createSubtract({
    DenseMatrix,
    addScalar,
    equalScalar,
    matrix,
    typed,
    unaryMinus
});
var to = /* #__PURE__ */ _factoriesAnyJs.createTo({
    matrix,
    typed
});
var transpose = /* #__PURE__ */ _factoriesAnyJs.createTranspose({
    matrix,
    typed
});
var xgcd = /* #__PURE__ */ _factoriesAnyJs.createXgcd({
    BigNumber,
    config: _configReadonlyJs.config,
    matrix,
    typed
});
var zeros = /* #__PURE__ */ _factoriesAnyJs.createZeros({
    BigNumber,
    config: _configReadonlyJs.config,
    matrix,
    typed
});
var and = /* #__PURE__ */ _factoriesAnyJs.createAnd({
    equalScalar,
    matrix,
    not,
    typed,
    zeros
});
var bitAnd = /* #__PURE__ */ _factoriesAnyJs.createBitAnd({
    equalScalar,
    matrix,
    typed
});
var bitXor = /* #__PURE__ */ _factoriesAnyJs.createBitXor({
    DenseMatrix,
    matrix,
    typed
});
var cbrt = /* #__PURE__ */ _factoriesAnyJs.createCbrt({
    BigNumber,
    Complex,
    Fraction,
    config: _configReadonlyJs.config,
    isNegative,
    matrix,
    typed,
    unaryMinus
});
var compare = /* #__PURE__ */ _factoriesAnyJs.createCompare({
    BigNumber,
    DenseMatrix,
    Fraction,
    config: _configReadonlyJs.config,
    equalScalar,
    matrix,
    typed
});
var compareText = /* #__PURE__ */ _factoriesAnyJs.createCompareText({
    matrix,
    typed
});
var concat = /* #__PURE__ */ _factoriesAnyJs.createConcat({
    isInteger,
    matrix,
    typed
});
var count = /* #__PURE__ */ _factoriesAnyJs.createCount({
    prod,
    size,
    typed
});
var ctranspose = /* #__PURE__ */ _factoriesAnyJs.createCtranspose({
    conj,
    transpose,
    typed
});
var diag = /* #__PURE__ */ _factoriesAnyJs.createDiag({
    DenseMatrix,
    SparseMatrix,
    matrix,
    typed
});
var divideScalar = /* #__PURE__ */ _factoriesAnyJs.createDivideScalar({
    numeric,
    typed
});
var dotDivide = /* #__PURE__ */ _factoriesAnyJs.createDotDivide({
    DenseMatrix,
    divideScalar,
    equalScalar,
    matrix,
    typed
});
var equal = /* #__PURE__ */ _factoriesAnyJs.createEqual({
    DenseMatrix,
    equalScalar,
    matrix,
    typed
});
var flatten = /* #__PURE__ */ _factoriesAnyJs.createFlatten({
    matrix,
    typed
});
var gcd = /* #__PURE__ */ _factoriesAnyJs.createGcd({
    BigNumber,
    DenseMatrix,
    equalScalar,
    matrix,
    typed
});
var hasNumericValue = /* #__PURE__ */ _factoriesAnyJs.createHasNumericValue({
    isNumeric,
    typed
});
var hypot = /* #__PURE__ */ _factoriesAnyJs.createHypot({
    abs,
    addScalar,
    divideScalar,
    isPositive,
    multiplyScalar,
    smaller,
    sqrt,
    typed
});
var ImmutableDenseMatrix = /* #__PURE__ */ _factoriesAnyJs.createImmutableDenseMatrixClass({
    DenseMatrix,
    smaller
});
var Index = /* #__PURE__ */ _factoriesAnyJs.createIndexClass({
    ImmutableDenseMatrix
});
var kron = /* #__PURE__ */ _factoriesAnyJs.createKron({
    matrix,
    multiplyScalar,
    typed
});
var largerEq = /* #__PURE__ */ _factoriesAnyJs.createLargerEq({
    DenseMatrix,
    config: _configReadonlyJs.config,
    matrix,
    typed
});
var leftShift = /* #__PURE__ */ _factoriesAnyJs.createLeftShift({
    DenseMatrix,
    equalScalar,
    matrix,
    typed,
    zeros
});
var lsolve = /* #__PURE__ */ _factoriesAnyJs.createLsolve({
    DenseMatrix,
    divideScalar,
    equalScalar,
    matrix,
    multiplyScalar,
    subtract,
    typed
});
var matrixFromColumns = /* #__PURE__ */ _factoriesAnyJs.createMatrixFromColumns({
    flatten,
    matrix,
    size,
    typed
});
var min = /* #__PURE__ */ _factoriesAnyJs.createMin({
    config: _configReadonlyJs.config,
    numeric,
    smaller,
    typed
});
var mode = /* #__PURE__ */ _factoriesAnyJs.createMode({
    isNaN,
    isNumeric,
    typed
});
var nthRoots = /* #__PURE__ */ _factoriesAnyJs.createNthRoots({
    Complex,
    config: _configReadonlyJs.config,
    divideScalar,
    typed
});
var ones = /* #__PURE__ */ _factoriesAnyJs.createOnes({
    BigNumber,
    config: _configReadonlyJs.config,
    matrix,
    typed
});
var partitionSelect = /* #__PURE__ */ _factoriesAnyJs.createPartitionSelect({
    compare,
    isNaN,
    isNumeric,
    typed
});
var resize = /* #__PURE__ */ _factoriesAnyJs.createResize({
    config: _configReadonlyJs.config,
    matrix
});
var rightLogShift = /* #__PURE__ */ _factoriesAnyJs.createRightLogShift({
    DenseMatrix,
    equalScalar,
    matrix,
    typed,
    zeros
});
var round = /* #__PURE__ */ _factoriesAnyJs.createRound({
    BigNumber,
    DenseMatrix,
    equalScalar,
    matrix,
    typed,
    zeros
});
var smallerEq = /* #__PURE__ */ _factoriesAnyJs.createSmallerEq({
    DenseMatrix,
    config: _configReadonlyJs.config,
    matrix,
    typed
});
var unequal = /* #__PURE__ */ _factoriesAnyJs.createUnequal({
    DenseMatrix,
    config: _configReadonlyJs.config,
    equalScalar,
    matrix,
    typed
});
var usolve = /* #__PURE__ */ _factoriesAnyJs.createUsolve({
    DenseMatrix,
    divideScalar,
    equalScalar,
    matrix,
    multiplyScalar,
    subtract,
    typed
});
var xor = /* #__PURE__ */ _factoriesAnyJs.createXor({
    DenseMatrix,
    matrix,
    typed
});
var add = /* #__PURE__ */ _factoriesAnyJs.createAdd({
    DenseMatrix,
    SparseMatrix,
    addScalar,
    equalScalar,
    matrix,
    typed
});
var atan2 = /* #__PURE__ */ _factoriesAnyJs.createAtan2({
    BigNumber,
    DenseMatrix,
    equalScalar,
    matrix,
    typed
});
var bitOr = /* #__PURE__ */ _factoriesAnyJs.createBitOr({
    DenseMatrix,
    equalScalar,
    matrix,
    typed
});
var catalan = /* #__PURE__ */ _factoriesAnyJs.createCatalan({
    addScalar,
    combinations,
    divideScalar,
    isInteger,
    isNegative,
    multiplyScalar,
    typed
});
var compareNatural = /* #__PURE__ */ _factoriesAnyJs.createCompareNatural({
    compare,
    typed
});
var deepEqual = /* #__PURE__ */ _factoriesAnyJs.createDeepEqual({
    equal,
    typed
});
var diff = /* #__PURE__ */ _factoriesAnyJs.createDiff({
    matrix,
    number,
    subtract,
    typed
});
var dot = /* #__PURE__ */ _factoriesAnyJs.createDot({
    addScalar,
    conj,
    multiplyScalar,
    size,
    typed
});
var equalText = /* #__PURE__ */ _factoriesAnyJs.createEqualText({
    compareText,
    isZero,
    typed
});
var floor = /* #__PURE__ */ _factoriesAnyJs.createFloor({
    config: _configReadonlyJs.config,
    equalScalar,
    matrix,
    round,
    typed
});
var identity = /* #__PURE__ */ _factoriesAnyJs.createIdentity({
    BigNumber,
    DenseMatrix,
    SparseMatrix,
    config: _configReadonlyJs.config,
    matrix,
    typed
});
var larger = /* #__PURE__ */ _factoriesAnyJs.createLarger({
    DenseMatrix,
    config: _configReadonlyJs.config,
    matrix,
    typed
});
var log = /* #__PURE__ */ _factoriesAnyJs.createLog({
    Complex,
    config: _configReadonlyJs.config,
    divideScalar,
    typed
});
var lsolveAll = /* #__PURE__ */ _factoriesAnyJs.createLsolveAll({
    DenseMatrix,
    divideScalar,
    equalScalar,
    matrix,
    multiplyScalar,
    subtract,
    typed
});
var matrixFromRows = /* #__PURE__ */ _factoriesAnyJs.createMatrixFromRows({
    flatten,
    matrix,
    size,
    typed
});
var multiply = /* #__PURE__ */ _factoriesAnyJs.createMultiply({
    addScalar,
    dot,
    equalScalar,
    matrix,
    multiplyScalar,
    typed
});
var pow = /* #__PURE__ */ _factoriesAnyJs.createPow({
    Complex,
    config: _configReadonlyJs.config,
    fraction,
    identity,
    matrix,
    multiply,
    number,
    typed
});
var qr = /* #__PURE__ */ _factoriesAnyJs.createQr({
    addScalar,
    complex,
    conj,
    divideScalar,
    equal,
    identity,
    isZero,
    matrix,
    multiplyScalar,
    sign,
    sqrt,
    subtract,
    typed,
    unaryMinus,
    zeros
});
var range = /* #__PURE__ */ _factoriesAnyJs.createRange({
    bignumber,
    matrix,
    config: _configReadonlyJs.config,
    larger,
    largerEq,
    smaller,
    smallerEq,
    typed
});
var rightArithShift = /* #__PURE__ */ _factoriesAnyJs.createRightArithShift({
    DenseMatrix,
    equalScalar,
    matrix,
    typed,
    zeros
});
var row = /* #__PURE__ */ _factoriesAnyJs.createRow({
    Index,
    matrix,
    range,
    typed
});
var setCartesian = /* #__PURE__ */ _factoriesAnyJs.createSetCartesian({
    DenseMatrix,
    Index,
    compareNatural,
    size,
    subset,
    typed
});
var setDistinct = /* #__PURE__ */ _factoriesAnyJs.createSetDistinct({
    DenseMatrix,
    Index,
    compareNatural,
    size,
    subset,
    typed
});
var setIsSubset = /* #__PURE__ */ _factoriesAnyJs.createSetIsSubset({
    Index,
    compareNatural,
    size,
    subset,
    typed
});
var setPowerset = /* #__PURE__ */ _factoriesAnyJs.createSetPowerset({
    Index,
    compareNatural,
    size,
    subset,
    typed
});
var slu = /* #__PURE__ */ _factoriesAnyJs.createSlu({
    SparseMatrix,
    abs,
    add,
    divideScalar,
    larger,
    largerEq,
    multiply,
    subtract,
    transpose,
    typed
});
var sum = /* #__PURE__ */ _factoriesAnyJs.createSum({
    add,
    config: _configReadonlyJs.config,
    numeric,
    typed
});
var trace = /* #__PURE__ */ _factoriesAnyJs.createTrace({
    add,
    matrix,
    typed
});
var usolveAll = /* #__PURE__ */ _factoriesAnyJs.createUsolveAll({
    DenseMatrix,
    divideScalar,
    equalScalar,
    matrix,
    multiplyScalar,
    subtract,
    typed
});
var asin = /* #__PURE__ */ _factoriesAnyJs.createAsin({
    Complex,
    config: _configReadonlyJs.config,
    typed
});
var ceil = /* #__PURE__ */ _factoriesAnyJs.createCeil({
    config: _configReadonlyJs.config,
    equalScalar,
    matrix,
    round,
    typed
});
var column = /* #__PURE__ */ _factoriesAnyJs.createColumn({
    Index,
    matrix,
    range,
    typed
});
var composition = /* #__PURE__ */ _factoriesAnyJs.createComposition({
    addScalar,
    combinations,
    isInteger,
    isNegative,
    isPositive,
    larger,
    typed
});
var cross = /* #__PURE__ */ _factoriesAnyJs.createCross({
    matrix,
    multiply,
    subtract,
    typed
});
var distance = /* #__PURE__ */ _factoriesAnyJs.createDistance({
    abs,
    addScalar,
    divideScalar,
    multiplyScalar,
    sqrt,
    subtract,
    typed,
    unaryMinus
});
var dotMultiply = /* #__PURE__ */ _factoriesAnyJs.createDotMultiply({
    equalScalar,
    matrix,
    multiplyScalar,
    typed
});
var FibonacciHeap = /* #__PURE__ */ _factoriesAnyJs.createFibonacciHeapClass({
    larger,
    smaller
});
var fix = /* #__PURE__ */ _factoriesAnyJs.createFix({
    Complex,
    ceil,
    floor,
    matrix,
    typed
});
var gamma = /* #__PURE__ */ _factoriesAnyJs.createGamma({
    BigNumber,
    Complex,
    config: _configReadonlyJs.config,
    multiplyScalar,
    pow,
    typed
});
var index = /* #__PURE__ */ _factoriesAnyJs.createIndex({
    Index,
    typed
});
var lcm = /* #__PURE__ */ _factoriesAnyJs.createLcm({
    equalScalar,
    matrix,
    typed
});
var max = /* #__PURE__ */ _factoriesAnyJs.createMax({
    config: _configReadonlyJs.config,
    larger,
    numeric,
    typed
});
var quantileSeq = /* #__PURE__ */ _factoriesAnyJs.createQuantileSeq({
    add,
    compare,
    multiply,
    partitionSelect,
    typed
});
var setDifference = /* #__PURE__ */ _factoriesAnyJs.createSetDifference({
    DenseMatrix,
    Index,
    compareNatural,
    size,
    subset,
    typed
});
var setMultiplicity = /* #__PURE__ */ _factoriesAnyJs.createSetMultiplicity({
    Index,
    compareNatural,
    size,
    subset,
    typed
});
var setSymDifference = /* #__PURE__ */ _factoriesAnyJs.createSetSymDifference({
    Index,
    concat,
    setDifference,
    size,
    subset,
    typed
});
var sort = /* #__PURE__ */ _factoriesAnyJs.createSort({
    compare,
    compareNatural,
    matrix,
    typed
});
var Unit = /* #__PURE__ */ _factoriesAnyJs.createUnitClass({
    BigNumber,
    Complex,
    Fraction,
    abs,
    addScalar,
    config: _configReadonlyJs.config,
    divideScalar,
    equal,
    fix,
    format,
    isNumeric,
    multiplyScalar,
    number,
    pow,
    round,
    subtract
});
var vacuumImpedance = /* #__PURE__ */ _factoriesAnyJs.createVacuumImpedance({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var wienDisplacement = /* #__PURE__ */ _factoriesAnyJs.createWienDisplacement({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var atomicMass = /* #__PURE__ */ _factoriesAnyJs.createAtomicMass({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var bohrMagneton = /* #__PURE__ */ _factoriesAnyJs.createBohrMagneton({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var boltzmann = /* #__PURE__ */ _factoriesAnyJs.createBoltzmann({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var conductanceQuantum = /* #__PURE__ */ _factoriesAnyJs.createConductanceQuantum({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var createUnit = /* #__PURE__ */ _factoriesAnyJs.createCreateUnit({
    Unit,
    typed
});
var deuteronMass = /* #__PURE__ */ _factoriesAnyJs.createDeuteronMass({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var dotPow = /* #__PURE__ */ _factoriesAnyJs.createDotPow({
    DenseMatrix,
    equalScalar,
    matrix,
    pow,
    typed
});
var electricConstant = /* #__PURE__ */ _factoriesAnyJs.createElectricConstant({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var elementaryCharge = /* #__PURE__ */ _factoriesAnyJs.createElementaryCharge({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var factorial = /* #__PURE__ */ _factoriesAnyJs.createFactorial({
    gamma,
    typed
});
var fermiCoupling = /* #__PURE__ */ _factoriesAnyJs.createFermiCoupling({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var gasConstant = /* #__PURE__ */ _factoriesAnyJs.createGasConstant({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var gravity = /* #__PURE__ */ _factoriesAnyJs.createGravity({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var intersect = /* #__PURE__ */ _factoriesAnyJs.createIntersect({
    abs,
    add,
    addScalar,
    config: _configReadonlyJs.config,
    divideScalar,
    equalScalar,
    flatten,
    matrix,
    multiply,
    multiplyScalar,
    smaller,
    subtract,
    typed
});
var inverseConductanceQuantum = /* #__PURE__ */ _factoriesAnyJs.createInverseConductanceQuantum({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var klitzing = /* #__PURE__ */ _factoriesAnyJs.createKlitzing({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var loschmidt = /* #__PURE__ */ _factoriesAnyJs.createLoschmidt({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var magneticConstant = /* #__PURE__ */ _factoriesAnyJs.createMagneticConstant({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var molarMass = /* #__PURE__ */ _factoriesAnyJs.createMolarMass({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var molarPlanckConstant = /* #__PURE__ */ _factoriesAnyJs.createMolarPlanckConstant({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var neutronMass = /* #__PURE__ */ _factoriesAnyJs.createNeutronMass({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var nuclearMagneton = /* #__PURE__ */ _factoriesAnyJs.createNuclearMagneton({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var permutations = /* #__PURE__ */ _factoriesAnyJs.createPermutations({
    factorial,
    typed
});
var planckConstant = /* #__PURE__ */ _factoriesAnyJs.createPlanckConstant({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var planckMass = /* #__PURE__ */ _factoriesAnyJs.createPlanckMass({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var planckTime = /* #__PURE__ */ _factoriesAnyJs.createPlanckTime({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var quantumOfCirculation = /* #__PURE__ */ _factoriesAnyJs.createQuantumOfCirculation({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var reducedPlanckConstant = /* #__PURE__ */ _factoriesAnyJs.createReducedPlanckConstant({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var rydberg = /* #__PURE__ */ _factoriesAnyJs.createRydberg({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var setIntersect = /* #__PURE__ */ _factoriesAnyJs.createSetIntersect({
    DenseMatrix,
    Index,
    compareNatural,
    size,
    subset,
    typed
});
var setUnion = /* #__PURE__ */ _factoriesAnyJs.createSetUnion({
    Index,
    concat,
    setIntersect,
    setSymDifference,
    size,
    subset,
    typed
});
var Spa = /* #__PURE__ */ _factoriesAnyJs.createSpaClass({
    FibonacciHeap,
    addScalar,
    equalScalar
});
var stefanBoltzmann = /* #__PURE__ */ _factoriesAnyJs.createStefanBoltzmann({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var unit = /* #__PURE__ */ _factoriesAnyJs.createUnitFunction({
    Unit,
    typed
});
var avogadro = /* #__PURE__ */ _factoriesAnyJs.createAvogadro({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var bohrRadius = /* #__PURE__ */ _factoriesAnyJs.createBohrRadius({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var coulomb = /* #__PURE__ */ _factoriesAnyJs.createCoulomb({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var electronMass = /* #__PURE__ */ _factoriesAnyJs.createElectronMass({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var faraday = /* #__PURE__ */ _factoriesAnyJs.createFaraday({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var hartreeEnergy = /* #__PURE__ */ _factoriesAnyJs.createHartreeEnergy({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var log1p = /* #__PURE__ */ _factoriesAnyJs.createLog1p({
    Complex,
    config: _configReadonlyJs.config,
    divideScalar,
    log,
    typed
});
var magneticFluxQuantum = /* #__PURE__ */ _factoriesAnyJs.createMagneticFluxQuantum({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var molarMassC12 = /* #__PURE__ */ _factoriesAnyJs.createMolarMassC12({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var planckCharge = /* #__PURE__ */ _factoriesAnyJs.createPlanckCharge({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var planckTemperature = /* #__PURE__ */ _factoriesAnyJs.createPlanckTemperature({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var secondRadiation = /* #__PURE__ */ _factoriesAnyJs.createSecondRadiation({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var speedOfLight = /* #__PURE__ */ _factoriesAnyJs.createSpeedOfLight({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var stirlingS2 = /* #__PURE__ */ _factoriesAnyJs.createStirlingS2({
    addScalar,
    combinations,
    divideScalar,
    factorial,
    isInteger,
    isNegative,
    larger,
    multiplyScalar,
    pow,
    subtract,
    typed
});
var bellNumbers = /* #__PURE__ */ _factoriesAnyJs.createBellNumbers({
    addScalar,
    isInteger,
    isNegative,
    stirlingS2,
    typed
});
var firstRadiation = /* #__PURE__ */ _factoriesAnyJs.createFirstRadiation({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var lup = /* #__PURE__ */ _factoriesAnyJs.createLup({
    DenseMatrix,
    Spa,
    SparseMatrix,
    abs,
    addScalar,
    divideScalar,
    equalScalar,
    larger,
    matrix,
    multiplyScalar,
    subtract,
    typed,
    unaryMinus
});
var molarVolume = /* #__PURE__ */ _factoriesAnyJs.createMolarVolume({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var protonMass = /* #__PURE__ */ _factoriesAnyJs.createProtonMass({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var setSize = /* #__PURE__ */ _factoriesAnyJs.createSetSize({
    compareNatural,
    typed
});
var thomsonCrossSection = /* #__PURE__ */ _factoriesAnyJs.createThomsonCrossSection({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var classicalElectronRadius = /* #__PURE__ */ _factoriesAnyJs.createClassicalElectronRadius({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var det = /* #__PURE__ */ _factoriesAnyJs.createDet({
    lup,
    matrix,
    multiply,
    subtract,
    typed,
    unaryMinus
});
var gravitationConstant = /* #__PURE__ */ _factoriesAnyJs.createGravitationConstant({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var inv = /* #__PURE__ */ _factoriesAnyJs.createInv({
    abs,
    addScalar,
    det,
    divideScalar,
    identity,
    matrix,
    multiply,
    typed,
    unaryMinus
});
var lusolve = /* #__PURE__ */ _factoriesAnyJs.createLusolve({
    DenseMatrix,
    lsolve,
    lup,
    matrix,
    slu,
    typed,
    usolve
});
var sqrtm = /* #__PURE__ */ _factoriesAnyJs.createSqrtm({
    abs,
    add,
    identity,
    inv,
    max,
    multiply,
    size,
    sqrt,
    subtract,
    typed
});
var divide = /* #__PURE__ */ _factoriesAnyJs.createDivide({
    divideScalar,
    equalScalar,
    inv,
    matrix,
    multiply,
    typed
});
var expm = /* #__PURE__ */ _factoriesAnyJs.createExpm({
    abs,
    add,
    identity,
    inv,
    multiply,
    typed
});
var kldivergence = /* #__PURE__ */ _factoriesAnyJs.createKldivergence({
    divide,
    dotDivide,
    isNumeric,
    log,
    matrix,
    multiply,
    sum,
    typed
});
var mean = /* #__PURE__ */ _factoriesAnyJs.createMean({
    add,
    divide,
    typed
});
var median = /* #__PURE__ */ _factoriesAnyJs.createMedian({
    add,
    compare,
    divide,
    partitionSelect,
    typed
});
var planckLength = /* #__PURE__ */ _factoriesAnyJs.createPlanckLength({
    BigNumber,
    Unit,
    config: _configReadonlyJs.config
});
var variance = /* #__PURE__ */ _factoriesAnyJs.createVariance({
    add,
    apply,
    divide,
    isNaN,
    multiply,
    subtract,
    typed
});
var std = /* #__PURE__ */ _factoriesAnyJs.createStd({
    sqrt,
    typed,
    variance
});
var eigs = /* #__PURE__ */ _factoriesAnyJs.createEigs({
    abs,
    add,
    addScalar,
    atan,
    bignumber,
    column,
    complex,
    config: _configReadonlyJs.config,
    cos,
    diag,
    divideScalar,
    dot,
    equal,
    flatten,
    im,
    inv,
    larger,
    matrix,
    matrixFromColumns,
    multiply,
    multiplyScalar,
    number,
    qr,
    re,
    sin,
    smaller,
    sqrt,
    subtract,
    typed,
    usolve,
    usolveAll
});
var multinomial = /* #__PURE__ */ _factoriesAnyJs.createMultinomial({
    add,
    divide,
    factorial,
    isInteger,
    isPositive,
    multiply,
    typed
});
var mad = /* #__PURE__ */ _factoriesAnyJs.createMad({
    abs,
    map,
    median,
    subtract,
    typed
});
var norm = /* #__PURE__ */ _factoriesAnyJs.createNorm({
    abs,
    add,
    conj,
    ctranspose,
    eigs,
    equalScalar,
    larger,
    matrix,
    multiply,
    pow,
    smaller,
    sqrt,
    typed
});
var rotationMatrix = /* #__PURE__ */ _factoriesAnyJs.createRotationMatrix({
    BigNumber,
    DenseMatrix,
    SparseMatrix,
    addScalar,
    config: _configReadonlyJs.config,
    cos,
    matrix,
    multiplyScalar,
    norm,
    sin,
    typed,
    unaryMinus
});
var rotate = /* #__PURE__ */ _factoriesAnyJs.createRotate({
    multiply,
    rotationMatrix,
    typed
});

},{"./configReadonly.js":"lfECl","../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"epPmk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTyped", ()=>_typedJs.createTyped
);
parcelHelpers.export(exports, "createResultSet", ()=>_resultSetJs.createResultSet
);
parcelHelpers.export(exports, "createBigNumberClass", ()=>_bigNumberJs.createBigNumberClass
);
parcelHelpers.export(exports, "createComplexClass", ()=>_complexJs.createComplexClass
);
parcelHelpers.export(exports, "createFractionClass", ()=>_fractionJs.createFractionClass
);
parcelHelpers.export(exports, "createRangeClass", ()=>_rangeJs.createRangeClass
);
parcelHelpers.export(exports, "createMatrixClass", ()=>_matrixJs.createMatrixClass
);
parcelHelpers.export(exports, "createDenseMatrixClass", ()=>_denseMatrixJs.createDenseMatrixClass
);
parcelHelpers.export(exports, "createClone", ()=>_cloneJs.createClone
);
parcelHelpers.export(exports, "createIsInteger", ()=>_isIntegerJs.createIsInteger
);
parcelHelpers.export(exports, "createIsNegative", ()=>_isNegativeJs.createIsNegative
);
parcelHelpers.export(exports, "createIsNumeric", ()=>_isNumericJs.createIsNumeric
);
parcelHelpers.export(exports, "createHasNumericValue", ()=>_hasNumericValueJs.createHasNumericValue
);
parcelHelpers.export(exports, "createIsPositive", ()=>_isPositiveJs.createIsPositive
);
parcelHelpers.export(exports, "createIsZero", ()=>_isZeroJs.createIsZero
);
parcelHelpers.export(exports, "createIsNaN", ()=>_isNaNJs.createIsNaN
);
parcelHelpers.export(exports, "createTypeOf", ()=>_typeOfJs.createTypeOf
);
parcelHelpers.export(exports, "createEqualScalar", ()=>_equalScalarJs.createEqualScalar
);
parcelHelpers.export(exports, "createSparseMatrixClass", ()=>_sparseMatrixJs.createSparseMatrixClass
);
parcelHelpers.export(exports, "createNumber", ()=>_numberJs.createNumber
);
parcelHelpers.export(exports, "createString", ()=>_stringJs.createString
);
parcelHelpers.export(exports, "createBoolean", ()=>_booleanJs.createBoolean
);
parcelHelpers.export(exports, "createBignumber", ()=>_bignumberJs.createBignumber
);
parcelHelpers.export(exports, "createComplex", ()=>_complexJs1.createComplex
);
parcelHelpers.export(exports, "createFraction", ()=>_fractionJs1.createFraction
);
parcelHelpers.export(exports, "createMatrix", ()=>_matrixJs1.createMatrix
);
parcelHelpers.export(exports, "createMatrixFromFunction", ()=>_matrixFromFunctionJs.createMatrixFromFunction
);
parcelHelpers.export(exports, "createMatrixFromRows", ()=>_matrixFromRowsJs.createMatrixFromRows
);
parcelHelpers.export(exports, "createMatrixFromColumns", ()=>_matrixFromColumnsJs.createMatrixFromColumns
);
parcelHelpers.export(exports, "createSplitUnit", ()=>_splitUnitJs.createSplitUnit
);
parcelHelpers.export(exports, "createUnaryMinus", ()=>_unaryMinusJs.createUnaryMinus
);
parcelHelpers.export(exports, "createUnaryPlus", ()=>_unaryPlusJs.createUnaryPlus
);
parcelHelpers.export(exports, "createAbs", ()=>_absJs.createAbs
);
parcelHelpers.export(exports, "createApply", ()=>_applyJs.createApply
);
parcelHelpers.export(exports, "createAddScalar", ()=>_addScalarJs.createAddScalar
);
parcelHelpers.export(exports, "createCbrt", ()=>_cbrtJs.createCbrt
);
parcelHelpers.export(exports, "createCeil", ()=>_ceilJs.createCeil
);
parcelHelpers.export(exports, "createCube", ()=>_cubeJs.createCube
);
parcelHelpers.export(exports, "createExp", ()=>_expJs.createExp
);
parcelHelpers.export(exports, "createExpm1", ()=>_expm1Js.createExpm1
);
parcelHelpers.export(exports, "createFix", ()=>_fixJs.createFix
);
parcelHelpers.export(exports, "createFloor", ()=>_floorJs.createFloor
);
parcelHelpers.export(exports, "createGcd", ()=>_gcdJs.createGcd
);
parcelHelpers.export(exports, "createLcm", ()=>_lcmJs.createLcm
);
parcelHelpers.export(exports, "createLog10", ()=>_log10Js.createLog10
);
parcelHelpers.export(exports, "createLog2", ()=>_log2Js.createLog2
);
parcelHelpers.export(exports, "createMod", ()=>_modJs.createMod
);
parcelHelpers.export(exports, "createMultiplyScalar", ()=>_multiplyScalarJs.createMultiplyScalar
);
parcelHelpers.export(exports, "createMultiply", ()=>_multiplyJs.createMultiply
);
parcelHelpers.export(exports, "createNthRoot", ()=>_nthRootJs.createNthRoot
);
parcelHelpers.export(exports, "createSign", ()=>_signJs.createSign
);
parcelHelpers.export(exports, "createSqrt", ()=>_sqrtJs.createSqrt
);
parcelHelpers.export(exports, "createSquare", ()=>_squareJs.createSquare
);
parcelHelpers.export(exports, "createSubtract", ()=>_subtractJs.createSubtract
);
parcelHelpers.export(exports, "createXgcd", ()=>_xgcdJs.createXgcd
);
parcelHelpers.export(exports, "createDotMultiply", ()=>_dotMultiplyJs.createDotMultiply
);
parcelHelpers.export(exports, "createBitAnd", ()=>_bitAndJs.createBitAnd
);
parcelHelpers.export(exports, "createBitNot", ()=>_bitNotJs.createBitNot
);
parcelHelpers.export(exports, "createBitOr", ()=>_bitOrJs.createBitOr
);
parcelHelpers.export(exports, "createBitXor", ()=>_bitXorJs.createBitXor
);
parcelHelpers.export(exports, "createArg", ()=>_argJs.createArg
);
parcelHelpers.export(exports, "createConj", ()=>_conjJs.createConj
);
parcelHelpers.export(exports, "createIm", ()=>_imJs.createIm
);
parcelHelpers.export(exports, "createRe", ()=>_reJs.createRe
);
parcelHelpers.export(exports, "createNot", ()=>_notJs.createNot
);
parcelHelpers.export(exports, "createOr", ()=>_orJs.createOr
);
parcelHelpers.export(exports, "createXor", ()=>_xorJs.createXor
);
parcelHelpers.export(exports, "createConcat", ()=>_concatJs.createConcat
);
parcelHelpers.export(exports, "createColumn", ()=>_columnJs.createColumn
);
parcelHelpers.export(exports, "createCount", ()=>_countJs.createCount
);
parcelHelpers.export(exports, "createCross", ()=>_crossJs.createCross
);
parcelHelpers.export(exports, "createDiag", ()=>_diagJs.createDiag
);
parcelHelpers.export(exports, "createFilter", ()=>_filterJs.createFilter
);
parcelHelpers.export(exports, "createFlatten", ()=>_flattenJs.createFlatten
);
parcelHelpers.export(exports, "createForEach", ()=>_forEachJs.createForEach
);
parcelHelpers.export(exports, "createGetMatrixDataType", ()=>_getMatrixDataTypeJs.createGetMatrixDataType
);
parcelHelpers.export(exports, "createIdentity", ()=>_identityJs.createIdentity
);
parcelHelpers.export(exports, "createKron", ()=>_kronJs.createKron
);
parcelHelpers.export(exports, "createMap", ()=>_mapJs.createMap
);
parcelHelpers.export(exports, "createDiff", ()=>_diffJs.createDiff
);
parcelHelpers.export(exports, "createOnes", ()=>_onesJs.createOnes
);
parcelHelpers.export(exports, "createRange", ()=>_rangeJs1.createRange
);
parcelHelpers.export(exports, "createReshape", ()=>_reshapeJs.createReshape
);
parcelHelpers.export(exports, "createResize", ()=>_resizeJs.createResize
);
parcelHelpers.export(exports, "createRotate", ()=>_rotateJs.createRotate
);
parcelHelpers.export(exports, "createRotationMatrix", ()=>_rotationMatrixJs.createRotationMatrix
);
parcelHelpers.export(exports, "createRow", ()=>_rowJs.createRow
);
parcelHelpers.export(exports, "createSize", ()=>_sizeJs.createSize
);
parcelHelpers.export(exports, "createSqueeze", ()=>_squeezeJs.createSqueeze
);
parcelHelpers.export(exports, "createSubset", ()=>_subsetJs.createSubset
);
parcelHelpers.export(exports, "createTranspose", ()=>_transposeJs.createTranspose
);
parcelHelpers.export(exports, "createCtranspose", ()=>_ctransposeJs.createCtranspose
);
parcelHelpers.export(exports, "createZeros", ()=>_zerosJs.createZeros
);
parcelHelpers.export(exports, "createErf", ()=>_erfJs.createErf
);
parcelHelpers.export(exports, "createMode", ()=>_modeJs.createMode
);
parcelHelpers.export(exports, "createProd", ()=>_prodJs.createProd
);
parcelHelpers.export(exports, "createFormat", ()=>_formatJs.createFormat
);
parcelHelpers.export(exports, "createBin", ()=>_binJs.createBin
);
parcelHelpers.export(exports, "createOct", ()=>_octJs.createOct
);
parcelHelpers.export(exports, "createHex", ()=>_hexJs.createHex
);
parcelHelpers.export(exports, "createPrint", ()=>_printJs.createPrint
);
parcelHelpers.export(exports, "createTo", ()=>_toJs.createTo
);
parcelHelpers.export(exports, "createIsPrime", ()=>_isPrimeJs.createIsPrime
);
parcelHelpers.export(exports, "createNumeric", ()=>_numericJs.createNumeric
);
parcelHelpers.export(exports, "createDivideScalar", ()=>_divideScalarJs.createDivideScalar
);
parcelHelpers.export(exports, "createPow", ()=>_powJs.createPow
);
parcelHelpers.export(exports, "createRound", ()=>_roundJs.createRound
);
parcelHelpers.export(exports, "createLog", ()=>_logJs.createLog
);
parcelHelpers.export(exports, "createLog1p", ()=>_log1PJs.createLog1p
);
parcelHelpers.export(exports, "createNthRoots", ()=>_nthRootsJs.createNthRoots
);
parcelHelpers.export(exports, "createDotPow", ()=>_dotPowJs.createDotPow
);
parcelHelpers.export(exports, "createDotDivide", ()=>_dotDivideJs.createDotDivide
);
parcelHelpers.export(exports, "createLsolve", ()=>_lsolveJs.createLsolve
);
parcelHelpers.export(exports, "createUsolve", ()=>_usolveJs.createUsolve
);
parcelHelpers.export(exports, "createLsolveAll", ()=>_lsolveAllJs.createLsolveAll
);
parcelHelpers.export(exports, "createUsolveAll", ()=>_usolveAllJs.createUsolveAll
);
parcelHelpers.export(exports, "createLeftShift", ()=>_leftShiftJs.createLeftShift
);
parcelHelpers.export(exports, "createRightArithShift", ()=>_rightArithShiftJs.createRightArithShift
);
parcelHelpers.export(exports, "createRightLogShift", ()=>_rightLogShiftJs.createRightLogShift
);
parcelHelpers.export(exports, "createAnd", ()=>_andJs.createAnd
);
parcelHelpers.export(exports, "createCompare", ()=>_compareJs.createCompare
);
parcelHelpers.export(exports, "createCompareNatural", ()=>_compareNaturalJs.createCompareNatural
);
parcelHelpers.export(exports, "createCompareText", ()=>_compareTextJs.createCompareText
);
parcelHelpers.export(exports, "createEqual", ()=>_equalJs.createEqual
);
parcelHelpers.export(exports, "createEqualText", ()=>_equalTextJs.createEqualText
);
parcelHelpers.export(exports, "createSmaller", ()=>_smallerJs.createSmaller
);
parcelHelpers.export(exports, "createSmallerEq", ()=>_smallerEqJs.createSmallerEq
);
parcelHelpers.export(exports, "createLarger", ()=>_largerJs.createLarger
);
parcelHelpers.export(exports, "createLargerEq", ()=>_largerEqJs.createLargerEq
);
parcelHelpers.export(exports, "createDeepEqual", ()=>_deepEqualJs.createDeepEqual
);
parcelHelpers.export(exports, "createUnequal", ()=>_unequalJs.createUnequal
);
parcelHelpers.export(exports, "createPartitionSelect", ()=>_partitionSelectJs.createPartitionSelect
);
parcelHelpers.export(exports, "createSort", ()=>_sortJs.createSort
);
parcelHelpers.export(exports, "createMax", ()=>_maxJs.createMax
);
parcelHelpers.export(exports, "createMin", ()=>_minJs.createMin
);
parcelHelpers.export(exports, "createImmutableDenseMatrixClass", ()=>_immutableDenseMatrixJs.createImmutableDenseMatrixClass
);
parcelHelpers.export(exports, "createIndexClass", ()=>_matrixIndexJs.createIndexClass
);
parcelHelpers.export(exports, "createFibonacciHeapClass", ()=>_fibonacciHeapJs.createFibonacciHeapClass
);
parcelHelpers.export(exports, "createSpaClass", ()=>_spaJs.createSpaClass
);
parcelHelpers.export(exports, "createUnitClass", ()=>_unitJs.createUnitClass
);
parcelHelpers.export(exports, "createUnitFunction", ()=>_unitJs1.createUnitFunction
);
parcelHelpers.export(exports, "createSparse", ()=>_sparseJs.createSparse
);
parcelHelpers.export(exports, "createCreateUnit", ()=>_createUnitJs.createCreateUnit
);
parcelHelpers.export(exports, "createAcos", ()=>_acosJs.createAcos
);
parcelHelpers.export(exports, "createAcosh", ()=>_acoshJs.createAcosh
);
parcelHelpers.export(exports, "createAcot", ()=>_acotJs.createAcot
);
parcelHelpers.export(exports, "createAcoth", ()=>_acothJs.createAcoth
);
parcelHelpers.export(exports, "createAcsc", ()=>_acscJs.createAcsc
);
parcelHelpers.export(exports, "createAcsch", ()=>_acschJs.createAcsch
);
parcelHelpers.export(exports, "createAsec", ()=>_asecJs.createAsec
);
parcelHelpers.export(exports, "createAsech", ()=>_asechJs.createAsech
);
parcelHelpers.export(exports, "createAsin", ()=>_asinJs.createAsin
);
parcelHelpers.export(exports, "createAsinh", ()=>_asinhJs.createAsinh
);
parcelHelpers.export(exports, "createAtan", ()=>_atanJs.createAtan
);
parcelHelpers.export(exports, "createAtan2", ()=>_atan2Js.createAtan2
);
parcelHelpers.export(exports, "createAtanh", ()=>_atanhJs.createAtanh
);
parcelHelpers.export(exports, "createCos", ()=>_cosJs.createCos
);
parcelHelpers.export(exports, "createCosh", ()=>_coshJs.createCosh
);
parcelHelpers.export(exports, "createCot", ()=>_cotJs.createCot
);
parcelHelpers.export(exports, "createCoth", ()=>_cothJs.createCoth
);
parcelHelpers.export(exports, "createCsc", ()=>_cscJs.createCsc
);
parcelHelpers.export(exports, "createCsch", ()=>_cschJs.createCsch
);
parcelHelpers.export(exports, "createSec", ()=>_secJs.createSec
);
parcelHelpers.export(exports, "createSech", ()=>_sechJs.createSech
);
parcelHelpers.export(exports, "createSin", ()=>_sinJs.createSin
);
parcelHelpers.export(exports, "createSinh", ()=>_sinhJs.createSinh
);
parcelHelpers.export(exports, "createTan", ()=>_tanJs.createTan
);
parcelHelpers.export(exports, "createTanh", ()=>_tanhJs.createTanh
);
parcelHelpers.export(exports, "createSetCartesian", ()=>_setCartesianJs.createSetCartesian
);
parcelHelpers.export(exports, "createSetDifference", ()=>_setDifferenceJs.createSetDifference
);
parcelHelpers.export(exports, "createSetDistinct", ()=>_setDistinctJs.createSetDistinct
);
parcelHelpers.export(exports, "createSetIntersect", ()=>_setIntersectJs.createSetIntersect
);
parcelHelpers.export(exports, "createSetIsSubset", ()=>_setIsSubsetJs.createSetIsSubset
);
parcelHelpers.export(exports, "createSetMultiplicity", ()=>_setMultiplicityJs.createSetMultiplicity
);
parcelHelpers.export(exports, "createSetPowerset", ()=>_setPowersetJs.createSetPowerset
);
parcelHelpers.export(exports, "createSetSize", ()=>_setSizeJs.createSetSize
);
parcelHelpers.export(exports, "createSetSymDifference", ()=>_setSymDifferenceJs.createSetSymDifference
);
parcelHelpers.export(exports, "createSetUnion", ()=>_setUnionJs.createSetUnion
);
parcelHelpers.export(exports, "createAdd", ()=>_addJs.createAdd
);
parcelHelpers.export(exports, "createHypot", ()=>_hypotJs.createHypot
);
parcelHelpers.export(exports, "createNorm", ()=>_normJs.createNorm
);
parcelHelpers.export(exports, "createDot", ()=>_dotJs.createDot
);
parcelHelpers.export(exports, "createTrace", ()=>_traceJs.createTrace
);
parcelHelpers.export(exports, "createIndex", ()=>_indexJs.createIndex
);
parcelHelpers.export(exports, "createNode", ()=>_nodeJs.createNode
);
parcelHelpers.export(exports, "createAccessorNode", ()=>_accessorNodeJs.createAccessorNode
);
parcelHelpers.export(exports, "createArrayNode", ()=>_arrayNodeJs.createArrayNode
);
parcelHelpers.export(exports, "createAssignmentNode", ()=>_assignmentNodeJs.createAssignmentNode
);
parcelHelpers.export(exports, "createBlockNode", ()=>_blockNodeJs.createBlockNode
);
parcelHelpers.export(exports, "createConditionalNode", ()=>_conditionalNodeJs.createConditionalNode
);
parcelHelpers.export(exports, "createConstantNode", ()=>_constantNodeJs.createConstantNode
);
parcelHelpers.export(exports, "createFunctionAssignmentNode", ()=>_functionAssignmentNodeJs.createFunctionAssignmentNode
);
parcelHelpers.export(exports, "createIndexNode", ()=>_indexNodeJs.createIndexNode
);
parcelHelpers.export(exports, "createObjectNode", ()=>_objectNodeJs.createObjectNode
);
parcelHelpers.export(exports, "createOperatorNode", ()=>_operatorNodeJs.createOperatorNode
);
parcelHelpers.export(exports, "createParenthesisNode", ()=>_parenthesisNodeJs.createParenthesisNode
);
parcelHelpers.export(exports, "createRangeNode", ()=>_rangeNodeJs.createRangeNode
);
parcelHelpers.export(exports, "createRelationalNode", ()=>_relationalNodeJs.createRelationalNode
);
parcelHelpers.export(exports, "createSymbolNode", ()=>_symbolNodeJs.createSymbolNode
);
parcelHelpers.export(exports, "createFunctionNode", ()=>_functionNodeJs.createFunctionNode
);
parcelHelpers.export(exports, "createParse", ()=>_parseJs.createParse
);
parcelHelpers.export(exports, "createCompile", ()=>_compileJs.createCompile
);
parcelHelpers.export(exports, "createEvaluate", ()=>_evaluateJs.createEvaluate
);
parcelHelpers.export(exports, "createParserClass", ()=>_parserJs.createParserClass
);
parcelHelpers.export(exports, "createParser", ()=>_parserJs1.createParser
);
parcelHelpers.export(exports, "createLup", ()=>_lupJs.createLup
);
parcelHelpers.export(exports, "createQr", ()=>_qrJs.createQr
);
parcelHelpers.export(exports, "createSlu", ()=>_sluJs.createSlu
);
parcelHelpers.export(exports, "createLusolve", ()=>_lusolveJs.createLusolve
);
parcelHelpers.export(exports, "createHelpClass", ()=>_helpJs.createHelpClass
);
parcelHelpers.export(exports, "createChainClass", ()=>_chainJs.createChainClass
);
parcelHelpers.export(exports, "createHelp", ()=>_helpJs1.createHelp
);
parcelHelpers.export(exports, "createChain", ()=>_chainJs1.createChain
);
parcelHelpers.export(exports, "createDet", ()=>_detJs.createDet
);
parcelHelpers.export(exports, "createInv", ()=>_invJs.createInv
);
parcelHelpers.export(exports, "createEigs", ()=>_eigsJs.createEigs
);
parcelHelpers.export(exports, "createExpm", ()=>_expmJs.createExpm
);
parcelHelpers.export(exports, "createSqrtm", ()=>_sqrtmJs.createSqrtm
);
parcelHelpers.export(exports, "createDivide", ()=>_divideJs.createDivide
);
parcelHelpers.export(exports, "createDistance", ()=>_distanceJs.createDistance
);
parcelHelpers.export(exports, "createIntersect", ()=>_intersectJs.createIntersect
);
parcelHelpers.export(exports, "createSum", ()=>_sumJs.createSum
);
parcelHelpers.export(exports, "createMean", ()=>_meanJs.createMean
);
parcelHelpers.export(exports, "createMedian", ()=>_medianJs.createMedian
);
parcelHelpers.export(exports, "createMad", ()=>_madJs.createMad
);
parcelHelpers.export(exports, "createVariance", ()=>_varianceJs.createVariance
);
parcelHelpers.export(exports, "createQuantileSeq", ()=>_quantileSeqJs.createQuantileSeq
);
parcelHelpers.export(exports, "createStd", ()=>_stdJs.createStd
);
parcelHelpers.export(exports, "createCombinations", ()=>_combinationsJs.createCombinations
);
parcelHelpers.export(exports, "createCombinationsWithRep", ()=>_combinationsWithRepJs.createCombinationsWithRep
);
parcelHelpers.export(exports, "createGamma", ()=>_gammaJs.createGamma
);
parcelHelpers.export(exports, "createFactorial", ()=>_factorialJs.createFactorial
);
parcelHelpers.export(exports, "createKldivergence", ()=>_kldivergenceJs.createKldivergence
);
parcelHelpers.export(exports, "createMultinomial", ()=>_multinomialJs.createMultinomial
);
parcelHelpers.export(exports, "createPermutations", ()=>_permutationsJs.createPermutations
);
parcelHelpers.export(exports, "createPickRandom", ()=>_pickRandomJs.createPickRandom
);
parcelHelpers.export(exports, "createRandom", ()=>_randomJs.createRandom
);
parcelHelpers.export(exports, "createRandomInt", ()=>_randomIntJs.createRandomInt
);
parcelHelpers.export(exports, "createStirlingS2", ()=>_stirlingS2Js.createStirlingS2
);
parcelHelpers.export(exports, "createBellNumbers", ()=>_bellNumbersJs.createBellNumbers
);
parcelHelpers.export(exports, "createCatalan", ()=>_catalanJs.createCatalan
);
parcelHelpers.export(exports, "createComposition", ()=>_compositionJs.createComposition
);
parcelHelpers.export(exports, "createSimplify", ()=>_simplifyJs.createSimplify
);
parcelHelpers.export(exports, "createDerivative", ()=>_derivativeJs.createDerivative
);
parcelHelpers.export(exports, "createRationalize", ()=>_rationalizeJs.createRationalize
);
parcelHelpers.export(exports, "createReviver", ()=>_reviverJs.createReviver
);
parcelHelpers.export(exports, "createReplacer", ()=>_replacerJs.createReplacer
);
parcelHelpers.export(exports, "createE", ()=>_constantsJs.createE
);
parcelHelpers.export(exports, "createUppercaseE", ()=>_constantsJs.createUppercaseE
);
parcelHelpers.export(exports, "createFalse", ()=>_constantsJs.createFalse
);
parcelHelpers.export(exports, "createI", ()=>_constantsJs.createI
);
parcelHelpers.export(exports, "createInfinity", ()=>_constantsJs.createInfinity
);
parcelHelpers.export(exports, "createLN10", ()=>_constantsJs.createLN10
);
parcelHelpers.export(exports, "createLN2", ()=>_constantsJs.createLN2
);
parcelHelpers.export(exports, "createLOG10E", ()=>_constantsJs.createLOG10E
);
parcelHelpers.export(exports, "createLOG2E", ()=>_constantsJs.createLOG2E
);
parcelHelpers.export(exports, "createNaN", ()=>_constantsJs.createNaN
);
parcelHelpers.export(exports, "createNull", ()=>_constantsJs.createNull
);
parcelHelpers.export(exports, "createPhi", ()=>_constantsJs.createPhi
);
parcelHelpers.export(exports, "createPi", ()=>_constantsJs.createPi
);
parcelHelpers.export(exports, "createUppercasePi", ()=>_constantsJs.createUppercasePi
);
parcelHelpers.export(exports, "createSQRT1_2", ()=>_constantsJs.createSQRT1_2
);
parcelHelpers.export(exports, "createSQRT2", ()=>_constantsJs.createSQRT2
);
parcelHelpers.export(exports, "createTau", ()=>_constantsJs.createTau
);
parcelHelpers.export(exports, "createTrue", ()=>_constantsJs.createTrue
);
parcelHelpers.export(exports, "createVersion", ()=>_constantsJs.createVersion
);
parcelHelpers.export(exports, "createAtomicMass", ()=>_physicalConstantsJs.createAtomicMass
);
parcelHelpers.export(exports, "createAvogadro", ()=>_physicalConstantsJs.createAvogadro
);
parcelHelpers.export(exports, "createBohrMagneton", ()=>_physicalConstantsJs.createBohrMagneton
);
parcelHelpers.export(exports, "createBohrRadius", ()=>_physicalConstantsJs.createBohrRadius
);
parcelHelpers.export(exports, "createBoltzmann", ()=>_physicalConstantsJs.createBoltzmann
);
parcelHelpers.export(exports, "createClassicalElectronRadius", ()=>_physicalConstantsJs.createClassicalElectronRadius
);
parcelHelpers.export(exports, "createConductanceQuantum", ()=>_physicalConstantsJs.createConductanceQuantum
);
parcelHelpers.export(exports, "createCoulomb", ()=>_physicalConstantsJs.createCoulomb
);
parcelHelpers.export(exports, "createDeuteronMass", ()=>_physicalConstantsJs.createDeuteronMass
);
parcelHelpers.export(exports, "createEfimovFactor", ()=>_physicalConstantsJs.createEfimovFactor
);
parcelHelpers.export(exports, "createElectricConstant", ()=>_physicalConstantsJs.createElectricConstant
);
parcelHelpers.export(exports, "createElectronMass", ()=>_physicalConstantsJs.createElectronMass
);
parcelHelpers.export(exports, "createElementaryCharge", ()=>_physicalConstantsJs.createElementaryCharge
);
parcelHelpers.export(exports, "createFaraday", ()=>_physicalConstantsJs.createFaraday
);
parcelHelpers.export(exports, "createFermiCoupling", ()=>_physicalConstantsJs.createFermiCoupling
);
parcelHelpers.export(exports, "createFineStructure", ()=>_physicalConstantsJs.createFineStructure
);
parcelHelpers.export(exports, "createFirstRadiation", ()=>_physicalConstantsJs.createFirstRadiation
);
parcelHelpers.export(exports, "createGasConstant", ()=>_physicalConstantsJs.createGasConstant
);
parcelHelpers.export(exports, "createGravitationConstant", ()=>_physicalConstantsJs.createGravitationConstant
);
parcelHelpers.export(exports, "createGravity", ()=>_physicalConstantsJs.createGravity
);
parcelHelpers.export(exports, "createHartreeEnergy", ()=>_physicalConstantsJs.createHartreeEnergy
);
parcelHelpers.export(exports, "createInverseConductanceQuantum", ()=>_physicalConstantsJs.createInverseConductanceQuantum
);
parcelHelpers.export(exports, "createKlitzing", ()=>_physicalConstantsJs.createKlitzing
);
parcelHelpers.export(exports, "createLoschmidt", ()=>_physicalConstantsJs.createLoschmidt
);
parcelHelpers.export(exports, "createMagneticConstant", ()=>_physicalConstantsJs.createMagneticConstant
);
parcelHelpers.export(exports, "createMagneticFluxQuantum", ()=>_physicalConstantsJs.createMagneticFluxQuantum
);
parcelHelpers.export(exports, "createMolarMass", ()=>_physicalConstantsJs.createMolarMass
);
parcelHelpers.export(exports, "createMolarMassC12", ()=>_physicalConstantsJs.createMolarMassC12
);
parcelHelpers.export(exports, "createMolarPlanckConstant", ()=>_physicalConstantsJs.createMolarPlanckConstant
);
parcelHelpers.export(exports, "createMolarVolume", ()=>_physicalConstantsJs.createMolarVolume
);
parcelHelpers.export(exports, "createNeutronMass", ()=>_physicalConstantsJs.createNeutronMass
);
parcelHelpers.export(exports, "createNuclearMagneton", ()=>_physicalConstantsJs.createNuclearMagneton
);
parcelHelpers.export(exports, "createPlanckCharge", ()=>_physicalConstantsJs.createPlanckCharge
);
parcelHelpers.export(exports, "createPlanckConstant", ()=>_physicalConstantsJs.createPlanckConstant
);
parcelHelpers.export(exports, "createPlanckLength", ()=>_physicalConstantsJs.createPlanckLength
);
parcelHelpers.export(exports, "createPlanckMass", ()=>_physicalConstantsJs.createPlanckMass
);
parcelHelpers.export(exports, "createPlanckTemperature", ()=>_physicalConstantsJs.createPlanckTemperature
);
parcelHelpers.export(exports, "createPlanckTime", ()=>_physicalConstantsJs.createPlanckTime
);
parcelHelpers.export(exports, "createProtonMass", ()=>_physicalConstantsJs.createProtonMass
);
parcelHelpers.export(exports, "createQuantumOfCirculation", ()=>_physicalConstantsJs.createQuantumOfCirculation
);
parcelHelpers.export(exports, "createReducedPlanckConstant", ()=>_physicalConstantsJs.createReducedPlanckConstant
);
parcelHelpers.export(exports, "createRydberg", ()=>_physicalConstantsJs.createRydberg
);
parcelHelpers.export(exports, "createSackurTetrode", ()=>_physicalConstantsJs.createSackurTetrode
);
parcelHelpers.export(exports, "createSecondRadiation", ()=>_physicalConstantsJs.createSecondRadiation
);
parcelHelpers.export(exports, "createSpeedOfLight", ()=>_physicalConstantsJs.createSpeedOfLight
);
parcelHelpers.export(exports, "createStefanBoltzmann", ()=>_physicalConstantsJs.createStefanBoltzmann
);
parcelHelpers.export(exports, "createThomsonCrossSection", ()=>_physicalConstantsJs.createThomsonCrossSection
);
parcelHelpers.export(exports, "createVacuumImpedance", ()=>_physicalConstantsJs.createVacuumImpedance
);
parcelHelpers.export(exports, "createWeakMixingAngle", ()=>_physicalConstantsJs.createWeakMixingAngle
);
parcelHelpers.export(exports, "createWienDisplacement", ()=>_physicalConstantsJs.createWienDisplacement
);
parcelHelpers.export(exports, "createApplyTransform", ()=>_applyTransformJs.createApplyTransform
);
parcelHelpers.export(exports, "createColumnTransform", ()=>_columnTransformJs.createColumnTransform
);
parcelHelpers.export(exports, "createFilterTransform", ()=>_filterTransformJs.createFilterTransform
);
parcelHelpers.export(exports, "createForEachTransform", ()=>_forEachTransformJs.createForEachTransform
);
parcelHelpers.export(exports, "createIndexTransform", ()=>_indexTransformJs.createIndexTransform
);
parcelHelpers.export(exports, "createMapTransform", ()=>_mapTransformJs.createMapTransform
);
parcelHelpers.export(exports, "createMaxTransform", ()=>_maxTransformJs.createMaxTransform
);
parcelHelpers.export(exports, "createMeanTransform", ()=>_meanTransformJs.createMeanTransform
);
parcelHelpers.export(exports, "createMinTransform", ()=>_minTransformJs.createMinTransform
);
parcelHelpers.export(exports, "createRangeTransform", ()=>_rangeTransformJs.createRangeTransform
);
parcelHelpers.export(exports, "createRowTransform", ()=>_rowTransformJs.createRowTransform
);
parcelHelpers.export(exports, "createSubsetTransform", ()=>_subsetTransformJs.createSubsetTransform
);
parcelHelpers.export(exports, "createConcatTransform", ()=>_concatTransformJs.createConcatTransform
);
parcelHelpers.export(exports, "createDiffTransform", ()=>_diffTransformJs.createDiffTransform
);
parcelHelpers.export(exports, "createStdTransform", ()=>_stdTransformJs.createStdTransform
);
parcelHelpers.export(exports, "createSumTransform", ()=>_sumTransformJs.createSumTransform
);
parcelHelpers.export(exports, "createVarianceTransform", ()=>_varianceTransformJs.createVarianceTransform
);
var _typedJs = require("./core/function/typed.js");
var _resultSetJs = require("./type/resultset/ResultSet.js");
var _bigNumberJs = require("./type/bignumber/BigNumber.js");
var _complexJs = require("./type/complex/Complex.js");
var _fractionJs = require("./type/fraction/Fraction.js");
var _rangeJs = require("./type/matrix/Range.js");
var _matrixJs = require("./type/matrix/Matrix.js");
var _denseMatrixJs = require("./type/matrix/DenseMatrix.js");
var _cloneJs = require("./function/utils/clone.js");
var _isIntegerJs = require("./function/utils/isInteger.js");
var _isNegativeJs = require("./function/utils/isNegative.js");
var _isNumericJs = require("./function/utils/isNumeric.js");
var _hasNumericValueJs = require("./function/utils/hasNumericValue.js");
var _isPositiveJs = require("./function/utils/isPositive.js");
var _isZeroJs = require("./function/utils/isZero.js");
var _isNaNJs = require("./function/utils/isNaN.js");
var _typeOfJs = require("./function/utils/typeOf.js");
var _equalScalarJs = require("./function/relational/equalScalar.js");
var _sparseMatrixJs = require("./type/matrix/SparseMatrix.js");
var _numberJs = require("./type/number.js");
var _stringJs = require("./type/string.js");
var _booleanJs = require("./type/boolean.js");
var _bignumberJs = require("./type/bignumber/function/bignumber.js");
var _complexJs1 = require("./type/complex/function/complex.js");
var _fractionJs1 = require("./type/fraction/function/fraction.js");
var _matrixJs1 = require("./type/matrix/function/matrix.js");
var _matrixFromFunctionJs = require("./function/matrix/matrixFromFunction.js");
var _matrixFromRowsJs = require("./function/matrix/matrixFromRows.js");
var _matrixFromColumnsJs = require("./function/matrix/matrixFromColumns.js");
var _splitUnitJs = require("./type/unit/function/splitUnit.js");
var _unaryMinusJs = require("./function/arithmetic/unaryMinus.js");
var _unaryPlusJs = require("./function/arithmetic/unaryPlus.js");
var _absJs = require("./function/arithmetic/abs.js");
var _applyJs = require("./function/matrix/apply.js");
var _addScalarJs = require("./function/arithmetic/addScalar.js");
var _cbrtJs = require("./function/arithmetic/cbrt.js");
var _ceilJs = require("./function/arithmetic/ceil.js");
var _cubeJs = require("./function/arithmetic/cube.js");
var _expJs = require("./function/arithmetic/exp.js");
var _expm1Js = require("./function/arithmetic/expm1.js");
var _fixJs = require("./function/arithmetic/fix.js");
var _floorJs = require("./function/arithmetic/floor.js");
var _gcdJs = require("./function/arithmetic/gcd.js");
var _lcmJs = require("./function/arithmetic/lcm.js");
var _log10Js = require("./function/arithmetic/log10.js");
var _log2Js = require("./function/arithmetic/log2.js");
var _modJs = require("./function/arithmetic/mod.js");
var _multiplyScalarJs = require("./function/arithmetic/multiplyScalar.js");
var _multiplyJs = require("./function/arithmetic/multiply.js");
var _nthRootJs = require("./function/arithmetic/nthRoot.js");
var _signJs = require("./function/arithmetic/sign.js");
var _sqrtJs = require("./function/arithmetic/sqrt.js");
var _squareJs = require("./function/arithmetic/square.js");
var _subtractJs = require("./function/arithmetic/subtract.js");
var _xgcdJs = require("./function/arithmetic/xgcd.js");
var _dotMultiplyJs = require("./function/arithmetic/dotMultiply.js");
var _bitAndJs = require("./function/bitwise/bitAnd.js");
var _bitNotJs = require("./function/bitwise/bitNot.js");
var _bitOrJs = require("./function/bitwise/bitOr.js");
var _bitXorJs = require("./function/bitwise/bitXor.js");
var _argJs = require("./function/complex/arg.js");
var _conjJs = require("./function/complex/conj.js");
var _imJs = require("./function/complex/im.js");
var _reJs = require("./function/complex/re.js");
var _notJs = require("./function/logical/not.js");
var _orJs = require("./function/logical/or.js");
var _xorJs = require("./function/logical/xor.js");
var _concatJs = require("./function/matrix/concat.js");
var _columnJs = require("./function/matrix/column.js");
var _countJs = require("./function/matrix/count.js");
var _crossJs = require("./function/matrix/cross.js");
var _diagJs = require("./function/matrix/diag.js");
var _filterJs = require("./function/matrix/filter.js");
var _flattenJs = require("./function/matrix/flatten.js");
var _forEachJs = require("./function/matrix/forEach.js");
var _getMatrixDataTypeJs = require("./function/matrix/getMatrixDataType.js");
var _identityJs = require("./function/matrix/identity.js");
var _kronJs = require("./function/matrix/kron.js");
var _mapJs = require("./function/matrix/map.js");
var _diffJs = require("./function/matrix/diff.js");
var _onesJs = require("./function/matrix/ones.js");
var _rangeJs1 = require("./function/matrix/range.js");
var _reshapeJs = require("./function/matrix/reshape.js");
var _resizeJs = require("./function/matrix/resize.js");
var _rotateJs = require("./function/matrix/rotate.js");
var _rotationMatrixJs = require("./function/matrix/rotationMatrix.js");
var _rowJs = require("./function/matrix/row.js");
var _sizeJs = require("./function/matrix/size.js");
var _squeezeJs = require("./function/matrix/squeeze.js");
var _subsetJs = require("./function/matrix/subset.js");
var _transposeJs = require("./function/matrix/transpose.js");
var _ctransposeJs = require("./function/matrix/ctranspose.js");
var _zerosJs = require("./function/matrix/zeros.js");
var _erfJs = require("./function/special/erf.js");
var _modeJs = require("./function/statistics/mode.js");
var _prodJs = require("./function/statistics/prod.js");
var _formatJs = require("./function/string/format.js");
var _binJs = require("./function/string/bin.js");
var _octJs = require("./function/string/oct.js");
var _hexJs = require("./function/string/hex.js");
var _printJs = require("./function/string/print.js");
var _toJs = require("./function/unit/to.js");
var _isPrimeJs = require("./function/utils/isPrime.js");
var _numericJs = require("./function/utils/numeric.js");
var _divideScalarJs = require("./function/arithmetic/divideScalar.js");
var _powJs = require("./function/arithmetic/pow.js");
var _roundJs = require("./function/arithmetic/round.js");
var _logJs = require("./function/arithmetic/log.js");
var _log1PJs = require("./function/arithmetic/log1p.js");
var _nthRootsJs = require("./function/arithmetic/nthRoots.js");
var _dotPowJs = require("./function/arithmetic/dotPow.js");
var _dotDivideJs = require("./function/arithmetic/dotDivide.js");
var _lsolveJs = require("./function/algebra/solver/lsolve.js");
var _usolveJs = require("./function/algebra/solver/usolve.js");
var _lsolveAllJs = require("./function/algebra/solver/lsolveAll.js");
var _usolveAllJs = require("./function/algebra/solver/usolveAll.js");
var _leftShiftJs = require("./function/bitwise/leftShift.js");
var _rightArithShiftJs = require("./function/bitwise/rightArithShift.js");
var _rightLogShiftJs = require("./function/bitwise/rightLogShift.js");
var _andJs = require("./function/logical/and.js");
var _compareJs = require("./function/relational/compare.js");
var _compareNaturalJs = require("./function/relational/compareNatural.js");
var _compareTextJs = require("./function/relational/compareText.js");
var _equalJs = require("./function/relational/equal.js");
var _equalTextJs = require("./function/relational/equalText.js");
var _smallerJs = require("./function/relational/smaller.js");
var _smallerEqJs = require("./function/relational/smallerEq.js");
var _largerJs = require("./function/relational/larger.js");
var _largerEqJs = require("./function/relational/largerEq.js");
var _deepEqualJs = require("./function/relational/deepEqual.js");
var _unequalJs = require("./function/relational/unequal.js");
var _partitionSelectJs = require("./function/matrix/partitionSelect.js");
var _sortJs = require("./function/matrix/sort.js");
var _maxJs = require("./function/statistics/max.js");
var _minJs = require("./function/statistics/min.js");
var _immutableDenseMatrixJs = require("./type/matrix/ImmutableDenseMatrix.js");
var _matrixIndexJs = require("./type/matrix/MatrixIndex.js");
var _fibonacciHeapJs = require("./type/matrix/FibonacciHeap.js");
var _spaJs = require("./type/matrix/Spa.js");
var _unitJs = require("./type/unit/Unit.js");
var _unitJs1 = require("./type/unit/function/unit.js");
var _sparseJs = require("./type/matrix/function/sparse.js");
var _createUnitJs = require("./type/unit/function/createUnit.js");
var _acosJs = require("./function/trigonometry/acos.js");
var _acoshJs = require("./function/trigonometry/acosh.js");
var _acotJs = require("./function/trigonometry/acot.js");
var _acothJs = require("./function/trigonometry/acoth.js");
var _acscJs = require("./function/trigonometry/acsc.js");
var _acschJs = require("./function/trigonometry/acsch.js");
var _asecJs = require("./function/trigonometry/asec.js");
var _asechJs = require("./function/trigonometry/asech.js");
var _asinJs = require("./function/trigonometry/asin.js");
var _asinhJs = require("./function/trigonometry/asinh.js");
var _atanJs = require("./function/trigonometry/atan.js");
var _atan2Js = require("./function/trigonometry/atan2.js");
var _atanhJs = require("./function/trigonometry/atanh.js");
var _cosJs = require("./function/trigonometry/cos.js");
var _coshJs = require("./function/trigonometry/cosh.js");
var _cotJs = require("./function/trigonometry/cot.js");
var _cothJs = require("./function/trigonometry/coth.js");
var _cscJs = require("./function/trigonometry/csc.js");
var _cschJs = require("./function/trigonometry/csch.js");
var _secJs = require("./function/trigonometry/sec.js");
var _sechJs = require("./function/trigonometry/sech.js");
var _sinJs = require("./function/trigonometry/sin.js");
var _sinhJs = require("./function/trigonometry/sinh.js");
var _tanJs = require("./function/trigonometry/tan.js");
var _tanhJs = require("./function/trigonometry/tanh.js");
var _setCartesianJs = require("./function/set/setCartesian.js");
var _setDifferenceJs = require("./function/set/setDifference.js");
var _setDistinctJs = require("./function/set/setDistinct.js");
var _setIntersectJs = require("./function/set/setIntersect.js");
var _setIsSubsetJs = require("./function/set/setIsSubset.js");
var _setMultiplicityJs = require("./function/set/setMultiplicity.js");
var _setPowersetJs = require("./function/set/setPowerset.js");
var _setSizeJs = require("./function/set/setSize.js");
var _setSymDifferenceJs = require("./function/set/setSymDifference.js");
var _setUnionJs = require("./function/set/setUnion.js");
var _addJs = require("./function/arithmetic/add.js");
var _hypotJs = require("./function/arithmetic/hypot.js");
var _normJs = require("./function/arithmetic/norm.js");
var _dotJs = require("./function/matrix/dot.js");
var _traceJs = require("./function/matrix/trace.js");
var _indexJs = require("./type/matrix/function/index.js");
var _nodeJs = require("./expression/node/Node.js");
var _accessorNodeJs = require("./expression/node/AccessorNode.js");
var _arrayNodeJs = require("./expression/node/ArrayNode.js");
var _assignmentNodeJs = require("./expression/node/AssignmentNode.js");
var _blockNodeJs = require("./expression/node/BlockNode.js");
var _conditionalNodeJs = require("./expression/node/ConditionalNode.js");
var _constantNodeJs = require("./expression/node/ConstantNode.js");
var _functionAssignmentNodeJs = require("./expression/node/FunctionAssignmentNode.js");
var _indexNodeJs = require("./expression/node/IndexNode.js");
var _objectNodeJs = require("./expression/node/ObjectNode.js");
var _operatorNodeJs = require("./expression/node/OperatorNode.js");
var _parenthesisNodeJs = require("./expression/node/ParenthesisNode.js");
var _rangeNodeJs = require("./expression/node/RangeNode.js");
var _relationalNodeJs = require("./expression/node/RelationalNode.js");
var _symbolNodeJs = require("./expression/node/SymbolNode.js");
var _functionNodeJs = require("./expression/node/FunctionNode.js");
var _parseJs = require("./expression/parse.js");
var _compileJs = require("./expression/function/compile.js");
var _evaluateJs = require("./expression/function/evaluate.js");
var _parserJs = require("./expression/Parser.js");
var _parserJs1 = require("./expression/function/parser.js");
var _lupJs = require("./function/algebra/decomposition/lup.js");
var _qrJs = require("./function/algebra/decomposition/qr.js");
var _sluJs = require("./function/algebra/decomposition/slu.js");
var _lusolveJs = require("./function/algebra/solver/lusolve.js");
var _helpJs = require("./expression/Help.js");
var _chainJs = require("./type/chain/Chain.js");
var _helpJs1 = require("./expression/function/help.js");
var _chainJs1 = require("./type/chain/function/chain.js");
var _detJs = require("./function/matrix/det.js");
var _invJs = require("./function/matrix/inv.js");
var _eigsJs = require("./function/matrix/eigs.js");
var _expmJs = require("./function/matrix/expm.js");
var _sqrtmJs = require("./function/matrix/sqrtm.js");
var _divideJs = require("./function/arithmetic/divide.js");
var _distanceJs = require("./function/geometry/distance.js");
var _intersectJs = require("./function/geometry/intersect.js");
var _sumJs = require("./function/statistics/sum.js");
var _meanJs = require("./function/statistics/mean.js");
var _medianJs = require("./function/statistics/median.js");
var _madJs = require("./function/statistics/mad.js");
var _varianceJs = require("./function/statistics/variance.js");
var _quantileSeqJs = require("./function/statistics/quantileSeq.js");
var _stdJs = require("./function/statistics/std.js");
var _combinationsJs = require("./function/probability/combinations.js");
var _combinationsWithRepJs = require("./function/probability/combinationsWithRep.js");
var _gammaJs = require("./function/probability/gamma.js");
var _factorialJs = require("./function/probability/factorial.js");
var _kldivergenceJs = require("./function/probability/kldivergence.js");
var _multinomialJs = require("./function/probability/multinomial.js");
var _permutationsJs = require("./function/probability/permutations.js");
var _pickRandomJs = require("./function/probability/pickRandom.js");
var _randomJs = require("./function/probability/random.js");
var _randomIntJs = require("./function/probability/randomInt.js");
var _stirlingS2Js = require("./function/combinatorics/stirlingS2.js");
var _bellNumbersJs = require("./function/combinatorics/bellNumbers.js");
var _catalanJs = require("./function/combinatorics/catalan.js");
var _compositionJs = require("./function/combinatorics/composition.js");
var _simplifyJs = require("./function/algebra/simplify.js");
var _derivativeJs = require("./function/algebra/derivative.js");
var _rationalizeJs = require("./function/algebra/rationalize.js");
var _reviverJs = require("./json/reviver.js");
var _replacerJs = require("./json/replacer.js");
var _constantsJs = require("./constants.js");
var _physicalConstantsJs = require("./type/unit/physicalConstants.js");
var _applyTransformJs = require("./expression/transform/apply.transform.js");
var _columnTransformJs = require("./expression/transform/column.transform.js");
var _filterTransformJs = require("./expression/transform/filter.transform.js");
var _forEachTransformJs = require("./expression/transform/forEach.transform.js");
var _indexTransformJs = require("./expression/transform/index.transform.js");
var _mapTransformJs = require("./expression/transform/map.transform.js");
var _maxTransformJs = require("./expression/transform/max.transform.js");
var _meanTransformJs = require("./expression/transform/mean.transform.js");
var _minTransformJs = require("./expression/transform/min.transform.js");
var _rangeTransformJs = require("./expression/transform/range.transform.js");
var _rowTransformJs = require("./expression/transform/row.transform.js");
var _subsetTransformJs = require("./expression/transform/subset.transform.js");
var _concatTransformJs = require("./expression/transform/concat.transform.js");
var _diffTransformJs = require("./expression/transform/diff.transform.js");
var _stdTransformJs = require("./expression/transform/std.transform.js");
var _sumTransformJs = require("./expression/transform/sum.transform.js");
var _varianceTransformJs = require("./expression/transform/variance.transform.js");

},{"./core/function/typed.js":"7Z1tH","./type/resultset/ResultSet.js":"3uojA","./type/bignumber/BigNumber.js":"1TqvD","./type/complex/Complex.js":"9Qqym","./type/fraction/Fraction.js":"6YoiI","./type/matrix/Range.js":"eUTKe","./type/matrix/Matrix.js":"iBkrr","./type/matrix/DenseMatrix.js":"a2m9u","./function/utils/clone.js":"kKAv0","./function/utils/isInteger.js":"a6viI","./function/utils/isNegative.js":"1AUq5","./function/utils/isNumeric.js":"1zlhD","./function/utils/hasNumericValue.js":"3kaeo","./function/utils/isPositive.js":"7iBpx","./function/utils/isZero.js":"ggTqk","./function/utils/isNaN.js":"aV7KG","./function/utils/typeOf.js":"3NbxX","./function/relational/equalScalar.js":"5XebJ","./type/matrix/SparseMatrix.js":"dpdW1","./type/number.js":"gZNqR","./type/string.js":"fBfhg","./type/boolean.js":"4lUuH","./type/bignumber/function/bignumber.js":"bMy2I","./type/complex/function/complex.js":"9oISl","./type/fraction/function/fraction.js":"fBomH","./type/matrix/function/matrix.js":"hSgHU","./function/matrix/matrixFromFunction.js":"hjHIt","./function/matrix/matrixFromRows.js":"5b1yw","./function/matrix/matrixFromColumns.js":"70U9L","./type/unit/function/splitUnit.js":"3240p","./function/arithmetic/unaryMinus.js":"iMfPh","./function/arithmetic/unaryPlus.js":"caLzb","./function/arithmetic/abs.js":"3JXBn","./function/matrix/apply.js":"7QrEO","./function/arithmetic/addScalar.js":"bDcpY","./function/arithmetic/cbrt.js":"eFAIJ","./function/arithmetic/ceil.js":"jG4vg","./function/arithmetic/cube.js":"lIS81","./function/arithmetic/exp.js":"4C3hU","./function/arithmetic/expm1.js":"jgL9V","./function/arithmetic/fix.js":"3we1r","./function/arithmetic/floor.js":"2vzgv","./function/arithmetic/gcd.js":"ftHzT","./function/arithmetic/lcm.js":"beY1Q","./function/arithmetic/log10.js":"lMJMv","./function/arithmetic/log2.js":"8Uu0O","./function/arithmetic/mod.js":"ebyKM","./function/arithmetic/multiplyScalar.js":"eVHJ5","./function/arithmetic/multiply.js":"4DNam","./function/arithmetic/nthRoot.js":"1wWmy","./function/arithmetic/sign.js":"k4jW9","./function/arithmetic/sqrt.js":"exmR0","./function/arithmetic/square.js":"99xfA","./function/arithmetic/subtract.js":"UkKSg","./function/arithmetic/xgcd.js":"3GrQP","./function/arithmetic/dotMultiply.js":"2PAjr","./function/bitwise/bitAnd.js":"2NRtA","./function/bitwise/bitNot.js":"fFElL","./function/bitwise/bitOr.js":"6jMO0","./function/bitwise/bitXor.js":"iOZc5","./function/complex/arg.js":"8GSVY","./function/complex/conj.js":"dMO5w","./function/complex/im.js":"jEoFX","./function/complex/re.js":"khG4H","./function/logical/not.js":"9AHwk","./function/logical/or.js":"61pO5","./function/logical/xor.js":"kaGFp","./function/matrix/concat.js":"jDA7k","./function/matrix/column.js":"kSV9g","./function/matrix/count.js":"eDmRD","./function/matrix/cross.js":"77jz0","./function/matrix/diag.js":"k80Uf","./function/matrix/filter.js":"1GkSF","./function/matrix/flatten.js":"gl6HX","./function/matrix/forEach.js":"jwWtz","./function/matrix/getMatrixDataType.js":"8WL3H","./function/matrix/identity.js":"b0mbb","./function/matrix/kron.js":"fIqvA","./function/matrix/map.js":"520NC","./function/matrix/diff.js":"1noV6","./function/matrix/ones.js":"1ORUL","./function/matrix/range.js":"cwFZb","./function/matrix/reshape.js":"dm28E","./function/matrix/resize.js":"lWzrZ","./function/matrix/rotate.js":"1Gyas","./function/matrix/rotationMatrix.js":"lftL1","./function/matrix/row.js":"2blb8","./function/matrix/size.js":"9ReWg","./function/matrix/squeeze.js":"gRAln","./function/matrix/subset.js":"ikxy0","./function/matrix/transpose.js":"5Gf7D","./function/matrix/ctranspose.js":"5dD2s","./function/matrix/zeros.js":"kyZ2e","./function/special/erf.js":"7rjrb","./function/statistics/mode.js":"hoyRJ","./function/statistics/prod.js":"dLtzz","./function/string/format.js":"2qmec","./function/string/bin.js":"eC100","./function/string/oct.js":"3s5tn","./function/string/hex.js":"7vqvG","./function/string/print.js":"b00Rf","./function/unit/to.js":"cRFrL","./function/utils/isPrime.js":"l6bhv","./function/utils/numeric.js":"ajCZO","./function/arithmetic/divideScalar.js":"bRXBJ","./function/arithmetic/pow.js":"ieEGr","./function/arithmetic/round.js":"3aowV","./function/arithmetic/log.js":"hW2HW","./function/arithmetic/log1p.js":"dY0Yo","./function/arithmetic/nthRoots.js":"826ky","./function/arithmetic/dotPow.js":"jSanc","./function/arithmetic/dotDivide.js":"2paho","./function/algebra/solver/lsolve.js":"1tmPD","./function/algebra/solver/usolve.js":"cQvGm","./function/algebra/solver/lsolveAll.js":"cd2CS","./function/algebra/solver/usolveAll.js":"kQeH7","./function/bitwise/leftShift.js":"7RYYE","./function/bitwise/rightArithShift.js":"aWCle","./function/bitwise/rightLogShift.js":"2jB8p","./function/logical/and.js":"huNvl","./function/relational/compare.js":"cUzwI","./function/relational/compareNatural.js":"fv4dy","./function/relational/compareText.js":"dDUh2","./function/relational/equal.js":"426bt","./function/relational/equalText.js":"fAsVn","./function/relational/smaller.js":"hKA0G","./function/relational/smallerEq.js":"dPhTD","./function/relational/larger.js":"lsndL","./function/relational/largerEq.js":"81hwb","./function/relational/deepEqual.js":"6X2ab","./function/relational/unequal.js":"ayjUy","./function/matrix/partitionSelect.js":"lIhe0","./function/matrix/sort.js":"bFbH6","./function/statistics/max.js":"8eqWS","./function/statistics/min.js":"eSLZj","./type/matrix/ImmutableDenseMatrix.js":"kYuYp","./type/matrix/MatrixIndex.js":"1st82","./type/matrix/FibonacciHeap.js":"34h3D","./type/matrix/Spa.js":"3FtHu","./type/unit/Unit.js":"fs5Xx","./type/unit/function/unit.js":"8dm5m","./type/matrix/function/sparse.js":"17ldI","./type/unit/function/createUnit.js":"77fC3","./function/trigonometry/acos.js":"W9qj7","./function/trigonometry/acosh.js":"jXN6M","./function/trigonometry/acot.js":"fNprP","./function/trigonometry/acoth.js":"fvWKn","./function/trigonometry/acsc.js":"3H5pC","./function/trigonometry/acsch.js":"fTwVR","./function/trigonometry/asec.js":"4Ijcv","./function/trigonometry/asech.js":"8D1aU","./function/trigonometry/asin.js":"d35f2","./function/trigonometry/asinh.js":"43BbO","./function/trigonometry/atan.js":"6YuIJ","./function/trigonometry/atan2.js":"faaq7","./function/trigonometry/atanh.js":"cVH3g","./function/trigonometry/cos.js":"fgjfr","./function/trigonometry/cosh.js":"7ZwQq","./function/trigonometry/cot.js":"rpmVA","./function/trigonometry/coth.js":"ld2AD","./function/trigonometry/csc.js":"lw18M","./function/trigonometry/csch.js":"4gAZ5","./function/trigonometry/sec.js":"ibbwz","./function/trigonometry/sech.js":"5e9BT","./function/trigonometry/sin.js":"I4M0M","./function/trigonometry/sinh.js":"2tHGz","./function/trigonometry/tan.js":"eouY4","./function/trigonometry/tanh.js":"72ci0","./function/set/setCartesian.js":"2kJi5","./function/set/setDifference.js":"kgG5R","./function/set/setDistinct.js":"49jjK","./function/set/setIntersect.js":"gj5Er","./function/set/setIsSubset.js":"a1WQ3","./function/set/setMultiplicity.js":"3jylC","./function/set/setPowerset.js":"5soEf","./function/set/setSize.js":"kVINx","./function/set/setSymDifference.js":"huaoY","./function/set/setUnion.js":"k0LzK","./function/arithmetic/add.js":"QYL1g","./function/arithmetic/hypot.js":"hEIPg","./function/arithmetic/norm.js":"gkWne","./function/matrix/dot.js":"5wvqE","./function/matrix/trace.js":"diTNv","./type/matrix/function/index.js":"ilaJA","./expression/node/Node.js":"7wMVr","./expression/node/AccessorNode.js":"kdfAY","./expression/node/ArrayNode.js":"6bZ78","./expression/node/AssignmentNode.js":"kDb5k","./expression/node/BlockNode.js":"2bzLR","./expression/node/ConditionalNode.js":"lpUKx","./expression/node/ConstantNode.js":"7hu3g","./expression/node/FunctionAssignmentNode.js":"5F4b2","./expression/node/IndexNode.js":"h4Sc3","./expression/node/ObjectNode.js":"cBA8e","./expression/node/OperatorNode.js":"2Q3Bl","./expression/node/ParenthesisNode.js":"1KsUO","./expression/node/RangeNode.js":"ek5RU","./expression/node/RelationalNode.js":"iqb5x","./expression/node/SymbolNode.js":"66Yi2","./expression/node/FunctionNode.js":"2UmZq","./expression/parse.js":"817dF","./expression/function/compile.js":"48MvR","./expression/function/evaluate.js":"4FnWj","./expression/Parser.js":"anXcn","./expression/function/parser.js":"jFy33","./function/algebra/decomposition/lup.js":"bnAwC","./function/algebra/decomposition/qr.js":"4oOxX","./function/algebra/decomposition/slu.js":"QPajv","./function/algebra/solver/lusolve.js":"6Omew","./expression/Help.js":"8XMFI","./type/chain/Chain.js":"5tJEq","./expression/function/help.js":"e0zO7","./type/chain/function/chain.js":"hoA3d","./function/matrix/det.js":"b9l67","./function/matrix/inv.js":"cpReH","./function/matrix/eigs.js":"hPYiN","./function/matrix/expm.js":"g5Mf8","./function/matrix/sqrtm.js":"8rv2b","./function/arithmetic/divide.js":"7ToLg","./function/geometry/distance.js":"1iKWK","./function/geometry/intersect.js":"lBb89","./function/statistics/sum.js":"6Yixb","./function/statistics/mean.js":"cESdD","./function/statistics/median.js":"02Hor","./function/statistics/mad.js":"eEV9W","./function/statistics/variance.js":"lt7yb","./function/statistics/quantileSeq.js":"5MSHz","./function/statistics/std.js":"dTYLn","./function/probability/combinations.js":"92yHi","./function/probability/combinationsWithRep.js":"4z98Z","./function/probability/gamma.js":"gPaqO","./function/probability/factorial.js":"lEyzb","./function/probability/kldivergence.js":"1xIUT","./function/probability/multinomial.js":"aDuJJ","./function/probability/permutations.js":"k8f9C","./function/probability/pickRandom.js":"quUWX","./function/probability/random.js":"72iqv","./function/probability/randomInt.js":"gH9nJ","./function/combinatorics/stirlingS2.js":"iKXi1","./function/combinatorics/bellNumbers.js":"i9Ddl","./function/combinatorics/catalan.js":"egWZj","./function/combinatorics/composition.js":"aNToZ","./function/algebra/simplify.js":"3rQ8N","./function/algebra/derivative.js":"1TF43","./function/algebra/rationalize.js":"gxQRl","./json/reviver.js":"l9Iat","./json/replacer.js":"h3Fw1","./constants.js":"bWQAE","./type/unit/physicalConstants.js":"ksQEE","./expression/transform/apply.transform.js":"idj0G","./expression/transform/column.transform.js":"kRwHR","./expression/transform/filter.transform.js":"99xLP","./expression/transform/forEach.transform.js":"e7Ff3","./expression/transform/index.transform.js":"inVUt","./expression/transform/map.transform.js":"5sPz5","./expression/transform/max.transform.js":"dJsO8","./expression/transform/mean.transform.js":"3ppmU","./expression/transform/min.transform.js":"3W1Ai","./expression/transform/range.transform.js":"bWPpJ","./expression/transform/row.transform.js":"7vu2A","./expression/transform/subset.transform.js":"cZO24","./expression/transform/concat.transform.js":"7Ur7Y","./expression/transform/diff.transform.js":"e39un","./expression/transform/std.transform.js":"e5hNu","./expression/transform/sum.transform.js":"cQ24b","./expression/transform/variance.transform.js":"2nmKA","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7Z1tH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTyped", ()=>createTyped
);
/**
 * Create a typed-function which checks the types of the arguments and
 * can match them against multiple provided signatures. The typed-function
 * automatically converts inputs in order to find a matching signature.
 * Typed functions throw informative errors in case of wrong input arguments.
 *
 * See the library [typed-function](https://github.com/josdejong/typed-function)
 * for detailed documentation.
 *
 * Syntax:
 *
 *     math.typed(name, signatures) : function
 *     math.typed(signatures) : function
 *
 * Examples:
 *
 *     // create a typed function with multiple types per argument (type union)
 *     const fn2 = typed({
 *       'number | boolean': function (b) {
 *         return 'b is a number or boolean'
 *       },
 *       'string, number | boolean': function (a, b) {
 *         return 'a is a string, b is a number or boolean'
 *       }
 *     })
 *
 *     // create a typed function with an any type argument
 *     const log = typed({
 *       'string, any': function (event, data) {
 *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
 *       }
 *     })
 *
 * @param {string} [name]                          Optional name for the typed-function
 * @param {Object<string, function>} signatures   Object with one or multiple function signatures
 * @returns {function} The created typed-function.
 */ var _isJs = require("../../utils/is.js");
var _typedFunction = require("typed-function");
var _typedFunctionDefault = parcelHelpers.interopDefault(_typedFunction);
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var _mapJs = require("../../utils/map.js"); // returns a new instance of typed-function
var _createTyped2 = function _createTyped() {
    // initially, return the original instance of typed-function
    // consecutively, return a new instance from typed.create.
    _createTyped2 = _typedFunctionDefault.default.create;
    return _typedFunctionDefault.default;
};
var dependencies = [
    '?BigNumber',
    '?Complex',
    '?DenseMatrix',
    '?Fraction'
];
var createTyped = /* #__PURE__ */ _factoryJs.factory('typed', dependencies, function createTyped(_ref) {
    var { BigNumber , Complex , DenseMatrix , Fraction  } = _ref;
    // TODO: typed-function must be able to silently ignore signatures with unknown data types
    // get a new instance of typed-function
    var typed = _createTyped2(); // define all types. The order of the types determines in which order function
    // arguments are type-checked (so for performance it's important to put the
    // most used types first).
    typed.types = [
        {
            name: 'number',
            test: _isJs.isNumber
        },
        {
            name: 'Complex',
            test: _isJs.isComplex
        },
        {
            name: 'BigNumber',
            test: _isJs.isBigNumber
        },
        {
            name: 'Fraction',
            test: _isJs.isFraction
        },
        {
            name: 'Unit',
            test: _isJs.isUnit
        },
        {
            name: 'string',
            test: _isJs.isString
        },
        {
            name: 'Chain',
            test: _isJs.isChain
        },
        {
            name: 'Array',
            test: _isJs.isArray
        },
        {
            name: 'Matrix',
            test: _isJs.isMatrix
        },
        {
            name: 'DenseMatrix',
            test: _isJs.isDenseMatrix
        },
        {
            name: 'SparseMatrix',
            test: _isJs.isSparseMatrix
        },
        {
            name: 'Range',
            test: _isJs.isRange
        },
        {
            name: 'Index',
            test: _isJs.isIndex
        },
        {
            name: 'boolean',
            test: _isJs.isBoolean
        },
        {
            name: 'ResultSet',
            test: _isJs.isResultSet
        },
        {
            name: 'Help',
            test: _isJs.isHelp
        },
        {
            name: 'function',
            test: _isJs.isFunction
        },
        {
            name: 'Date',
            test: _isJs.isDate
        },
        {
            name: 'RegExp',
            test: _isJs.isRegExp
        },
        {
            name: 'null',
            test: _isJs.isNull
        },
        {
            name: 'undefined',
            test: _isJs.isUndefined
        },
        {
            name: 'AccessorNode',
            test: _isJs.isAccessorNode
        },
        {
            name: 'ArrayNode',
            test: _isJs.isArrayNode
        },
        {
            name: 'AssignmentNode',
            test: _isJs.isAssignmentNode
        },
        {
            name: 'BlockNode',
            test: _isJs.isBlockNode
        },
        {
            name: 'ConditionalNode',
            test: _isJs.isConditionalNode
        },
        {
            name: 'ConstantNode',
            test: _isJs.isConstantNode
        },
        {
            name: 'FunctionNode',
            test: _isJs.isFunctionNode
        },
        {
            name: 'FunctionAssignmentNode',
            test: _isJs.isFunctionAssignmentNode
        },
        {
            name: 'IndexNode',
            test: _isJs.isIndexNode
        },
        {
            name: 'Node',
            test: _isJs.isNode
        },
        {
            name: 'ObjectNode',
            test: _isJs.isObjectNode
        },
        {
            name: 'OperatorNode',
            test: _isJs.isOperatorNode
        },
        {
            name: 'ParenthesisNode',
            test: _isJs.isParenthesisNode
        },
        {
            name: 'RangeNode',
            test: _isJs.isRangeNode
        },
        {
            name: 'SymbolNode',
            test: _isJs.isSymbolNode
        },
        {
            name: 'Map',
            test: _mapJs.isMap
        },
        {
            name: 'Object',
            test: _isJs.isObject
        } // order 'Object' last, it matches on other classes too
    ];
    typed.conversions = [
        {
            from: 'number',
            to: 'BigNumber',
            convert: function convert(x) {
                if (!BigNumber) throwNoBignumber(x);
                 // note: conversion from number to BigNumber can fail if x has >15 digits
                if (_numberJs.digits(x) > 15) throw new TypeError("Cannot implicitly convert a number with >15 significant digits to BigNumber (value: " + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
                return new BigNumber(x);
            }
        },
        {
            from: 'number',
            to: 'Complex',
            convert: function convert(x) {
                if (!Complex) throwNoComplex(x);
                return new Complex(x, 0);
            }
        },
        {
            from: 'number',
            to: 'string',
            convert: function convert(x) {
                return x + '';
            }
        },
        {
            from: 'BigNumber',
            to: 'Complex',
            convert: function convert(x) {
                if (!Complex) throwNoComplex(x);
                return new Complex(x.toNumber(), 0);
            }
        },
        {
            from: 'Fraction',
            to: 'BigNumber',
            convert: function convert(x) {
                throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.");
            }
        },
        {
            from: 'Fraction',
            to: 'Complex',
            convert: function convert(x) {
                if (!Complex) throwNoComplex(x);
                return new Complex(x.valueOf(), 0);
            }
        },
        {
            from: 'number',
            to: 'Fraction',
            convert: function convert(x) {
                if (!Fraction) throwNoFraction(x);
                var f = new Fraction(x);
                if (f.valueOf() !== x) throw new TypeError("Cannot implicitly convert a number to a Fraction when there will be a loss of precision (value: " + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
                return f;
            }
        },
        {
            // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
            //  from: 'Fraction',
            //  to: 'number',
            //  convert: function (x) {
            //    return x.valueOf()
            //  }
            // }, {
            from: 'string',
            to: 'number',
            convert: function convert(x) {
                var n = Number(x);
                if (isNaN(n)) throw new Error('Cannot convert "' + x + '" to a number');
                return n;
            }
        },
        {
            from: 'string',
            to: 'BigNumber',
            convert: function convert(x) {
                if (!BigNumber) throwNoBignumber(x);
                try {
                    return new BigNumber(x);
                } catch (err) {
                    throw new Error('Cannot convert "' + x + '" to BigNumber');
                }
            }
        },
        {
            from: 'string',
            to: 'Fraction',
            convert: function convert(x) {
                if (!Fraction) throwNoFraction(x);
                try {
                    return new Fraction(x);
                } catch (err) {
                    throw new Error('Cannot convert "' + x + '" to Fraction');
                }
            }
        },
        {
            from: 'string',
            to: 'Complex',
            convert: function convert(x) {
                if (!Complex) throwNoComplex(x);
                try {
                    return new Complex(x);
                } catch (err) {
                    throw new Error('Cannot convert "' + x + '" to Complex');
                }
            }
        },
        {
            from: 'boolean',
            to: 'number',
            convert: function convert(x) {
                return +x;
            }
        },
        {
            from: 'boolean',
            to: 'BigNumber',
            convert: function convert(x) {
                if (!BigNumber) throwNoBignumber(x);
                return new BigNumber(+x);
            }
        },
        {
            from: 'boolean',
            to: 'Fraction',
            convert: function convert(x) {
                if (!Fraction) throwNoFraction(x);
                return new Fraction(+x);
            }
        },
        {
            from: 'boolean',
            to: 'string',
            convert: function convert(x) {
                return String(x);
            }
        },
        {
            from: 'Array',
            to: 'Matrix',
            convert: function convert(array) {
                if (!DenseMatrix) throwNoMatrix();
                return new DenseMatrix(array);
            }
        },
        {
            from: 'Matrix',
            to: 'Array',
            convert: function convert(matrix) {
                return matrix.valueOf();
            }
        }
    ];
    return typed;
});
function throwNoBignumber(x) {
    throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
}
function throwNoComplex(x) {
    throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
}
function throwNoMatrix() {
    throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
}
function throwNoFraction(x) {
    throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
}

},{"../../utils/is.js":"iwdlF","typed-function":"dTZNj","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","../../utils/map.js":"1C0lk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dTZNj":[function(require,module,exports) {
/**
 * typed-function
 *
 * Type checking for JavaScript functions
 *
 * https://github.com/josdejong/typed-function
 */ 'use strict';
(function(root, factory) {
    if (typeof define === 'function' && define.amd) // AMD. Register as an anonymous module.
    define([], factory);
    else if (typeof exports === 'object') // OldNode. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like OldNode.
    module.exports = factory();
    else // Browser globals (root is window)
    root.typed = factory();
})(this, function() {
    function ok() {
        return true;
    }
    function notOk() {
        return false;
    }
    function undef() {
        return undefined;
    }
    /**
   * @typedef {{
   *   params: Param[],
   *   fn: function
   * }} Signature
   *
   * @typedef {{
   *   types: Type[],
   *   restParam: boolean
   * }} Param
   *
   * @typedef {{
   *   name: string,
   *   typeIndex: number,
   *   test: function,
   *   conversion?: ConversionDef,
   *   conversionIndex: number,
   * }} Type
   *
   * @typedef {{
   *   from: string,
   *   to: string,
   *   convert: function (*) : *
   * }} ConversionDef
   *
   * @typedef {{
   *   name: string,
   *   test: function(*) : boolean
   * }} TypeDef
   */ // create a new instance of typed-function
    function create() {
        // data type tests
        var _types = [
            {
                name: 'number',
                test: function(x) {
                    return typeof x === 'number';
                }
            },
            {
                name: 'string',
                test: function(x) {
                    return typeof x === 'string';
                }
            },
            {
                name: 'boolean',
                test: function(x) {
                    return typeof x === 'boolean';
                }
            },
            {
                name: 'Function',
                test: function(x) {
                    return typeof x === 'function';
                }
            },
            {
                name: 'Array',
                test: Array.isArray
            },
            {
                name: 'Date',
                test: function(x) {
                    return x instanceof Date;
                }
            },
            {
                name: 'RegExp',
                test: function(x) {
                    return x instanceof RegExp;
                }
            },
            {
                name: 'Object',
                test: function(x) {
                    return typeof x === 'object' && x !== null && x.constructor === Object;
                }
            },
            {
                name: 'null',
                test: function(x) {
                    return x === null;
                }
            },
            {
                name: 'undefined',
                test: function(x) {
                    return x === undefined;
                }
            }
        ];
        var anyType = {
            name: 'any',
            test: ok
        };
        // types which need to be ignored
        var _ignore = [];
        // type conversions
        var _conversions = [];
        // This is a temporary object, will be replaced with a typed function at the end
        var typed = {
            types: _types,
            conversions: _conversions,
            ignore: _ignore
        };
        /**
     * Find the test function for a type
     * @param {String} typeName
     * @return {TypeDef} Returns the type definition when found,
     *                    Throws a TypeError otherwise
     */ function findTypeByName(typeName) {
            var entry1 = findInArray(typed.types, function(entry) {
                return entry.name === typeName;
            });
            if (entry1) return entry1;
            if (typeName === 'any') return anyType;
            var hint = findInArray(typed.types, function(entry) {
                return entry.name.toLowerCase() === typeName.toLowerCase();
            });
            throw new TypeError('Unknown type "' + typeName + '"' + (hint ? '. Did you mean "' + hint.name + '"?' : ''));
        }
        /**
     * Find the index of a type definition. Handles special case 'any'
     * @param {TypeDef} type
     * @return {number}
     */ function findTypeIndex(type) {
            if (type === anyType) return 999;
            return typed.types.indexOf(type);
        }
        /**
     * Find a type that matches a value.
     * @param {*} value
     * @return {string} Returns the name of the first type for which
     *                  the type test matches the value.
     */ function findTypeName(value) {
            var entry2 = findInArray(typed.types, function(entry) {
                return entry.test(value);
            });
            if (entry2) return entry2.name;
            throw new TypeError('Value has unknown type. Value: ' + value);
        }
        /**
     * Find a specific signature from a (composed) typed function, for example:
     *
     *   typed.find(fn, ['number', 'string'])
     *   typed.find(fn, 'number, string')
     *
     * Function find only only works for exact matches.
     *
     * @param {Function} fn                   A typed-function
     * @param {string | string[]} signature   Signature to be found, can be
     *                                        an array or a comma separated string.
     * @return {Function}                     Returns the matching signature, or
     *                                        throws an error when no signature
     *                                        is found.
     */ function find(fn, signature) {
            if (!fn.signatures) throw new TypeError('Function is no typed-function');
            // normalize input
            var arr;
            if (typeof signature === 'string') {
                arr = signature.split(',');
                for(var i = 0; i < arr.length; i++)arr[i] = arr[i].trim();
            } else if (Array.isArray(signature)) arr = signature;
            else throw new TypeError('String array or a comma separated string expected');
            var str = arr.join(',');
            // find an exact match
            var match = fn.signatures[str];
            if (match) return match;
            // TODO: extend find to match non-exact signatures
            throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
        }
        /**
     * Convert a given value to another data type.
     * @param {*} value
     * @param {string} type
     */ function convert(value, type) {
            var from = findTypeName(value);
            // check conversion is needed
            if (type === from) return value;
            for(var i = 0; i < typed.conversions.length; i++){
                var conversion = typed.conversions[i];
                if (conversion.from === from && conversion.to === type) return conversion.convert(value);
            }
            throw new Error('Cannot convert from ' + from + ' to ' + type);
        }
        /**
     * Stringify parameters in a normalized way
     * @param {Param[]} params
     * @return {string}
     */ function stringifyParams(params) {
            return params.map(function(param) {
                var typeNames = param.types.map(getTypeName);
                return (param.restParam ? '...' : '') + typeNames.join('|');
            }).join(',');
        }
        /**
     * Parse a parameter, like "...number | boolean"
     * @param {string} param
     * @param {ConversionDef[]} conversions
     * @return {Param} param
     */ function parseParam(param, conversions) {
            var restParam = param.indexOf('...') === 0;
            var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';
            var typeNames = types.split('|').map(trim).filter(notEmpty).filter(notIgnore);
            var matchingConversions = filterConversions(conversions, typeNames);
            var exactTypes = typeNames.map(function(typeName) {
                var type = findTypeByName(typeName);
                return {
                    name: typeName,
                    typeIndex: findTypeIndex(type),
                    test: type.test,
                    conversion: null,
                    conversionIndex: -1
                };
            });
            var convertibleTypes = matchingConversions.map(function(conversion) {
                var type = findTypeByName(conversion.from);
                return {
                    name: conversion.from,
                    typeIndex: findTypeIndex(type),
                    test: type.test,
                    conversion: conversion,
                    conversionIndex: conversions.indexOf(conversion)
                };
            });
            return {
                types: exactTypes.concat(convertibleTypes),
                restParam: restParam
            };
        }
        /**
     * Parse a signature with comma separated parameters,
     * like "number | boolean, ...string"
     * @param {string} signature
     * @param {function} fn
     * @param {ConversionDef[]} conversions
     * @return {Signature | null} signature
     */ function parseSignature(signature, fn, conversions) {
            var params = [];
            if (signature.trim() !== '') params = signature.split(',').map(trim).map(function(param, index, array) {
                var parsedParam = parseParam(param, conversions);
                if (parsedParam.restParam && index !== array.length - 1) throw new SyntaxError('Unexpected rest parameter "' + param + '": ' + 'only allowed for the last parameter');
                return parsedParam;
            });
            if (params.some(isInvalidParam)) // invalid signature: at least one parameter has no types
            // (they may have been filtered)
            return null;
            return {
                params: params,
                fn: fn
            };
        }
        /**
     * Test whether a set of params contains a restParam
     * @param {Param[]} params
     * @return {boolean} Returns true when the last parameter is a restParam
     */ function hasRestParam(params) {
            var param = last1(params);
            return param ? param.restParam : false;
        }
        /**
     * Test whether a parameter contains conversions
     * @param {Param} param
     * @return {boolean} Returns true when at least one of the parameters
     *                   contains a conversion.
     */ function hasConversions(param) {
            return param.types.some(function(type) {
                return type.conversion != null;
            });
        }
        /**
     * Create a type test for a single parameter, which can have one or multiple
     * types.
     * @param {Param} param
     * @return {function(x: *) : boolean} Returns a test function
     */ function compileTest(param) {
            if (!param || param.types.length === 0) // nothing to do
            return ok;
            else if (param.types.length === 1) return findTypeByName(param.types[0].name).test;
            else if (param.types.length === 2) {
                var test0 = findTypeByName(param.types[0].name).test;
                var test1 = findTypeByName(param.types[1].name).test;
                return function or(x) {
                    return test0(x) || test1(x);
                };
            } else {
                var tests = param.types.map(function(type) {
                    return findTypeByName(type.name).test;
                });
                return function or(x) {
                    for(var i = 0; i < tests.length; i++){
                        if (tests[i](x)) return true;
                    }
                    return false;
                };
            }
        }
        /**
     * Create a test for all parameters of a signature
     * @param {Param[]} params
     * @return {function(args: Array<*>) : boolean}
     */ function compileTests(params) {
            var tests, test0, test1;
            if (hasRestParam(params)) {
                // variable arguments like '...number'
                tests = initial(params).map(compileTest);
                var varIndex = tests.length;
                var lastTest = compileTest(last1(params));
                var testRestParam = function(args) {
                    for(var i = varIndex; i < args.length; i++){
                        if (!lastTest(args[i])) return false;
                    }
                    return true;
                };
                return function testArgs(args) {
                    for(var i = 0; i < tests.length; i++){
                        if (!tests[i](args[i])) return false;
                    }
                    return testRestParam(args) && args.length >= varIndex + 1;
                };
            } else {
                // no variable arguments
                if (params.length === 0) return function testArgs(args) {
                    return args.length === 0;
                };
                else if (params.length === 1) {
                    test0 = compileTest(params[0]);
                    return function testArgs(args) {
                        return test0(args[0]) && args.length === 1;
                    };
                } else if (params.length === 2) {
                    test0 = compileTest(params[0]);
                    test1 = compileTest(params[1]);
                    return function testArgs(args) {
                        return test0(args[0]) && test1(args[1]) && args.length === 2;
                    };
                } else {
                    tests = params.map(compileTest);
                    return function testArgs(args) {
                        for(var i = 0; i < tests.length; i++){
                            if (!tests[i](args[i])) return false;
                        }
                        return args.length === tests.length;
                    };
                }
            }
        }
        /**
     * Find the parameter at a specific index of a signature.
     * Handles rest parameters.
     * @param {Signature} signature
     * @param {number} index
     * @return {Param | null} Returns the matching parameter when found,
     *                        null otherwise.
     */ function getParamAtIndex(signature, index) {
            return index < signature.params.length ? signature.params[index] : hasRestParam(signature.params) ? last1(signature.params) : null;
        }
        /**
     * Get all type names of a parameter
     * @param {Signature} signature
     * @param {number} index
     * @param {boolean} excludeConversions
     * @return {string[]} Returns an array with type names
     */ function getExpectedTypeNames(signature, index, excludeConversions) {
            var param = getParamAtIndex(signature, index);
            var types = param ? excludeConversions ? param.types.filter(isExactType) : param.types : [];
            return types.map(getTypeName);
        }
        /**
     * Returns the name of a type
     * @param {Type} type
     * @return {string} Returns the type name
     */ function getTypeName(type) {
            return type.name;
        }
        /**
     * Test whether a type is an exact type or conversion
     * @param {Type} type
     * @return {boolean} Returns true when
     */ function isExactType(type) {
            return type.conversion === null || type.conversion === undefined;
        }
        /**
     * Helper function for creating error messages: create an array with
     * all available types on a specific argument index.
     * @param {Signature[]} signatures
     * @param {number} index
     * @return {string[]} Returns an array with available types
     */ function mergeExpectedParams(signatures, index) {
            var typeNames = uniq(flatMap(signatures, function(signature) {
                return getExpectedTypeNames(signature, index, false);
            }));
            return typeNames.indexOf('any') !== -1 ? [
                'any'
            ] : typeNames;
        }
        /**
     * Create
     * @param {string} name             The name of the function
     * @param {array.<*>} args          The actual arguments passed to the function
     * @param {Signature[]} signatures  A list with available signatures
     * @return {TypeError} Returns a type error with additional data
     *                     attached to it in the property `data`
     */ function createError(name, args, signatures) {
            var err, expected;
            var _name = name || 'unnamed';
            // test for wrong type at some index
            var matchingSignatures = signatures;
            var index;
            for(index = 0; index < args.length; index++){
                var nextMatchingDefs = matchingSignatures.filter(function(signature) {
                    var test = compileTest(getParamAtIndex(signature, index));
                    return (index < signature.params.length || hasRestParam(signature.params)) && test(args[index]);
                });
                if (nextMatchingDefs.length === 0) {
                    // no matching signatures anymore, throw error "wrong type"
                    expected = mergeExpectedParams(matchingSignatures, index);
                    if (expected.length > 0) {
                        var actualType = findTypeName(args[index]);
                        err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')');
                        err.data = {
                            category: 'wrongType',
                            fn: _name,
                            index: index,
                            actual: actualType,
                            expected: expected
                        };
                        return err;
                    }
                } else matchingSignatures = nextMatchingDefs;
            }
            // test for too few arguments
            var lengths = matchingSignatures.map(function(signature) {
                return hasRestParam(signature.params) ? Infinity : signature.params.length;
            });
            if (args.length < Math.min.apply(null, lengths)) {
                expected = mergeExpectedParams(matchingSignatures, index);
                err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');
                err.data = {
                    category: 'tooFewArgs',
                    fn: _name,
                    index: args.length,
                    expected: expected
                };
                return err;
            }
            // test for too many arguments
            var maxLength = Math.max.apply(null, lengths);
            if (args.length > maxLength) {
                err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
                err.data = {
                    category: 'tooManyArgs',
                    fn: _name,
                    index: args.length,
                    expectedLength: maxLength
                };
                return err;
            }
            err = new TypeError('Arguments of type "' + args.join(', ') + '" do not match any of the defined signatures of function ' + _name + '.');
            err.data = {
                category: 'mismatch',
                actual: args.map(findTypeName)
            };
            return err;
        }
        /**
     * Find the lowest index of all exact types of a parameter (no conversions)
     * @param {Param} param
     * @return {number} Returns the index of the lowest type in typed.types
     */ function getLowestTypeIndex(param) {
            var min = 999;
            for(var i = 0; i < param.types.length; i++)if (isExactType(param.types[i])) min = Math.min(min, param.types[i].typeIndex);
            return min;
        }
        /**
     * Find the lowest index of the conversion of all types of the parameter
     * having a conversion
     * @param {Param} param
     * @return {number} Returns the lowest index of the conversions of this type
     */ function getLowestConversionIndex(param) {
            var min = 999;
            for(var i = 0; i < param.types.length; i++)if (!isExactType(param.types[i])) min = Math.min(min, param.types[i].conversionIndex);
            return min;
        }
        /**
     * Compare two params
     * @param {Param} param1
     * @param {Param} param2
     * @return {number} returns a negative number when param1 must get a lower
     *                  index than param2, a positive number when the opposite,
     *                  or zero when both are equal
     */ function compareParams(param1, param2) {
            var c;
            // compare having a rest parameter or not
            c = param1.restParam - param2.restParam;
            if (c !== 0) return c;
            // compare having conversions or not
            c = hasConversions(param1) - hasConversions(param2);
            if (c !== 0) return c;
            // compare the index of the types
            c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);
            if (c !== 0) return c;
            // compare the index of any conversion
            return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
        }
        /**
     * Compare two signatures
     * @param {Signature} signature1
     * @param {Signature} signature2
     * @return {number} returns a negative number when param1 must get a lower
     *                  index than param2, a positive number when the opposite,
     *                  or zero when both are equal
     */ function compareSignatures(signature1, signature2) {
            var len = Math.min(signature1.params.length, signature2.params.length);
            var i;
            var c;
            // compare whether the params have conversions at all or not
            c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions);
            if (c !== 0) return c;
            // next compare whether the params have conversions one by one
            for(i = 0; i < len; i++){
                c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);
                if (c !== 0) return c;
            }
            // compare the types of the params one by one
            for(i = 0; i < len; i++){
                c = compareParams(signature1.params[i], signature2.params[i]);
                if (c !== 0) return c;
            }
            // compare the number of params
            return signature1.params.length - signature2.params.length;
        }
        /**
     * Get params containing all types that can be converted to the defined types.
     *
     * @param {ConversionDef[]} conversions
     * @param {string[]} typeNames
     * @return {ConversionDef[]} Returns the conversions that are available
     *                        for every type (if any)
     */ function filterConversions(conversions, typeNames) {
            var matches = {
            };
            conversions.forEach(function(conversion) {
                if (typeNames.indexOf(conversion.from) === -1 && typeNames.indexOf(conversion.to) !== -1 && !matches[conversion.from]) matches[conversion.from] = conversion;
            });
            return Object.keys(matches).map(function(from) {
                return matches[from];
            });
        }
        /**
     * Preprocess arguments before calling the original function:
     * - if needed convert the parameters
     * - in case of rest parameters, move the rest parameters into an Array
     * @param {Param[]} params
     * @param {function} fn
     * @return {function} Returns a wrapped function
     */ function compileArgsPreprocessing(params, fn) {
            var fnConvert = fn;
            // TODO: can we make this wrapper function smarter/simpler?
            if (params.some(hasConversions)) {
                var restParam = hasRestParam(params);
                var compiledConversions = params.map(compileArgConversion);
                fnConvert = function convertArgs() {
                    var args = [];
                    var last = restParam ? arguments.length - 1 : arguments.length;
                    for(var i = 0; i < last; i++)args[i] = compiledConversions[i](arguments[i]);
                    if (restParam) args[last] = arguments[last].map(compiledConversions[last]);
                    return fn.apply(this, args);
                };
            }
            var fnPreprocess = fnConvert;
            if (hasRestParam(params)) {
                var offset = params.length - 1;
                fnPreprocess = function preprocessRestParams() {
                    return fnConvert.apply(this, slice(arguments, 0, offset).concat([
                        slice(arguments, offset)
                    ]));
                };
            }
            return fnPreprocess;
        }
        /**
     * Compile conversion for a parameter to the right type
     * @param {Param} param
     * @return {function} Returns the wrapped function that will convert arguments
     *
     */ function compileArgConversion(param) {
            var test0, test1, conversion0, conversion1;
            var tests = [];
            var conversions = [];
            param.types.forEach(function(type) {
                if (type.conversion) {
                    tests.push(findTypeByName(type.conversion.from).test);
                    conversions.push(type.conversion.convert);
                }
            });
            // create optimized conversion functions depending on the number of conversions
            switch(conversions.length){
                case 0:
                    return function convertArg(arg) {
                        return arg;
                    };
                case 1:
                    test0 = tests[0];
                    conversion0 = conversions[0];
                    return function convertArg(arg) {
                        if (test0(arg)) return conversion0(arg);
                        return arg;
                    };
                case 2:
                    test0 = tests[0];
                    test1 = tests[1];
                    conversion0 = conversions[0];
                    conversion1 = conversions[1];
                    return function convertArg(arg) {
                        if (test0(arg)) return conversion0(arg);
                        if (test1(arg)) return conversion1(arg);
                        return arg;
                    };
                default:
                    return function convertArg(arg) {
                        for(var i = 0; i < conversions.length; i++){
                            if (tests[i](arg)) return conversions[i](arg);
                        }
                        return arg;
                    };
            }
        }
        /**
     * Convert an array with signatures into a map with signatures,
     * where signatures with union types are split into separate signatures
     *
     * Throws an error when there are conflicting types
     *
     * @param {Signature[]} signatures
     * @return {Object.<string, function>}  Returns a map with signatures
     *                                      as key and the original function
     *                                      of this signature as value.
     */ function createSignaturesMap(signatures) {
            var signaturesMap = {
            };
            signatures.forEach(function(signature) {
                if (!signature.params.some(hasConversions)) splitParams(signature.params, true).forEach(function(params) {
                    signaturesMap[stringifyParams(params)] = signature.fn;
                });
            });
            return signaturesMap;
        }
        /**
     * Split params with union types in to separate params.
     *
     * For example:
     *
     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
     *     // returns:
     *     // [
     *     //   ['Array', 'string'],
     *     //   ['Array', 'RegExp'],
     *     //   ['Object', 'string'],
     *     //   ['Object', 'RegExp']
     *     // ]
     *
     * @param {Param[]} params
     * @param {boolean} ignoreConversionTypes
     * @return {Param[]}
     */ function splitParams(params1, ignoreConversionTypes) {
            function _splitParams(params, index, types) {
                if (index < params.length) {
                    var param = params[index];
                    var filteredTypes = ignoreConversionTypes ? param.types.filter(isExactType) : param.types;
                    var typeGroups;
                    if (param.restParam) {
                        // split the types of a rest parameter in two:
                        // one with only exact types, and one with exact types and conversions
                        var exactTypes = filteredTypes.filter(isExactType);
                        typeGroups = exactTypes.length < filteredTypes.length ? [
                            exactTypes,
                            filteredTypes
                        ] : [
                            filteredTypes
                        ];
                    } else // split all the types of a regular parameter into one type per group
                    typeGroups = filteredTypes.map(function(type) {
                        return [
                            type
                        ];
                    });
                    // recurse over the groups with types
                    return flatMap(typeGroups, function(typeGroup) {
                        return _splitParams(params, index + 1, types.concat([
                            typeGroup
                        ]));
                    });
                } else {
                    // we've reached the end of the parameters. Now build a new Param
                    var splittedParams = types.map(function(type, typeIndex) {
                        return {
                            types: type,
                            restParam: typeIndex === params.length - 1 && hasRestParam(params)
                        };
                    });
                    return [
                        splittedParams
                    ];
                }
            }
            return _splitParams(params1, 0, []);
        }
        /**
     * Test whether two signatures have a conflicting signature
     * @param {Signature} signature1
     * @param {Signature} signature2
     * @return {boolean} Returns true when the signatures conflict, false otherwise.
     */ function hasConflictingParams(signature1, signature2) {
            var ii = Math.max(signature1.params.length, signature2.params.length);
            for(var i = 0; i < ii; i++){
                var typesNames1 = getExpectedTypeNames(signature1, i, true);
                var typesNames2 = getExpectedTypeNames(signature2, i, true);
                if (!hasOverlap(typesNames1, typesNames2)) return false;
            }
            var len1 = signature1.params.length;
            var len2 = signature2.params.length;
            var restParam1 = hasRestParam(signature1.params);
            var restParam2 = hasRestParam(signature2.params);
            return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;
        }
        /**
     * Create a typed function
     * @param {String} name               The name for the typed function
     * @param {Object.<string, function>} signaturesMap
     *                                    An object with one or
     *                                    multiple signatures as key, and the
     *                                    function corresponding to the
     *                                    signature as value.
     * @return {function}  Returns the created typed function.
     */ function createTypedFunction(name, signaturesMap) {
            if (Object.keys(signaturesMap).length === 0) throw new SyntaxError('No signatures provided');
            // parse the signatures, and check for conflicts
            var parsedSignatures = [];
            Object.keys(signaturesMap).map(function(signature) {
                return parseSignature(signature, signaturesMap[signature], typed.conversions);
            }).filter(notNull).forEach(function(parsedSignature) {
                // check whether this parameter conflicts with already parsed signatures
                var conflictingSignature = findInArray(parsedSignatures, function(s) {
                    return hasConflictingParams(s, parsedSignature);
                });
                if (conflictingSignature) throw new TypeError('Conflicting signatures "' + stringifyParams(conflictingSignature.params) + '" and "' + stringifyParams(parsedSignature.params) + '".');
                parsedSignatures.push(parsedSignature);
            });
            // split and filter the types of the signatures, and then order them
            var signatures = flatMap(parsedSignatures, function(parsedSignature) {
                var params2 = parsedSignature ? splitParams(parsedSignature.params, false) : [];
                return params2.map(function(params) {
                    return {
                        params: params,
                        fn: parsedSignature.fn
                    };
                });
            }).filter(notNull);
            signatures.sort(compareSignatures);
            // we create a highly optimized checks for the first couple of signatures with max 2 arguments
            var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
            var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
            var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
            var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
            var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
            var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
            var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;
            // compile the tests
            var tests = signatures.map(function(signature) {
                return compileTests(signature.params);
            });
            var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
            var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
            var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
            var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
            var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
            var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;
            var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
            var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
            var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
            var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
            var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
            var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;
            // compile the functions
            var fns = signatures.map(function(signature) {
                return compileArgsPreprocessing(signature.params, signature.fn);
            });
            var fn0 = ok0 ? fns[0] : undef;
            var fn1 = ok1 ? fns[1] : undef;
            var fn2 = ok2 ? fns[2] : undef;
            var fn3 = ok3 ? fns[3] : undef;
            var fn4 = ok4 ? fns[4] : undef;
            var fn5 = ok5 ? fns[5] : undef;
            var len0 = ok0 ? signatures[0].params.length : -1;
            var len1 = ok1 ? signatures[1].params.length : -1;
            var len2 = ok2 ? signatures[2].params.length : -1;
            var len3 = ok3 ? signatures[3].params.length : -1;
            var len4 = ok4 ? signatures[4].params.length : -1;
            var len5 = ok5 ? signatures[5].params.length : -1;
            // simple and generic, but also slow
            var iStart = allOk ? 6 : 0;
            var iEnd = signatures.length;
            var generic = function generic() {
                for(var i = iStart; i < iEnd; i++){
                    if (tests[i](arguments)) return fns[i].apply(this, arguments);
                }
                throw createError(name, arguments, signatures);
            };
            // create the typed function
            // fast, specialized version. Falls back to the slower, generic one if needed
            var fn6 = function fn(arg0, arg1) {
                if (arguments.length === len0 && test00(arg0) && test01(arg1)) return fn0.apply(fn, arguments);
                if (arguments.length === len1 && test10(arg0) && test11(arg1)) return fn1.apply(fn, arguments);
                if (arguments.length === len2 && test20(arg0) && test21(arg1)) return fn2.apply(fn, arguments);
                if (arguments.length === len3 && test30(arg0) && test31(arg1)) return fn3.apply(fn, arguments);
                if (arguments.length === len4 && test40(arg0) && test41(arg1)) return fn4.apply(fn, arguments);
                if (arguments.length === len5 && test50(arg0) && test51(arg1)) return fn5.apply(fn, arguments);
                return generic.apply(fn, arguments);
            };
            // attach name the typed function
            try {
                Object.defineProperty(fn6, 'name', {
                    value: name
                });
            } catch (err) {
            // old browsers do not support Object.defineProperty and some don't support setting the name property
            // the function name is not essential for the functioning, it's mostly useful for debugging,
            // so it's fine to have unnamed functions.
            }
            // attach signatures to the function
            fn6.signatures = createSignaturesMap(signatures);
            return fn6;
        }
        /**
     * Test whether a type should be NOT be ignored
     * @param {string} typeName
     * @return {boolean}
     */ function notIgnore(typeName) {
            return typed.ignore.indexOf(typeName) === -1;
        }
        /**
     * trim a string
     * @param {string} str
     * @return {string}
     */ function trim(str) {
            return str.trim();
        }
        /**
     * Test whether a string is not empty
     * @param {string} str
     * @return {boolean}
     */ function notEmpty(str) {
            return !!str;
        }
        /**
     * test whether a value is not strict equal to null
     * @param {*} value
     * @return {boolean}
     */ function notNull(value) {
            return value !== null;
        }
        /**
     * Test whether a parameter has no types defined
     * @param {Param} param
     * @return {boolean}
     */ function isInvalidParam(param) {
            return param.types.length === 0;
        }
        /**
     * Return all but the last items of an array
     * @param {Array} arr
     * @return {Array}
     */ function initial(arr) {
            return arr.slice(0, arr.length - 1);
        }
        /**
     * return the last item of an array
     * @param {Array} arr
     * @return {*}
     */ function last1(arr) {
            return arr[arr.length - 1];
        }
        /**
     * Slice an array or function Arguments
     * @param {Array | Arguments | IArguments} arr
     * @param {number} start
     * @param {number} [end]
     * @return {Array}
     */ function slice(arr, start, end) {
            return Array.prototype.slice.call(arr, start, end);
        }
        /**
     * Test whether an array contains some item
     * @param {Array} array
     * @param {*} item
     * @return {boolean} Returns true if array contains item, false if not.
     */ function contains(array, item) {
            return array.indexOf(item) !== -1;
        }
        /**
     * Test whether two arrays have overlapping items
     * @param {Array} array1
     * @param {Array} array2
     * @return {boolean} Returns true when at least one item exists in both arrays
     */ function hasOverlap(array1, array2) {
            for(var i = 0; i < array1.length; i++){
                if (contains(array2, array1[i])) return true;
            }
            return false;
        }
        /**
     * Return the first item from an array for which test(arr[i]) returns true
     * @param {Array} arr
     * @param {function} test
     * @return {* | undefined} Returns the first matching item
     *                         or undefined when there is no match
     */ function findInArray(arr, test) {
            for(var i = 0; i < arr.length; i++){
                if (test(arr[i])) return arr[i];
            }
            return undefined;
        }
        /**
     * Filter unique items of an array with strings
     * @param {string[]} arr
     * @return {string[]}
     */ function uniq(arr) {
            var entries = {
            };
            for(var i = 0; i < arr.length; i++)entries[arr[i]] = true;
            return Object.keys(entries);
        }
        /**
     * Flat map the result invoking a callback for every item in an array.
     * https://gist.github.com/samgiles/762ee337dff48623e729
     * @param {Array} arr
     * @param {function} callback
     * @return {Array}
     */ function flatMap(arr, callback) {
            return Array.prototype.concat.apply([], arr.map(callback));
        }
        /**
     * Retrieve the function name from a set of typed functions,
     * and check whether the name of all functions match (if given)
     * @param {function[]} fns
     */ function getName(fns) {
            var name = '';
            for(var i = 0; i < fns.length; i++){
                var fn = fns[i];
                // check whether the names are the same when defined
                if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {
                    if (name === '') name = fn.name;
                    else if (name !== fn.name) {
                        var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
                        err.data = {
                            actual: fn.name,
                            expected: name
                        };
                        throw err;
                    }
                }
            }
            return name;
        }
        // extract and merge all signatures of a list with typed functions
        function extractSignatures(fns) {
            var err;
            var signaturesMap = {
            };
            function validateUnique(_signature, _fn) {
                if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {
                    err = new Error('Signature "' + _signature + '" is defined twice');
                    err.data = {
                        signature: _signature
                    };
                    throw err;
                // else: both signatures point to the same function, that's fine
                }
            }
            for(var i = 0; i < fns.length; i++){
                var fn = fns[i];
                // test whether this is a typed-function
                if (typeof fn.signatures === 'object') {
                    // merge the signatures
                    for(var signature in fn.signatures)if (fn.signatures.hasOwnProperty(signature)) {
                        validateUnique(signature, fn.signatures[signature]);
                        signaturesMap[signature] = fn.signatures[signature];
                    }
                } else if (typeof fn.signature === 'string') {
                    validateUnique(fn.signature, fn);
                    signaturesMap[fn.signature] = fn;
                } else {
                    err = new TypeError('Function is no typed-function (index: ' + i + ')');
                    err.data = {
                        index: i
                    };
                    throw err;
                }
            }
            return signaturesMap;
        }
        typed = createTypedFunction('typed', {
            'string, Object': createTypedFunction,
            'Object': function(signaturesMap) {
                // find existing name
                var fns = [];
                for(var signature in signaturesMap)if (signaturesMap.hasOwnProperty(signature)) fns.push(signaturesMap[signature]);
                var name = getName(fns);
                return createTypedFunction(name, signaturesMap);
            },
            '...Function': function(fns) {
                return createTypedFunction(getName(fns), extractSignatures(fns));
            },
            'string, ...Function': function(name, fns) {
                return createTypedFunction(name, extractSignatures(fns));
            }
        });
        typed.create = create;
        typed.types = _types;
        typed.conversions = _conversions;
        typed.ignore = _ignore;
        typed.convert = convert;
        typed.find = find;
        /**
     * add a type
     * @param {{name: string, test: function}} type
     * @param {boolean} [beforeObjectTest=true]
     *                          If true, the new test will be inserted before
     *                          the test with name 'Object' (if any), since
     *                          tests for Object match Array and classes too.
     */ typed.addType = function(type, beforeObjectTest) {
            if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') throw new TypeError('Object with properties {name: string, test: function} expected');
            if (beforeObjectTest !== false) {
                for(var i = 0; i < typed.types.length; i++)if (typed.types[i].name === 'Object') {
                    typed.types.splice(i, 0, type);
                    return;
                }
            }
            typed.types.push(type);
        };
        // add a conversion
        typed.addConversion = function(conversion) {
            if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
            typed.conversions.push(conversion);
        };
        return typed;
    }
    return create();
});

},{}],"l1AB8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
 */ /**
 * Check if a number is integer
 * @param {number | boolean} value
 * @return {boolean} isInteger
 */ parcelHelpers.export(exports, "isInteger", ()=>isInteger
);
parcelHelpers.export(exports, "sign", ()=>sign1
);
parcelHelpers.export(exports, "log2", ()=>log2
);
parcelHelpers.export(exports, "log10", ()=>log10
);
parcelHelpers.export(exports, "log1p", ()=>log1p
);
parcelHelpers.export(exports, "cbrt", ()=>cbrt
);
parcelHelpers.export(exports, "expm1", ()=>expm1
);
/**
 * Convert a number to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'engineering'    Always use engineering notation.
 *                                          For example '123.4e+0' and '14.0e+6'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lowerExp` and `upperExp` bounds, and
 *                                          uses exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                         'bin', 'oct, or
 *                         'hex'            Format the number using binary, octal,
 *                                          or hexadecimal notation.
 *                                          For example '0b1101' and '0x10fe'.
 *                     {number} wordSize    The word size in bits to use for formatting
 *                                          in binary, octal, or hexadecimal notation.
 *                                          To be used only with 'bin', 'oct', or 'hex'
 *                                          values for 'notation' option. When this option
 *                                          is defined the value is formatted as a signed
 *                                          twos complement integer of the given word size
 *                                          and the size suffix is appended to the output.
 *                                          For example
 *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
 *                                          Default value is undefined.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default,
 *                                          not rounding any digits.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12.071, {notation: 'fixed'})                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
 *
 * @param {number} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */ parcelHelpers.export(exports, "format", ()=>format
);
/**
 * Split a number into sign, coefficients, and exponent
 * @param {number | string} value
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 */ parcelHelpers.export(exports, "splitNumber", ()=>splitNumber
);
/**
 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */ parcelHelpers.export(exports, "toEngineering", ()=>toEngineering
);
/**
 * Format a number with fixed notation.
 * @param {number | string} value
 * @param {number} [precision=undefined]  Optional number of decimals after the
 *                                        decimal point. null by default.
 */ parcelHelpers.export(exports, "toFixed", ()=>toFixed
);
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 */ parcelHelpers.export(exports, "toExponential", ()=>toExponential
);
/**
 * Format a number with a certain precision
 * @param {number | string} value
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
 *                                       By default:
 *                                         lowerExp = -3 (incl)
 *                                         upper = +5 (excl)
 * @return {string}
 */ parcelHelpers.export(exports, "toPrecision", ()=>toPrecision
);
/**
 * Round the number of digits of a number *
 * @param {SplitValue} split       A value split with .splitNumber(value)
 * @param {number} precision  A positive integer
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 *              with rounded digits
 */ parcelHelpers.export(exports, "roundDigits", ()=>roundDigits
);
/**
 * Count the number of significant digits of a number.
 *
 * For example:
 *   2.34 returns 3
 *   0.0034 returns 2
 *   120.5e+30 returns 4
 *
 * @param {number} value
 * @return {number} digits   Number of significant digits
 */ parcelHelpers.export(exports, "digits", ()=>digits1
);
parcelHelpers.export(exports, "DBL_EPSILON", ()=>DBL_EPSILON
);
/**
 * Compares two floating point numbers.
 * @param {number} x          First value to compare
 * @param {number} y          Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
*/ parcelHelpers.export(exports, "nearlyEqual", ()=>nearlyEqual
);
parcelHelpers.export(exports, "acosh", ()=>acosh
);
parcelHelpers.export(exports, "asinh", ()=>asinh
);
parcelHelpers.export(exports, "atanh", ()=>atanh
);
parcelHelpers.export(exports, "cosh", ()=>cosh
);
parcelHelpers.export(exports, "sinh", ()=>sinh
);
parcelHelpers.export(exports, "tanh", ()=>tanh
);
var _isJs = require("./is.js");
function isInteger(value) {
    if (typeof value === 'boolean') return true;
    return isFinite(value) ? value === Math.round(value) : false;
}
var sign1 = /* #__PURE__ */ Math.sign || function(x) {
    if (x > 0) return 1;
    else if (x < 0) return -1;
    else return 0;
};
var log2 = /* #__PURE__ */ Math.log2 || function log2(x) {
    return Math.log(x) / Math.LN2;
};
var log10 = /* #__PURE__ */ Math.log10 || function log10(x) {
    return Math.log(x) / Math.LN10;
};
var log1p = /* #__PURE__ */ Math.log1p || function(x) {
    return Math.log(x + 1);
};
var cbrt = /* #__PURE__ */ Math.cbrt || function cbrt(x) {
    if (x === 0) return x;
    var negate = x < 0;
    var result;
    if (negate) x = -x;
    if (isFinite(x)) {
        result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods
        result = (x / (result * result) + 2 * result) / 3;
    } else result = x;
    return negate ? -result : result;
};
var expm1 = /* #__PURE__ */ Math.expm1 || function expm1(x) {
    return x >= 0.0002 || x <= -0.0002 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
};
/**
 * Formats a number in a given base
 * @param {number} n
 * @param {number} base
 * @param {number} size
 * @returns {string}
 */ function formatNumberToBase(n, base, size) {
    var prefixes = {
        2: '0b',
        8: '0o',
        16: '0x'
    };
    var prefix = prefixes[base];
    var suffix = '';
    if (size) {
        if (size < 1) throw new Error('size must be in greater than 0');
        if (!isInteger(size)) throw new Error('size must be an integer');
        if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
        if (!isInteger(n)) throw new Error('Value must be an integer');
        if (n < 0) n = n + 2 ** size;
        suffix = "i".concat(size);
    }
    var sign = '';
    if (n < 0) {
        n = -n;
        sign = '-';
    }
    return "".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);
}
function format(value, options) {
    if (typeof options === 'function') // handle format(value, fn)
    return options(value);
     // handle special cases
    if (value === Infinity) return 'Infinity';
    else if (value === -Infinity) return '-Infinity';
    else if (isNaN(value)) return 'NaN';
     // default values for options
    var notation = 'auto';
    var precision;
    var wordSize;
    if (options) {
        // determine notation from options
        if (options.notation) notation = options.notation;
         // determine precision from options
        if (_isJs.isNumber(options)) precision = options;
        else if (_isJs.isNumber(options.precision)) precision = options.precision;
        if (options.wordSize) {
            wordSize = options.wordSize;
            if (typeof wordSize !== 'number') throw new Error('Option "wordSize" must be a number');
        }
    } // handle the various notations
    switch(notation){
        case 'fixed':
            return toFixed(value, precision);
        case 'exponential':
            return toExponential(value, precision);
        case 'engineering':
            return toEngineering(value, precision);
        case 'bin':
            return formatNumberToBase(value, 2, wordSize);
        case 'oct':
            return formatNumberToBase(value, 8, wordSize);
        case 'hex':
            return formatNumberToBase(value, 16, wordSize);
        case 'auto':
            // remove trailing zeros after the decimal point
            return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function() {
                var digits = arguments[2];
                var e = arguments[4];
                return digits !== '.' ? digits + e : e;
            });
        default:
            throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
    }
}
function splitNumber(value) {
    // parse the input value
    var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
    if (!match) throw new SyntaxError('Invalid number ' + value);
    var sign = match[1];
    var digits = match[2];
    var exponent = parseFloat(match[4] || '0');
    var dot = digits.indexOf('.');
    exponent += dot !== -1 ? dot - 1 : digits.length - 1;
    var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
    .replace(/^0*/, function(zeros) {
        // remove leading zeros, add their count to the exponent
        exponent -= zeros.length;
        return '';
    }).replace(/0*$/, '') // remove trailing zeros
    .split('').map(function(d) {
        return parseInt(d);
    });
    if (coefficients.length === 0) {
        coefficients.push(0);
        exponent++;
    }
    return {
        sign: sign,
        coefficients: coefficients,
        exponent: exponent
    };
}
function toEngineering(value, precision) {
    if (isNaN(value) || !isFinite(value)) return String(value);
    var split = splitNumber(value);
    var rounded = roundDigits(split, precision);
    var e = rounded.exponent;
    var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent
    var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;
    if (_isJs.isNumber(precision)) // add zeroes to give correct sig figs
    while(precision > c.length || e - newExp + 1 > c.length)c.push(0);
    else {
        // concatenate coefficients with necessary zeros
        // add zeros if necessary (for example: 1e+8 -> 100e+6)
        var missingZeros = Math.abs(e - newExp) - (c.length - 1);
        for(var i = 0; i < missingZeros; i++)c.push(0);
    } // find difference in exponents
    var expDiff = Math.abs(e - newExp);
    var decimalIdx = 1; // push decimal index over by expDiff times
    while(expDiff > 0){
        decimalIdx++;
        expDiff--;
    } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
    // otherwise concat with the rest of the coefficients
    var decimals = c.slice(decimalIdx).join('');
    var decimalVal = _isJs.isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
    var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
    return rounded.sign + str;
}
function toFixed(value, precision) {
    if (isNaN(value) || !isFinite(value)) return String(value);
    var splitValue = splitNumber(value);
    var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
    var c = rounded.coefficients;
    var p = rounded.exponent + 1; // exponent may have changed
    // append zeros if needed
    var pp = p + (precision || 0);
    if (c.length < pp) c = c.concat(zeros1(pp - c.length));
     // prepend zeros if needed
    if (p < 0) {
        c = zeros1(-p + 1).concat(c);
        p = 1;
    } // insert a dot if needed
    if (p < c.length) c.splice(p, 0, p === 0 ? '0.' : '.');
    return rounded.sign + c.join('');
}
function toExponential(value, precision) {
    if (isNaN(value) || !isFinite(value)) return String(value);
     // round if needed, else create a clone
    var split = splitNumber(value);
    var rounded = precision ? roundDigits(split, precision) : split;
    var c = rounded.coefficients;
    var e = rounded.exponent; // append zeros if needed
    if (c.length < precision) c = c.concat(zeros1(precision - c.length));
     // format as `C.CCCe+EEE` or `C.CCCe-EEE`
    var first = c.shift();
    return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
}
function toPrecision(value, precision, options) {
    if (isNaN(value) || !isFinite(value)) return String(value);
     // determine lower and upper bound for exponential notation.
    var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
    var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
    var split = splitNumber(value);
    var rounded = precision ? roundDigits(split, precision) : split;
    if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) // exponential notation
    return toExponential(value, precision);
    else {
        var c = rounded.coefficients;
        var e = rounded.exponent; // append trailing zeros
        if (c.length < precision) c = c.concat(zeros1(precision - c.length));
         // append trailing zeros
        // TODO: simplify the next statement
        c = c.concat(zeros1(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros
        c = zeros1(-e).concat(c);
        var dot = e > 0 ? e : 0;
        if (dot < c.length - 1) c.splice(dot + 1, 0, '.');
        return rounded.sign + c.join('');
    }
}
function roundDigits(split, precision) {
    // create a clone
    var rounded = {
        sign: split.sign,
        coefficients: split.coefficients,
        exponent: split.exponent
    };
    var c = rounded.coefficients; // prepend zeros if needed
    while(precision <= 0){
        c.unshift(0);
        rounded.exponent++;
        precision++;
    }
    if (c.length > precision) {
        var removed = c.splice(precision, c.length - precision);
        if (removed[0] >= 5) {
            var i = precision - 1;
            c[i]++;
            while(c[i] === 10){
                c.pop();
                if (i === 0) {
                    c.unshift(0);
                    rounded.exponent++;
                    i++;
                }
                i--;
                c[i]++;
            }
        }
    }
    return rounded;
}
/**
 * Create an array filled with zeros.
 * @param {number} length
 * @return {Array}
 */ function zeros1(length) {
    var arr = [];
    for(var i = 0; i < length; i++)arr.push(0);
    return arr;
}
function digits1(value) {
    return value.toExponential().replace(/e.*$/, '') // remove exponential notation
    .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
    .length;
}
var DBL_EPSILON = Number.EPSILON || 0.0000000000000002220446049250313;
function nearlyEqual(x, y, epsilon) {
    // if epsilon is null or undefined, test whether x and y are exactly equal
    if (epsilon === null || epsilon === undefined) return x === y;
    if (x === y) return true;
     // NaN
    if (isNaN(x) || isNaN(y)) return false;
     // at this point x and y should be finite
    if (isFinite(x) && isFinite(y)) {
        // check numbers are very close, needed when comparing numbers near zero
        var diff = Math.abs(x - y);
        if (diff < DBL_EPSILON) return true;
        else // use relative error
        return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
    } // Infinite and Number or negative Infinite and positive Infinite cases
    return false;
}
var acosh = Math.acosh || function(x) {
    return Math.log(Math.sqrt(x * x - 1) + x);
};
var asinh = Math.asinh || function(x) {
    return Math.log(Math.sqrt(x * x + 1) + x);
};
var atanh = Math.atanh || function(x) {
    return Math.log((1 + x) / (1 - x)) / 2;
};
var cosh = Math.cosh || function(x) {
    return (Math.exp(x) + Math.exp(-x)) / 2;
};
var sinh = Math.sinh || function(x) {
    return (Math.exp(x) - Math.exp(-x)) / 2;
};
var tanh = Math.tanh || function(x) {
    var e = Math.exp(2 * x);
    return (e - 1) / (e + 1);
};

},{"./is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"26foW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a factory function, which can be used to inject dependencies.
 *
 * The created functions are memoized, a consecutive call of the factory
 * with the exact same inputs will return the same function instance.
 * The memoized cache is exposed on `factory.cache` and can be cleared
 * if needed.
 *
 * Example:
 *
 *     const name = 'log'
 *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
 *
 *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
 *       // ... create the function log here and return it
 *     }
 *
 * @param {string} name           Name of the function to be created
 * @param {string[]} dependencies The names of all required dependencies
 * @param {function} create       Callback function called with an object with all dependencies
 * @param {Object} [meta]         Optional object with meta information that will be attached
 *                                to the created factory function as property `meta`.
 * @returns {function}
 */ parcelHelpers.export(exports, "factory", ()=>factory1
);
/**
 * Sort all factories such that when loading in order, the dependencies are resolved.
 *
 * @param {Array} factories
 * @returns {Array} Returns a new array with the sorted factories.
 */ parcelHelpers.export(exports, "sortFactories", ()=>sortFactories
) // TODO: comment or cleanup if unused in the end
;
parcelHelpers.export(exports, "create", ()=>create1
);
/**
 * Test whether an object is a factory. This is the case when it has
 * properties name, dependencies, and a function create.
 * @param {*} obj
 * @returns {boolean}
 */ parcelHelpers.export(exports, "isFactory", ()=>isFactory
);
/**
 * Assert that all dependencies of a list with dependencies are available in the provided scope.
 *
 * Will throw an exception when there are dependencies missing.
 *
 * @param {string} name   Name for the function to be created. Used to generate a useful error message
 * @param {string[]} dependencies
 * @param {Object} scope
 */ parcelHelpers.export(exports, "assertDependencies", ()=>assertDependencies
);
parcelHelpers.export(exports, "isOptionalDependency", ()=>isOptionalDependency
);
parcelHelpers.export(exports, "stripOptionalNotation", ()=>stripOptionalNotation
);
var _arrayJs = require("./array.js");
var _objectJs = require("./object.js");
function factory1(name, dependencies, create, meta) {
    function assertAndCreate(scope) {
        // we only pass the requested dependencies to the factory function
        // to prevent functions to rely on dependencies that are not explicitly
        // requested.
        var deps = _objectJs.pickShallow(scope, dependencies.map(stripOptionalNotation));
        assertDependencies(name, dependencies, scope);
        return create(deps);
    }
    assertAndCreate.isFactory = true;
    assertAndCreate.fn = name;
    assertAndCreate.dependencies = dependencies.slice().sort();
    if (meta) assertAndCreate.meta = meta;
    return assertAndCreate;
}
function sortFactories(factories) {
    var factoriesByName = {
    };
    factories.forEach((factory)=>{
        factoriesByName[factory.fn] = factory;
    });
    function containsDependency(factory, dependency) {
        // TODO: detect circular references
        if (isFactory(factory)) {
            if (_arrayJs.contains(factory.dependencies, dependency.fn || dependency.name)) return true;
            if (factory.dependencies.some((d)=>containsDependency(factoriesByName[d], dependency)
            )) return true;
        }
        return false;
    }
    var sorted = [];
    function addFactory(factory) {
        var index = 0;
        while(index < sorted.length && !containsDependency(sorted[index], factory))index++;
        sorted.splice(index, 0, factory);
    } // sort regular factory functions
    factories.filter(isFactory).forEach(addFactory); // sort legacy factory functions AFTER the regular factory functions
    factories.filter((factory)=>!isFactory(factory)
    ).forEach(addFactory);
    return sorted;
}
function create1(factories) {
    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    };
    sortFactories(factories).forEach((factory)=>factory(scope)
    );
    return scope;
}
function isFactory(obj) {
    return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);
}
function assertDependencies(name, dependencies, scope) {
    var allDefined = dependencies.filter((dependency)=>!isOptionalDependency(dependency)
    ) // filter optionals
    .every((dependency)=>scope[dependency] !== undefined
    );
    if (!allDefined) {
        var missingDependencies = dependencies.filter((dependency)=>scope[dependency] === undefined
        ); // TODO: create a custom error class for this, a MathjsError or something like that
        throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map((d)=>"\"".concat(d, "\"")
        ).join(', '), "."));
    }
}
function isOptionalDependency(dependency) {
    return dependency && dependency[0] === '?';
}
function stripOptionalNotation(dependency) {
    return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
}

},{"./array.js":"3R6c8","./object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3R6c8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Calculate the size of a multi dimensional array.
 * This function checks the size of the first entry, it does not validate
 * whether all dimensions match. (use function `validate` for that)
 * @param {Array} x
 * @Return {Number[]} size
 */ parcelHelpers.export(exports, "arraySize", ()=>arraySize
);
/**
 * Validate whether each element in a multi dimensional array has
 * a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @throws DimensionError
 */ parcelHelpers.export(exports, "validate", ()=>validate
);
/**
 * Test whether index is an integer number with index >= 0 and index < length
 * when length is provided
 * @param {number} index    Zero-based index
 * @param {number} [length] Length of the array
 */ parcelHelpers.export(exports, "validateIndex", ()=>validateIndex
);
/**
 * Resize a multi dimensional array. The resized array is returned.
 * @param {Array} array         Array to be resized
 * @param {Array.<number>} size Array with the size of each dimension
 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
 *                              zero by default. Specify for example `null`,
 *                              to clearly see entries that are not explicitly
 *                              set.
 * @return {Array} array         The resized array
 */ parcelHelpers.export(exports, "resize", ()=>resize
);
/**
 * Re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */ parcelHelpers.export(exports, "reshape", ()=>reshape
);
/**
 * Replaces the wildcard -1 in the sizes array.
 * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.
 * @param {number} currentLength  Number of elements in the array.
 * @throws {Error}                If more than one wildcard or unable to replace it.
 * @returns {Array.<number>}      The sizes array with wildcard replaced.
 */ parcelHelpers.export(exports, "processSizesWildcard", ()=>processSizesWildcard
);
/**
 * Squeeze a multi dimensional array
 * @param {Array} array
 * @param {Array} [size]
 * @returns {Array} returns the array itself
 */ parcelHelpers.export(exports, "squeeze", ()=>squeeze
);
/**
 * Unsqueeze a multi dimensional array: add dimensions when missing
 *
 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
 *
 * @param {Array} array
 * @param {number} dims       Desired number of dimensions of the array
 * @param {number} [outer]    Number of outer dimensions to be added
 * @param {Array} [size] Current size of array.
 * @returns {Array} returns the array itself
 * @private
 */ parcelHelpers.export(exports, "unsqueeze", ()=>unsqueeze
);
/**
 * Flatten a multi dimensional array, put all elements in a one dimensional
 * array
 * @param {Array} array   A multi dimensional array
 * @return {Array}        The flattened array (1 dimensional)
 */ parcelHelpers.export(exports, "flatten", ()=>flatten
);
/**
 * A safe map
 * @param {Array} array
 * @param {function} callback
 */ parcelHelpers.export(exports, "map", ()=>map
);
/**
 * A safe forEach
 * @param {Array} array
 * @param {function} callback
 */ parcelHelpers.export(exports, "forEach", ()=>forEach
);
/**
 * A safe filter
 * @param {Array} array
 * @param {function} callback
 */ parcelHelpers.export(exports, "filter", ()=>filter
);
/**
 * Filter values in a callback given a regular expression
 * @param {Array} array
 * @param {RegExp} regexp
 * @return {Array} Returns the filtered array
 * @private
 */ parcelHelpers.export(exports, "filterRegExp", ()=>filterRegExp
);
/**
 * A safe join
 * @param {Array} array
 * @param {string} separator
 */ parcelHelpers.export(exports, "join", ()=>join
);
/**
 * Assign a numeric identifier to every element of a sorted array
 * @param {Array} a  An array
 * @return {Array} An array of objects containing the original value and its identifier
 */ parcelHelpers.export(exports, "identify", ()=>identify
);
/**
 * Remove the numeric identifier from the elements
 * @param {array} a  An array
 * @return {array} An array of values without identifiers
 */ parcelHelpers.export(exports, "generalize", ()=>generalize
);
/**
 * Check the datatype of a given object
 * This is a low level implementation that should only be used by
 * parent Matrix classes such as SparseMatrix or DenseMatrix
 * This method does not validate Array Matrix shape
 * @param {Array} array
 * @param {function} typeOf   Callback function to use to determine the type of a value
 * @return {string}
 */ parcelHelpers.export(exports, "getArrayDataType", ()=>getArrayDataType
);
/**
 * Return the last item from an array
 * @param array
 * @returns {*}
 */ parcelHelpers.export(exports, "last", ()=>last
);
/**
 * Get all but the last element of array.
 */ parcelHelpers.export(exports, "initial", ()=>initial
);
/**
 * Test whether an array or string contains an item
 * @param {Array | string} array
 * @param {*} item
 * @return {boolean}
 */ parcelHelpers.export(exports, "contains", ()=>contains
);
var _numberJs = require("./number.js");
var _isJs = require("./is.js");
var _stringJs = require("./string.js");
var _dimensionErrorJs = require("../error/DimensionError.js");
var _indexErrorJs = require("../error/IndexError.js");
function arraySize(x) {
    var s = [];
    while(Array.isArray(x)){
        s.push(x.length);
        x = x[0];
    }
    return s;
}
/**
 * Recursively validate whether each element in a multi dimensional array
 * has a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @param {number} dim   Current dimension
 * @throws DimensionError
 * @private
 */ function _validate(array, size, dim) {
    var i;
    var len = array.length;
    if (len !== size[dim]) throw new _dimensionErrorJs.DimensionError(len, size[dim]);
    if (dim < size.length - 1) {
        // recursively validate each child array
        var dimNext = dim + 1;
        for(i = 0; i < len; i++){
            var child = array[i];
            if (!Array.isArray(child)) throw new _dimensionErrorJs.DimensionError(size.length - 1, size.length, '<');
            _validate(array[i], size, dimNext);
        }
    } else // last dimension. none of the childs may be an array
    for(i = 0; i < len; i++){
        if (Array.isArray(array[i])) throw new _dimensionErrorJs.DimensionError(size.length + 1, size.length, '>');
    }
}
function validate(array, size) {
    var isScalar = size.length === 0;
    if (isScalar) {
        // scalar
        if (Array.isArray(array)) throw new _dimensionErrorJs.DimensionError(array.length, 0);
    } else // array
    _validate(array, size, 0);
}
function validateIndex(index, length) {
    if (!_isJs.isNumber(index) || !_numberJs.isInteger(index)) throw new TypeError('Index must be an integer (value: ' + index + ')');
    if (index < 0 || typeof length === 'number' && index >= length) throw new _indexErrorJs.IndexError(index, length);
}
function resize(array, size, defaultValue) {
    // TODO: add support for scalars, having size=[] ?
    // check the type of the arguments
    if (!Array.isArray(array) || !Array.isArray(size)) throw new TypeError('Array expected');
    if (size.length === 0) throw new Error('Resizing to scalar is not supported');
     // check whether size contains positive integers
    size.forEach(function(value) {
        if (!_isJs.isNumber(value) || !_numberJs.isInteger(value) || value < 0) throw new TypeError("Invalid size, must contain positive integers (size: " + _stringJs.format(size) + ')');
    }); // recursively resize the array
    var _defaultValue = defaultValue !== undefined ? defaultValue : 0;
    _resize(array, size, 0, _defaultValue);
    return array;
}
/**
 * Recursively resize a multi dimensional array
 * @param {Array} array         Array to be resized
 * @param {number[]} size       Array with the size of each dimension
 * @param {number} dim          Current dimension
 * @param {*} [defaultValue]    Value to be filled in in new entries,
 *                              undefined by default.
 * @private
 */ function _resize(array, size, dim, defaultValue) {
    var i;
    var elem;
    var oldLen = array.length;
    var newLen = size[dim];
    var minLen = Math.min(oldLen, newLen); // apply new length
    array.length = newLen;
    if (dim < size.length - 1) {
        // non-last dimension
        var dimNext = dim + 1; // resize existing child arrays
        for(i = 0; i < minLen; i++){
            // resize child array
            elem = array[i];
            if (!Array.isArray(elem)) {
                elem = [
                    elem
                ]; // add a dimension
                array[i] = elem;
            }
            _resize(elem, size, dimNext, defaultValue);
        } // create new child arrays
        for(i = minLen; i < newLen; i++){
            // get child array
            elem = [];
            array[i] = elem; // resize new child array
            _resize(elem, size, dimNext, defaultValue);
        }
    } else {
        // last dimension
        // remove dimensions of existing values
        for(i = 0; i < minLen; i++)while(Array.isArray(array[i]))array[i] = array[i][0];
         // fill new elements with the default value
        for(i = minLen; i < newLen; i++)array[i] = defaultValue;
    }
}
function reshape(array, sizes) {
    var flatArray = flatten(array);
    var currentLength = flatArray.length;
    if (!Array.isArray(array) || !Array.isArray(sizes)) throw new TypeError('Array expected');
    if (sizes.length === 0) throw new _dimensionErrorJs.DimensionError(0, currentLength, '!=');
    sizes = processSizesWildcard(sizes, currentLength);
    var newLength = product(sizes);
    if (currentLength !== newLength) throw new _dimensionErrorJs.DimensionError(newLength, currentLength, '!=');
    try {
        return _reshape(flatArray, sizes);
    } catch (e) {
        if (e instanceof _dimensionErrorJs.DimensionError) throw new _dimensionErrorJs.DimensionError(newLength, currentLength, '!=');
        throw e;
    }
}
function processSizesWildcard(sizes, currentLength) {
    var newLength = product(sizes);
    var processedSizes = sizes.slice();
    var WILDCARD = -1;
    var wildCardIndex = sizes.indexOf(WILDCARD);
    var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;
    if (isMoreThanOneWildcard) throw new Error('More than one wildcard in sizes');
    var hasWildcard = wildCardIndex >= 0;
    var canReplaceWildcard = currentLength % newLength === 0;
    if (hasWildcard) {
        if (canReplaceWildcard) processedSizes[wildCardIndex] = -currentLength / newLength;
        else throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);
    }
    return processedSizes;
}
/**
 * Computes the product of all array elements.
 * @param {Array<number>} array Array of factors
 * @returns {number}            Product of all elements
 */ function product(array) {
    return array.reduce((prev, curr)=>prev * curr
    , 1);
}
/**
 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 */ function _reshape(array, sizes) {
    // testing if there are enough elements for the requested shape
    var tmpArray = array;
    var tmpArray2; // for each dimensions starting by the last one and ignoring the first one
    for(var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--){
        var size = sizes[sizeIndex];
        tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size
        var length = tmpArray.length / size;
        for(var i = 0; i < length; i++)tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
         // set it as the new tmpArray for the next loop turn or for return
        tmpArray = tmpArray2;
    }
    return tmpArray;
}
function squeeze(array, size) {
    var s = size || arraySize(array); // squeeze outer dimensions
    while(Array.isArray(array) && array.length === 1){
        array = array[0];
        s.shift();
    } // find the first dimension to be squeezed
    var dims = s.length;
    while(s[dims - 1] === 1)dims--;
     // squeeze inner dimensions
    if (dims < s.length) {
        array = _squeeze(array, dims, 0);
        s.length = dims;
    }
    return array;
}
/**
 * Recursively squeeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */ function _squeeze(array, dims, dim) {
    var i, ii;
    if (dim < dims) {
        var next = dim + 1;
        for(i = 0, ii = array.length; i < ii; i++)array[i] = _squeeze(array[i], dims, next);
    } else while(Array.isArray(array))array = array[0];
    return array;
}
function unsqueeze(array, dims, outer, size) {
    var s = size || arraySize(array); // unsqueeze outer dimensions
    if (outer) for(var i = 0; i < outer; i++){
        array = [
            array
        ];
        s.unshift(1);
    }
     // unsqueeze inner dimensions
    array = _unsqueeze(array, dims, 0);
    while(s.length < dims)s.push(1);
    return array;
}
/**
 * Recursively unsqueeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */ function _unsqueeze(array, dims, dim) {
    var i, ii;
    if (Array.isArray(array)) {
        var next = dim + 1;
        for(i = 0, ii = array.length; i < ii; i++)array[i] = _unsqueeze(array[i], dims, next);
    } else for(var d = dim; d < dims; d++)array = [
        array
    ];
    return array;
}
function flatten(array) {
    if (!Array.isArray(array)) // if not an array, return as is
    return array;
    var flat = [];
    array.forEach(function callback(value) {
        if (Array.isArray(value)) value.forEach(callback); // traverse through sub-arrays recursively
        else flat.push(value);
    });
    return flat;
}
function map(array, callback) {
    return Array.prototype.map.call(array, callback);
}
function forEach(array, callback) {
    Array.prototype.forEach.call(array, callback);
}
function filter(array, callback) {
    if (arraySize(array).length !== 1) throw new Error('Only one dimensional matrices supported');
    return Array.prototype.filter.call(array, callback);
}
function filterRegExp(array, regexp) {
    if (arraySize(array).length !== 1) throw new Error('Only one dimensional matrices supported');
    return Array.prototype.filter.call(array, (entry)=>regexp.test(entry)
    );
}
function join(array, separator) {
    return Array.prototype.join.call(array, separator);
}
function identify(a) {
    if (!Array.isArray(a)) throw new TypeError('Array input expected');
    if (a.length === 0) return a;
    var b = [];
    var count = 0;
    b[0] = {
        value: a[0],
        identifier: 0
    };
    for(var i = 1; i < a.length; i++){
        if (a[i] === a[i - 1]) count++;
        else count = 0;
        b.push({
            value: a[i],
            identifier: count
        });
    }
    return b;
}
function generalize(a) {
    if (!Array.isArray(a)) throw new TypeError('Array input expected');
    if (a.length === 0) return a;
    var b = [];
    for(var i = 0; i < a.length; i++)b.push(a[i].value);
    return b;
}
function getArrayDataType(array, typeOf) {
    var type; // to hold type info
    var length = 0; // to hold length value to ensure it has consistent sizes
    for(var i = 0; i < array.length; i++){
        var item = array[i];
        var isArray = Array.isArray(item); // Saving the target matrix row size
        if (i === 0 && isArray) length = item.length;
         // If the current item is an array but the length does not equal the targetVectorSize
        if (isArray && item.length !== length) return undefined;
        var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
         : typeOf(item);
        if (type === undefined) type = itemType; // first item
        else if (type !== itemType) return 'mixed';
    }
    return type;
}
function last(array) {
    return array[array.length - 1];
}
function initial(array) {
    return array.slice(0, array.length - 1);
}
function contains(array, item) {
    return array.indexOf(item) !== -1;
}

},{"./number.js":"l1AB8","./is.js":"iwdlF","./string.js":"0PPSB","../error/DimensionError.js":"49REC","../error/IndexError.js":"bCMLn","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"0PPSB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Check if a text ends with a certain string.
 * @param {string} text
 * @param {string} search
 */ parcelHelpers.export(exports, "endsWith", ()=>endsWith
);
/**
 * Format a value of any type into a string.
 *
 * Usage:
 *     math.format(value)
 *     math.format(value, precision)
 *
 * When value is a function:
 *
 * - When the function has a property `syntax`, it returns this
 *   syntax description.
 * - In other cases, a string `'function'` is returned.
 *
 * When `value` is an Object:
 *
 * - When the object contains a property `format` being a function, this
 *   function is invoked as `value.format(options)` and the result is returned.
 * - When the object has its own `toString` method, this method is invoked
 *   and the result is returned.
 * - In other cases the function will loop over all object properties and
 *   return JSON object notation like '{"a": 2, "b": 3}'.
 *
 * Example usage:
 *     math.format(2/7)                // '0.2857142857142857'
 *     math.format(math.pi, 3)         // '3.14'
 *     math.format(new Complex(2, 3))  // '2 + 3i'
 *     math.format('hello')            // '"hello"'
 *
 * @param {*} value             Value to be stringified
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @return {string} str
 */ parcelHelpers.export(exports, "format", ()=>format
);
/**
 * Stringify a value into a string enclosed in double quotes.
 * Unescaped double quotes and backslashes inside the value are escaped.
 * @param {*} value
 * @return {string}
 */ parcelHelpers.export(exports, "stringify", ()=>stringify
);
/**
 * Escape special HTML characters
 * @param {*} value
 * @return {string}
 */ parcelHelpers.export(exports, "escape", ()=>escape
);
/**
 * Compare two strings
 * @param {string} x
 * @param {string} y
 * @returns {number}
 */ parcelHelpers.export(exports, "compareText", ()=>compareText
);
var _isJs = require("./is.js");
var _numberJs = require("./number.js");
var _formatterJs = require("./bignumber/formatter.js");
function endsWith(text, search) {
    var start = text.length - search.length;
    var end = text.length;
    return text.substring(start, end) === search;
}
function format(value, options) {
    if (typeof value === 'number') return _numberJs.format(value, options);
    if (_isJs.isBigNumber(value)) return _formatterJs.format(value, options);
     // note: we use unsafe duck-typing here to check for Fractions, this is
    // ok here since we're only invoking toString or concatenating its values
    if (looksLikeFraction(value)) {
        if (!options || options.fraction !== 'decimal') // output as ratio, like '1/3'
        return value.s * value.n + '/' + value.d;
        else // output as decimal, like '0.(3)'
        return value.toString();
    }
    if (Array.isArray(value)) return formatArray(value, options);
    if (_isJs.isString(value)) return '"' + value + '"';
    if (typeof value === 'function') return value.syntax ? String(value.syntax) : 'function';
    if (value && typeof value === 'object') {
        if (typeof value.format === 'function') return value.format(options);
        else if (value && value.toString(options) !== ({
        }).toString()) // this object has a non-native toString method, use that one
        return value.toString(options);
        else {
            var entries = Object.keys(value).map((key)=>{
                return '"' + key + '": ' + format(value[key], options);
            });
            return '{' + entries.join(', ') + '}';
        }
    }
    return String(value);
}
function stringify(value) {
    var text = String(value);
    var escaped = '';
    var i = 0;
    while(i < text.length){
        var c = text.charAt(i);
        if (c === '\\') {
            escaped += c;
            i++;
            c = text.charAt(i);
            if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) escaped += '\\'; // no valid escape character -> escape it
            escaped += c;
        } else if (c === '"') escaped += '\\"';
        else escaped += c;
        i++;
    }
    return '"' + escaped + '"';
}
function escape(value) {
    var text = String(value);
    text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    return text;
}
/**
 * Recursively format an n-dimensional matrix
 * Example output: "[[1, 2], [3, 4]]"
 * @param {Array} array
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @returns {string} str
 */ function formatArray(array, options) {
    if (Array.isArray(array)) {
        var str = '[';
        var len = array.length;
        for(var i = 0; i < len; i++){
            if (i !== 0) str += ', ';
            str += formatArray(array[i], options);
        }
        str += ']';
        return str;
    } else return format(array, options);
}
/**
 * Check whether a value looks like a Fraction (unsafe duck-type check)
 * @param {*} value
 * @return {boolean}
 */ function looksLikeFraction(value) {
    return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
}
function compareText(x, y) {
    // we don't want to convert numbers to string, only accept string input
    if (!_isJs.isString(x)) throw new TypeError("Unexpected type of argument in function compareText (expected: string or Array or Matrix, actual: " + _isJs.typeOf(x) + ', index: 0)');
    if (!_isJs.isString(y)) throw new TypeError("Unexpected type of argument in function compareText (expected: string or Array or Matrix, actual: " + _isJs.typeOf(y) + ', index: 1)');
    return x === y ? 0 : x > y ? 1 : -1;
}

},{"./is.js":"iwdlF","./number.js":"l1AB8","./bignumber/formatter.js":"3Wq4D","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3Wq4D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Convert a BigNumber to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                         'bin', 'oct, or
 *                         'hex'            Format the number using binary, octal,
 *                                          or hexadecimal notation.
 *                                          For example '0b1101' and '0x10fe'.
 *                     {number} wordSize    The word size in bits to use for formatting
 *                                          in binary, octal, or hexadecimal notation.
 *                                          To be used only with 'bin', 'oct', or 'hex'
 *                                          values for 'notation' option. When this option
 *                                          is defined the value is formatted as a signed
 *                                          twos complement integer of the given word size
 *                                          and the size suffix is appended to the output.
 *                                          For example
 *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
 *                                          Default value is undefined.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
 *
 * @param {BigNumber} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */ parcelHelpers.export(exports, "format", ()=>format
);
/**
 * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {BigNumber | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */ parcelHelpers.export(exports, "toEngineering", ()=>toEngineering
);
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {BigNumber} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */ parcelHelpers.export(exports, "toExponential", ()=>toExponential
);
/**
 * Format a number with fixed notation.
 * @param {BigNumber} value
 * @param {number} [precision=undefined] Optional number of decimals after the
 *                                       decimal point. Undefined by default.
 */ parcelHelpers.export(exports, "toFixed", ()=>toFixed
);
var _numberJs = require("../number.js");
/**
 * Formats a BigNumber in a given base
 * @param {BigNumber} n
 * @param {number} base
 * @param {number} size
 * @returns {string}
 */ function formatBigNumberToBase(n, base, size) {
    var BigNumberCtor = n.constructor;
    var big2 = new BigNumberCtor(2);
    var suffix = '';
    if (size) {
        if (size < 1) throw new Error('size must be in greater than 0');
        if (!_numberJs.isInteger(size)) throw new Error('size must be an integer');
        if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
        if (!n.isInteger()) throw new Error('Value must be an integer');
        if (n.lessThan(0)) n = n.add(big2.pow(size));
        suffix = "i".concat(size);
    }
    switch(base){
        case 2:
            return "".concat(n.toBinary()).concat(suffix);
        case 8:
            return "".concat(n.toOctal()).concat(suffix);
        case 16:
            return "".concat(n.toHexadecimal()).concat(suffix);
        default:
            throw new Error("Base ".concat(base, " not supported "));
    }
}
function format(value, options) {
    if (typeof options === 'function') // handle format(value, fn)
    return options(value);
     // handle special cases
    if (!value.isFinite()) return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
     // default values for options
    var notation = 'auto';
    var precision;
    var wordSize;
    if (options !== undefined) {
        // determine notation from options
        if (options.notation) notation = options.notation;
         // determine precision from options
        if (typeof options === 'number') precision = options;
        else if (options.precision) precision = options.precision;
        if (options.wordSize) {
            wordSize = options.wordSize;
            if (typeof wordSize !== 'number') throw new Error('Option "wordSize" must be a number');
        }
    } // handle the various notations
    switch(notation){
        case 'fixed':
            return toFixed(value, precision);
        case 'exponential':
            return toExponential(value, precision);
        case 'engineering':
            return toEngineering(value, precision);
        case 'bin':
            return formatBigNumberToBase(value, 2, wordSize);
        case 'oct':
            return formatBigNumberToBase(value, 8, wordSize);
        case 'hex':
            return formatBigNumberToBase(value, 16, wordSize);
        case 'auto':
            // determine lower and upper bound for exponential notation.
            // TODO: implement support for upper and lower to be BigNumbers themselves
            var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
            var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero
            if (value.isZero()) return '0'; // determine whether or not to output exponential notation
            var str;
            var rounded = value.toSignificantDigits(precision);
            var exp = rounded.e;
            if (exp >= lowerExp && exp < upperExp) // normal number notation
            str = rounded.toFixed();
            else // exponential notation
            str = toExponential(value, precision);
             // remove trailing zeros after the decimal point
            return str.replace(/((\.\d*?)(0+))($|e)/, function() {
                var digits = arguments[2];
                var e = arguments[4];
                return digits !== '.' ? digits + e : e;
            });
        default:
            throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
    }
}
function toEngineering(value, precision) {
    // find nearest lower multiple of 3 for exponent
    var e = value.e;
    var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent
    var valueWithoutExp = value.mul(Math.pow(10, -newExp));
    var valueStr = valueWithoutExp.toPrecision(precision);
    if (valueStr.indexOf('e') !== -1) valueStr = valueWithoutExp.toString();
    return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
}
function toExponential(value, precision) {
    if (precision !== undefined) return value.toExponential(precision - 1); // Note the offset of one
    else return value.toExponential();
}
function toFixed(value, precision) {
    return value.toFixed(precision);
}

},{"../number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"49REC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */ parcelHelpers.export(exports, "DimensionError", ()=>DimensionError
);
function DimensionError(actual, expected, relation) {
    if (!(this instanceof DimensionError)) throw new SyntaxError('Constructor must be called with the new operator');
    this.actual = actual;
    this.expected = expected;
    this.relation = relation;
    this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
    this.stack = new Error().stack;
}
DimensionError.prototype = new RangeError();
DimensionError.prototype.constructor = RangeError;
DimensionError.prototype.name = 'DimensionError';
DimensionError.prototype.isDimensionError = true;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bCMLn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */ parcelHelpers.export(exports, "IndexError", ()=>IndexError
);
function IndexError(index, min, max) {
    if (!(this instanceof IndexError)) throw new SyntaxError('Constructor must be called with the new operator');
    this.index = index;
    if (arguments.length < 3) {
        this.min = 0;
        this.max = min;
    } else {
        this.min = min;
        this.max = max;
    }
    if (this.min !== undefined && this.index < this.min) this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
    else if (this.max !== undefined && this.index >= this.max) this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
    else this.message = 'Index out of range (' + this.index + ')';
    this.stack = new Error().stack;
}
IndexError.prototype = new RangeError();
IndexError.prototype.constructor = RangeError;
IndexError.prototype.name = 'IndexError';
IndexError.prototype.isIndexError = true;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1C0lk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A map facade on a bare object.
 *
 * The small number of methods needed to implement a scope,
 * forwarding on to the SafeProperty functions. Over time, the codebase
 * will stop using this method, as all objects will be Maps, rather than
 * more security prone objects.
 */ parcelHelpers.export(exports, "ObjectWrappingMap", ()=>ObjectWrappingMap
);
/**
 * Creates an empty map, or whatever your platform's polyfill is.
 *
 * @returns an empty Map or Map like object.
 */ parcelHelpers.export(exports, "createEmptyMap", ()=>createEmptyMap
);
/**
 * Creates a Map from the given object.
 *
 * @param { Map | { [key: string]: unknown } | undefined } mapOrObject
 * @returns
 */ parcelHelpers.export(exports, "createMap", ()=>createMap
);
/**
 * Unwraps a map into an object.
 *
 * @param {Map} map
 * @returns { [key: string]: unknown }
 */ parcelHelpers.export(exports, "toObject", ()=>toObject
);
/**
 * Returns `true` if the passed object appears to be a Map (i.e. duck typing).
 *
 * Methods looked for are `get`, `set`, `keys` and `has`.
 *
 * @param {Map | object} object
 * @returns
 */ parcelHelpers.export(exports, "isMap", ()=>isMap
);
/**
 * Copies the contents of key-value pairs from each `objects` in to `map`.
 *
 * Object is `objects` can be a `Map` or object.
 *
 * This is the `Map` analog to `Object.assign`.
 */ parcelHelpers.export(exports, "assign", ()=>assign
);
var _customsJs = require("./customs.js");
var _isJs = require("./is.js");
class ObjectWrappingMap {
    constructor(object1){
        this.wrappedObject = object1;
    }
    keys() {
        return Object.keys(this.wrappedObject);
    }
    get(key3) {
        return _customsJs.getSafeProperty(this.wrappedObject, key3);
    }
    set(key1, value1) {
        _customsJs.setSafeProperty(this.wrappedObject, key1, value1);
        return this;
    }
    has(key2) {
        return _customsJs.hasSafeProperty(this.wrappedObject, key2);
    }
}
function createEmptyMap() {
    return new Map();
}
function createMap(mapOrObject) {
    if (!mapOrObject) return createEmptyMap();
    if (isMap(mapOrObject)) return mapOrObject;
    if (_isJs.isObject(mapOrObject)) return new ObjectWrappingMap(mapOrObject);
    throw new Error('createMap can create maps from objects or Maps');
}
function toObject(map) {
    if (map instanceof ObjectWrappingMap) return map.wrappedObject;
    var object = {
    };
    for (var key of map.keys()){
        var value = map.get(key);
        _customsJs.setSafeProperty(object, key, value);
    }
    return object;
}
function isMap(object) {
    // We can use the fast instanceof, or a slower duck typing check.
    // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.
    if (!object) return false;
    return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';
}
function assign(map) {
    for(var _len = arguments.length, objects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)objects[_key - 1] = arguments[_key];
    for (var args of objects){
        if (!args) continue;
        if (isMap(args)) for (var key of args.keys())map.set(key, args.get(key));
        else if (_isJs.isObject(args)) for (var _key2 of Object.keys(args))map.set(_key2, args[_key2]);
    }
    return map;
}

},{"./customs.js":"8gSIx","./is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8gSIx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSafeProperty", ()=>getSafeProperty
);
parcelHelpers.export(exports, "setSafeProperty", ()=>setSafeProperty
);
parcelHelpers.export(exports, "isSafeProperty", ()=>isSafeProperty
);
parcelHelpers.export(exports, "hasSafeProperty", ()=>hasSafeProperty
);
parcelHelpers.export(exports, "getSafeProperties", ()=>getSafeProperties
);
parcelHelpers.export(exports, "validateSafeMethod", ()=>validateSafeMethod
);
parcelHelpers.export(exports, "isSafeMethod", ()=>isSafeMethod
);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject
);
var _objectJs = require("./object.js");
/**
 * Get a property of a plain object
 * Throws an error in case the object is not a plain object or the
 * property is not defined on the object itself
 * @param {Object} object
 * @param {string} prop
 * @return {*} Returns the property value when safe
 */ function getSafeProperty(object, prop) {
    // only allow getting safe properties of a plain object
    if (isPlainObject(object) && isSafeProperty(object, prop)) return object[prop];
    if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) throw new Error('Cannot access method "' + prop + '" as a property');
    throw new Error('No access to property "' + prop + '"');
}
/**
 * Set a property on a plain object.
 * Throws an error in case the object is not a plain object or the
 * property would override an inherited property like .constructor or .toString
 * @param {Object} object
 * @param {string} prop
 * @param {*} value
 * @return {*} Returns the value
 */ // TODO: merge this function into access.js?
function setSafeProperty(object, prop, value) {
    // only allow setting safe properties of a plain object
    if (isPlainObject(object) && isSafeProperty(object, prop)) {
        object[prop] = value;
        return value;
    }
    throw new Error('No access to property "' + prop + '"');
}
function getSafeProperties(object) {
    return Object.keys(object).filter((prop)=>_objectJs.hasOwnProperty(object, prop)
    );
}
function hasSafeProperty(object, prop) {
    return prop in object;
}
/**
 * Test whether a property is safe to use for an object.
 * For example .toString and .constructor are not safe
 * @param {string} prop
 * @return {boolean} Returns true when safe
 */ function isSafeProperty(object, prop) {
    if (!object || typeof object !== 'object') return false;
     // SAFE: whitelisted
    // e.g length
    if (_objectJs.hasOwnProperty(safeNativeProperties, prop)) return true;
     // UNSAFE: inherited from Object prototype
    // e.g constructor
    if (prop in Object.prototype) // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
     // UNSAFE: inherited from Function prototype
    // e.g call, apply
    if (prop in Function.prototype) // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
    return true;
}
/**
 * Validate whether a method is safe.
 * Throws an error when that's not the case.
 * @param {Object} object
 * @param {string} method
 */ // TODO: merge this function into assign.js?
function validateSafeMethod(object, method) {
    if (!isSafeMethod(object, method)) throw new Error('No access to method "' + method + '"');
}
/**
 * Check whether a method is safe.
 * Throws an error when that's not the case (for example for `constructor`).
 * @param {Object} object
 * @param {string} method
 * @return {boolean} Returns true when safe, false otherwise
 */ function isSafeMethod(object, method) {
    if (object === null || object === undefined || typeof object[method] !== 'function') return false;
     // UNSAFE: ghosted
    // e.g overridden toString
    // Note that IE10 doesn't support __proto__ and we can't do this check there.
    if (_objectJs.hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) return false;
     // SAFE: whitelisted
    // e.g toString
    if (_objectJs.hasOwnProperty(safeNativeMethods, method)) return true;
     // UNSAFE: inherited from Object prototype
    // e.g constructor
    if (method in Object.prototype) // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
     // UNSAFE: inherited from Function prototype
    // e.g call, apply
    if (method in Function.prototype) // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
    return true;
}
function isPlainObject(object) {
    return typeof object === 'object' && object && object.constructor === Object;
}
var safeNativeProperties = {
    length: true,
    name: true
};
var safeNativeMethods = {
    toString: true,
    valueOf: true,
    toLocaleString: true
};

},{"./object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3uojA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createResultSet", ()=>createResultSet
);
var _factoryJs = require("../../utils/factory.js");
var name = 'ResultSet';
var dependencies = [];
var createResultSet = /* #__PURE__ */ _factoryJs.factory(name, dependencies, ()=>{
    /**
   * A ResultSet contains a list or results
   * @class ResultSet
   * @param {Array} entries
   * @constructor ResultSet
   */ function ResultSet(entries) {
        if (!(this instanceof ResultSet)) throw new SyntaxError('Constructor must be called with the new operator');
        this.entries = entries || [];
    }
    /**
   * Attach type information
   */ ResultSet.prototype.type = 'ResultSet';
    ResultSet.prototype.isResultSet = true;
    /**
   * Returns the array with results hold by this ResultSet
   * @memberof ResultSet
   * @returns {Array} entries
   */ ResultSet.prototype.valueOf = function() {
        return this.entries;
    };
    /**
   * Returns the stringified results of the ResultSet
   * @memberof ResultSet
   * @returns {string} string
   */ ResultSet.prototype.toString = function() {
        return '[' + this.entries.join(', ') + ']';
    };
    /**
   * Get a JSON representation of the ResultSet
   * @memberof ResultSet
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "ResultSet", "entries": [...]}`
   */ ResultSet.prototype.toJSON = function() {
        return {
            mathjs: 'ResultSet',
            entries: this.entries
        };
    };
    /**
   * Instantiate a ResultSet from a JSON object
   * @memberof ResultSet
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "ResultSet", "entries": [...]}`
   * @return {ResultSet}
   */ ResultSet.fromJSON = function(json) {
        return new ResultSet(json.entries);
    };
    return ResultSet;
}, {
    isClass: true
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1TqvD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBigNumberClass", ()=>createBigNumberClass
);
var _decimalJs = require("decimal.js");
var _decimalJsDefault = parcelHelpers.interopDefault(_decimalJs);
var _factoryJs = require("../../utils/factory.js");
var name = 'BigNumber';
var dependencies = [
    '?on',
    'config'
];
var createBigNumberClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { on , config  } = _ref;
    var BigNumber = _decimalJsDefault.default.clone({
        precision: config.precision,
        modulo: _decimalJsDefault.default.EUCLID
    });
    BigNumber.prototype = Object.create(BigNumber.prototype);
    /**
   * Attach type information
   */ BigNumber.prototype.type = 'BigNumber';
    BigNumber.prototype.isBigNumber = true;
    /**
   * Get a JSON representation of a BigNumber containing
   * type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
   */ BigNumber.prototype.toJSON = function() {
        return {
            mathjs: 'BigNumber',
            value: this.toString()
        };
    };
    /**
   * Instantiate a BigNumber from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
   * @return {BigNumber}
   */ BigNumber.fromJSON = function(json) {
        return new BigNumber(json.value);
    };
    if (on) // listen for changed in the configuration, automatically apply changed precision
    on('config', function(curr, prev) {
        if (curr.precision !== prev.precision) BigNumber.config({
            precision: curr.precision
        });
    });
    return BigNumber;
}, {
    isClass: true
});

},{"decimal.js":"c4thc","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c4thc":[function(require,module,exports) {
(function(globalScope) {
    /*
   *  decimal.js v10.3.1
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   */ // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //
    // The maximum exponent magnitude.
    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
    var EXP_LIMIT = 9000000000000000, // The limit on the value of `precision`, and on the value of the first argument to
    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
    MAX_DIGITS = 1000000000, // Base conversion alphabet.
    NUMERALS = '0123456789abcdef', // The natural logarithm of 10 (1025 digits).
    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058', // Pi (1025 digits).
    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789', // The initial configuration properties of the Decimal constructor.
    DEFAULTS = {
        // These values must be integers within the stated ranges (inclusive).
        // Most of these values can be changed at run-time using the `Decimal.config` method.
        // The maximum number of significant digits of the result of a calculation or base conversion.
        // E.g. `Decimal.config({ precision: 20 });`
        precision: 20,
        // The rounding mode used when rounding to `precision`.
        //
        // ROUND_UP         0 Away from zero.
        // ROUND_DOWN       1 Towards zero.
        // ROUND_CEIL       2 Towards +Infinity.
        // ROUND_FLOOR      3 Towards -Infinity.
        // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        //
        // E.g.
        // `Decimal.rounding = 4;`
        // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
        rounding: 4,
        // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP         0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
        // FLOOR      3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN  6 The IEEE 754 remainder function.
        // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
        //
        // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
        // division (9) are commonly used for the modulus operation. The other rounding modes can also
        // be used, but they may not give useful results.
        modulo: 1,
        // The exponent value at and beneath which `toString` returns exponential notation.
        // JavaScript numbers: -7
        toExpNeg: -7,
        // The exponent value at and above which `toString` returns exponential notation.
        // JavaScript numbers: 21
        toExpPos: 21,
        // The minimum exponent value, beneath which underflow to zero occurs.
        // JavaScript numbers: -324  (5e-324)
        minE: -EXP_LIMIT,
        // The maximum exponent value, above which overflow to Infinity occurs.
        // JavaScript numbers: 308  (1.7976931348623157e+308)
        maxE: EXP_LIMIT,
        // Whether to use cryptographically-secure random number generation, if available.
        crypto: false // true/false
    }, // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //
    Decimal1, inexact, noConflict, quadrant, external = true, decimalError = '[DecimalError] ', invalidArgument = decimalError + 'Invalid argument: ', precisionLimitExceeded = decimalError + 'Precision limit exceeded', cryptoUnavailable = decimalError + 'crypto unavailable', tag = '[object Decimal]', mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, BASE = 10000000, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, // Decimal.prototype object
    P = {
        toStringTag: tag
    };
    // Decimal prototype methods
    /*
   *  absoluteValue             abs
   *  ceil
   *  clampedTo                 clamp
   *  comparedTo                cmp
   *  cosine                    cos
   *  cubeRoot                  cbrt
   *  decimalPlaces             dp
   *  dividedBy                 div
   *  dividedToIntegerBy        divToInt
   *  equals                    eq
   *  floor
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyperbolicCosine          cosh
   *  hyperbolicSine            sinh
   *  hyperbolicTangent         tanh
   *  inverseCosine             acos
   *  inverseHyperbolicCosine   acosh
   *  inverseHyperbolicSine     asinh
   *  inverseHyperbolicTangent  atanh
   *  inverseSine               asin
   *  inverseTangent            atan
   *  isFinite
   *  isInteger                 isInt
   *  isNaN
   *  isNegative                isNeg
   *  isPositive                isPos
   *  isZero
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 log
   *  [maximum]                 [max]
   *  [minimum]                 [min]
   *  minus                     sub
   *  modulo                    mod
   *  naturalExponential        exp
   *  naturalLogarithm          ln
   *  negated                   neg
   *  plus                      add
   *  precision                 sd
   *  round
   *  sine                      sin
   *  squareRoot                sqrt
   *  tangent                   tan
   *  times                     mul
   *  toBinary
   *  toDecimalPlaces           toDP
   *  toExponential
   *  toFixed
   *  toFraction
   *  toHexadecimal             toHex
   *  toNearest
   *  toNumber
   *  toOctal
   *  toPower                   pow
   *  toPrecision
   *  toSignificantDigits       toSD
   *  toString
   *  truncated                 trunc
   *  valueOf                   toJSON
   */ /*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */ P.absoluteValue = P.abs = function() {
        var x = new this.constructor(this);
        if (x.s < 0) x.s = 1;
        return finalise(x);
    };
    /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of positive Infinity.
   *
   */ P.ceil = function() {
        return finalise(new this.constructor(this), this.e + 1, 2);
    };
    /*
   * Return a new Decimal whose value is the value of this Decimal clamped to the range
   * delineated by `min` and `max`.
   *
   * min {number|string|Decimal}
   * max {number|string|Decimal}
   *
   */ P.clampedTo = P.clamp = function(min, max) {
        var k, x = this, Ctor = x.constructor;
        min = new Ctor(min);
        max = new Ctor(max);
        if (!min.s || !max.s) return new Ctor(NaN);
        if (min.gt(max)) throw Error(invalidArgument + max);
        k = x.cmp(min);
        return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);
    };
    /*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value,
   *   NaN  if the value of either Decimal is NaN.
   *
   */ P.comparedTo = P.cmp = function(y) {
        var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;
        // Either NaN or ±Infinity?
        if (!xd || !yd) return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
        // Either zero?
        if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;
        // Signs differ?
        if (xs !== ys) return xs;
        // Compare exponents.
        if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;
        xdL = xd.length;
        ydL = yd.length;
        // Compare digit by digit.
        for(i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i){
            if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
        }
        // Compare lengths.
        return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
    };
    /*
   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * cos(0)         = 1
   * cos(-0)        = 1
   * cos(Infinity)  = NaN
   * cos(-Infinity) = NaN
   * cos(NaN)       = NaN
   *
   */ P.cosine = P.cos = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.d) return new Ctor(NaN);
        // cos(0) = cos(-0) = 1
        if (!x.d[0]) return new Ctor(1);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;
        x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
    };
    /*
   *
   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   *  cbrt(0)  =  0
   *  cbrt(-0) = -0
   *  cbrt(1)  =  1
   *  cbrt(-1) = -1
   *  cbrt(N)  =  N
   *  cbrt(-I) = -I
   *  cbrt(I)  =  I
   *
   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
   *
   */ P.cubeRoot = P.cbrt = function() {
        var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;
        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        external = false;
        // Initial estimate.
        s = x.s * mathpow(x.s * x, 1 / 3);
        // Math.cbrt underflow/overflow?
        // Pass x to Math.pow as integer, then adjust the exponent of the result.
        if (!s || Math.abs(s) == 1 / 0) {
            n = digitsToString(x.d);
            e = x.e;
            // Adjust n exponent so it is a multiple of 3 away from x exponent.
            if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';
            s = mathpow(n, 1 / 3);
            // Rarely, e may be one less than the result exponent value.
            e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
            if (s == 1 / 0) n = '5e' + e;
            else {
                n = s.toExponential();
                n = n.slice(0, n.indexOf('e') + 1) + e;
            }
            r = new Ctor(n);
            r.s = x.s;
        } else r = new Ctor(s.toString());
        sd = (e = Ctor.precision) + 3;
        // Halley's method.
        // TODO? Compare Newton's method.
        for(;;){
            t = r;
            t3 = t.times(t).times(t);
            t3plusx = t3.plus(x);
            r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
            // TODO? Replace with for-loop and checkRoundingDigits.
            if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
                n = n.slice(sd - 3, sd + 1);
                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
                // , i.e. approaching a rounding boundary, continue the iteration.
                if (n == '9999' || !rep && n == '4999') {
                    // On the first iteration only, check to see if rounding up gives the exact result as the
                    // nines may infinitely repeat.
                    if (!rep) {
                        finalise(t, e + 1, 0);
                        if (t.times(t).times(t).eq(x)) {
                            r = t;
                            break;
                        }
                    }
                    sd += 4;
                    rep = 1;
                } else {
                    // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
                    // If not, then there are further digits and m will be truthy.
                    if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                        // Truncate to the first rounding digit.
                        finalise(r, e + 1, 1);
                        m = !r.times(r).times(r).eq(x);
                    }
                    break;
                }
            }
        }
        external = true;
        return finalise(r, e, Ctor.rounding, m);
    };
    /*
   * Return the number of decimal places of the value of this Decimal.
   *
   */ P.decimalPlaces = P.dp = function() {
        var w, d = this.d, n = NaN;
        if (d) {
            w = d.length - 1;
            n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
            // Subtract the number of trailing zeros of the last word.
            w = d[w];
            if (w) for(; w % 10 == 0; w /= 10)n--;
            if (n < 0) n = 0;
        }
        return n;
    };
    /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   */ P.dividedBy = P.div = function(y) {
        return divide(this, new this.constructor(y));
    };
    /*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */ P.dividedToIntegerBy = P.divToInt = function(y) {
        var x = this, Ctor = x.constructor;
        return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
    };
    /*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */ P.equals = P.eq = function(y) {
        return this.cmp(y) === 0;
    };
    /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of negative Infinity.
   *
   */ P.floor = function() {
        return finalise(new this.constructor(this), this.e + 1, 3);
    };
    /*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */ P.greaterThan = P.gt = function(y) {
        return this.cmp(y) > 0;
    };
    /*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */ P.greaterThanOrEqualTo = P.gte = function(y) {
        var k = this.cmp(y);
        return k == 1 || k === 0;
    };
    /*
   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [1, Infinity]
   *
   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
   *
   * cosh(0)         = 1
   * cosh(-0)        = 1
   * cosh(Infinity)  = Infinity
   * cosh(-Infinity) = Infinity
   * cosh(NaN)       = NaN
   *
   *  x        time taken (ms)   result
   * 1000      9                 9.8503555700852349694e+433
   * 10000     25                4.4034091128314607936e+4342
   * 100000    171               1.4033316802130615897e+43429
   * 1000000   3817              1.5166076984010437725e+434294
   * 10000000  abandoned after 2 minute wait
   *
   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
   *
   */ P.hyperbolicCosine = P.cosh = function() {
        var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);
        if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
        if (x.isZero()) return one;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;
        // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
        // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))
        // Estimate the optimum number of times to use the argument reduction.
        // TODO? Estimation reused from cosine() and may not be optimal here.
        if (len < 32) {
            k = Math.ceil(len / 3);
            n = (1 / tinyPow(4, k)).toString();
        } else {
            k = 16;
            n = '2.3283064365386962890625e-10';
        }
        x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
        // Reverse argument reduction
        var cosh2_x, i = k, d8 = new Ctor(8);
        for(; i--;){
            cosh2_x = x.times(x);
            x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
        }
        return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
    };
    /*
   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
   *
   * sinh(0)         = 0
   * sinh(-0)        = -0
   * sinh(Infinity)  = Infinity
   * sinh(-Infinity) = -Infinity
   * sinh(NaN)       = NaN
   *
   * x        time taken (ms)
   * 10       2 ms
   * 100      5 ms
   * 1000     14 ms
   * 10000    82 ms
   * 100000   886 ms            1.4033316802130615897e+43429
   * 200000   2613 ms
   * 300000   5407 ms
   * 400000   8824 ms
   * 500000   13026 ms          8.7080643612718084129e+217146
   * 1000000  48543 ms
   *
   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
   *
   */ P.hyperbolicSine = P.sinh = function() {
        var k, pr, rm, len, x = this, Ctor = x.constructor;
        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;
        if (len < 3) x = taylorSeries(Ctor, 2, x, x, true);
        else {
            // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
            // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
            // 3 multiplications and 1 addition
            // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
            // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
            // 4 multiplications and 2 additions
            // Estimate the optimum number of times to use the argument reduction.
            k = 1.4 * Math.sqrt(len);
            k = k > 16 ? 16 : k | 0;
            x = x.times(1 / tinyPow(5, k));
            x = taylorSeries(Ctor, 2, x, x, true);
            // Reverse argument reduction
            var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
            for(; k--;){
                sinh2_x = x.times(x);
                x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
            }
        }
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(x, pr, rm, true);
    };
    /*
   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * tanh(x) = sinh(x) / cosh(x)
   *
   * tanh(0)         = 0
   * tanh(-0)        = -0
   * tanh(Infinity)  = 1
   * tanh(-Infinity) = -1
   * tanh(NaN)       = NaN
   *
   */ P.hyperbolicTangent = P.tanh = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(x.s);
        if (x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 7;
        Ctor.rounding = 1;
        return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
    };
    /*
   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
   * this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [0, pi]
   *
   * acos(x) = pi/2 - asin(x)
   *
   * acos(0)       = pi/2
   * acos(-0)      = pi/2
   * acos(1)       = 0
   * acos(-1)      = pi
   * acos(1/2)     = pi/3
   * acos(-1/2)    = 2*pi/3
   * acos(|x| > 1) = NaN
   * acos(NaN)     = NaN
   *
   */ P.inverseCosine = P.acos = function() {
        var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;
        if (k !== -1) return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);
        if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);
        // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3
        Ctor.precision = pr + 6;
        Ctor.rounding = 1;
        x = x.asin();
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return halfPi.minus(x);
    };
    /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
   * value of this Decimal.
   *
   * Domain: [1, Infinity]
   * Range: [0, Infinity]
   *
   * acosh(x) = ln(x + sqrt(x^2 - 1))
   *
   * acosh(x < 1)     = NaN
   * acosh(NaN)       = NaN
   * acosh(Infinity)  = Infinity
   * acosh(-Infinity) = NaN
   * acosh(0)         = NaN
   * acosh(-0)        = NaN
   * acosh(1)         = 0
   * acosh(-1)        = NaN
   *
   */ P.inverseHyperbolicCosine = P.acosh = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
        if (!x.isFinite()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
        Ctor.rounding = 1;
        external = false;
        x = x.times(x).minus(1).sqrt().plus(x);
        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.ln();
    };
    /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * asinh(x) = ln(x + sqrt(x^2 + 1))
   *
   * asinh(NaN)       = NaN
   * asinh(Infinity)  = Infinity
   * asinh(-Infinity) = -Infinity
   * asinh(0)         = 0
   * asinh(-0)        = -0
   *
   */ P.inverseHyperbolicSine = P.asinh = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
        Ctor.rounding = 1;
        external = false;
        x = x.times(x).plus(1).sqrt().plus(x);
        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.ln();
    };
    /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
   * value of this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [-Infinity, Infinity]
   *
   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
   *
   * atanh(|x| > 1)   = NaN
   * atanh(NaN)       = NaN
   * atanh(Infinity)  = NaN
   * atanh(-Infinity) = NaN
   * atanh(0)         = 0
   * atanh(-0)        = -0
   * atanh(1)         = Infinity
   * atanh(-1)        = -Infinity
   *
   */ P.inverseHyperbolicTangent = P.atanh = function() {
        var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(NaN);
        if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        xsd = x.sd();
        if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);
        Ctor.precision = wpr = xsd - x.e;
        x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
        Ctor.precision = pr + 4;
        Ctor.rounding = 1;
        x = x.ln();
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.times(0.5);
    };
    /*
   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
   *
   * asin(0)       = 0
   * asin(-0)      = -0
   * asin(1/2)     = pi/6
   * asin(-1/2)    = -pi/6
   * asin(1)       = pi/2
   * asin(-1)      = -pi/2
   * asin(|x| > 1) = NaN
   * asin(NaN)     = NaN
   *
   * TODO? Compare performance of Taylor series.
   *
   */ P.inverseSine = P.asin = function() {
        var halfPi, k, pr, rm, x = this, Ctor = x.constructor;
        if (x.isZero()) return new Ctor(x);
        k = x.abs().cmp(1);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        if (k !== -1) {
            // |x| is 1
            if (k === 0) {
                halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
                halfPi.s = x.s;
                return halfPi;
            }
            // |x| > 1 or x is NaN
            return new Ctor(NaN);
        }
        // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6
        Ctor.precision = pr + 6;
        Ctor.rounding = 1;
        x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.times(2);
    };
    /*
   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
   *
   * atan(0)         = 0
   * atan(-0)        = -0
   * atan(1)         = pi/4
   * atan(-1)        = -pi/4
   * atan(Infinity)  = pi/2
   * atan(-Infinity) = -pi/2
   * atan(NaN)       = NaN
   *
   */ P.inverseTangent = P.atan = function() {
        var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;
        if (!x.isFinite()) {
            if (!x.s) return new Ctor(NaN);
            if (pr + 4 <= PI_PRECISION) {
                r = getPi(Ctor, pr + 4, rm).times(0.5);
                r.s = x.s;
                return r;
            }
        } else if (x.isZero()) return new Ctor(x);
        else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
            r = getPi(Ctor, pr + 4, rm).times(0.25);
            r.s = x.s;
            return r;
        }
        Ctor.precision = wpr = pr + 10;
        Ctor.rounding = 1;
        // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);
        // Argument reduction
        // Ensure |x| < 0.42
        // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))
        k = Math.min(28, wpr / LOG_BASE + 2 | 0);
        for(i = k; i; --i)x = x.div(x.times(x).plus(1).sqrt().plus(1));
        external = false;
        j = Math.ceil(wpr / LOG_BASE);
        n = 1;
        x2 = x.times(x);
        r = new Ctor(x);
        px = x;
        // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
        for(; i !== -1;){
            px = px.times(x2);
            t = r.minus(px.div(n += 2));
            px = px.times(x2);
            r = t.plus(px.div(n += 2));
            if (r.d[j] !== void 0) for(i = j; r.d[i] === t.d[i] && i--;);
        }
        if (k) r = r.times(2 << k - 1);
        external = true;
        return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
    };
    /*
   * Return true if the value of this Decimal is a finite number, otherwise return false.
   *
   */ P.isFinite = function() {
        return !!this.d;
    };
    /*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */ P.isInteger = P.isInt = function() {
        return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
    };
    /*
   * Return true if the value of this Decimal is NaN, otherwise return false.
   *
   */ P.isNaN = function() {
        return !this.s;
    };
    /*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */ P.isNegative = P.isNeg = function() {
        return this.s < 0;
    };
    /*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */ P.isPositive = P.isPos = function() {
        return this.s > 0;
    };
    /*
   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
   *
   */ P.isZero = function() {
        return !!this.d && this.d[0] === 0;
    };
    /*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */ P.lessThan = P.lt = function(y) {
        return this.cmp(y) < 0;
    };
    /*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */ P.lessThanOrEqualTo = P.lte = function(y) {
        return this.cmp(y) < 1;
    };
    /*
   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * If no base is specified, return log[10](arg).
   *
   * log[base](arg) = ln(arg) / ln(base)
   *
   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
   * otherwise:
   *
   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
   * between the result and the correctly rounded result will be one ulp (unit in the last place).
   *
   * log[-b](a)       = NaN
   * log[0](a)        = NaN
   * log[1](a)        = NaN
   * log[NaN](a)      = NaN
   * log[Infinity](a) = NaN
   * log[b](0)        = -Infinity
   * log[b](-0)       = -Infinity
   * log[b](-a)       = NaN
   * log[b](1)        = 0
   * log[b](Infinity) = Infinity
   * log[b](NaN)      = NaN
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */ P.logarithm = P.log = function(base) {
        var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;
        // Default base is 10.
        if (base == null) {
            base = new Ctor(10);
            isBase10 = true;
        } else {
            base = new Ctor(base);
            d = base.d;
            // Return NaN if base is negative, or non-finite, or is 0 or 1.
            if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);
            isBase10 = base.eq(10);
        }
        d = arg.d;
        // Is arg negative, non-finite, 0 or 1?
        if (arg.s < 0 || !d || !d[0] || arg.eq(1)) return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
        // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
        // integer power of 10.
        if (isBase10) {
            if (d.length > 1) inf = true;
            else {
                for(k = d[0]; k % 10 === 0;)k /= 10;
                inf = k !== 1;
            }
        }
        external = false;
        sd = pr + guard;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
        // The result will have 5 rounding digits.
        r = divide(num, denominator, sd, 1);
        // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
        // calculate 10 further digits.
        //
        // If the result is known to have an infinite decimal expansion, repeat this until it is clear
        // that the result is above or below the boundary. Otherwise, if after calculating the 10
        // further digits, the last 14 are nines, round up and assume the result is exact.
        // Also assume the result is exact if the last 14 are zero.
        //
        // Example of a result that will be incorrectly rounded:
        // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
        // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
        // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
        // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
        // place is still 2.6.
        if (checkRoundingDigits(r.d, k = pr, rm)) do {
            sd += 10;
            num = naturalLogarithm(arg, sd);
            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
            r = divide(num, denominator, sd, 1);
            if (!inf) {
                // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
                if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 100000000000000) r = finalise(r, pr + 1, 0);
                break;
            }
        }while (checkRoundingDigits(r.d, k += 10, rm))
        external = true;
        return finalise(r, pr, rm);
    };
    /*
   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.max = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'lt');
  };
   */ /*
   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.min = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'gt');
  };
   */ /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */ P.minus = P.sub = function(y) {
        var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;
        y = new Ctor(y);
        // If either is not finite...
        if (!x.d || !y.d) {
            // Return NaN if either is NaN.
            if (!x.s || !y.s) y = new Ctor(NaN);
            else if (x.d) y.s = -y.s;
            else y = new Ctor(y.d || x.s !== y.s ? x : NaN);
            return y;
        }
        // If signs differ...
        if (x.s != y.s) {
            y.s = -y.s;
            return x.plus(y);
        }
        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        // If either is zero...
        if (!xd[0] || !yd[0]) {
            // Return y negated if x is zero and y is non-zero.
            if (yd[0]) y.s = -y.s;
            else if (xd[0]) y = new Ctor(x);
            else return new Ctor(rm === 3 ? -0 : 0);
            return external ? finalise(y, pr, rm) : y;
        }
        // x and y are finite, non-zero numbers with the same sign.
        // Calculate base 1e7 exponents.
        e = mathfloor(y.e / LOG_BASE);
        xe = mathfloor(x.e / LOG_BASE);
        xd = xd.slice();
        k = xe - e;
        // If base 1e7 exponents differ...
        if (k) {
            xLTy = k < 0;
            if (xLTy) {
                d = xd;
                k = -k;
                len = yd.length;
            } else {
                d = yd;
                e = xe;
                len = xd.length;
            }
            // Numbers with massively different exponents would result in a very high number of
            // zeros needing to be prepended, but this can be avoided while still ensuring correct
            // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
            i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
            if (k > i) {
                k = i;
                d.length = 1;
            }
            // Prepend zeros to equalise exponents.
            d.reverse();
            for(i = k; i--;)d.push(0);
            d.reverse();
        // Base 1e7 exponents equal.
        } else {
            // Check digits to determine which is the bigger number.
            i = xd.length;
            len = yd.length;
            xLTy = i < len;
            if (xLTy) len = i;
            for(i = 0; i < len; i++)if (xd[i] != yd[i]) {
                xLTy = xd[i] < yd[i];
                break;
            }
            k = 0;
        }
        if (xLTy) {
            d = xd;
            xd = yd;
            yd = d;
            y.s = -y.s;
        }
        len = xd.length;
        // Append zeros to `xd` if shorter.
        // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
        for(i = yd.length - len; i > 0; --i)xd[len++] = 0;
        // Subtract yd from xd.
        for(i = yd.length; i > k;){
            if (xd[--i] < yd[i]) {
                for(j = i; j && xd[--j] === 0;)xd[j] = BASE - 1;
                --xd[j];
                xd[i] += BASE;
            }
            xd[i] -= yd[i];
        }
        // Remove trailing zeros.
        for(; xd[--len] === 0;)xd.pop();
        // Remove leading zeros and adjust exponent accordingly.
        for(; xd[0] === 0; xd.shift())--e;
        // Zero?
        if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);
        y.d = xd;
        y.e = getBase10Exponent(xd, e);
        return external ? finalise(y, pr, rm) : y;
    };
    /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * The result depends on the modulo mode.
   *
   */ P.modulo = P.mod = function(y) {
        var q, x = this, Ctor = x.constructor;
        y = new Ctor(y);
        // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
        if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);
        // Return x if y is ±Infinity or x is ±0.
        if (!y.d || x.d && !x.d[0]) return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
        // Prevent rounding of intermediate calculations.
        external = false;
        if (Ctor.modulo == 9) {
            // Euclidian division: q = sign(y) * floor(x / abs(y))
            // result = x - q * y    where  0 <= result < abs(y)
            q = divide(x, y.abs(), 0, 3, 1);
            q.s *= y.s;
        } else q = divide(x, y, 0, Ctor.modulo, 1);
        q = q.times(y);
        external = true;
        return x.minus(q);
    };
    /*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */ P.naturalExponential = P.exp = function() {
        return naturalExponential(this);
    };
    /*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */ P.naturalLogarithm = P.ln = function() {
        return naturalLogarithm(this);
    };
    /*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */ P.negated = P.neg = function() {
        var x = new this.constructor(this);
        x.s = -x.s;
        return finalise(x);
    };
    /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */ P.plus = P.add = function(y) {
        var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;
        y = new Ctor(y);
        // If either is not finite...
        if (!x.d || !y.d) {
            // Return NaN if either is NaN.
            if (!x.s || !y.s) y = new Ctor(NaN);
            else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);
            return y;
        }
        // If signs differ...
        if (x.s != y.s) {
            y.s = -y.s;
            return x.minus(y);
        }
        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        // If either is zero...
        if (!xd[0] || !yd[0]) {
            // Return x if y is zero.
            // Return y if y is non-zero.
            if (!yd[0]) y = new Ctor(x);
            return external ? finalise(y, pr, rm) : y;
        }
        // x and y are finite, non-zero numbers with the same sign.
        // Calculate base 1e7 exponents.
        k = mathfloor(x.e / LOG_BASE);
        e = mathfloor(y.e / LOG_BASE);
        xd = xd.slice();
        i = k - e;
        // If base 1e7 exponents differ...
        if (i) {
            if (i < 0) {
                d = xd;
                i = -i;
                len = yd.length;
            } else {
                d = yd;
                e = k;
                len = xd.length;
            }
            // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
            k = Math.ceil(pr / LOG_BASE);
            len = k > len ? k + 1 : len + 1;
            if (i > len) {
                i = len;
                d.length = 1;
            }
            // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
            d.reverse();
            for(; i--;)d.push(0);
            d.reverse();
        }
        len = xd.length;
        i = yd.length;
        // If yd is longer than xd, swap xd and yd so xd points to the longer array.
        if (len - i < 0) {
            i = len;
            d = yd;
            yd = xd;
            xd = d;
        }
        // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
        for(carry = 0; i;){
            carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
            xd[i] %= BASE;
        }
        if (carry) {
            xd.unshift(carry);
            ++e;
        }
        // Remove trailing zeros.
        // No need to check for zero, as +x + +y != 0 && -x + -y != 0
        for(len = xd.length; xd[--len] == 0;)xd.pop();
        y.d = xd;
        y.e = getBase10Exponent(xd, e);
        return external ? finalise(y, pr, rm) : y;
    };
    /*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */ P.precision = P.sd = function(z) {
        var k, x = this;
        if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
        if (x.d) {
            k = getPrecision(x.d);
            if (z && x.e + 1 > k) k = x.e + 1;
        } else k = NaN;
        return k;
    };
    /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */ P.round = function() {
        var x = this, Ctor = x.constructor;
        return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
    };
    /*
   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * sin(x) = x - x^3/3! + x^5/5! - ...
   *
   * sin(0)         = 0
   * sin(-0)        = -0
   * sin(Infinity)  = NaN
   * sin(-Infinity) = NaN
   * sin(NaN)       = NaN
   *
   */ P.sine = P.sin = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;
        x = sine(Ctor, toLessThanHalfPi(Ctor, x));
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
    };
    /*
   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   *  sqrt(-n) =  N
   *  sqrt(N)  =  N
   *  sqrt(-I) =  N
   *  sqrt(I)  =  I
   *  sqrt(0)  =  0
   *  sqrt(-0) = -0
   *
   */ P.squareRoot = P.sqrt = function() {
        var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;
        // Negative/NaN/Infinity/zero?
        if (s !== 1 || !d || !d[0]) return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
        external = false;
        // Initial estimate.
        s = Math.sqrt(+x);
        // Math.sqrt underflow/overflow?
        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
        if (s == 0 || s == 1 / 0) {
            n = digitsToString(d);
            if ((n.length + e) % 2 == 0) n += '0';
            s = Math.sqrt(n);
            e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) n = '5e' + e;
            else {
                n = s.toExponential();
                n = n.slice(0, n.indexOf('e') + 1) + e;
            }
            r = new Ctor(n);
        } else r = new Ctor(s.toString());
        sd = (e = Ctor.precision) + 3;
        // Newton-Raphson iteration.
        for(;;){
            t = r;
            r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
            // TODO? Replace with for-loop and checkRoundingDigits.
            if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
                n = n.slice(sd - 3, sd + 1);
                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
                // 4999, i.e. approaching a rounding boundary, continue the iteration.
                if (n == '9999' || !rep && n == '4999') {
                    // On the first iteration only, check to see if rounding up gives the exact result as the
                    // nines may infinitely repeat.
                    if (!rep) {
                        finalise(t, e + 1, 0);
                        if (t.times(t).eq(x)) {
                            r = t;
                            break;
                        }
                    }
                    sd += 4;
                    rep = 1;
                } else {
                    // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
                    // If not, then there are further digits and m will be truthy.
                    if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                        // Truncate to the first rounding digit.
                        finalise(r, e + 1, 1);
                        m = !r.times(r).eq(x);
                    }
                    break;
                }
            }
        }
        external = true;
        return finalise(r, e, Ctor.rounding, m);
    };
    /*
   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * tan(0)         = 0
   * tan(-0)        = -0
   * tan(Infinity)  = NaN
   * tan(-Infinity) = NaN
   * tan(NaN)       = NaN
   *
   */ P.tangent = P.tan = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 10;
        Ctor.rounding = 1;
        x = x.sin();
        x.s = 1;
        x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
    };
    /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   */ P.times = P.mul = function(y) {
        var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;
        y.s *= x.s;
        // If either is NaN, ±Infinity or ±0...
        if (!xd || !xd[0] || !yd || !yd[0]) return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);
        e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
        xdL = xd.length;
        ydL = yd.length;
        // Ensure xd points to the longer array.
        if (xdL < ydL) {
            r = xd;
            xd = yd;
            yd = r;
            rL = xdL;
            xdL = ydL;
            ydL = rL;
        }
        // Initialise the result array with zeros.
        r = [];
        rL = xdL + ydL;
        for(i = rL; i--;)r.push(0);
        // Multiply!
        for(i = ydL; --i >= 0;){
            carry = 0;
            for(k = xdL + i; k > i;){
                t = r[k] + yd[i] * xd[k - i - 1] + carry;
                r[k--] = t % BASE | 0;
                carry = t / BASE | 0;
            }
            r[k] = (r[k] + carry) % BASE | 0;
        }
        // Remove trailing zeros.
        for(; !r[--rL];)r.pop();
        if (carry) ++e;
        else r.shift();
        y.d = r;
        y.e = getBase10Exponent(r, e);
        return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
    };
    /*
   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */ P.toBinary = function(sd, rm) {
        return toStringBinary(this, 2, sd, rm);
    };
    /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */ P.toDecimalPlaces = P.toDP = function(dp, rm) {
        var x = this, Ctor = x.constructor;
        x = new Ctor(x);
        if (dp === void 0) return x;
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);
        return finalise(x, dp + x.e + 1, rm);
    };
    /*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */ P.toExponential = function(dp, rm) {
        var str, x = this, Ctor = x.constructor;
        if (dp === void 0) str = finiteToString(x, true);
        else {
            checkInt32(dp, 0, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
            x = finalise(new Ctor(x), dp + 1, rm);
            str = finiteToString(x, true, dp + 1);
        }
        return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    /*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */ P.toFixed = function(dp, rm) {
        var str, y, x = this, Ctor = x.constructor;
        if (dp === void 0) str = finiteToString(x);
        else {
            checkInt32(dp, 0, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
            y = finalise(new Ctor(x), dp + x.e + 1, rm);
            str = finiteToString(y, false, dp + y.e + 1);
        }
        // To determine whether to add the minus sign look at the value before it was rounded,
        // i.e. look at `x` rather than `y`.
        return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    /*
   * Return an array representing the value of this Decimal as a simple fraction with an integer
   * numerator and an integer denominator.
   *
   * The denominator will be a positive non-zero value less than or equal to the specified maximum
   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
   * value necessary to represent the number exactly.
   *
   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
   *
   */ P.toFraction = function(maxD) {
        var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;
        if (!xd) return new Ctor(x);
        n1 = d0 = new Ctor(1);
        d1 = n0 = new Ctor(0);
        d = new Ctor(d1);
        e = d.e = getPrecision(xd) - x.e - 1;
        k = e % LOG_BASE;
        d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
        if (maxD == null) // d is 10**e, the minimum max-denominator needed.
        maxD = e > 0 ? d : n1;
        else {
            n = new Ctor(maxD);
            if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
            maxD = n.gt(d) ? e > 0 ? d : n1 : n;
        }
        external = false;
        n = new Ctor(digitsToString(xd));
        pr = Ctor.precision;
        Ctor.precision = e = xd.length * LOG_BASE * 2;
        for(;;){
            q = divide(n, d, 0, 1, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.cmp(maxD) == 1) break;
            d0 = d1;
            d1 = d2;
            d2 = n1;
            n1 = n0.plus(q.times(d2));
            n0 = d2;
            d2 = d;
            d = n.minus(q.times(d2));
            n = d2;
        }
        d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;
        // Determine which fraction is closer to x, n0/d0 or n1/d1?
        r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [
            n1,
            d1
        ] : [
            n0,
            d0
        ];
        Ctor.precision = pr;
        external = true;
        return r;
    };
    /*
   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */ P.toHexadecimal = P.toHex = function(sd, rm) {
        return toStringBinary(this, 16, sd, rm);
    };
    /*
   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
   *
   * The return value will always have the same sign as this Decimal, unless either this Decimal
   * or `y` is NaN, in which case the return value will be also be NaN.
   *
   * The return value is not affected by the value of `precision`.
   *
   * y {number|string|Decimal} The magnitude to round to a multiple of.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toNearest() rounding mode not an integer: {rm}'
   * 'toNearest() rounding mode out of range: {rm}'
   *
   */ P.toNearest = function(y, rm) {
        var x = this, Ctor = x.constructor;
        x = new Ctor(x);
        if (y == null) {
            // If x is not finite, return x.
            if (!x.d) return x;
            y = new Ctor(1);
            rm = Ctor.rounding;
        } else {
            y = new Ctor(y);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
            // If x is not finite, return x if y is not NaN, else NaN.
            if (!x.d) return y.s ? x : y;
            // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
            if (!y.d) {
                if (y.s) y.s = x.s;
                return y;
            }
        }
        // If y is not zero, calculate the nearest multiple of y to x.
        if (y.d[0]) {
            external = false;
            x = divide(x, y, 0, rm, 1).times(y);
            external = true;
            finalise(x);
        // If y is zero, return zero with the sign of x.
        } else {
            y.s = x.s;
            x = y;
        }
        return x;
    };
    /*
   * Return the value of this Decimal converted to a number primitive.
   * Zero keeps its sign.
   *
   */ P.toNumber = function() {
        return +this;
    };
    /*
   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */ P.toOctal = function(sd, rm) {
        return toStringBinary(this, 8, sd, rm);
    };
    /*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
   * to `precision` significant digits using rounding mode `rounding`.
   *
   * ECMAScript compliant.
   *
   *   pow(x, NaN)                           = NaN
   *   pow(x, ±0)                            = 1

   *   pow(NaN, non-zero)                    = NaN
   *   pow(abs(x) > 1, +Infinity)            = +Infinity
   *   pow(abs(x) > 1, -Infinity)            = +0
   *   pow(abs(x) == 1, ±Infinity)           = NaN
   *   pow(abs(x) < 1, +Infinity)            = +0
   *   pow(abs(x) < 1, -Infinity)            = +Infinity
   *   pow(+Infinity, y > 0)                 = +Infinity
   *   pow(+Infinity, y < 0)                 = +0
   *   pow(-Infinity, odd integer > 0)       = -Infinity
   *   pow(-Infinity, even integer > 0)      = +Infinity
   *   pow(-Infinity, odd integer < 0)       = -0
   *   pow(-Infinity, even integer < 0)      = +0
   *   pow(+0, y > 0)                        = +0
   *   pow(+0, y < 0)                        = +Infinity
   *   pow(-0, odd integer > 0)              = -0
   *   pow(-0, even integer > 0)             = +0
   *   pow(-0, odd integer < 0)              = -Infinity
   *   pow(-0, even integer < 0)             = +Infinity
   *   pow(finite x < 0, finite non-integer) = NaN
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
   * probability of an incorrectly rounded result
   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
   * i.e. 1 in 250,000,000,000,000
   *
   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */ P.toPower = P.pow = function(y) {
        var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));
        // Either ±Infinity, NaN or ±0?
        if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));
        x = new Ctor(x);
        if (x.eq(1)) return x;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        if (y.eq(1)) return finalise(x, pr, rm);
        // y exponent
        e = mathfloor(y.e / LOG_BASE);
        // If y is a small integer use the 'exponentiation by squaring' algorithm.
        if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
            r = intPow(Ctor, x, k, pr);
            return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
        }
        s = x.s;
        // if x is negative
        if (s < 0) {
            // if y is not an integer
            if (e < y.d.length - 1) return new Ctor(NaN);
            // Result is positive if x is negative and the last digit of integer y is even.
            if ((y.d[e] & 1) == 0) s = 1;
            // if x.eq(-1)
            if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
                x.s = s;
                return x;
            }
        }
        // Estimate result exponent.
        // x^y = 10^e,  where e = y * log10(x)
        // log10(x) = log10(x_significand) + x_exponent
        // log10(x_significand) = ln(x_significand) / ln(10)
        k = mathpow(+x, yn);
        e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e;
        // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.
        // Overflow/underflow?
        if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);
        external = false;
        Ctor.rounding = x.s = 1;
        // Estimate the extra guard digits needed to ensure five correct rounding digits from
        // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
        // new Decimal(2.32456).pow('2087987436534566.46411')
        // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
        k = Math.min(12, (e + '').length);
        // r = x^y = exp(y*ln(x))
        r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
        // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
        if (r.d) {
            // Truncate to the required precision plus five rounding digits.
            r = finalise(r, pr + 5, 1);
            // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
            // the result.
            if (checkRoundingDigits(r.d, pr, rm)) {
                e = pr + 10;
                // Truncate to the increased precision plus five rounding digits.
                r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
                // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
                if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 100000000000000) r = finalise(r, pr + 1, 0);
            }
        }
        r.s = s;
        external = true;
        Ctor.rounding = rm;
        return finalise(r, pr, rm);
    };
    /*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */ P.toPrecision = function(sd, rm) {
        var str, x = this, Ctor = x.constructor;
        if (sd === void 0) str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        else {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
            x = finalise(new Ctor(x), sd, rm);
            str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
        }
        return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toSD() digits out of range: {sd}'
   * 'toSD() digits not an integer: {sd}'
   * 'toSD() rounding mode not an integer: {rm}'
   * 'toSD() rounding mode out of range: {rm}'
   *
   */ P.toSignificantDigits = P.toSD = function(sd, rm) {
        var x = this, Ctor = x.constructor;
        if (sd === void 0) {
            sd = Ctor.precision;
            rm = Ctor.rounding;
        } else {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
        }
        return finalise(new Ctor(x), sd, rm);
    };
    /*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */ P.toString = function() {
        var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        return x.isNeg() && !x.isZero() ? '-' + str : str;
    };
    /*
   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
   *
   */ P.truncated = P.trunc = function() {
        return finalise(new this.constructor(this), this.e + 1, 1);
    };
    /*
   * Return a string representing the value of this Decimal.
   * Unlike `toString`, negative zero will include the minus sign.
   *
   */ P.valueOf = P.toJSON = function() {
        var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        return x.isNeg() ? '-' + str : str;
    };
    // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.
    /*
   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
   *                           finiteToString, naturalExponential, naturalLogarithm
   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
   *  convertBase              toStringBinary, parseOther
   *  cos                      P.cos
   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
   *                           taylorSeries, atan2, parseOther
   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
   *                           naturalLogarithm, ceil, floor, round, trunc
   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
   *                           toStringBinary
   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
   *  getLn10                  P.logarithm, naturalLogarithm
   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
   *  getPrecision             P.precision, P.toFraction
   *  getZeroString            digitsToString, finiteToString
   *  intPow                   P.toPower, parseOther
   *  isOdd                    toLessThanHalfPi
   *  maxOrMin                 max, min
   *  naturalExponential       P.naturalExponential, P.toPower
   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
   *                           P.toPower, naturalExponential
   *  nonFiniteToString        finiteToString, toStringBinary
   *  parseDecimal             Decimal
   *  parseOther               Decimal
   *  sin                      P.sin
   *  taylorSeries             P.cosh, P.sinh, cos, sin
   *  toLessThanHalfPi         P.cos, P.sin
   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
   *  truncate                 intPow
   *
   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
   *                           naturalLogarithm, config, parseOther, random, Decimal
   */ function digitsToString(d) {
        var i, k, ws, indexOfLastWord = d.length - 1, str = '', w = d[0];
        if (indexOfLastWord > 0) {
            str += w;
            for(i = 1; i < indexOfLastWord; i++){
                ws = d[i] + '';
                k = LOG_BASE - ws.length;
                if (k) str += getZeroString(k);
                str += ws;
            }
            w = d[i];
            ws = w + '';
            k = LOG_BASE - ws.length;
            if (k) str += getZeroString(k);
        } else if (w === 0) return '0';
        // Remove trailing zeros of last w.
        for(; w % 10 === 0;)w /= 10;
        return str + w;
    }
    function checkInt32(i, min, max) {
        if (i !== ~~i || i < min || i > max) throw Error(invalidArgument + i);
    }
    /*
   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
   * `repeating == null` if caller is `log` or `pow`,
   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
   */ function checkRoundingDigits(d, i, rm, repeating) {
        var di, k, r, rd;
        // Get the length of the first word of the array d.
        for(k = d[0]; k >= 10; k /= 10)--i;
        // Is the rounding digit in the first word of d?
        if (--i < 0) {
            i += LOG_BASE;
            di = 0;
        } else {
            di = Math.ceil((i + 1) / LOG_BASE);
            i %= LOG_BASE;
        }
        // i is the index (0 - 6) of the rounding digit.
        // E.g. if within the word 3487563 the first rounding digit is 5,
        // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
        k = mathpow(10, LOG_BASE - i);
        rd = d[di] % k | 0;
        if (repeating == null) {
            if (i < 3) {
                if (i == 0) rd = rd / 100 | 0;
                else if (i == 1) rd = rd / 10 | 0;
                r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
            } else r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
        } else if (i < 4) {
            if (i == 0) rd = rd / 1000 | 0;
            else if (i == 1) rd = rd / 100 | 0;
            else if (i == 2) rd = rd / 10 | 0;
            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
        } else r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
        return r;
    }
    // Convert string of `baseIn` to an array of numbers of `baseOut`.
    // Eg. convertBase('255', 10, 16) returns [15, 15].
    // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
    function convertBase(str, baseIn, baseOut) {
        var j, arr = [
            0
        ], arrL, i = 0, strL = str.length;
        for(; i < strL;){
            for(arrL = arr.length; arrL--;)arr[arrL] *= baseIn;
            arr[0] += NUMERALS.indexOf(str.charAt(i++));
            for(j = 0; j < arr.length; j++)if (arr[j] > baseOut - 1) {
                if (arr[j + 1] === void 0) arr[j + 1] = 0;
                arr[j + 1] += arr[j] / baseOut | 0;
                arr[j] %= baseOut;
            }
        }
        return arr.reverse();
    }
    /*
   * cos(x) = 1 - x^2/2! + x^4/4! - ...
   * |x| < pi/2
   *
   */ function cosine(Ctor, x) {
        var k, len, y;
        if (x.isZero()) return x;
        // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
        // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1
        // Estimate the optimum number of times to use the argument reduction.
        len = x.d.length;
        if (len < 32) {
            k = Math.ceil(len / 3);
            y = (1 / tinyPow(4, k)).toString();
        } else {
            k = 16;
            y = '2.3283064365386962890625e-10';
        }
        Ctor.precision += k;
        x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
        // Reverse argument reduction
        for(var i = k; i--;){
            var cos2x = x.times(x);
            x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
        }
        Ctor.precision -= k;
        return x;
    }
    /*
   * Perform division in the specified base.
   */ var divide = function() {
        // Assumes non-zero x and k, and hence non-zero result.
        function multiplyInteger(x, k, base) {
            var temp, carry = 0, i = x.length;
            for(x = x.slice(); i--;){
                temp = x[i] * k + carry;
                x[i] = temp % base | 0;
                carry = temp / base | 0;
            }
            if (carry) x.unshift(carry);
            return x;
        }
        function compare(a, b, aL, bL) {
            var i, r;
            if (aL != bL) r = aL > bL ? 1 : -1;
            else {
                for(i = r = 0; i < aL; i++)if (a[i] != b[i]) {
                    r = a[i] > b[i] ? 1 : -1;
                    break;
                }
            }
            return r;
        }
        function subtract(a, b, aL, base) {
            var i = 0;
            // Subtract b from a.
            for(; aL--;){
                a[aL] -= i;
                i = a[aL] < b[aL] ? 1 : 0;
                a[aL] = i * base + a[aL] - b[aL];
            }
            // Remove leading zeros.
            for(; !a[0] && a.length > 1;)a.shift();
        }
        return function(x, y, pr, rm, dp, base) {
            var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;
            // Either NaN, Infinity or 0?
            if (!xd || !xd[0] || !yd || !yd[0]) return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
            xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
            if (base) {
                logBase = 1;
                e = x.e - y.e;
            } else {
                base = BASE;
                logBase = LOG_BASE;
                e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
            }
            yL = yd.length;
            xL = xd.length;
            q = new Ctor(sign);
            qd = q.d = [];
            // Result exponent may be one less than e.
            // The digit array of a Decimal from toStringBinary may have trailing zeros.
            for(i = 0; yd[i] == (xd[i] || 0); i++);
            if (yd[i] > (xd[i] || 0)) e--;
            if (pr == null) {
                sd = pr = Ctor.precision;
                rm = Ctor.rounding;
            } else if (dp) sd = pr + (x.e - y.e) + 1;
            else sd = pr;
            if (sd < 0) {
                qd.push(1);
                more = true;
            } else {
                // Convert precision in number of base 10 digits to base 1e7 digits.
                sd = sd / logBase + 2 | 0;
                i = 0;
                // divisor < 1e7
                if (yL == 1) {
                    k = 0;
                    yd = yd[0];
                    sd++;
                    // k is the carry.
                    for(; (i < xL || k) && sd--; i++){
                        t = k * base + (xd[i] || 0);
                        qd[i] = t / yd | 0;
                        k = t % yd | 0;
                    }
                    more = k || i < xL;
                // divisor >= 1e7
                } else {
                    // Normalise xd and yd so highest order digit of yd is >= base/2
                    k = base / (yd[0] + 1) | 0;
                    if (k > 1) {
                        yd = multiplyInteger(yd, k, base);
                        xd = multiplyInteger(xd, k, base);
                        yL = yd.length;
                        xL = xd.length;
                    }
                    xi = yL;
                    rem = xd.slice(0, yL);
                    remL = rem.length;
                    // Add zeros to make remainder as long as divisor.
                    for(; remL < yL;)rem[remL++] = 0;
                    yz = yd.slice();
                    yz.unshift(0);
                    yd0 = yd[0];
                    if (yd[1] >= base / 2) ++yd0;
                    do {
                        k = 0;
                        // Compare divisor and remainder.
                        cmp = compare(yd, rem, yL, remL);
                        // If divisor < remainder.
                        if (cmp < 0) {
                            // Calculate trial digit, k.
                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                            // k will be how many times the divisor goes into the current remainder.
                            k = rem0 / yd0 | 0;
                            //  Algorithm:
                            //  1. product = divisor * trial digit (k)
                            //  2. if product > remainder: product -= divisor, k--
                            //  3. remainder -= product
                            //  4. if product was < remainder at 2:
                            //    5. compare new remainder and divisor
                            //    6. If remainder > divisor: remainder -= divisor, k++
                            if (k > 1) {
                                if (k >= base) k = base - 1;
                                // product = divisor * trial digit.
                                prod = multiplyInteger(yd, k, base);
                                prodL = prod.length;
                                remL = rem.length;
                                // Compare product and remainder.
                                cmp = compare(prod, rem, prodL, remL);
                                // product > remainder.
                                if (cmp == 1) {
                                    k--;
                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yd, prodL, base);
                                }
                            } else {
                                // cmp is -1.
                                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                                if (k == 0) cmp = k = 1;
                                prod = yd.slice();
                            }
                            prodL = prod.length;
                            if (prodL < remL) prod.unshift(0);
                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            // If product was < previous remainder.
                            if (cmp == -1) {
                                remL = rem.length;
                                // Compare divisor and new remainder.
                                cmp = compare(yd, rem, yL, remL);
                                // If divisor < new remainder, subtract divisor from remainder.
                                if (cmp < 1) {
                                    k++;
                                    // Subtract divisor from remainder.
                                    subtract(rem, yL < remL ? yz : yd, remL, base);
                                }
                            }
                            remL = rem.length;
                        } else if (cmp === 0) {
                            k++;
                            rem = [
                                0
                            ];
                        } // if cmp === 1, k will be 0
                        // Add the next digit, k, to the result array.
                        qd[i++] = k;
                        // Update the remainder.
                        if (cmp && rem[0]) rem[remL++] = xd[xi] || 0;
                        else {
                            rem = [
                                xd[xi]
                            ];
                            remL = 1;
                        }
                    }while (((xi++) < xL || rem[0] !== void 0) && sd--)
                    more = rem[0] !== void 0;
                }
                // Leading zero?
                if (!qd[0]) qd.shift();
            }
            // logBase is 1 when divide is being used for base conversion.
            if (logBase == 1) {
                q.e = e;
                inexact = more;
            } else {
                // To calculate q.e, first get the number of digits of qd[0].
                for(i = 1, k = qd[0]; k >= 10; k /= 10)i++;
                q.e = i + e * logBase - 1;
                finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
            }
            return q;
        };
    }();
    /*
   * Round `x` to `sd` significant digits using rounding mode `rm`.
   * Check for over/under-flow.
   */ function finalise(x, sd, rm, isTruncated) {
        var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;
        // Don't round if sd is null or undefined.
        out: if (sd != null) {
            xd = x.d;
            // Infinity/NaN.
            if (!xd) return x;
            // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
            // w: the word of xd containing rd, a base 1e7 number.
            // xdi: the index of w within xd.
            // digits: the number of digits of w.
            // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
            // they had leading zeros)
            // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).
            // Get the length of the first word of the digits array xd.
            for(digits = 1, k = xd[0]; k >= 10; k /= 10)digits++;
            i = sd - digits;
            // Is the rounding digit in the first word of xd?
            if (i < 0) {
                i += LOG_BASE;
                j = sd;
                w = xd[xdi = 0];
                // Get the rounding digit at index j of w.
                rd = w / mathpow(10, digits - j - 1) % 10 | 0;
            } else {
                xdi = Math.ceil((i + 1) / LOG_BASE);
                k = xd.length;
                if (xdi >= k) {
                    if (isTruncated) {
                        // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
                        for(; (k++) <= xdi;)xd.push(0);
                        w = rd = 0;
                        digits = 1;
                        i %= LOG_BASE;
                        j = i - LOG_BASE + 1;
                    } else break out;
                } else {
                    w = k = xd[xdi];
                    // Get the number of digits of w.
                    for(digits = 1; k >= 10; k /= 10)digits++;
                    // Get the index of rd within w.
                    i %= LOG_BASE;
                    // Get the index of rd within w, adjusted for leading zeros.
                    // The number of leading zeros of w is given by LOG_BASE - digits.
                    j = i - LOG_BASE + digits;
                    // Get the rounding digit at index j of w.
                    rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
                }
            }
            // Are there any non-zero digits after the rounding digit?
            isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
            // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
            // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
            // will give 714.
            roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
            (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
            if (sd < 1 || !xd[0]) {
                xd.length = 0;
                if (roundUp) {
                    // Convert sd to decimal places.
                    sd -= x.e + 1;
                    // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                    xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
                    x.e = -sd || 0;
                } else // Zero.
                xd[0] = x.e = 0;
                return x;
            }
            // Remove excess digits.
            if (i == 0) {
                xd.length = xdi;
                k = 1;
                xdi--;
            } else {
                xd.length = xdi + 1;
                k = mathpow(10, LOG_BASE - i);
                // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                // j > 0 means i > number of leading zeros of w.
                xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
            }
            if (roundUp) {
                for(;;)// Is the digit to be rounded up in the first word of xd?
                if (xdi == 0) {
                    // i will be the length of xd[0] before k is added.
                    for(i = 1, j = xd[0]; j >= 10; j /= 10)i++;
                    j = xd[0] += k;
                    for(k = 1; j >= 10; j /= 10)k++;
                    // if i != k the length has increased.
                    if (i != k) {
                        x.e++;
                        if (xd[0] == BASE) xd[0] = 1;
                    }
                    break;
                } else {
                    xd[xdi] += k;
                    if (xd[xdi] != BASE) break;
                    xd[xdi--] = 0;
                    k = 1;
                }
            }
            // Remove trailing zeros.
            for(i = xd.length; xd[--i] === 0;)xd.pop();
        }
        if (external) {
            // Overflow?
            if (x.e > Ctor.maxE) {
                // Infinity.
                x.d = null;
                x.e = NaN;
            // Underflow?
            } else if (x.e < Ctor.minE) {
                // Zero.
                x.e = 0;
                x.d = [
                    0
                ];
            // Ctor.underflow = true;
            } // else Ctor.underflow = false;
        }
        return x;
    }
    function finiteToString(x, isExp, sd) {
        if (!x.isFinite()) return nonFiniteToString(x);
        var k, e = x.e, str = digitsToString(x.d), len = str.length;
        if (isExp) {
            if (sd && (k = sd - len) > 0) str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
            else if (len > 1) str = str.charAt(0) + '.' + str.slice(1);
            str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
        } else if (e < 0) {
            str = '0.' + getZeroString(-e - 1) + str;
            if (sd && (k = sd - len) > 0) str += getZeroString(k);
        } else if (e >= len) {
            str += getZeroString(e + 1 - len);
            if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
        } else {
            if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
            if (sd && (k = sd - len) > 0) {
                if (e + 1 === len) str += '.';
                str += getZeroString(k);
            }
        }
        return str;
    }
    // Calculate the base 10 exponent from the base 1e7 exponent.
    function getBase10Exponent(digits, e) {
        var w = digits[0];
        // Add the number of digits of the first word of the digits array.
        for(e *= LOG_BASE; w >= 10; w /= 10)e++;
        return e;
    }
    function getLn10(Ctor, sd, pr) {
        if (sd > LN10_PRECISION) {
            // Reset global state in case the exception is caught.
            external = true;
            if (pr) Ctor.precision = pr;
            throw Error(precisionLimitExceeded);
        }
        return finalise(new Ctor(LN10), sd, 1, true);
    }
    function getPi(Ctor, sd, rm) {
        if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
        return finalise(new Ctor(PI), sd, rm, true);
    }
    function getPrecision(digits) {
        var w = digits.length - 1, len = w * LOG_BASE + 1;
        w = digits[w];
        // If non-zero...
        if (w) {
            // Subtract the number of trailing zeros of the last word.
            for(; w % 10 == 0; w /= 10)len--;
            // Add the number of digits of the first word.
            for(w = digits[0]; w >= 10; w /= 10)len++;
        }
        return len;
    }
    function getZeroString(k) {
        var zs = '';
        for(; k--;)zs += '0';
        return zs;
    }
    /*
   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
   * integer of type number.
   *
   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
   *
   */ function intPow(Ctor, x, n, pr) {
        var isTruncated, r = new Ctor(1), // Max n of 9007199254740991 takes 53 loop iterations.
        // Maximum digits array length; leaves [28, 34] guard digits.
        k = Math.ceil(pr / LOG_BASE + 4);
        external = false;
        for(;;){
            if (n % 2) {
                r = r.times(x);
                if (truncate(r.d, k)) isTruncated = true;
            }
            n = mathfloor(n / 2);
            if (n === 0) {
                // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
                n = r.d.length - 1;
                if (isTruncated && r.d[n] === 0) ++r.d[n];
                break;
            }
            x = x.times(x);
            truncate(x.d, k);
        }
        external = true;
        return r;
    }
    function isOdd(n) {
        return n.d[n.d.length - 1] & 1;
    }
    /*
   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
   */ function maxOrMin(Ctor, args, ltgt) {
        var y, x = new Ctor(args[0]), i = 0;
        for(; ++i < args.length;){
            y = new Ctor(args[i]);
            if (!y.s) {
                x = y;
                break;
            } else if (x[ltgt](y)) x = y;
        }
        return x;
    }
    /*
   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
   * digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(Infinity)  = Infinity
   *  exp(-Infinity) = 0
   *  exp(NaN)       = NaN
   *  exp(±0)        = 1
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   *  The result will always be correctly rounded.
   *
   */ function naturalExponential(x, sd) {
        var denominator, guard, j, pow, sum, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
        // 0/NaN/Infinity?
        if (!x.d || !x.d[0] || x.e > 17) return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
        if (sd == null) {
            external = false;
            wpr = pr;
        } else wpr = sd;
        t = new Ctor(0.03125);
        // while abs(x) >= 0.1
        while(x.e > -2){
            // x = x / 2^5
            x = x.times(t);
            k += 5;
        }
        // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
        // necessary to ensure the first 4 rounding digits are correct.
        guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
        wpr += guard;
        denominator = pow = sum = new Ctor(1);
        Ctor.precision = wpr;
        for(;;){
            pow = finalise(pow.times(x), wpr, 1);
            denominator = denominator.times(++i);
            t = sum.plus(divide(pow, denominator, wpr, 1));
            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
                j = k;
                while(j--)sum = finalise(sum.times(sum), wpr, 1);
                // Check to see if the first 4 rounding digits are [49]999.
                // If so, repeat the summation with a higher precision, otherwise
                // e.g. with precision: 18, rounding: 1
                // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
                // `wpr - guard` is the index of first rounding digit.
                if (sd == null) {
                    if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                        Ctor.precision = wpr += 10;
                        denominator = pow = t = new Ctor(1);
                        i = 0;
                        rep++;
                    } else return finalise(sum, Ctor.precision = pr, rm, external = true);
                } else {
                    Ctor.precision = pr;
                    return sum;
                }
            }
            sum = t;
        }
    }
    /*
   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
   * digits.
   *
   *  ln(-n)        = NaN
   *  ln(0)         = -Infinity
   *  ln(-0)        = -Infinity
   *  ln(1)         = 0
   *  ln(Infinity)  = Infinity
   *  ln(-Infinity) = NaN
   *  ln(NaN)       = NaN
   *
   *  ln(n) (n != 1) is non-terminating.
   *
   */ function naturalLogarithm(y, sd) {
        var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
        // Is x negative or Infinity, NaN, 0 or 1?
        if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
        if (sd == null) {
            external = false;
            wpr = pr;
        } else wpr = sd;
        Ctor.precision = wpr += guard;
        c = digitsToString(xd);
        c0 = c.charAt(0);
        if (Math.abs(e = x.e) < 1500000000000000) {
            // Argument reduction.
            // The series converges faster the closer the argument is to 1, so using
            // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
            // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
            // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
            // later be divided by this number, then separate out the power of 10 using
            // ln(a*10^b) = ln(a) + b*ln(10).
            // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
            //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
            // max n is 6 (gives 0.7 - 1.3)
            while(c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3){
                x = x.times(y);
                c = digitsToString(x.d);
                c0 = c.charAt(0);
                n++;
            }
            e = x.e;
            if (c0 > 1) {
                x = new Ctor('0.' + c);
                e++;
            } else x = new Ctor(c0 + '.' + c.slice(1));
        } else {
            // The argument reduction method above may result in overflow if the argument y is a massive
            // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
            // function using ln(x*10^e) = ln(x) + e*ln(10).
            t = getLn10(Ctor, wpr + 2, pr).times(e + '');
            x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
            Ctor.precision = pr;
            return sd == null ? finalise(x, pr, rm, external = true) : x;
        }
        // x1 is x reduced to a value near 1.
        x1 = x;
        // Taylor series.
        // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
        // where x = (y - 1)/(y + 1)    (|x| < 1)
        sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
        x2 = finalise(x.times(x), wpr, 1);
        denominator = 3;
        for(;;){
            numerator = finalise(numerator.times(x2), wpr, 1);
            t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));
            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
                sum = sum.times(2);
                // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
                // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
                if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
                sum = divide(sum, new Ctor(n), wpr, 1);
                // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
                // been repeated previously) and the first 4 rounding digits 9999?
                // If so, restart the summation with a higher precision, otherwise
                // e.g. with precision: 12, rounding: 1
                // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
                // `wpr - guard` is the index of first rounding digit.
                if (sd == null) {
                    if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                        Ctor.precision = wpr += guard;
                        t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
                        x2 = finalise(x.times(x), wpr, 1);
                        denominator = rep = 1;
                    } else return finalise(sum, Ctor.precision = pr, rm, external = true);
                } else {
                    Ctor.precision = pr;
                    return sum;
                }
            }
            sum = t;
            denominator += 2;
        }
    }
    // ±Infinity, NaN.
    function nonFiniteToString(x) {
        // Unsigned.
        return String(x.s * x.s / 0);
    }
    /*
   * Parse the value of a new Decimal `x` from string `str`.
   */ function parseDecimal(x, str) {
        var e, i, len;
        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {
            // Determine exponent.
            if (e < 0) e = i;
            e += +str.slice(i + 1);
            str = str.substring(0, i);
        } else if (e < 0) // Integer.
        e = str.length;
        // Determine leading zeros.
        for(i = 0; str.charCodeAt(i) === 48; i++);
        // Determine trailing zeros.
        for(len = str.length; str.charCodeAt(len - 1) === 48; --len);
        str = str.slice(i, len);
        if (str) {
            len -= i;
            x.e = e = e - i - 1;
            x.d = [];
            // Transform base
            // e is the base 10 exponent.
            // i is where to slice str to get the first word of the digits array.
            i = (e + 1) % LOG_BASE;
            if (e < 0) i += LOG_BASE;
            if (i < len) {
                if (i) x.d.push(+str.slice(0, i));
                for(len -= LOG_BASE; i < len;)x.d.push(+str.slice(i, i += LOG_BASE));
                str = str.slice(i);
                i = LOG_BASE - str.length;
            } else i -= len;
            for(; i--;)str += '0';
            x.d.push(+str);
            if (external) {
                // Overflow?
                if (x.e > x.constructor.maxE) {
                    // Infinity.
                    x.d = null;
                    x.e = NaN;
                // Underflow?
                } else if (x.e < x.constructor.minE) {
                    // Zero.
                    x.e = 0;
                    x.d = [
                        0
                    ];
                // x.constructor.underflow = true;
                } // else x.constructor.underflow = false;
            }
        } else {
            // Zero.
            x.e = 0;
            x.d = [
                0
            ];
        }
        return x;
    }
    /*
   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
   */ function parseOther(x, str) {
        var base, Ctor, divisor, i, isFloat, len, p, xd, xe;
        if (str.indexOf('_') > -1) {
            str = str.replace(/(\d)_(?=\d)/g, '$1');
            if (isDecimal.test(str)) return parseDecimal(x, str);
        } else if (str === 'Infinity' || str === 'NaN') {
            if (!+str) x.s = NaN;
            x.e = NaN;
            x.d = null;
            return x;
        }
        if (isHex.test(str)) {
            base = 16;
            str = str.toLowerCase();
        } else if (isBinary.test(str)) base = 2;
        else if (isOctal.test(str)) base = 8;
        else throw Error(invalidArgument + str);
        // Is there a binary exponent part?
        i = str.search(/p/i);
        if (i > 0) {
            p = +str.slice(i + 1);
            str = str.substring(2, i);
        } else str = str.slice(2);
        // Convert `str` as an integer then divide the result by `base` raised to a power such that the
        // fraction part will be restored.
        i = str.indexOf('.');
        isFloat = i >= 0;
        Ctor = x.constructor;
        if (isFloat) {
            str = str.replace('.', '');
            len = str.length;
            i = len - i;
            // log[10](16) = 1.2041... , log[10](88) = 1.9444....
            divisor = intPow(Ctor, new Ctor(base), i, i * 2);
        }
        xd = convertBase(str, base, BASE);
        xe = xd.length - 1;
        // Remove trailing zeros.
        for(i = xe; xd[i] === 0; --i)xd.pop();
        if (i < 0) return new Ctor(x.s * 0);
        x.e = getBase10Exponent(xd, xe);
        x.d = xd;
        external = false;
        // At what precision to perform the division to ensure exact conversion?
        // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
        // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
        // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
        // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
        // Therefore using 4 * the number of digits of str will always be enough.
        if (isFloat) x = divide(x, divisor, len * 4);
        // Multiply by the binary exponent part if present.
        if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal1.pow(2, p));
        external = true;
        return x;
    }
    /*
   * sin(x) = x - x^3/3! + x^5/5! - ...
   * |x| < pi/2
   *
   */ function sine(Ctor, x) {
        var k, len = x.d.length;
        if (len < 3) return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
        // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
        // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
        // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))
        // Estimate the optimum number of times to use the argument reduction.
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;
        x = x.times(1 / tinyPow(5, k));
        x = taylorSeries(Ctor, 2, x, x);
        // Reverse argument reduction
        var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
        for(; k--;){
            sin2_x = x.times(x);
            x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
        }
        return x;
    }
    // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
    function taylorSeries(Ctor, n, x, y, isHyperbolic) {
        var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);
        external = false;
        x2 = x.times(x);
        u = new Ctor(y);
        for(;;){
            t = divide(u.times(x2), new Ctor((n++) * n++), pr, 1);
            u = isHyperbolic ? y.plus(t) : y.minus(t);
            y = divide(t.times(x2), new Ctor((n++) * n++), pr, 1);
            t = u.plus(y);
            if (t.d[k] !== void 0) {
                for(j = k; t.d[j] === u.d[j] && j--;);
                if (j == -1) break;
            }
            j = u;
            u = y;
            y = t;
            t = j;
            i++;
        }
        external = true;
        t.d.length = k + 1;
        return t;
    }
    // Exponent e must be positive and non-zero.
    function tinyPow(b, e) {
        var n = b;
        while(--e)n *= b;
        return n;
    }
    // Return the absolute value of `x` reduced to less than or equal to half pi.
    function toLessThanHalfPi(Ctor, x) {
        var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);
        x = x.abs();
        if (x.lte(halfPi)) {
            quadrant = isNeg ? 4 : 1;
            return x;
        }
        t = x.divToInt(pi);
        if (t.isZero()) quadrant = isNeg ? 3 : 2;
        else {
            x = x.minus(t.times(pi));
            // 0 <= x < pi
            if (x.lte(halfPi)) {
                quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
                return x;
            }
            quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
        }
        return x.minus(pi).abs();
    }
    /*
   * Return the value of Decimal `x` as a string in base `baseOut`.
   *
   * If the optional `sd` argument is present include a binary exponent suffix.
   */ function toStringBinary(x, baseOut, sd, rm) {
        var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;
        if (isExp) {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
        } else {
            sd = Ctor.precision;
            rm = Ctor.rounding;
        }
        if (!x.isFinite()) str = nonFiniteToString(x);
        else {
            str = finiteToString(x);
            i = str.indexOf('.');
            // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
            // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
            // minBinaryExponent = floor(decimalExponent * log[2](10))
            // log[2](10) = 3.321928094887362347870319429489390175864
            if (isExp) {
                base = 2;
                if (baseOut == 16) sd = sd * 4 - 3;
                else if (baseOut == 8) sd = sd * 3 - 2;
            } else base = baseOut;
            // Convert the number as an integer then divide the result by its base raised to a power such
            // that the fraction part will be restored.
            // Non-integer.
            if (i >= 0) {
                str = str.replace('.', '');
                y = new Ctor(1);
                y.e = str.length - i;
                y.d = convertBase(finiteToString(y), 10, base);
                y.e = y.d.length;
            }
            xd = convertBase(str, 10, base);
            e = len = xd.length;
            // Remove trailing zeros.
            for(; xd[--len] == 0;)xd.pop();
            if (!xd[0]) str = isExp ? '0p+0' : '0';
            else {
                if (i < 0) e--;
                else {
                    x = new Ctor(x);
                    x.d = xd;
                    x.e = e;
                    x = divide(x, y, sd, rm, 0, base);
                    xd = x.d;
                    e = x.e;
                    roundUp = inexact;
                }
                // The rounding digit, i.e. the digit after the digit that may be rounded up.
                i = xd[sd];
                k = base / 2;
                roundUp = roundUp || xd[sd + 1] !== void 0;
                roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
                xd.length = sd;
                if (roundUp) // Rounding up may mean the previous digit has to be rounded up and so on.
                for(; ++xd[--sd] > base - 1;){
                    xd[sd] = 0;
                    if (!sd) {
                        ++e;
                        xd.unshift(1);
                    }
                }
                // Determine trailing zeros.
                for(len = xd.length; !xd[len - 1]; --len);
                // E.g. [4, 11, 15] becomes 4bf.
                for(i = 0, str = ''; i < len; i++)str += NUMERALS.charAt(xd[i]);
                // Add binary exponent suffix?
                if (isExp) {
                    if (len > 1) {
                        if (baseOut == 16 || baseOut == 8) {
                            i = baseOut == 16 ? 4 : 3;
                            for(--len; len % i; len++)str += '0';
                            xd = convertBase(str, base, baseOut);
                            for(len = xd.length; !xd[len - 1]; --len);
                            // xd[0] will always be be 1
                            for(i = 1, str = '1.'; i < len; i++)str += NUMERALS.charAt(xd[i]);
                        } else str = str.charAt(0) + '.' + str.slice(1);
                    }
                    str = str + (e < 0 ? 'p' : 'p+') + e;
                } else if (e < 0) {
                    for(; ++e;)str = '0' + str;
                    str = '0.' + str;
                } else {
                    if (++e > len) for(e -= len; e--;)str += '0';
                    else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
                }
            }
            str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
        }
        return x.s < 0 ? '-' + str : str;
    }
    // Does not strip trailing zeros.
    function truncate(arr, len) {
        if (arr.length > len) {
            arr.length = len;
            return true;
        }
    }
    // Decimal methods
    /*
   *  abs
   *  acos
   *  acosh
   *  add
   *  asin
   *  asinh
   *  atan
   *  atanh
   *  atan2
   *  cbrt
   *  ceil
   *  clamp
   *  clone
   *  config
   *  cos
   *  cosh
   *  div
   *  exp
   *  floor
   *  hypot
   *  ln
   *  log
   *  log2
   *  log10
   *  max
   *  min
   *  mod
   *  mul
   *  pow
   *  random
   *  round
   *  set
   *  sign
   *  sin
   *  sinh
   *  sqrt
   *  sub
   *  sum
   *  tan
   *  tanh
   *  trunc
   */ /*
   * Return a new Decimal whose value is the absolute value of `x`.
   *
   * x {number|string|Decimal}
   *
   */ function abs(x) {
        return new this(x).abs();
    }
    /*
   * Return a new Decimal whose value is the arccosine in radians of `x`.
   *
   * x {number|string|Decimal}
   *
   */ function acos(x) {
        return new this(x).acos();
    }
    /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */ function acosh(x) {
        return new this(x).acosh();
    }
    /*
   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */ function add(x, y) {
        return new this(x).plus(y);
    }
    /*
   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */ function asin(x) {
        return new this(x).asin();
    }
    /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */ function asinh(x) {
        return new this(x).asinh();
    }
    /*
   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */ function atan(x) {
        return new this(x).atan();
    }
    /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */ function atanh(x) {
        return new this(x).atanh();
    }
    /*
   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi, pi]
   *
   * y {number|string|Decimal} The y-coordinate.
   * x {number|string|Decimal} The x-coordinate.
   *
   * atan2(±0, -0)               = ±pi
   * atan2(±0, +0)               = ±0
   * atan2(±0, -x)               = ±pi for x > 0
   * atan2(±0, x)                = ±0 for x > 0
   * atan2(-y, ±0)               = -pi/2 for y > 0
   * atan2(y, ±0)                = pi/2 for y > 0
   * atan2(±y, -Infinity)        = ±pi for finite y > 0
   * atan2(±y, +Infinity)        = ±0 for finite y > 0
   * atan2(±Infinity, x)         = ±pi/2 for finite x
   * atan2(±Infinity, -Infinity) = ±3*pi/4
   * atan2(±Infinity, +Infinity) = ±pi/4
   * atan2(NaN, x) = NaN
   * atan2(y, NaN) = NaN
   *
   */ function atan2(y, x) {
        y = new this(y);
        x = new this(x);
        var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;
        // Either NaN
        if (!y.s || !x.s) r = new this(NaN);
        else if (!y.d && !x.d) {
            r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
            r.s = y.s;
        // x is ±Infinity or y is ±0
        } else if (!x.d || y.isZero()) {
            r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
            r.s = y.s;
        // y is ±Infinity or x is ±0
        } else if (!y.d || x.isZero()) {
            r = getPi(this, wpr, 1).times(0.5);
            r.s = y.s;
        // Both non-zero and finite
        } else if (x.s < 0) {
            this.precision = wpr;
            this.rounding = 1;
            r = this.atan(divide(y, x, wpr, 1));
            x = getPi(this, wpr, 1);
            this.precision = pr;
            this.rounding = rm;
            r = y.s < 0 ? r.minus(x) : r.plus(x);
        } else r = this.atan(divide(y, x, wpr, 1));
        return r;
    }
    /*
   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */ function cbrt(x) {
        return new this(x).cbrt();
    }
    /*
   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
   *
   * x {number|string|Decimal}
   *
   */ function ceil(x) {
        return finalise(x = new this(x), x.e + 1, 2);
    }
    /*
   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.
   *
   * x {number|string|Decimal}
   * min {number|string|Decimal}
   * max {number|string|Decimal}
   *
   */ function clamp(x, min, max) {
        return new this(x).clamp(min, max);
    }
    /*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *   maxE       {number}
   *   minE       {number}
   *   modulo     {number}
   *   crypto     {boolean|number}
   *   defaults   {true}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */ function config(obj) {
        if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
        var i, p, v, useDefaults = obj.defaults === true, ps = [
            'precision',
            1,
            MAX_DIGITS,
            'rounding',
            0,
            8,
            'toExpNeg',
            -EXP_LIMIT,
            0,
            'toExpPos',
            0,
            EXP_LIMIT,
            'maxE',
            0,
            EXP_LIMIT,
            'minE',
            -EXP_LIMIT,
            0,
            'modulo',
            0,
            9
        ];
        for(i = 0; i < ps.length; i += 3){
            if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
            if ((v = obj[p]) !== void 0) {
                if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
                else throw Error(invalidArgument + p + ': ' + v);
            }
        }
        if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
        if ((v = obj[p]) !== void 0) {
            if (v === true || v === false || v === 0 || v === 1) {
                if (v) {
                    if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[p] = true;
                    else throw Error(cryptoUnavailable);
                } else this[p] = false;
            } else throw Error(invalidArgument + p + ': ' + v);
        }
        return this;
    }
    /*
   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */ function cos(x) {
        return new this(x).cos();
    }
    /*
   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */ function cosh(x) {
        return new this(x).cosh();
    }
    /*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */ function clone(obj) {
        var i1, p, ps;
        /*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * v {number|string|Decimal} A numeric value.
     *
     */ function Decimal(v) {
            var e, i, t, x = this;
            // Decimal called without new.
            if (!(x instanceof Decimal)) return new Decimal(v);
            // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
            // which points to Object.
            x.constructor = Decimal;
            // Duplicate.
            if (isDecimalInstance(v)) {
                x.s = v.s;
                if (external) {
                    if (!v.d || v.e > Decimal.maxE) {
                        // Infinity.
                        x.e = NaN;
                        x.d = null;
                    } else if (v.e < Decimal.minE) {
                        // Zero.
                        x.e = 0;
                        x.d = [
                            0
                        ];
                    } else {
                        x.e = v.e;
                        x.d = v.d.slice();
                    }
                } else {
                    x.e = v.e;
                    x.d = v.d ? v.d.slice() : v.d;
                }
                return;
            }
            t = typeof v;
            if (t === 'number') {
                if (v === 0) {
                    x.s = 1 / v < 0 ? -1 : 1;
                    x.e = 0;
                    x.d = [
                        0
                    ];
                    return;
                }
                if (v < 0) {
                    v = -v;
                    x.s = -1;
                } else x.s = 1;
                // Fast path for small integers.
                if (v === ~~v && v < 10000000) {
                    for(e = 0, i = v; i >= 10; i /= 10)e++;
                    if (external) {
                        if (e > Decimal.maxE) {
                            x.e = NaN;
                            x.d = null;
                        } else if (e < Decimal.minE) {
                            x.e = 0;
                            x.d = [
                                0
                            ];
                        } else {
                            x.e = e;
                            x.d = [
                                v
                            ];
                        }
                    } else {
                        x.e = e;
                        x.d = [
                            v
                        ];
                    }
                    return;
                // Infinity, NaN.
                } else if (v * 0 !== 0) {
                    if (!v) x.s = NaN;
                    x.e = NaN;
                    x.d = null;
                    return;
                }
                return parseDecimal(x, v.toString());
            } else if (t !== 'string') throw Error(invalidArgument + v);
            // Minus sign?
            if ((i = v.charCodeAt(0)) === 45) {
                v = v.slice(1);
                x.s = -1;
            } else {
                // Plus sign?
                if (i === 43) v = v.slice(1);
                x.s = 1;
            }
            return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
        }
        Decimal.prototype = P;
        Decimal.ROUND_UP = 0;
        Decimal.ROUND_DOWN = 1;
        Decimal.ROUND_CEIL = 2;
        Decimal.ROUND_FLOOR = 3;
        Decimal.ROUND_HALF_UP = 4;
        Decimal.ROUND_HALF_DOWN = 5;
        Decimal.ROUND_HALF_EVEN = 6;
        Decimal.ROUND_HALF_CEIL = 7;
        Decimal.ROUND_HALF_FLOOR = 8;
        Decimal.EUCLID = 9;
        Decimal.config = Decimal.set = config;
        Decimal.clone = clone;
        Decimal.isDecimal = isDecimalInstance;
        Decimal.abs = abs;
        Decimal.acos = acos;
        Decimal.acosh = acosh; // ES6
        Decimal.add = add;
        Decimal.asin = asin;
        Decimal.asinh = asinh; // ES6
        Decimal.atan = atan;
        Decimal.atanh = atanh; // ES6
        Decimal.atan2 = atan2;
        Decimal.cbrt = cbrt; // ES6
        Decimal.ceil = ceil;
        Decimal.clamp = clamp;
        Decimal.cos = cos;
        Decimal.cosh = cosh; // ES6
        Decimal.div = div;
        Decimal.exp = exp;
        Decimal.floor = floor;
        Decimal.hypot = hypot; // ES6
        Decimal.ln = ln;
        Decimal.log = log;
        Decimal.log10 = log10; // ES6
        Decimal.log2 = log2; // ES6
        Decimal.max = max1;
        Decimal.min = min1;
        Decimal.mod = mod;
        Decimal.mul = mul;
        Decimal.pow = pow1;
        Decimal.random = random;
        Decimal.round = round;
        Decimal.sign = sign1; // ES6
        Decimal.sin = sin;
        Decimal.sinh = sinh; // ES6
        Decimal.sqrt = sqrt;
        Decimal.sub = sub;
        Decimal.sum = sum1;
        Decimal.tan = tan;
        Decimal.tanh = tanh; // ES6
        Decimal.trunc = trunc; // ES6
        if (obj === void 0) obj = {
        };
        if (obj) {
            if (obj.defaults !== true) {
                ps = [
                    'precision',
                    'rounding',
                    'toExpNeg',
                    'toExpPos',
                    'maxE',
                    'minE',
                    'modulo',
                    'crypto'
                ];
                for(i1 = 0; i1 < ps.length;)if (!obj.hasOwnProperty(p = ps[i1++])) obj[p] = this[p];
            }
        }
        Decimal.config(obj);
        return Decimal;
    }
    /*
   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */ function div(x, y) {
        return new this(x).div(y);
    }
    /*
   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The power to which to raise the base of the natural log.
   *
   */ function exp(x) {
        return new this(x).exp();
    }
    /*
   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
   *
   * x {number|string|Decimal}
   *
   */ function floor(x) {
        return finalise(x = new this(x), x.e + 1, 3);
    }
    /*
   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
   *
   * arguments {number|string|Decimal}
   *
   */ function hypot() {
        var i, n, t = new this(0);
        external = false;
        for(i = 0; i < arguments.length;){
            n = new this(arguments[i++]);
            if (!n.d) {
                if (n.s) {
                    external = true;
                    return new this(1 / 0);
                }
                t = n;
            } else if (t.d) t = t.plus(n.times(n));
        }
        external = true;
        return t.sqrt();
    }
    /*
   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
   * otherwise return false.
   *
   */ function isDecimalInstance(obj) {
        return obj instanceof Decimal1 || obj && obj.toStringTag === tag || false;
    }
    /*
   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */ function ln(x) {
        return new this(x).ln();
    }
    /*
   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * log[y](x)
   *
   * x {number|string|Decimal} The argument of the logarithm.
   * y {number|string|Decimal} The base of the logarithm.
   *
   */ function log(x, y) {
        return new this(x).log(y);
    }
    /*
   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */ function log2(x) {
        return new this(x).log(2);
    }
    /*
   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */ function log10(x) {
        return new this(x).log(10);
    }
    /*
   * Return a new Decimal whose value is the maximum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */ function max1() {
        return maxOrMin(this, arguments, 'lt');
    }
    /*
   * Return a new Decimal whose value is the minimum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */ function min1() {
        return maxOrMin(this, arguments, 'gt');
    }
    /*
   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */ function mod(x, y) {
        return new this(x).mod(y);
    }
    /*
   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */ function mul(x, y) {
        return new this(x).mul(y);
    }
    /*
   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The base.
   * y {number|string|Decimal} The exponent.
   *
   */ function pow1(x, y) {
        return new this(x).pow(y);
    }
    /*
   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
   * are produced).
   *
   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
   *
   */ function random(sd) {
        var d, e, k, n, i = 0, r = new this(1), rd = [];
        if (sd === void 0) sd = this.precision;
        else checkInt32(sd, 1, MAX_DIGITS);
        k = Math.ceil(sd / LOG_BASE);
        if (!this.crypto) for(; i < k;)rd[i++] = Math.random() * 10000000 | 0;
        else if (crypto.getRandomValues) {
            d = crypto.getRandomValues(new Uint32Array(k));
            for(; i < k;){
                n = d[i];
                // 0 <= n < 4294967296
                // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
                if (n >= 4290000000) d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
                else // 0 <= n <= 4289999999
                // 0 <= (n % 1e7) <= 9999999
                rd[i++] = n % 10000000;
            }
        // Node.js supporting crypto.randomBytes.
        } else if (crypto.randomBytes) {
            // buffer
            d = crypto.randomBytes(k *= 4);
            for(; i < k;){
                // 0 <= n < 2147483648
                n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 127) << 24);
                // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
                if (n >= 2140000000) crypto.randomBytes(4).copy(d, i);
                else {
                    // 0 <= n <= 2139999999
                    // 0 <= (n % 1e7) <= 9999999
                    rd.push(n % 10000000);
                    i += 4;
                }
            }
            i = k / 4;
        } else throw Error(cryptoUnavailable);
        k = rd[--i];
        sd %= LOG_BASE;
        // Convert trailing digits to zeros according to sd.
        if (k && sd) {
            n = mathpow(10, LOG_BASE - sd);
            rd[i] = (k / n | 0) * n;
        }
        // Remove trailing words which are zero.
        for(; rd[i] === 0; i--)rd.pop();
        // Zero?
        if (i < 0) {
            e = 0;
            rd = [
                0
            ];
        } else {
            e = -1;
            // Remove leading words which are zero and adjust exponent accordingly.
            for(; rd[0] === 0; e -= LOG_BASE)rd.shift();
            // Count the digits of the first word of rd to determine leading zeros.
            for(k = 1, n = rd[0]; n >= 10; n /= 10)k++;
            // Adjust the exponent for leading zeros of the first word of rd.
            if (k < LOG_BASE) e -= LOG_BASE - k;
        }
        r.e = e;
        r.d = rd;
        return r;
    }
    /*
   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
   *
   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
   *
   * x {number|string|Decimal}
   *
   */ function round(x) {
        return finalise(x = new this(x), x.e + 1, this.rounding);
    }
    /*
   * Return
   *   1    if x > 0,
   *  -1    if x < 0,
   *   0    if x is 0,
   *  -0    if x is -0,
   *   NaN  otherwise
   *
   * x {number|string|Decimal}
   *
   */ function sign1(x) {
        x = new this(x);
        return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
    }
    /*
   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */ function sin(x) {
        return new this(x).sin();
    }
    /*
   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */ function sinh(x) {
        return new this(x).sinh();
    }
    /*
   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */ function sqrt(x) {
        return new this(x).sqrt();
    }
    /*
   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */ function sub(x, y) {
        return new this(x).sub(y);
    }
    /*
   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * Only the result is rounded, not the intermediate calculations.
   *
   * arguments {number|string|Decimal}
   *
   */ function sum1() {
        var i = 0, args = arguments, x = new this(args[i]);
        external = false;
        for(; x.s && ++i < args.length;)x = x.plus(args[i]);
        external = true;
        return finalise(x, this.precision, this.rounding);
    }
    /*
   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */ function tan(x) {
        return new this(x).tan();
    }
    /*
   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */ function tanh(x) {
        return new this(x).tanh();
    }
    /*
   * Return a new Decimal whose value is `x` truncated to an integer.
   *
   * x {number|string|Decimal}
   *
   */ function trunc(x) {
        return finalise(x = new this(x), x.e + 1, 1);
    }
    // Create and configure initial Decimal constructor.
    Decimal1 = clone(DEFAULTS);
    Decimal1.prototype.constructor = Decimal1;
    Decimal1['default'] = Decimal1.Decimal = Decimal1;
    // Create the internal constants from their string values.
    LN10 = new Decimal1(LN10);
    PI = new Decimal1(PI);
    // Export.
    // AMD.
    if (typeof define == 'function' && define.amd) define(function() {
        return Decimal1;
    });
    else if (typeof module != 'undefined' && module.exports) {
        if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {
            P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;
            P[Symbol.toStringTag] = 'Decimal';
        }
        module.exports = Decimal1;
    // Browser.
    } else {
        if (!globalScope) globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;
        noConflict = globalScope.Decimal;
        Decimal1.noConflict = function() {
            globalScope.Decimal = noConflict;
            return Decimal1;
        };
        globalScope.Decimal = Decimal1;
    }
})(this);

},{}],"9Qqym":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createComplexClass", ()=>createComplexClass
);
var _complexJs = require("complex.js");
var _complexJsDefault = parcelHelpers.interopDefault(_complexJs);
var _numberJs = require("../../utils/number.js");
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'Complex';
var dependencies = [];
var createComplexClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, ()=>{
    /**
   * Attach type information
   */ _complexJsDefault.default.prototype.type = 'Complex';
    _complexJsDefault.default.prototype.isComplex = true;
    /**
   * Get a JSON representation of the complex number
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
   */ _complexJsDefault.default.prototype.toJSON = function() {
        return {
            mathjs: 'Complex',
            re: this.re,
            im: this.im
        };
    };
    /*
   * Return the value of the complex number in polar notation
   * The angle phi will be set in the interval of [-pi, pi].
   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
   */ _complexJsDefault.default.prototype.toPolar = function() {
        return {
            r: this.abs(),
            phi: this.arg()
        };
    };
    /**
   * Get a string representation of the complex number,
   * with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string} str
   */ _complexJsDefault.default.prototype.format = function(options) {
        var str = '';
        var im = this.im;
        var re = this.re;
        var strRe = _numberJs.format(this.re, options);
        var strIm = _numberJs.format(this.im, options); // round either re or im when smaller than the configured precision
        var precision = _isJs.isNumber(options) ? options : options ? options.precision : null;
        if (precision !== null) {
            var epsilon = Math.pow(10, -precision);
            if (Math.abs(re / im) < epsilon) re = 0;
            if (Math.abs(im / re) < epsilon) im = 0;
        }
        if (im === 0) // real value
        str = strRe;
        else if (re === 0) {
            // purely complex value
            if (im === 1) str = 'i';
            else if (im === -1) str = '-i';
            else str = strIm + 'i';
        } else {
            // complex value
            if (im < 0) {
                if (im === -1) str = strRe + ' - i';
                else str = strRe + ' - ' + strIm.substring(1) + 'i';
            } else if (im === 1) str = strRe + ' + i';
            else str = strRe + ' + ' + strIm + 'i';
        }
        return str;
    };
    /**
   * Create a complex number from polar coordinates
   *
   * Usage:
   *
   *     Complex.fromPolar(r: number, phi: number) : Complex
   *     Complex.fromPolar({r: number, phi: number}) : Complex
   *
   * @param {*} args...
   * @return {Complex}
   */ _complexJsDefault.default.fromPolar = function(args) {
        switch(arguments.length){
            case 1:
                var arg = arguments[0];
                if (typeof arg === 'object') return _complexJsDefault.default(arg);
                else throw new TypeError('Input has to be an object with r and phi keys.');
            case 2:
                var r = arguments[0];
                var phi = arguments[1];
                if (_isJs.isNumber(r)) {
                    if (_isJs.isUnit(phi) && phi.hasBase('ANGLE')) // convert unit to a number in radians
                    phi = phi.toNumber('rad');
                    if (_isJs.isNumber(phi)) return new _complexJsDefault.default({
                        r: r,
                        phi: phi
                    });
                    throw new TypeError('Phi is not a number nor an angle unit.');
                } else throw new TypeError('Radius r is not a number.');
            default:
                throw new SyntaxError('Wrong number of arguments in function fromPolar');
        }
    };
    _complexJsDefault.default.prototype.valueOf = _complexJsDefault.default.prototype.toString;
    /**
   * Create a Complex number from a JSON object
   * @param {Object} json  A JSON Object structured as
   *                       {"mathjs": "Complex", "re": 2, "im": 3}
   *                       All properties are optional, default values
   *                       for `re` and `im` are 0.
   * @return {Complex} Returns a new Complex number
   */ _complexJsDefault.default.fromJSON = function(json) {
        return new _complexJsDefault.default(json);
    };
    /**
   * Compare two complex numbers, `a` and `b`:
   *
   * - Returns 1 when the real part of `a` is larger than the real part of `b`
   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
   * - Returns 1 when the real parts are equal
   *   and the imaginary part of `a` is larger than the imaginary part of `b`
   * - Returns -1 when the real parts are equal
   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
   * - Returns 0 when both real and imaginary parts are equal.
   *
   * @params {Complex} a
   * @params {Complex} b
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */ _complexJsDefault.default.compare = function(a, b) {
        if (a.re > b.re) return 1;
        if (a.re < b.re) return -1;
        if (a.im > b.im) return 1;
        if (a.im < b.im) return -1;
        return 0;
    };
    return _complexJsDefault.default;
}, {
    isClass: true
});

},{"complex.js":"eViGS","../../utils/number.js":"l1AB8","../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eViGS":[function(require,module,exports) {
/**
 * @license Complex.js v2.0.15 12/05/2020
 *
 * Copyright (c) 2020, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/ /**
 *
 * This class allows the manipulation of complex numbers.
 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
 *
 * Object form
 * { re: <real>, im: <imaginary> }
 * { arg: <angle>, abs: <radius> }
 * { phi: <angle>, r: <radius> }
 *
 * Array / Vector form
 * [ real, imaginary ]
 *
 * Double form
 * 99.3 - Single double value
 *
 * String form
 * '23.1337' - Simple real number
 * '15+3i' - a simple complex number
 * '3-i' - a simple complex number
 *
 * Example:
 *
 * var c = new Complex('99.3+8i');
 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
 *
 */ (function(root) {
    var cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) * 0.5;
    };
    var sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) * 0.5;
    };
    /**
   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).
   *
   * @param {number} x
   * @returns {number} cos(x) - 1
   */ var cosm1 = function(x) {
        var b = Math.PI / 4;
        if (-b > x || x > b) return Math.cos(x) - 1;
        /* Calculate horner form of polynomial of taylor series in Q
    var fac = 1, alt = 1, pol = {};
    for (var i = 0; i <= 16; i++) {
      fac*= i || 1;
      if (i % 2 == 0) {
        pol[i] = new Fraction(1, alt * fac);
        alt = -alt;
      }
    }
    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1
    */ var xx = x * x;
        return xx * (xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 0.5);
    };
    var hypot = function(x, y) {
        var a = Math.abs(x);
        var b = Math.abs(y);
        if (a < 3000 && b < 3000) return Math.sqrt(a * a + b * b);
        if (a < b) {
            a = b;
            b = x / y;
        } else b = y / x;
        return a * Math.sqrt(1 + b * b);
    };
    var parser_exit = function() {
        throw SyntaxError('Invalid Param');
    };
    /**
   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */ function logHypot(a, b) {
        var _a = Math.abs(a);
        var _b = Math.abs(b);
        if (a === 0) return Math.log(_b);
        if (b === 0) return Math.log(_a);
        if (_a < 3000 && _b < 3000) return Math.log(a * a + b * b) * 0.5;
        /* I got 4 ideas to compute this property without overflow:
     *
     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
     *
     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

     Math.log(a * a + b * b) / 2

     *
     *
     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

     var fn = function(a, b) {
     a = Math.abs(a);
     b = Math.abs(b);
     var t = Math.min(a, b);
     a = Math.max(a, b);
     t = t / a;

     return Math.log(a) + Math.log(1 + t * t) / 2;
     };

     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

     Math.log(a / Math.cos(Math.atan2(b, a)))

     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

     */ return Math.log(a / Math.cos(Math.atan2(b, a)));
    }
    var parse = function(a, b) {
        var z = {
            're': 0,
            'im': 0
        };
        if (a === undefined || a === null) z['re'] = z['im'] = 0;
        else if (b !== undefined) {
            z['re'] = a;
            z['im'] = b;
        } else switch(typeof a){
            case 'object':
                if ('im' in a && 're' in a) {
                    z['re'] = a['re'];
                    z['im'] = a['im'];
                } else if ('abs' in a && 'arg' in a) {
                    if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) return Complex['INFINITY'];
                    z['re'] = a['abs'] * Math.cos(a['arg']);
                    z['im'] = a['abs'] * Math.sin(a['arg']);
                } else if ('r' in a && 'phi' in a) {
                    if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) return Complex['INFINITY'];
                    z['re'] = a['r'] * Math.cos(a['phi']);
                    z['im'] = a['r'] * Math.sin(a['phi']);
                } else if (a.length === 2) {
                    z['re'] = a[0];
                    z['im'] = a[1];
                } else parser_exit();
                break;
            case 'string':
                z['im'] = /* void */ z['re'] = 0;
                var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
                var plus = 1;
                var minus = 0;
                if (tokens === null) parser_exit();
                for(var i = 0; i < tokens.length; i++){
                    var c = tokens[i];
                    if (c === ' ' || c === '\t' || c === '\n') ;
                    else if (c === '+') plus++;
                    else if (c === '-') minus++;
                    else if (c === 'i' || c === 'I') {
                        if (plus + minus === 0) parser_exit();
                        if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                            z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                            i++;
                        } else z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
                        plus = minus = 0;
                    } else {
                        if (plus + minus === 0 || isNaN(c)) parser_exit();
                        if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                            z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
                            i++;
                        } else z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
                        plus = minus = 0;
                    }
                }
                // Still something on the stack
                if (plus + minus > 0) parser_exit();
                break;
            case 'number':
                z['im'] = 0;
                z['re'] = a;
                break;
            default:
                parser_exit();
        }
        isNaN(z['re']) || isNaN(z['im']);
        return z;
    };
    /**
   * @constructor
   * @returns {Complex}
   */ function Complex(a, b) {
        if (!(this instanceof Complex)) return new Complex(a, b);
        var z = parse(a, b);
        this['re'] = z['re'];
        this['im'] = z['im'];
    }
    Complex.prototype = {
        're': 0,
        'im': 0,
        /**
     * Calculates the sign of a complex number, which is a normalized complex
     *
     * @returns {Complex}
     */ 'sign': function() {
            var abs = this['abs']();
            return new Complex(this['re'] / abs, this['im'] / abs);
        },
        /**
     * Adds two complex numbers
     *
     * @returns {Complex}
     */ 'add': function(a, b) {
            var z = new Complex(a, b);
            // Infinity + Infinity = NaN
            if (this['isInfinite']() && z['isInfinite']()) return Complex['NAN'];
            // Infinity + z = Infinity { where z != Infinity }
            if (this['isInfinite']() || z['isInfinite']()) return Complex['INFINITY'];
            return new Complex(this['re'] + z['re'], this['im'] + z['im']);
        },
        /**
     * Subtracts two complex numbers
     *
     * @returns {Complex}
     */ 'sub': function(a, b) {
            var z = new Complex(a, b);
            // Infinity - Infinity = NaN
            if (this['isInfinite']() && z['isInfinite']()) return Complex['NAN'];
            // Infinity - z = Infinity { where z != Infinity }
            if (this['isInfinite']() || z['isInfinite']()) return Complex['INFINITY'];
            return new Complex(this['re'] - z['re'], this['im'] - z['im']);
        },
        /**
     * Multiplies two complex numbers
     *
     * @returns {Complex}
     */ 'mul': function(a, b) {
            var z = new Complex(a, b);
            // Infinity * 0 = NaN
            if (this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']()) return Complex['NAN'];
            // Infinity * z = Infinity { where z != 0 }
            if (this['isInfinite']() || z['isInfinite']()) return Complex['INFINITY'];
            // Short circuit for real values
            if (z['im'] === 0 && this['im'] === 0) return new Complex(this['re'] * z['re'], 0);
            return new Complex(this['re'] * z['re'] - this['im'] * z['im'], this['re'] * z['im'] + this['im'] * z['re']);
        },
        /**
     * Divides two complex numbers
     *
     * @returns {Complex}
     */ 'div': function(a, b) {
            var z = new Complex(a, b);
            // 0 / 0 = NaN and Infinity / Infinity = NaN
            if (this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']()) return Complex['NAN'];
            // Infinity / 0 = Infinity
            if (this['isInfinite']() || z['isZero']()) return Complex['INFINITY'];
            // 0 / Infinity = 0
            if (this['isZero']() || z['isInfinite']()) return Complex['ZERO'];
            a = this['re'];
            b = this['im'];
            var c = z['re'];
            var d = z['im'];
            var t, x;
            if (0 === d) // Divisor is real
            return new Complex(a / c, b / c);
            if (Math.abs(c) < Math.abs(d)) {
                x = c / d;
                t = c * x + d;
                return new Complex((a * x + b) / t, (b * x - a) / t);
            } else {
                x = d / c;
                t = d * x + c;
                return new Complex((a + b * x) / t, (b - a * x) / t);
            }
        },
        /**
     * Calculate the power of two complex numbers
     *
     * @returns {Complex}
     */ 'pow': function(a, b) {
            var z = new Complex(a, b);
            a = this['re'];
            b = this['im'];
            if (z['isZero']()) return Complex['ONE'];
            // If the exponent is real
            if (z['im'] === 0) {
                if (b === 0 && a > 0) return new Complex(Math.pow(a, z['re']), 0);
                else if (a === 0) switch((z['re'] % 4 + 4) % 4){
                    case 0:
                        return new Complex(Math.pow(b, z['re']), 0);
                    case 1:
                        return new Complex(0, Math.pow(b, z['re']));
                    case 2:
                        return new Complex(-Math.pow(b, z['re']), 0);
                    case 3:
                        return new Complex(0, -Math.pow(b, z['re']));
                }
            }
            /* I couldn't find a good formula, so here is a derivation and optimization
       *
       * z_1^z_2 = (a + bi)^(c + di)
       *         = exp((c + di) * log(a + bi)
       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
       * =>...
       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       *
       * =>...
       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       *
       * =>
       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
       *
       */ if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) return Complex['ZERO'];
            var arg = Math.atan2(b, a);
            var loh = logHypot(a, b);
            a = Math.exp(z['re'] * loh - z['im'] * arg);
            b = z['im'] * loh + z['re'] * arg;
            return new Complex(a * Math.cos(b), a * Math.sin(b));
        },
        /**
     * Calculate the complex square root
     *
     * @returns {Complex}
     */ 'sqrt': function() {
            var a = this['re'];
            var b = this['im'];
            var r = this['abs']();
            var re, im;
            if (a >= 0) {
                if (b === 0) return new Complex(Math.sqrt(a), 0);
                re = 0.5 * Math.sqrt(2 * (r + a));
            } else re = Math.abs(b) / Math.sqrt(2 * (r - a));
            if (a <= 0) im = 0.5 * Math.sqrt(2 * (r - a));
            else im = Math.abs(b) / Math.sqrt(2 * (r + a));
            return new Complex(re, b < 0 ? -im : im);
        },
        /**
     * Calculate the complex exponent
     *
     * @returns {Complex}
     */ 'exp': function() {
            var tmp = Math.exp(this['re']);
            this['im'];
            return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));
        },
        /**
     * Calculate the complex exponent and subtracts one.
     *
     * This may be more accurate than `Complex(x).exp().sub(1)` if
     * `x` is small.
     *
     * @returns {Complex}
     */ 'expm1': function() {
            /**
       * exp(a + i*b) - 1
       = exp(a) * (cos(b) + j*sin(b)) - 1
       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
       */ var a = this['re'];
            var b = this['im'];
            return new Complex(Math.expm1(a) * Math.cos(b) + cosm1(b), Math.exp(a) * Math.sin(b));
        },
        /**
     * Calculate the natural log
     *
     * @returns {Complex}
     */ 'log': function() {
            var a = this['re'];
            var b = this['im'];
            return new Complex(logHypot(a, b), Math.atan2(b, a));
        },
        /**
     * Calculate the magnitude of the complex number
     *
     * @returns {number}
     */ 'abs': function() {
            return hypot(this['re'], this['im']);
        },
        /**
     * Calculate the angle of the complex number
     *
     * @returns {number}
     */ 'arg': function() {
            return Math.atan2(this['im'], this['re']);
        },
        /**
     * Calculate the sine of the complex number
     *
     * @returns {Complex}
     */ 'sin': function() {
            // sin(c) = (e^b - e^(-b)) / (2i)
            var a = this['re'];
            var b = this['im'];
            return new Complex(Math.sin(a) * cosh(b), Math.cos(a) * sinh(b));
        },
        /**
     * Calculate the cosine
     *
     * @returns {Complex}
     */ 'cos': function() {
            // cos(z) = (e^b + e^(-b)) / 2
            var a = this['re'];
            var b = this['im'];
            return new Complex(Math.cos(a) * cosh(b), -Math.sin(a) * sinh(b));
        },
        /**
     * Calculate the tangent
     *
     * @returns {Complex}
     */ 'tan': function() {
            // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))
            var a = 2 * this['re'];
            var b = 2 * this['im'];
            var d = Math.cos(a) + cosh(b);
            return new Complex(Math.sin(a) / d, sinh(b) / d);
        },
        /**
     * Calculate the cotangent
     *
     * @returns {Complex}
     */ 'cot': function() {
            // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))
            var a = 2 * this['re'];
            var b = 2 * this['im'];
            var d = Math.cos(a) - cosh(b);
            return new Complex(-Math.sin(a) / d, sinh(b) / d);
        },
        /**
     * Calculate the secant
     *
     * @returns {Complex}
     */ 'sec': function() {
            // sec(c) = 2 / (e^(ci) + e^(-ci))
            var a = this['re'];
            var b = this['im'];
            var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
            return new Complex(Math.cos(a) * cosh(b) / d, Math.sin(a) * sinh(b) / d);
        },
        /**
     * Calculate the cosecans
     *
     * @returns {Complex}
     */ 'csc': function() {
            // csc(c) = 2i / (e^(ci) - e^(-ci))
            var a = this['re'];
            var b = this['im'];
            var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
            return new Complex(Math.sin(a) * cosh(b) / d, -Math.cos(a) * sinh(b) / d);
        },
        /**
     * Calculate the complex arcus sinus
     *
     * @returns {Complex}
     */ 'asin': function() {
            // asin(c) = -i * log(ci + sqrt(1 - c^2))
            var a = this['re'];
            var b = this['im'];
            var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
            var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
            return new Complex(t2['im'], -t2['re']);
        },
        /**
     * Calculate the complex arcus cosinus
     *
     * @returns {Complex}
     */ 'acos': function() {
            // acos(c) = i * log(c - i * sqrt(1 - c^2))
            var a = this['re'];
            var b = this['im'];
            var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
            var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
            return new Complex(Math.PI / 2 - t2['im'], t2['re']);
        },
        /**
     * Calculate the complex arcus tangent
     *
     * @returns {Complex}
     */ 'atan': function() {
            // atan(c) = i / 2 log((i + x) / (i - x))
            var a = this['re'];
            var b = this['im'];
            if (a === 0) {
                if (b === 1) return new Complex(0, Infinity);
                if (b === -1) return new Complex(0, -Infinity);
            }
            var d = a * a + (1 - b) * (1 - b);
            var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();
            return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
        },
        /**
     * Calculate the complex arcus cotangent
     *
     * @returns {Complex}
     */ 'acot': function() {
            // acot(c) = i / 2 log((c - i) / (c + i))
            var a = this['re'];
            var b = this['im'];
            if (b === 0) return new Complex(Math.atan2(1, a), 0);
            var d = a * a + b * b;
            return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();
        },
        /**
     * Calculate the complex arcus secant
     *
     * @returns {Complex}
     */ 'asec': function() {
            // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))
            var a = this['re'];
            var b = this['im'];
            if (a === 0 && b === 0) return new Complex(0, Infinity);
            var d = a * a + b * b;
            return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();
        },
        /**
     * Calculate the complex arcus cosecans
     *
     * @returns {Complex}
     */ 'acsc': function() {
            // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))
            var a = this['re'];
            var b = this['im'];
            if (a === 0 && b === 0) return new Complex(Math.PI / 2, Infinity);
            var d = a * a + b * b;
            return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();
        },
        /**
     * Calculate the complex sinh
     *
     * @returns {Complex}
     */ 'sinh': function() {
            // sinh(c) = (e^c - e^-c) / 2
            var a = this['re'];
            var b = this['im'];
            return new Complex(sinh(a) * Math.cos(b), cosh(a) * Math.sin(b));
        },
        /**
     * Calculate the complex cosh
     *
     * @returns {Complex}
     */ 'cosh': function() {
            // cosh(c) = (e^c + e^-c) / 2
            var a = this['re'];
            var b = this['im'];
            return new Complex(cosh(a) * Math.cos(b), sinh(a) * Math.sin(b));
        },
        /**
     * Calculate the complex tanh
     *
     * @returns {Complex}
     */ 'tanh': function() {
            // tanh(c) = (e^c - e^-c) / (e^c + e^-c)
            var a = 2 * this['re'];
            var b = 2 * this['im'];
            var d = cosh(a) + Math.cos(b);
            return new Complex(sinh(a) / d, Math.sin(b) / d);
        },
        /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */ 'coth': function() {
            // coth(c) = (e^c + e^-c) / (e^c - e^-c)
            var a = 2 * this['re'];
            var b = 2 * this['im'];
            var d = cosh(a) - Math.cos(b);
            return new Complex(sinh(a) / d, -Math.sin(b) / d);
        },
        /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */ 'csch': function() {
            // csch(c) = 2 / (e^c - e^-c)
            var a = this['re'];
            var b = this['im'];
            var d = Math.cos(2 * b) - cosh(2 * a);
            return new Complex(-2 * sinh(a) * Math.cos(b) / d, 2 * cosh(a) * Math.sin(b) / d);
        },
        /**
     * Calculate the complex sech
     *
     * @returns {Complex}
     */ 'sech': function() {
            // sech(c) = 2 / (e^c + e^-c)
            var a = this['re'];
            var b = this['im'];
            var d = Math.cos(2 * b) + cosh(2 * a);
            return new Complex(2 * cosh(a) * Math.cos(b) / d, -2 * sinh(a) * Math.sin(b) / d);
        },
        /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */ 'asinh': function() {
            // asinh(c) = log(c + sqrt(c^2 + 1))
            var tmp = this['im'];
            this['im'] = -this['re'];
            this['re'] = tmp;
            var res = this['asin']();
            this['re'] = -this['im'];
            this['im'] = tmp;
            tmp = res['re'];
            res['re'] = -res['im'];
            res['im'] = tmp;
            return res;
        },
        /**
     * Calculate the complex acosh
     *
     * @returns {Complex}
     */ 'acosh': function() {
            // acosh(c) = log(c + sqrt(c^2 - 1))
            var res = this['acos']();
            if (res['im'] <= 0) {
                var tmp = res['re'];
                res['re'] = -res['im'];
                res['im'] = tmp;
            } else {
                var tmp = res['im'];
                res['im'] = -res['re'];
                res['re'] = tmp;
            }
            return res;
        },
        /**
     * Calculate the complex atanh
     *
     * @returns {Complex}
     */ 'atanh': function() {
            // atanh(c) = log((1+c) / (1-c)) / 2
            var a = this['re'];
            var b = this['im'];
            var noIM = a > 1 && b === 0;
            var oneMinus = 1 - a;
            var onePlus = 1 + a;
            var d = oneMinus * oneMinus + b * b;
            var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);
            var temp = x['re'];
            x['re'] = logHypot(x['re'], x['im']) / 2;
            x['im'] = Math.atan2(x['im'], temp) / 2;
            if (noIM) x['im'] = -x['im'];
            return x;
        },
        /**
     * Calculate the complex acoth
     *
     * @returns {Complex}
     */ 'acoth': function() {
            // acoth(c) = log((c+1) / (c-1)) / 2
            var a = this['re'];
            var b = this['im'];
            if (a === 0 && b === 0) return new Complex(0, Math.PI / 2);
            var d = a * a + b * b;
            return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();
        },
        /**
     * Calculate the complex acsch
     *
     * @returns {Complex}
     */ 'acsch': function() {
            // acsch(c) = log((1+sqrt(1+c^2))/c)
            var a = this['re'];
            var b = this['im'];
            if (b === 0) return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
            var d = a * a + b * b;
            return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();
        },
        /**
     * Calculate the complex asech
     *
     * @returns {Complex}
     */ 'asech': function() {
            // asech(c) = log((1+sqrt(1-c^2))/c)
            var a = this['re'];
            var b = this['im'];
            if (this['isZero']()) return Complex['INFINITY'];
            var d = a * a + b * b;
            return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();
        },
        /**
     * Calculate the complex inverse 1/z
     *
     * @returns {Complex}
     */ 'inverse': function() {
            // 1 / 0 = Infinity and 1 / Infinity = 0
            if (this['isZero']()) return Complex['INFINITY'];
            if (this['isInfinite']()) return Complex['ZERO'];
            var a = this['re'];
            var b = this['im'];
            var d = a * a + b * b;
            return new Complex(a / d, -b / d);
        },
        /**
     * Returns the complex conjugate
     *
     * @returns {Complex}
     */ 'conjugate': function() {
            return new Complex(this['re'], -this['im']);
        },
        /**
     * Gets the negated complex number
     *
     * @returns {Complex}
     */ 'neg': function() {
            return new Complex(-this['re'], -this['im']);
        },
        /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */ 'ceil': function(places) {
            places = Math.pow(10, places || 0);
            return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);
        },
        /**
     * Floors the actual complex number
     *
     * @returns {Complex}
     */ 'floor': function(places) {
            places = Math.pow(10, places || 0);
            return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);
        },
        /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */ 'round': function(places) {
            places = Math.pow(10, places || 0);
            return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);
        },
        /**
     * Compares two complex numbers
     *
     * **Note:** new Complex(Infinity).equals(Infinity) === false
     *
     * @returns {boolean}
     */ 'equals': function(a, b) {
            var z = new Complex(a, b);
            return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
        },
        /**
     * Clones the actual object
     *
     * @returns {Complex}
     */ 'clone': function() {
            return new Complex(this['re'], this['im']);
        },
        /**
     * Gets a string of the actual complex number
     *
     * @returns {string}
     */ 'toString': function() {
            var a = this['re'];
            var b = this['im'];
            var ret = "";
            if (this['isNaN']()) return 'NaN';
            if (this['isInfinite']()) return 'Infinity';
            if (Math.abs(a) < Complex['EPSILON']) a = 0;
            if (Math.abs(b) < Complex['EPSILON']) b = 0;
            // If is real number
            if (b === 0) return ret + a;
            if (a !== 0) {
                ret += a;
                ret += " ";
                if (b < 0) {
                    b = -b;
                    ret += "-";
                } else ret += "+";
                ret += " ";
            } else if (b < 0) {
                b = -b;
                ret += "-";
            }
            if (1 !== b) ret += b;
            return ret + "i";
        },
        /**
     * Returns the actual number as a vector
     *
     * @returns {Array}
     */ 'toVector': function() {
            return [
                this['re'],
                this['im']
            ];
        },
        /**
     * Returns the actual real value of the current object
     *
     * @returns {number|null}
     */ 'valueOf': function() {
            if (this['im'] === 0) return this['re'];
            return null;
        },
        /**
     * Determines whether a complex number is not on the Riemann sphere.
     *
     * @returns {boolean}
     */ 'isNaN': function() {
            return isNaN(this['re']) || isNaN(this['im']);
        },
        /**
     * Determines whether or not a complex number is at the zero pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */ 'isZero': function() {
            return this['im'] === 0 && this['re'] === 0;
        },
        /**
     * Determines whether a complex number is not at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */ 'isFinite': function() {
            return isFinite(this['re']) && isFinite(this['im']);
        },
        /**
     * Determines whether or not a complex number is at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */ 'isInfinite': function() {
            return !(this['isNaN']() || this['isFinite']());
        }
    };
    Complex['ZERO'] = new Complex(0, 0);
    Complex['ONE'] = new Complex(1, 0);
    Complex['I'] = new Complex(0, 1);
    Complex['PI'] = new Complex(Math.PI, 0);
    Complex['E'] = new Complex(Math.E, 0);
    Complex['INFINITY'] = new Complex(Infinity, Infinity);
    Complex['NAN'] = new Complex(NaN, NaN);
    Complex['EPSILON'] = 0.000000000000001;
    if (typeof define === 'function' && define['amd']) define([], function() {
        return Complex;
    });
    else if (typeof exports === 'object') {
        Object.defineProperty(Complex, "__esModule", {
            'value': true
        });
        Complex['default'] = Complex;
        Complex['Complex'] = Complex;
        module['exports'] = Complex;
    } else root['Complex'] = Complex;
})(this);

},{}],"6YoiI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFractionClass", ()=>createFractionClass
);
var _fractionJs = require("fraction.js");
var _fractionJsDefault = parcelHelpers.interopDefault(_fractionJs);
var _factoryJs = require("../../utils/factory.js");
var name = 'Fraction';
var dependencies = [];
var createFractionClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, ()=>{
    /**
   * Attach type information
   */ _fractionJsDefault.default.prototype.type = 'Fraction';
    _fractionJsDefault.default.prototype.isFraction = true;
    /**
   * Get a JSON representation of a Fraction containing type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
   */ _fractionJsDefault.default.prototype.toJSON = function() {
        return {
            mathjs: 'Fraction',
            n: this.s * this.n,
            d: this.d
        };
    };
    /**
   * Instantiate a Fraction from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
   * @return {BigNumber}
   */ _fractionJsDefault.default.fromJSON = function(json) {
        return new _fractionJsDefault.default(json);
    };
    return _fractionJsDefault.default;
}, {
    isClass: true
});

},{"fraction.js":"109Is","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"109Is":[function(require,module,exports) {
/**
 * @license Fraction.js v4.1.2 23/05/2021
 * https://www.xarg.org/2014/03/rational-numbers-in-javascript/
 *
 * Copyright (c) 2021, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/ /**
 *
 * This class offers the possibility to calculate fractions.
 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
 *
 * Array/Object form
 * [ 0 => <nominator>, 1 => <denominator> ]
 * [ n => <nominator>, d => <denominator> ]
 *
 * Integer form
 * - Single integer value
 *
 * Double form
 * - Single double value
 *
 * String form
 * 123.456 - a simple double
 * 123/456 - a string fraction
 * 123.'456' - a double with repeating decimal places
 * 123.(456) - synonym
 * 123.45'6' - a double with repeating last place
 * 123.45(6) - synonym
 *
 * Example:
 *
 * var f = new Fraction("9.4'31'");
 * f.mul([-4, 3]).div(4.9);
 *
 */ (function(root) {
    // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
    // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
    // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
    var MAX_CYCLE_LEN = 2000;
    // Parsed data to avoid calling "new" all the time
    var P = {
        "s": 1,
        "n": 0,
        "d": 1
    };
    function createError(name) {
        function errorConstructor() {
            var temp = Error.apply(this, arguments);
            temp['name'] = this['name'] = name;
            this['stack'] = temp['stack'];
            this['message'] = temp['message'];
        }
        /**
     * Error constructor
     *
     * @constructor
     */ function IntermediateInheritor() {
        }
        IntermediateInheritor.prototype = Error.prototype;
        errorConstructor.prototype = new IntermediateInheritor();
        return errorConstructor;
    }
    var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
    var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');
    function assign(n, s) {
        if (isNaN(n = parseInt(n, 10))) throwInvalidParam();
        return n * s;
    }
    function throwInvalidParam() {
        throw new InvalidParameter();
    }
    function factorize(num) {
        var factors = {
        };
        var n = num;
        var i = 2;
        var s = 4;
        while(s <= n){
            while(n % i === 0){
                n /= i;
                factors[i] = (factors[i] || 0) + 1;
            }
            s += 1 + 2 * i++;
        }
        if (n !== num) {
            if (n > 1) factors[n] = (factors[n] || 0) + 1;
        } else factors[num] = (factors[num] || 0) + 1;
        return factors;
    }
    var parse = function(p1, p2) {
        var n = 0, d = 1, s = 1;
        var v = 0, w = 0, x = 0, y = 1, z = 1;
        var A = 0, B = 1;
        var C = 1, D = 1;
        var N = 10000000;
        var M;
        if (p1 === undefined || p1 === null) ;
        else if (p2 !== undefined) {
            n = p1;
            d = p2;
            s = n * d;
        } else switch(typeof p1){
            case "object":
                if ("d" in p1 && "n" in p1) {
                    n = p1["n"];
                    d = p1["d"];
                    if ("s" in p1) n *= p1["s"];
                } else if (0 in p1) {
                    n = p1[0];
                    if (1 in p1) d = p1[1];
                } else throwInvalidParam();
                s = n * d;
                break;
            case "number":
                if (p1 < 0) {
                    s = p1;
                    p1 = -p1;
                }
                if (p1 % 1 === 0) n = p1;
                else if (p1 > 0) {
                    if (p1 >= 1) {
                        z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                        p1 /= z;
                    }
                    // Using Farey Sequences
                    // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/
                    while(B <= N && D <= N){
                        M = (A + C) / (B + D);
                        if (p1 === M) {
                            if (B + D <= N) {
                                n = A + C;
                                d = B + D;
                            } else if (D > B) {
                                n = C;
                                d = D;
                            } else {
                                n = A;
                                d = B;
                            }
                            break;
                        } else {
                            if (p1 > M) {
                                A += C;
                                B += D;
                            } else {
                                C += A;
                                D += B;
                            }
                            if (B > N) {
                                n = C;
                                d = D;
                            } else {
                                n = A;
                                d = B;
                            }
                        }
                    }
                    n *= z;
                } else if (isNaN(p1) || isNaN(p2)) d = n = NaN;
                break;
            case "string":
                B = p1.match(/\d+|./g);
                if (B === null) throwInvalidParam();
                if (B[A] === '-') {
                    s = -1;
                    A++;
                } else if (B[A] === '+') A++;
                if (B.length === A + 1) w = assign(B[A++], s);
                else if (B[A + 1] === '.' || B[A] === '.') {
                    if (B[A] !== '.') v = assign(B[A++], s);
                    A++;
                    // Check for decimal places
                    if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
                        w = assign(B[A], s);
                        y = Math.pow(10, B[A].length);
                        A++;
                    }
                    // Check for repeating places
                    if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
                        x = assign(B[A + 1], s);
                        z = Math.pow(10, B[A + 1].length) - 1;
                        A += 3;
                    }
                } else if (B[A + 1] === '/' || B[A + 1] === ':') {
                    w = assign(B[A], s);
                    y = assign(B[A + 2], 1);
                    A += 3;
                } else if (B[A + 3] === '/' && B[A + 1] === ' ') {
                    v = assign(B[A], s);
                    w = assign(B[A + 2], s);
                    y = assign(B[A + 4], 1);
                    A += 5;
                }
                if (B.length <= A) {
                    d = y * z;
                    s = /* void */ n = x + d * v + z * w;
                    break;
                }
            default:
                throwInvalidParam();
        }
        if (d === 0) throw new DivisionByZero();
        P["s"] = s < 0 ? -1 : 1;
        P["n"] = Math.abs(n);
        P["d"] = Math.abs(d);
    };
    function modpow(b, e, m) {
        var r = 1;
        for(; e > 0; b = b * b % m, e >>= 1)if (e & 1) r = r * b % m;
        return r;
    }
    function cycleLen(n, d) {
        for(; d % 2 === 0; d /= 2);
        for(; d % 5 === 0; d /= 5);
        if (d === 1) return 0;
        // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
        // 10^(d-1) % d == 1
        // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
        // as we want to translate the numbers to strings.
        var rem = 10 % d;
        var t = 1;
        for(; rem !== 1; t++){
            rem = rem * 10 % d;
            if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
        }
        return t;
    }
    function cycleStart(n, d, len) {
        var rem1 = 1;
        var rem2 = modpow(10, len, d);
        for(var t = 0; t < 300; t++){
            // Solve 10^s == 10^(s+t) (mod d)
            if (rem1 === rem2) return t;
            rem1 = rem1 * 10 % d;
            rem2 = rem2 * 10 % d;
        }
        return 0;
    }
    function gcd(a, b) {
        if (!a) return b;
        if (!b) return a;
        while(true){
            a %= b;
            if (!a) return b;
            b %= a;
            if (!b) return a;
        }
    }
    /**
   * Module constructor
   *
   * @constructor
   * @param {number|Fraction=} a
   * @param {number=} b
   */ function Fraction(a, b) {
        if (!(this instanceof Fraction)) return new Fraction(a, b);
        parse(a, b);
        a = gcd(P["d"], P["n"]); // Abuse variable a
        this["s"] = P["s"];
        this["n"] = P["n"] / a;
        this["d"] = P["d"] / a;
    }
    Fraction.prototype = {
        "s": 1,
        "n": 0,
        "d": 1,
        /**
     * Calculates the absolute value
     *
     * Ex: new Fraction(-4).abs() => 4
     **/ "abs": function() {
            return new Fraction(this["n"], this["d"]);
        },
        /**
     * Inverts the sign of the current fraction
     *
     * Ex: new Fraction(-4).neg() => 4
     **/ "neg": function() {
            return new Fraction(-this["s"] * this["n"], this["d"]);
        },
        /**
     * Adds two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
     **/ "add": function(a, b) {
            parse(a, b);
            return new Fraction(this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
        },
        /**
     * Subtracts two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
     **/ "sub": function(a, b) {
            parse(a, b);
            return new Fraction(this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
        },
        /**
     * Multiplies two rational numbers
     *
     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
     **/ "mul": function(a, b) {
            parse(a, b);
            return new Fraction(this["s"] * P["s"] * this["n"] * P["n"], this["d"] * P["d"]);
        },
        /**
     * Divides two rational numbers
     *
     * Ex: new Fraction("-17.(345)").inverse().div(3)
     **/ "div": function(a, b) {
            parse(a, b);
            return new Fraction(this["s"] * P["s"] * this["n"] * P["d"], this["d"] * P["n"]);
        },
        /**
     * Clones the actual object
     *
     * Ex: new Fraction("-17.(345)").clone()
     **/ "clone": function() {
            return new Fraction(this);
        },
        /**
     * Calculates the modulo of two rational numbers - a more precise fmod
     *
     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
     **/ "mod": function(a, b) {
            if (isNaN(this['n']) || isNaN(this['d'])) return new Fraction(NaN);
            if (a === undefined) return new Fraction(this["s"] * this["n"] % this["d"], 1);
            parse(a, b);
            if (0 === P["n"] && 0 === this["d"]) Fraction(0, 0); // Throw DivisionByZero
            /*
       * First silly attempt, kinda slow
       *
       return that["sub"]({
       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
       "d": num["d"],
       "s": this["s"]
       });*/ /*
       * New attempt: a1 / b1 = a2 / b2 * q + r
       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
       * => (b2 * a1 % a2 * b1) / (b1 * b2)
       */ return new Fraction(this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]), P["d"] * this["d"]);
        },
        /**
     * Calculates the fractional gcd of two rational numbers
     *
     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
     */ "gcd": function(a, b) {
            parse(a, b);
            // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)
            return new Fraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
        },
        /**
     * Calculates the fractional lcm of two rational numbers
     *
     * Ex: new Fraction(5,8).lcm(3,7) => 15
     */ "lcm": function(a, b) {
            parse(a, b);
            // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)
            if (P["n"] === 0 && this["n"] === 0) return new Fraction;
            return new Fraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
        },
        /**
     * Calculates the ceil of a rational number
     *
     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
     **/ "ceil": function(places) {
            places = Math.pow(10, places || 0);
            if (isNaN(this["n"]) || isNaN(this["d"])) return new Fraction(NaN);
            return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
        },
        /**
     * Calculates the floor of a rational number
     *
     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
     **/ "floor": function(places) {
            places = Math.pow(10, places || 0);
            if (isNaN(this["n"]) || isNaN(this["d"])) return new Fraction(NaN);
            return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
        },
        /**
     * Rounds a rational numbers
     *
     * Ex: new Fraction('4.(3)').round() => (4 / 1)
     **/ "round": function(places) {
            places = Math.pow(10, places || 0);
            if (isNaN(this["n"]) || isNaN(this["d"])) return new Fraction(NaN);
            return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
        },
        /**
     * Gets the inverse of the fraction, means numerator and denominator are exchanged
     *
     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
     **/ "inverse": function() {
            return new Fraction(this["s"] * this["d"], this["n"]);
        },
        /**
     * Calculates the fraction to some rational exponent, if possible
     *
     * Ex: new Fraction(-1,2).pow(-3) => -8
     */ "pow": function(a, b) {
            parse(a, b);
            // Trivial case when exp is an integer
            if (P['d'] === 1) {
                if (P['s'] < 0) return new Fraction(Math.pow(this['s'] * this["d"], P['n']), Math.pow(this["n"], P['n']));
                else return new Fraction(Math.pow(this['s'] * this["n"], P['n']), Math.pow(this["d"], P['n']));
            }
            // Negative roots become complex
            //     (-a/b)^(c/d) = x
            // <=> (-1)^(c/d) * (a/b)^(c/d) = x
            // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°
            // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )
            // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.
            if (this['s'] < 0) return null;
            // Now prime factor n and d
            var N = factorize(this['n']);
            var D = factorize(this['d']);
            // Exponentiate and take root for n and d individually
            var n = 1;
            var d = 1;
            for(var k in N){
                if (k === '1') continue;
                if (k === '0') {
                    n = 0;
                    break;
                }
                N[k] *= P['n'];
                if (N[k] % P['d'] === 0) N[k] /= P['d'];
                else return null;
                n *= Math.pow(k, N[k]);
            }
            for(var k in D){
                if (k === '1') continue;
                D[k] *= P['n'];
                if (D[k] % P['d'] === 0) D[k] /= P['d'];
                else return null;
                d *= Math.pow(k, D[k]);
            }
            if (P['s'] < 0) return new Fraction(d, n);
            return new Fraction(n, d);
        },
        /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/ "equals": function(a, b) {
            parse(a, b);
            return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
        },
        /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/ "compare": function(a, b) {
            parse(a, b);
            var t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
            return (0 < t) - (t < 0);
        },
        "simplify": function(eps) {
            // First naive implementation, needs improvement
            if (isNaN(this['n']) || isNaN(this['d'])) return this;
            var cont = this['abs']()['toContinued']();
            eps = eps || 0.001;
            function rec(a) {
                if (a.length === 1) return new Fraction(a[0]);
                return rec(a.slice(1))['inverse']()['add'](a[0]);
            }
            for(var i = 0; i < cont.length; i++){
                var tmp = rec(cont.slice(0, i + 1));
                if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) return tmp['mul'](this['s']);
            }
            return this;
        },
        /**
     * Check if two rational numbers are divisible
     *
     * Ex: new Fraction(19.6).divisible(1.5);
     */ "divisible": function(a, b) {
            parse(a, b);
            return !(!(P["n"] * this["d"]) || this["n"] * P["d"] % (P["n"] * this["d"]));
        },
        /**
     * Returns a decimal representation of the fraction
     *
     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
     **/ 'valueOf': function() {
            return this["s"] * this["n"] / this["d"];
        },
        /**
     * Returns a string-fraction representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
     **/ 'toFraction': function(excludeWhole) {
            var whole, str = "";
            var n = this["n"];
            var d = this["d"];
            if (this["s"] < 0) str += '-';
            if (d === 1) str += n;
            else {
                if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
                    str += whole;
                    str += " ";
                    n %= d;
                }
                str += n;
                str += '/';
                str += d;
            }
            return str;
        },
        /**
     * Returns a latex representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
     **/ 'toLatex': function(excludeWhole) {
            var whole, str = "";
            var n = this["n"];
            var d = this["d"];
            if (this["s"] < 0) str += '-';
            if (d === 1) str += n;
            else {
                if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
                    str += whole;
                    n %= d;
                }
                str += "\\frac{";
                str += n;
                str += '}{';
                str += d;
                str += '}';
            }
            return str;
        },
        /**
     * Returns an array of continued fraction elements
     *
     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
     */ 'toContinued': function() {
            var t;
            var a = this['n'];
            var b = this['d'];
            var res = [];
            if (isNaN(a) || isNaN(b)) return res;
            do {
                res.push(Math.floor(a / b));
                t = a % b;
                a = b;
                b = t;
            }while (a !== 1)
            return res;
        },
        /**
     * Creates a string representation of a fraction with all digits
     *
     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
     **/ 'toString': function(dec) {
            var g;
            var N = this["n"];
            var D = this["d"];
            if (isNaN(N) || isNaN(D)) return "NaN";
            dec = dec || 15; // 15 = decimal places when no repetation
            var cycLen = cycleLen(N, D); // Cycle length
            var cycOff = cycleStart(N, D, cycLen); // Cycle start
            var str = this['s'] === -1 ? "-" : "";
            str += N / D | 0;
            N %= D;
            N *= 10;
            if (N) str += ".";
            if (cycLen) {
                for(var i = cycOff; i--;){
                    str += N / D | 0;
                    N %= D;
                    N *= 10;
                }
                str += "(";
                for(var i = cycLen; i--;){
                    str += N / D | 0;
                    N %= D;
                    N *= 10;
                }
                str += ")";
            } else for(var i = dec; N && i--;){
                str += N / D | 0;
                N %= D;
                N *= 10;
            }
            return str;
        }
    };
    if (typeof define === "function" && define["amd"]) define([], function() {
        return Fraction;
    });
    else if (typeof exports === "object") {
        Object.defineProperty(Fraction, "__esModule", {
            'value': true
        });
        Fraction['default'] = Fraction;
        Fraction['Fraction'] = Fraction;
        module['exports'] = Fraction;
    } else root['Fraction'] = Fraction;
})(this);

},{}],"eUTKe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRangeClass", ()=>createRangeClass
);
var _isJs = require("../../utils/is.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'Range';
var dependencies = [];
var createRangeClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, ()=>{
    /**
   * Create a range. A range has a start, step, and end, and contains functions
   * to iterate over the range.
   *
   * A range can be constructed as:
   *
   *     const range = new Range(start, end)
   *     const range = new Range(start, end, step)
   *
   * To get the result of the range:
   *     range.forEach(function (x) {
   *         console.log(x)
   *     })
   *     range.map(function (x) {
   *         return math.sin(x)
   *     })
   *     range.toArray()
   *
   * Example usage:
   *
   *     const c = new Range(2, 6)       // 2:1:5
   *     c.toArray()                     // [2, 3, 4, 5]
   *     const d = new Range(2, -3, -1)  // 2:-1:-2
   *     d.toArray()                     // [2, 1, 0, -1, -2]
   *
   * @class Range
   * @constructor Range
   * @param {number} start  included lower bound
   * @param {number} end    excluded upper bound
   * @param {number} [step] step size, default value is 1
   */ function Range(start, end, step) {
        if (!(this instanceof Range)) throw new SyntaxError('Constructor must be called with the new operator');
        var hasStart = start !== null && start !== undefined;
        var hasEnd = end !== null && end !== undefined;
        var hasStep = step !== null && step !== undefined;
        if (hasStart) {
            if (_isJs.isBigNumber(start)) start = start.toNumber();
            else if (typeof start !== 'number') throw new TypeError('Parameter start must be a number');
        }
        if (hasEnd) {
            if (_isJs.isBigNumber(end)) end = end.toNumber();
            else if (typeof end !== 'number') throw new TypeError('Parameter end must be a number');
        }
        if (hasStep) {
            if (_isJs.isBigNumber(step)) step = step.toNumber();
            else if (typeof step !== 'number') throw new TypeError('Parameter step must be a number');
        }
        this.start = hasStart ? parseFloat(start) : 0;
        this.end = hasEnd ? parseFloat(end) : 0;
        this.step = hasStep ? parseFloat(step) : 1;
    }
    /**
   * Attach type information
   */ Range.prototype.type = 'Range';
    Range.prototype.isRange = true;
    /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @memberof Range
   * @param {string} str
   * @return {Range | null} range
   */ Range.parse = function(str) {
        if (typeof str !== 'string') return null;
        var args = str.split(':');
        var nums = args.map(function(arg) {
            return parseFloat(arg);
        });
        var invalid = nums.some(function(num) {
            return isNaN(num);
        });
        if (invalid) return null;
        switch(nums.length){
            case 2:
                return new Range(nums[0], nums[1]);
            case 3:
                return new Range(nums[0], nums[2], nums[1]);
            default:
                return null;
        }
    };
    /**
   * Create a clone of the range
   * @return {Range} clone
   */ Range.prototype.clone = function() {
        return new Range(this.start, this.end, this.step);
    };
    /**
   * Retrieve the size of the range.
   * Returns an array containing one number, the number of elements in the range.
   * @memberof Range
   * @returns {number[]} size
   */ Range.prototype.size = function() {
        var len = 0;
        var start = this.start;
        var step = this.step;
        var end = this.end;
        var diff = end - start;
        if (_numberJs.sign(step) === _numberJs.sign(diff)) len = Math.ceil(diff / step);
        else if (diff === 0) len = 0;
        if (isNaN(len)) len = 0;
        return [
            len
        ];
    };
    /**
   * Calculate the minimum value in the range
   * @memberof Range
   * @return {number | undefined} min
   */ Range.prototype.min = function() {
        var size = this.size()[0];
        if (size > 0) {
            if (this.step > 0) // positive step
            return this.start;
            else // negative step
            return this.start + (size - 1) * this.step;
        } else return undefined;
    };
    /**
   * Calculate the maximum value in the range
   * @memberof Range
   * @return {number | undefined} max
   */ Range.prototype.max = function() {
        var size = this.size()[0];
        if (size > 0) {
            if (this.step > 0) // positive step
            return this.start + (size - 1) * this.step;
            else // negative step
            return this.start;
        } else return undefined;
    };
    /**
   * Execute a callback function for each value in the range.
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Range being traversed.
   */ Range.prototype.forEach = function(callback) {
        var x = this.start;
        var step = this.step;
        var end = this.end;
        var i = 0;
        if (step > 0) while(x < end){
            callback(x, [
                i
            ], this);
            x += step;
            i++;
        }
        else if (step < 0) while(x > end){
            callback(x, [
                i
            ], this);
            x += step;
            i++;
        }
    };
    /**
   * Execute a callback function for each value in the Range, and return the
   * results as an array
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @returns {Array} array
   */ Range.prototype.map = function(callback) {
        var array = [];
        this.forEach(function(value, index, obj) {
            array[index[0]] = callback(value, index, obj);
        });
        return array;
    };
    /**
   * Create an Array with a copy of the Ranges data
   * @memberof Range
   * @returns {Array} array
   */ Range.prototype.toArray = function() {
        var array = [];
        this.forEach(function(value, index) {
            array[index[0]] = value;
        });
        return array;
    };
    /**
   * Get the primitive value of the Range, a one dimensional array
   * @memberof Range
   * @returns {Array} array
   */ Range.prototype.valueOf = function() {
        // TODO: implement a caching mechanism for range.valueOf()
        return this.toArray();
    };
    /**
   * Get a string representation of the range, with optional formatting options.
   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
   * @memberof Range
   * @param {Object | number | function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */ Range.prototype.format = function(options) {
        var str = _numberJs.format(this.start, options);
        if (this.step !== 1) str += ':' + _numberJs.format(this.step, options);
        str += ':' + _numberJs.format(this.end, options);
        return str;
    };
    /**
   * Get a string representation of the range.
   * @memberof Range
   * @returns {string}
   */ Range.prototype.toString = function() {
        return this.format();
    };
    /**
   * Get a JSON representation of the range
   * @memberof Range
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   */ Range.prototype.toJSON = function() {
        return {
            mathjs: 'Range',
            start: this.start,
            end: this.end,
            step: this.step
        };
    };
    /**
   * Instantiate a Range from a JSON object
   * @memberof Range
   * @param {Object} json A JSON object structured as:
   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   * @return {Range}
   */ Range.fromJSON = function(json) {
        return new Range(json.start, json.end, json.step);
    };
    return Range;
}, {
    isClass: true
});

},{"../../utils/is.js":"iwdlF","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iBkrr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMatrixClass", ()=>createMatrixClass
);
var _factoryJs = require("../../utils/factory.js");
var name = 'Matrix';
var dependencies = [];
var createMatrixClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, ()=>{
    /**
   * @constructor Matrix
   *
   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
   * array. A matrix can be constructed as:
   *
   *     let matrix = math.matrix(data)
   *
   * Matrix contains the functions to resize, get and set values, get the size,
   * clone the matrix and to convert the matrix to a vector, array, or scalar.
   * Furthermore, one can iterate over the matrix using map and forEach.
   * The internal Array of the Matrix can be accessed using the function valueOf.
   *
   * Example usage:
   *
   *     let matrix = math.matrix([[1, 2], [3, 4]])
   *     matix.size()              // [2, 2]
   *     matrix.resize([3, 2], 5)
   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
   *
   */ function Matrix() {
        if (!(this instanceof Matrix)) throw new SyntaxError('Constructor must be called with the new operator');
    }
    /**
   * Attach type information
   */ Matrix.prototype.type = 'Matrix';
    Matrix.prototype.isMatrix = true;
    /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @return {string}           The storage format.
   */ Matrix.prototype.storage = function() {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke storage on a Matrix interface');
    };
    /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @return {string}           The datatype.
   */ Matrix.prototype.datatype = function() {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke datatype on a Matrix interface');
    };
    /**
   * Create a new Matrix With the type of the current matrix instance
   * @param {Array | Object} data
   * @param {string} [datatype]
   */ Matrix.prototype.create = function(data, datatype) {
        throw new Error('Cannot invoke create on a Matrix interface');
    };
    /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */ Matrix.prototype.subset = function(index, replacement, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke subset on a Matrix interface');
    };
    /**
   * Get a single element from the matrix.
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */ Matrix.prototype.get = function(index) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke get on a Matrix interface');
    };
    /**
   * Replace a single element in the matrix.
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {Matrix} self
   */ Matrix.prototype.set = function(index, value, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke set on a Matrix interface');
    };
    /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */ Matrix.prototype.resize = function(size, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke resize on a Matrix interface');
    };
    /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */ Matrix.prototype.reshape = function(size, defaultValue) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke reshape on a Matrix interface');
    };
    /**
   * Create a clone of the matrix
   * @return {Matrix} clone
   */ Matrix.prototype.clone = function() {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke clone on a Matrix interface');
    };
    /**
   * Retrieve the size of the matrix.
   * @returns {number[]} size
   */ Matrix.prototype.size = function() {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke size on a Matrix interface');
    };
    /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {Matrix} matrix
   */ Matrix.prototype.map = function(callback, skipZeros) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke map on a Matrix interface');
    };
    /**
   * Execute a callback function on each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */ Matrix.prototype.forEach = function(callback) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke forEach on a Matrix interface');
    };
    /**
   * Iterate over the matrix elements
   * @return {Iterable<{ value, index: number[] }>}
   */ Matrix.prototype[Symbol.iterator] = function() {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot iterate a Matrix interface');
    };
    /**
   * Create an Array with a copy of the data of the Matrix
   * @returns {Array} array
   */ Matrix.prototype.toArray = function() {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke toArray on a Matrix interface');
    };
    /**
   * Get the primitive value of the Matrix: a multidimensional array
   * @returns {Array} array
   */ Matrix.prototype.valueOf = function() {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke valueOf on a Matrix interface');
    };
    /**
   * Get a string representation of the matrix, with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */ Matrix.prototype.format = function(options) {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke format on a Matrix interface');
    };
    /**
   * Get a string representation of the matrix
   * @returns {string} str
   */ Matrix.prototype.toString = function() {
        // must be implemented by each of the Matrix implementations
        throw new Error('Cannot invoke toString on a Matrix interface');
    };
    return Matrix;
}, {
    isClass: true
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a2m9u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDenseMatrixClass", ()=>createDenseMatrixClass
);
var _isJs = require("../../utils/is.js");
var _arrayJs = require("../../utils/array.js");
var _stringJs = require("../../utils/string.js");
var _numberJs = require("../../utils/number.js");
var _objectJs = require("../../utils/object.js");
var _dimensionErrorJs = require("../../error/DimensionError.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'DenseMatrix';
var dependencies = [
    'Matrix'
];
var createDenseMatrixClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Matrix  } = _ref;
    /**
   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
   * @class DenseMatrix
   * @enum {{ value, index: number[] }}
   */ function DenseMatrix(data, datatype) {
        if (!(this instanceof DenseMatrix)) throw new SyntaxError('Constructor must be called with the new operator');
        if (datatype && !_isJs.isString(datatype)) throw new Error('Invalid datatype: ' + datatype);
        if (_isJs.isMatrix(data)) {
            // check data is a DenseMatrix
            if (data.type === 'DenseMatrix') {
                // clone data & size
                this._data = _objectJs.clone(data._data);
                this._size = _objectJs.clone(data._size);
                this._datatype = datatype || data._datatype;
            } else {
                // build data from existing matrix
                this._data = data.toArray();
                this._size = data.size();
                this._datatype = datatype || data._datatype;
            }
        } else if (data && _isJs.isArray(data.data) && _isJs.isArray(data.size)) {
            // initialize fields from JSON representation
            this._data = data.data;
            this._size = data.size; // verify the dimensions of the array
            _arrayJs.validate(this._data, this._size);
            this._datatype = datatype || data.datatype;
        } else if (_isJs.isArray(data)) {
            // replace nested Matrices with Arrays
            this._data = preprocess(data); // get the dimensions of the array
            this._size = _arrayJs.arraySize(this._data); // verify the dimensions of the array, TODO: compute size while processing array
            _arrayJs.validate(this._data, this._size); // data type unknown
            this._datatype = datatype;
        } else if (data) // unsupported type
        throw new TypeError('Unsupported type of data (' + _isJs.typeOf(data) + ')');
        else {
            // nothing provided
            this._data = [];
            this._size = [
                0
            ];
            this._datatype = datatype;
        }
    }
    DenseMatrix.prototype = new Matrix();
    /**
   * Create a new DenseMatrix
   */ DenseMatrix.prototype.createDenseMatrix = function(data, datatype) {
        return new DenseMatrix(data, datatype);
    };
    /**
   * Attach type information
   */ DenseMatrix.prototype.type = 'DenseMatrix';
    DenseMatrix.prototype.isDenseMatrix = true;
    /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf DenseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */ DenseMatrix.prototype.getDataType = function() {
        return _arrayJs.getArrayDataType(this._data, _isJs.typeOf);
    };
    /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()  // retrieve storage format
   *
   * @memberof DenseMatrix
   * @return {string}           The storage format.
   */ DenseMatrix.prototype.storage = function() {
        return 'dense';
    };
    /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()   // retrieve matrix datatype
   *
   * @memberof DenseMatrix
   * @return {string}           The datatype.
   */ DenseMatrix.prototype.datatype = function() {
        return this._datatype;
    };
    /**
   * Create a new DenseMatrix
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */ DenseMatrix.prototype.create = function(data, datatype) {
        return new DenseMatrix(data, datatype);
    };
    /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof DenseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */ DenseMatrix.prototype.subset = function(index, replacement, defaultValue) {
        switch(arguments.length){
            case 1:
                return _get(this, index);
            // intentional fall through
            case 2:
            case 3:
                return _set(this, index, replacement, defaultValue);
            default:
                throw new SyntaxError('Wrong number of arguments');
        }
    };
    /**
   * Get a single element from the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */ DenseMatrix.prototype.get = function(index) {
        if (!_isJs.isArray(index)) throw new TypeError('Array expected');
        if (index.length !== this._size.length) throw new _dimensionErrorJs.DimensionError(index.length, this._size.length);
         // check index
        for(var x = 0; x < index.length; x++)_arrayJs.validateIndex(index[x], this._size[x]);
        var data = this._data;
        for(var i = 0, ii = index.length; i < ii; i++){
            var indexI = index[i];
            _arrayJs.validateIndex(indexI, data.length);
            data = data[indexI];
        }
        return data;
    };
    /**
   * Replace a single element in the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {DenseMatrix} self
   */ DenseMatrix.prototype.set = function(index, value, defaultValue) {
        if (!_isJs.isArray(index)) throw new TypeError('Array expected');
        if (index.length < this._size.length) throw new _dimensionErrorJs.DimensionError(index.length, this._size.length, '<');
        var i1, ii, indexI; // enlarge matrix when needed
        var size = index.map(function(i) {
            return i + 1;
        });
        _fit(this, size, defaultValue); // traverse over the dimensions
        var data = this._data;
        for(i1 = 0, ii = index.length - 1; i1 < ii; i1++){
            indexI = index[i1];
            _arrayJs.validateIndex(indexI, data.length);
            data = data[indexI];
        } // set new value
        indexI = index[index.length - 1];
        _arrayJs.validateIndex(indexI, data.length);
        data[indexI] = value;
        return this;
    };
    /**
   * Get a submatrix of this matrix
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index   Zero-based index
   * @private
   */ function _get(matrix, index) {
        if (!_isJs.isIndex(index)) throw new TypeError('Invalid index');
        var isScalar = index.isScalar();
        if (isScalar) // return a scalar
        return matrix.get(index.min());
        else {
            // validate dimensions
            var size = index.size();
            if (size.length !== matrix._size.length) throw new _dimensionErrorJs.DimensionError(size.length, matrix._size.length);
             // validate if any of the ranges in the index is out of range
            var min = index.min();
            var max = index.max();
            for(var i = 0, ii = matrix._size.length; i < ii; i++){
                _arrayJs.validateIndex(min[i], matrix._size[i]);
                _arrayJs.validateIndex(max[i], matrix._size[i]);
            } // retrieve submatrix
            // TODO: more efficient when creating an empty matrix and setting _data and _size manually
            return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
        }
    }
    /**
   * Recursively get a submatrix of a multi dimensional matrix.
   * Index is not checked for correct number or length of dimensions.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {number} dims   Total number of dimensions
   * @param {number} dim    Current dimension
   * @return {Array} submatrix
   * @private
   */ function _getSubmatrix(data, index, dims, dim) {
        var last = dim === dims - 1;
        var range = index.dimension(dim);
        if (last) return range.map(function(i) {
            _arrayJs.validateIndex(i, data.length);
            return data[i];
        }).valueOf();
        else return range.map(function(i) {
            _arrayJs.validateIndex(i, data.length);
            var child = data[i];
            return _getSubmatrix(child, index, dims, dim + 1);
        }).valueOf();
    }
    /**
   * Replace a submatrix in this matrix
   * Indexes are zero-based.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index
   * @param {DenseMatrix | Array | *} submatrix
   * @param {*} defaultValue          Default value, filled in on new entries when
   *                                  the matrix is resized.
   * @return {DenseMatrix} matrix
   * @private
   */ function _set(matrix, index, submatrix, defaultValue) {
        if (!index || index.isIndex !== true) throw new TypeError('Invalid index');
         // get index size and check whether the index contains a single value
        var iSize = index.size();
        var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed
        var sSize;
        if (_isJs.isMatrix(submatrix)) {
            sSize = submatrix.size();
            submatrix = submatrix.valueOf();
        } else sSize = _arrayJs.arraySize(submatrix);
        if (isScalar) {
            // set a scalar
            // check whether submatrix is a scalar
            if (sSize.length !== 0) throw new TypeError('Scalar expected');
            matrix.set(index.min(), submatrix, defaultValue);
        } else {
            // set a submatrix
            // validate dimensions
            if (iSize.length < matrix._size.length) throw new _dimensionErrorJs.DimensionError(iSize.length, matrix._size.length, '<');
            if (sSize.length < iSize.length) {
                // calculate number of missing outer dimensions
                var i = 0;
                var outer = 0;
                while(iSize[i] === 1 && sSize[i] === 1)i++;
                while(iSize[i] === 1){
                    outer++;
                    i++;
                } // unsqueeze both outer and inner dimensions
                submatrix = _arrayJs.unsqueeze(submatrix, iSize.length, outer, sSize);
            } // check whether the size of the submatrix matches the index size
            if (!_objectJs.deepStrictEqual(iSize, sSize)) throw new _dimensionErrorJs.DimensionError(iSize, sSize, '>');
             // enlarge matrix when needed
            var size = index.max().map(function(i) {
                return i + 1;
            });
            _fit(matrix, size, defaultValue); // insert the sub matrix
            var dims = iSize.length;
            var dim = 0;
            _setSubmatrix(matrix._data, index, submatrix, dims, dim);
        }
        return matrix;
    }
    /**
   * Replace a submatrix of a multi dimensional matrix.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {Array} submatrix
   * @param {number} dims   Total number of dimensions
   * @param {number} dim
   * @private
   */ function _setSubmatrix(data, index, submatrix, dims, dim) {
        var last = dim === dims - 1;
        var range = index.dimension(dim);
        if (last) range.forEach(function(dataIndex, subIndex) {
            _arrayJs.validateIndex(dataIndex);
            data[dataIndex] = submatrix[subIndex[0]];
        });
        else range.forEach(function(dataIndex, subIndex) {
            _arrayJs.validateIndex(dataIndex);
            _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
        });
    }
    /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof DenseMatrix
   * @param {number[] || Matrix} size The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */ DenseMatrix.prototype.resize = function(size, defaultValue, copy) {
        // validate arguments
        if (!_isJs.isCollection(size)) throw new TypeError('Array or Matrix expected');
         // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector
        var sizeArray = size.valueOf().map((value)=>{
            return Array.isArray(value) && value.length === 1 ? value[0] : value;
        }); // matrix to resize
        var m = copy ? this.clone() : this; // resize matrix
        return _resize(m, sizeArray, defaultValue);
    };
    function _resize(matrix, size, defaultValue) {
        // check size
        if (size.length === 0) {
            // first value in matrix
            var v = matrix._data; // go deep
            while(_isJs.isArray(v))v = v[0];
            return v;
        } // resize matrix
        matrix._size = size.slice(0); // copy the array
        matrix._data = _arrayJs.resize(matrix._data, matrix._size, defaultValue); // return matrix
        return matrix;
    }
    /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */ DenseMatrix.prototype.reshape = function(size1, copy) {
        var m = copy ? this.clone() : this;
        m._data = _arrayJs.reshape(m._data, size1);
        var currentLength = m._size.reduce((length, size)=>length * size
        );
        m._size = _arrayJs.processSizesWildcard(size1, currentLength);
        return m;
    };
    /**
   * Enlarge the matrix when it is smaller than given size.
   * If the matrix is larger or equal sized, nothing is done.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix           The matrix to be resized
   * @param {number[]} size
   * @param {*} defaultValue          Default value, filled in on new entries.
   * @private
   */ function _fit(matrix, size, defaultValue) {
        var newSize = matrix._size.slice(0);
        var changed = false; // add dimensions when needed
        while(newSize.length < size.length){
            newSize.push(0);
            changed = true;
        } // enlarge size when needed
        for(var i = 0, ii = size.length; i < ii; i++)if (size[i] > newSize[i]) {
            newSize[i] = size[i];
            changed = true;
        }
        if (changed) // resize only when size is changed
        _resize(matrix, newSize, defaultValue);
    }
    /**
   * Create a clone of the matrix
   * @memberof DenseMatrix
   * @return {DenseMatrix} clone
   */ DenseMatrix.prototype.clone = function() {
        var m = new DenseMatrix({
            data: _objectJs.clone(this._data),
            size: _objectJs.clone(this._size),
            datatype: this._datatype
        });
        return m;
    };
    /**
   * Retrieve the size of the matrix.
   * @memberof DenseMatrix
   * @returns {number[]} size
   */ DenseMatrix.prototype.size = function() {
        return this._size.slice(0); // return a clone of _size
    };
    /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   *
   * @return {DenseMatrix} matrix
   */ DenseMatrix.prototype.map = function(callback) {
        // matrix instance
        var me = this;
        var recurse1 = function recurse(value, index) {
            if (_isJs.isArray(value)) return value.map(function(child, i) {
                return recurse(child, index.concat(i));
            });
            else return callback(value, index, me);
        }; // determine the new datatype when the original matrix has datatype defined
        // TODO: should be done in matrix constructor instead
        var data = recurse1(this._data, []);
        var datatype = this._datatype !== undefined ? _arrayJs.getArrayDataType(data, _isJs.typeOf) : undefined;
        return new DenseMatrix(data, datatype);
    };
    /**
   * Execute a callback function on each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */ DenseMatrix.prototype.forEach = function(callback) {
        // matrix instance
        var me = this;
        var recurse2 = function recurse(value, index) {
            if (_isJs.isArray(value)) value.forEach(function(child, i) {
                recurse(child, index.concat(i));
            });
            else callback(value, index, me);
        };
        recurse2(this._data, []);
    };
    /**
   * Iterate over the matrix elements
   * @return {Iterable<{ value, index: number[] }>}
   */ DenseMatrix.prototype[Symbol.iterator] = function*() {
        var recurse3 = function* recurse(value, index) {
            if (_isJs.isArray(value)) for(var i = 0; i < value.length; i++)yield* recurse(value[i], index.concat(i));
            else yield {
                value,
                index
            };
        };
        yield* recurse3(this._data, []);
    };
    /**
   * Returns an array containing the rows of a 2D matrix
   * @returns {Array<Matrix>}
   */ DenseMatrix.prototype.rows = function() {
        var result = [];
        var s = this.size();
        if (s.length !== 2) throw new TypeError('Rows can only be returned for a 2D matrix.');
        var data = this._data;
        for (var row of data)result.push(new DenseMatrix([
            row
        ], this._datatype));
        return result;
    };
    /**
   * Returns an array containing the columns of a 2D matrix
   * @returns {Array<Matrix>}
   */ DenseMatrix.prototype.columns = function() {
        var _this = this;
        var result = [];
        var s = this.size();
        if (s.length !== 2) throw new TypeError('Rows can only be returned for a 2D matrix.');
        var data = this._data;
        var _loop = function _loop(i) {
            var col = data.map((row)=>[
                    row[i]
                ]
            );
            result.push(new DenseMatrix(col, _this._datatype));
        };
        for(var i = 0; i < s[1]; i++)_loop(i);
        return result;
    };
    /**
   * Create an Array with a copy of the data of the DenseMatrix
   * @memberof DenseMatrix
   * @returns {Array} array
   */ DenseMatrix.prototype.toArray = function() {
        return _objectJs.clone(this._data);
    };
    /**
   * Get the primitive value of the DenseMatrix: a multidimensional array
   * @memberof DenseMatrix
   * @returns {Array} array
   */ DenseMatrix.prototype.valueOf = function() {
        return this._data;
    };
    /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof DenseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */ DenseMatrix.prototype.format = function(options) {
        return _stringJs.format(this._data, options);
    };
    /**
   * Get a string representation of the matrix
   * @memberof DenseMatrix
   * @returns {string} str
   */ DenseMatrix.prototype.toString = function() {
        return _stringJs.format(this._data);
    };
    /**
   * Get a JSON representation of the matrix
   * @memberof DenseMatrix
   * @returns {Object}
   */ DenseMatrix.prototype.toJSON = function() {
        return {
            mathjs: 'DenseMatrix',
            data: this._data,
            size: this._size,
            datatype: this._datatype
        };
    };
    /**
   * Get the kth Matrix diagonal.
   *
   * @memberof DenseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix with the diagonal values.
   */ DenseMatrix.prototype.diagonal = function(k) {
        // validate k if any
        if (k) {
            // convert BigNumber to a number
            if (_isJs.isBigNumber(k)) k = k.toNumber();
             // is must be an integer
            if (!_isJs.isNumber(k) || !_numberJs.isInteger(k)) throw new TypeError('The parameter k must be an integer number');
        } else // default value
        k = 0;
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows & columns
        var rows = this._size[0];
        var columns = this._size[1]; // number diagonal values
        var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix
        var data = []; // loop rows
        for(var i = 0; i < n; i++)data[i] = this._data[i + kSub][i + kSuper];
         // create DenseMatrix
        return new DenseMatrix({
            data: data,
            size: [
                n
            ],
            datatype: this._datatype
        });
    };
    /**
   * Create a diagonal matrix.
   *
   * @memberof DenseMatrix
   * @param {Array} size                     The matrix size.
   * @param {number | Matrix | Array } value The values for the diagonal.
   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]          The default value for non-diagonal
   * @param {string} [datatype]              The datatype for the diagonal
   *
   * @returns {DenseMatrix}
   */ DenseMatrix.diagonal = function(size, value, k, defaultValue) {
        if (!_isJs.isArray(size)) throw new TypeError('Array expected, size parameter');
        if (size.length !== 2) throw new Error('Only two dimensions matrix are supported');
         // map size & validate
        size = size.map(function(s) {
            // check it is a big number
            if (_isJs.isBigNumber(s)) // convert it
            s = s.toNumber();
             // validate arguments
            if (!_isJs.isNumber(s) || !_numberJs.isInteger(s) || s < 1) throw new Error('Size values must be positive integers');
            return s;
        }); // validate k if any
        if (k) {
            // convert BigNumber to a number
            if (_isJs.isBigNumber(k)) k = k.toNumber();
             // is must be an integer
            if (!_isJs.isNumber(k) || !_numberJs.isInteger(k)) throw new TypeError('The parameter k must be an integer number');
        } else // default value
        k = 0;
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows and columns
        var rows = size[0];
        var columns = size[1]; // number of non-zero items
        var n = Math.min(rows - kSub, columns - kSuper); // value extraction function
        var _value; // check value
        if (_isJs.isArray(value)) {
            // validate array
            if (value.length !== n) // number of values in array must be n
            throw new Error('Invalid value array length');
             // define function
            _value = function _value(i) {
                // return value @ i
                return value[i];
            };
        } else if (_isJs.isMatrix(value)) {
            // matrix size
            var ms = value.size(); // validate matrix
            if (ms.length !== 1 || ms[0] !== n) // number of values in array must be n
            throw new Error('Invalid matrix length');
             // define function
            _value = function _value(i) {
                // return value @ i
                return value.get([
                    i
                ]);
            };
        } else // define function
        _value = function _value() {
            // return value
            return value;
        };
         // discover default value if needed
        if (!defaultValue) // check first value in array
        defaultValue = _isJs.isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
         : 0;
         // empty array
        var data = []; // check we need to resize array
        if (size.length > 0) {
            // resize array
            data = _arrayJs.resize(data, size, defaultValue); // fill diagonal
            for(var d = 0; d < n; d++)data[d + kSub][d + kSuper] = _value(d);
        } // create DenseMatrix
        return new DenseMatrix({
            data: data,
            size: [
                rows,
                columns
            ]
        });
    };
    /**
   * Generate a matrix from a JSON object
   * @memberof DenseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {DenseMatrix}
   */ DenseMatrix.fromJSON = function(json) {
        return new DenseMatrix(json);
    };
    /**
   * Swap rows i and j in Matrix.
   *
   * @memberof DenseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */ DenseMatrix.prototype.swapRows = function(i, j) {
        // check index
        if (!_isJs.isNumber(i) || !_numberJs.isInteger(i) || !_isJs.isNumber(j) || !_numberJs.isInteger(j)) throw new Error('Row index must be positive integers');
         // check dimensions
        if (this._size.length !== 2) throw new Error('Only two dimensional matrix is supported');
         // validate index
        _arrayJs.validateIndex(i, this._size[0]);
        _arrayJs.validateIndex(j, this._size[0]); // swap rows
        DenseMatrix._swapRows(i, j, this._data); // return current instance
        return this;
    };
    /**
   * Swap rows i and j in Dense Matrix data structure.
   *
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   * @param {Array} data     Matrix data
   */ DenseMatrix._swapRows = function(i, j, data) {
        // swap values i <-> j
        var vi = data[i];
        data[i] = data[j];
        data[j] = vi;
    };
    /**
   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
   * Matrices. Replaces all nested Matrices with Arrays
   * @memberof DenseMatrix
   * @param {Array} data
   * @return {Array} data
   */ function preprocess(data) {
        for(var i = 0, ii = data.length; i < ii; i++){
            var elem = data[i];
            if (_isJs.isArray(elem)) data[i] = preprocess(elem);
            else if (elem && elem.isMatrix === true) data[i] = preprocess(elem.valueOf());
        }
        return data;
    }
    return DenseMatrix;
}, {
    isClass: true
});

},{"../../utils/is.js":"iwdlF","../../utils/array.js":"3R6c8","../../utils/string.js":"0PPSB","../../utils/number.js":"l1AB8","../../utils/object.js":"eRHhH","../../error/DimensionError.js":"49REC","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kKAv0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createClone", ()=>createClone
);
var _objectJs = require("../../utils/object.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'clone';
var dependencies = [
    'typed'
];
var createClone = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Clone an object. Will make a deep copy of the data.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5)                   // returns number 3.5
   *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world")         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */ return typed(name, {
        any: _objectJs.clone
    });
});

},{"../../utils/object.js":"eRHhH","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a6viI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIsInteger", ()=>createIsInteger
);
var _collectionJs = require("../../utils/collection.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'isInteger';
var dependencies = [
    'typed'
];
var createIsInteger = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2)                     // returns true
   *    math.isInteger(0)                     // returns true
   *    math.isInteger(0.5)                   // returns false
   *    math.isInteger(math.bignumber(500))   // returns true
   *    math.isInteger(math.fraction(4))      // returns true
   *    math.isInteger('3')                   // returns true
   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i')   // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: _numberJs.isInteger,
        // TODO: what to do with isInteger(add(0.1, 0.2))  ?
        BigNumber: function BigNumber(x) {
            return x.isInt();
        },
        Fraction: function Fraction(x) {
            return x.d === 1 && isFinite(x.n);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4hyl2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Test whether an array contains collections
 * @param {Array} array
 * @returns {boolean} Returns true when the array contains one or multiple
 *                    collections (Arrays or Matrices). Returns false otherwise.
 */ parcelHelpers.export(exports, "containsCollections", ()=>containsCollections
);
/**
 * Recursively loop over all elements in a given multi dimensional array
 * and invoke the callback on each of the elements.
 * @param {Array | Matrix} array
 * @param {Function} callback     The callback method is invoked with one
 *                                parameter: the current element in the array
 */ parcelHelpers.export(exports, "deepForEach", ()=>deepForEach
);
/**
 * Execute the callback function element wise for each element in array and any
 * nested array
 * Returns an array with the results
 * @param {Array | Matrix} array
 * @param {Function} callback   The callback is called with two parameters:
 *                              value1 and value2, which contain the current
 *                              element of both arrays.
 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
 *
 * @return {Array | Matrix} res
 */ parcelHelpers.export(exports, "deepMap", ()=>deepMap
);
/**
 * Reduce a given matrix or array to a new matrix or
 * array with one less dimension, applying the given
 * callback in the selected dimension.
 * @param {Array | Matrix} mat
 * @param {number} dim
 * @param {Function} callback
 * @return {Array | Matrix} res
 */ parcelHelpers.export(exports, "reduce", ()=>reduce
);
parcelHelpers.export(exports, "scatter", ()=>scatter
);
var _isJs = require("./is.js");
var _indexErrorJs = require("../error/IndexError.js");
var _arrayJs = require("./array.js");
function containsCollections(array) {
    for(var i = 0; i < array.length; i++){
        if (_isJs.isCollection(array[i])) return true;
    }
    return false;
}
function deepForEach(array, callback) {
    if (_isJs.isMatrix(array)) array = array.valueOf();
    for(var i = 0, ii = array.length; i < ii; i++){
        var value = array[i];
        if (Array.isArray(value)) deepForEach(value, callback);
        else callback(value);
    }
}
function deepMap(array, callback, skipZeros) {
    if (array && typeof array.map === 'function') // TODO: replace array.map with a for loop to improve performance
    return array.map(function(x) {
        return deepMap(x, callback, skipZeros);
    });
    else return callback(array);
}
function reduce(mat, dim, callback) {
    var size = Array.isArray(mat) ? _arrayJs.arraySize(mat) : mat.size();
    if (dim < 0 || dim >= size.length) // TODO: would be more clear when throwing a DimensionError here
    throw new _indexErrorJs.IndexError(dim, size.length);
    if (_isJs.isMatrix(mat)) return mat.create(_reduce(mat.valueOf(), dim, callback));
    else return _reduce(mat, dim, callback);
}
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */ function _reduce(mat, dim, callback) {
    var i, ret, val, tran;
    if (dim <= 0) {
        if (!Array.isArray(mat[0])) {
            val = mat[0];
            for(i = 1; i < mat.length; i++)val = callback(val, mat[i]);
            return val;
        } else {
            tran = _switch(mat);
            ret = [];
            for(i = 0; i < tran.length; i++)ret[i] = _reduce(tran[i], dim - 1, callback);
            return ret;
        }
    } else {
        ret = [];
        for(i = 0; i < mat.length; i++)ret[i] = _reduce(mat[i], dim - 1, callback);
        return ret;
    }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */ function _switch(mat) {
    var I = mat.length;
    var J = mat[0].length;
    var i, j;
    var ret = [];
    for(j = 0; j < J; j++){
        var tmp = [];
        for(i = 0; i < I; i++)tmp.push(mat[i][j]);
        ret.push(tmp);
    }
    return ret;
} // TODO: document function scatter
function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {
    // a arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr; // vars
    var k, k0, k1, i; // check we need to process values (pattern matrix)
    if (x) // values in j
    for(k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++){
        // row
        i = aindex[k]; // check value exists in current j
        if (w[i] !== mark) {
            // i is new entry in j
            w[i] = mark; // add i to pattern of C
            cindex.push(i); // x(i) = A, check we need to call function this time
            if (update) {
                // copy value to workspace calling callback function
                x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row
                u[i] = mark;
            } else // copy value to workspace
            x[i] = avalues[k];
        } else {
            // i exists in C already
            x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row
            u[i] = mark;
        }
    }
    else // values in j
    for(k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++){
        // row
        i = aindex[k]; // check value exists in current j
        if (w[i] !== mark) {
            // i is new entry in j
            w[i] = mark; // add i to pattern of C
            cindex.push(i);
        } else // indicate function was called on current row
        u[i] = mark;
    }
}

},{"./is.js":"iwdlF","../error/IndexError.js":"bCMLn","./array.js":"3R6c8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1AUq5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIsNegative", ()=>createIsNegative
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'isNegative';
var dependencies = [
    'typed'
];
var createIsNegative = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3)                     // returns false
   *    math.isNegative(-2)                    // returns true
   *    math.isNegative(0)                     // returns false
   *    math.isNegative(-0)                    // returns false
   *    math.isNegative(math.bignumber(2))     // returns false
   *    math.isNegative(math.fraction(-2, 5))  // returns true
   *    math.isNegative('-2')                  // returns true
   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: _indexJs.isNegativeNumber,
        BigNumber: function BigNumber(x) {
            return x.isNeg() && !x.isZero() && !x.isNaN();
        },
        Fraction: function Fraction(x) {
            return x.s < 0; // It's enough to decide on the sign
        },
        Unit: function Unit(x) {
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8bgPw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arithmeticJs = require("./arithmetic.js");
parcelHelpers.exportAll(_arithmeticJs, exports);
var _bitwiseJs = require("./bitwise.js");
parcelHelpers.exportAll(_bitwiseJs, exports);
var _combinationsJs = require("./combinations.js");
parcelHelpers.exportAll(_combinationsJs, exports);
var _constantsJs = require("./constants.js");
parcelHelpers.exportAll(_constantsJs, exports);
var _logicalJs = require("./logical.js");
parcelHelpers.exportAll(_logicalJs, exports);
var _relationalJs = require("./relational.js");
parcelHelpers.exportAll(_relationalJs, exports);
var _probabilityJs = require("./probability.js");
parcelHelpers.exportAll(_probabilityJs, exports);
var _trigonometryJs = require("./trigonometry.js");
parcelHelpers.exportAll(_trigonometryJs, exports);
var _utilsJs = require("./utils.js");
parcelHelpers.exportAll(_utilsJs, exports);

},{"./arithmetic.js":"c0xkE","./bitwise.js":"jN9Tc","./combinations.js":"dGBSM","./constants.js":"avqZ5","./logical.js":"1bM4L","./relational.js":"gOZLq","./probability.js":"hJOSB","./trigonometry.js":"a7vdt","./utils.js":"lAnsc","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c0xkE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "absNumber", ()=>absNumber
);
parcelHelpers.export(exports, "addNumber", ()=>addNumber
);
parcelHelpers.export(exports, "subtractNumber", ()=>subtractNumber
);
parcelHelpers.export(exports, "multiplyNumber", ()=>multiplyNumber
);
parcelHelpers.export(exports, "divideNumber", ()=>divideNumber
);
parcelHelpers.export(exports, "unaryMinusNumber", ()=>unaryMinusNumber
);
parcelHelpers.export(exports, "unaryPlusNumber", ()=>unaryPlusNumber
);
parcelHelpers.export(exports, "cbrtNumber", ()=>cbrtNumber
);
parcelHelpers.export(exports, "ceilNumber", ()=>ceilNumber
);
parcelHelpers.export(exports, "cubeNumber", ()=>cubeNumber
);
parcelHelpers.export(exports, "expNumber", ()=>expNumber
);
parcelHelpers.export(exports, "expm1Number", ()=>expm1Number
);
parcelHelpers.export(exports, "fixNumber", ()=>fixNumber
);
parcelHelpers.export(exports, "floorNumber", ()=>floorNumber
);
/**
 * Calculate gcd for numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the greatest common denominator of a and b
 */ parcelHelpers.export(exports, "gcdNumber", ()=>gcdNumber
);
/**
 * Calculate lcm for two numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the least common multiple of a and b
 */ parcelHelpers.export(exports, "lcmNumber", ()=>lcmNumber
);
/**
 * Calculate the logarithm of a value.
 * @param {number} x
 * @return {number}
 */ parcelHelpers.export(exports, "logNumber", ()=>logNumber
);
/**
 * Calculate the 10-base logarithm of a number
 * @param {number} x
 * @return {number}
 */ parcelHelpers.export(exports, "log10Number", ()=>log10Number
);
/**
 * Calculate the 2-base logarithm of a number
 * @param {number} x
 * @return {number}
 */ parcelHelpers.export(exports, "log2Number", ()=>log2Number
);
/**
 * Calculate the natural logarithm of a `number+1`
 * @param {number} x
 * @returns {number}
 */ parcelHelpers.export(exports, "log1pNumber", ()=>log1pNumber
);
/**
 * Calculate the modulus of two numbers
 * @param {number} x
 * @param {number} y
 * @returns {number} res
 * @private
 */ parcelHelpers.export(exports, "modNumber", ()=>modNumber
);
/**
 * Calculate the nth root of a, solve x^root == a
 * http://rosettacode.org/wiki/Nth_root#JavaScript
 * @param {number} a
 * @param {number} root
 * @private
 */ parcelHelpers.export(exports, "nthRootNumber", ()=>nthRootNumber
);
parcelHelpers.export(exports, "signNumber", ()=>signNumber
);
parcelHelpers.export(exports, "sqrtNumber", ()=>sqrtNumber
);
parcelHelpers.export(exports, "squareNumber", ()=>squareNumber
);
/**
 * Calculate xgcd for two numbers
 * @param {number} a
 * @param {number} b
 * @return {number} result
 * @private
 */ parcelHelpers.export(exports, "xgcdNumber", ()=>xgcdNumber
);
/**
 * Calculates the power of x to y, x^y, for two numbers.
 * @param {number} x
 * @param {number} y
 * @return {number} res
 */ parcelHelpers.export(exports, "powNumber", ()=>powNumber
);
/**
 * round a number to the given number of decimals, or to zero if decimals is
 * not provided
 * @param {number} value
 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
 * @return {number} roundedValue
 */ parcelHelpers.export(exports, "roundNumber", ()=>roundNumber
);
/**
 * Calculate the norm of a number, the absolute value.
 * @param {number} x
 * @return {number}
 */ parcelHelpers.export(exports, "normNumber", ()=>normNumber
);
var _numberJs = require("../../utils/number.js");
var n1 = 'number';
var n2 = 'number, number';
function absNumber(a) {
    return Math.abs(a);
}
absNumber.signature = n1;
function addNumber(a, b) {
    return a + b;
}
addNumber.signature = n2;
function subtractNumber(a, b) {
    return a - b;
}
subtractNumber.signature = n2;
function multiplyNumber(a, b) {
    return a * b;
}
multiplyNumber.signature = n2;
function divideNumber(a, b) {
    return a / b;
}
divideNumber.signature = n2;
function unaryMinusNumber(x) {
    return -x;
}
unaryMinusNumber.signature = n1;
function unaryPlusNumber(x) {
    return x;
}
unaryPlusNumber.signature = n1;
function cbrtNumber(x) {
    return _numberJs.cbrt(x);
}
cbrtNumber.signature = n1;
function ceilNumber(x) {
    return Math.ceil(x);
}
ceilNumber.signature = n1;
function cubeNumber(x) {
    return x * x * x;
}
cubeNumber.signature = n1;
function expNumber(x) {
    return Math.exp(x);
}
expNumber.signature = n1;
function expm1Number(x) {
    return _numberJs.expm1(x);
}
expm1Number.signature = n1;
function fixNumber(x) {
    return x > 0 ? Math.floor(x) : Math.ceil(x);
}
fixNumber.signature = n1;
function floorNumber(x) {
    return Math.floor(x);
}
floorNumber.signature = n1;
function gcdNumber(a, b) {
    if (!_numberJs.isInteger(a) || !_numberJs.isInteger(b)) throw new Error('Parameters in function gcd must be integer numbers');
     // https://en.wikipedia.org/wiki/Euclidean_algorithm
    var r;
    while(b !== 0){
        r = a % b;
        a = b;
        b = r;
    }
    return a < 0 ? -a : a;
}
gcdNumber.signature = n2;
function lcmNumber(a, b) {
    if (!_numberJs.isInteger(a) || !_numberJs.isInteger(b)) throw new Error('Parameters in function lcm must be integer numbers');
    if (a === 0 || b === 0) return 0;
     // https://en.wikipedia.org/wiki/Euclidean_algorithm
    // evaluate lcm here inline to reduce overhead
    var t;
    var prod = a * b;
    while(b !== 0){
        t = b;
        b = a % t;
        a = t;
    }
    return Math.abs(prod / a);
}
lcmNumber.signature = n2;
function logNumber(x) {
    return Math.log(x);
}
logNumber.signature = n1;
function log10Number(x) {
    return _numberJs.log10(x);
}
log10Number.signature = n1;
function log2Number(x) {
    return _numberJs.log2(x);
}
log2Number.signature = n1;
function log1pNumber(x) {
    return _numberJs.log1p(x);
}
log1pNumber.signature = n1;
function modNumber(x, y) {
    if (y > 0) // We don't use JavaScript's % operator here as this doesn't work
    // correctly for x < 0 and x === 0
    // see https://en.wikipedia.org/wiki/Modulo_operation
    return x - y * Math.floor(x / y);
    else if (y === 0) return x;
    else // y < 0
    // TODO: implement mod for a negative divisor
    throw new Error('Cannot calculate mod for a negative divisor');
}
modNumber.signature = n2;
function nthRootNumber(a, root) {
    var inv = root < 0;
    if (inv) root = -root;
    if (root === 0) throw new Error('Root must be non-zero');
    if (a < 0 && Math.abs(root) % 2 !== 1) throw new Error('Root must be odd when a is negative.');
     // edge cases zero and infinity
    if (a === 0) return inv ? Infinity : 0;
    if (!isFinite(a)) return inv ? 0 : a;
    var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
    // so (-1) ^ (1/root) = -1
    x = a < 0 ? -x : x;
    return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
// Newton's method has some well-known problems at times:
// https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis
/*
  let x = 1 // Initial guess
  let xPrev = 1
  let i = 0
  const iMax = 10000
  do {
    const delta = (a / Math.pow(x, root - 1) - x) / root
    xPrev = x
    x = x + delta
    i++
  }
  while (xPrev !== x && i < iMax)
   if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge')
  }
   return inv ? 1 / x : x
  */ }
nthRootNumber.signature = n2;
function signNumber(x) {
    return _numberJs.sign(x);
}
signNumber.signature = n1;
function sqrtNumber(x) {
    return Math.sqrt(x);
}
sqrtNumber.signature = n1;
function squareNumber(x) {
    return x * x;
}
squareNumber.signature = n1;
function xgcdNumber(a, b) {
    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var t; // used to swap two variables
    var q; // quotient
    var r; // remainder
    var x = 0;
    var lastx = 1;
    var y = 1;
    var lasty = 0;
    if (!_numberJs.isInteger(a) || !_numberJs.isInteger(b)) throw new Error('Parameters in function xgcd must be integer numbers');
    while(b){
        q = Math.floor(a / b);
        r = a - q * b;
        t = x;
        x = lastx - q * x;
        lastx = t;
        t = y;
        y = lasty - q * y;
        lasty = t;
        a = b;
        b = r;
    }
    var res;
    if (a < 0) res = [
        -a,
        -lastx,
        -lasty
    ];
    else res = [
        a,
        a ? lastx : 0,
        lasty
    ];
    return res;
}
xgcdNumber.signature = n2;
function powNumber(x, y) {
    // x^Infinity === 0 if -1 < x < 1
    // A real number 0 is returned instead of complex(0)
    if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) return 0;
    return Math.pow(x, y);
}
powNumber.signature = n2;
function roundNumber(value) {
    var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return parseFloat(_numberJs.toFixed(value, decimals));
}
roundNumber.signature = n2;
function normNumber(x) {
    return Math.abs(x);
}
normNumber.signature = n1;

},{"../../utils/number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jN9Tc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitAndNumber", ()=>bitAndNumber
);
parcelHelpers.export(exports, "bitNotNumber", ()=>bitNotNumber
);
parcelHelpers.export(exports, "bitOrNumber", ()=>bitOrNumber
);
parcelHelpers.export(exports, "bitXorNumber", ()=>bitXorNumber
);
parcelHelpers.export(exports, "leftShiftNumber", ()=>leftShiftNumber
);
parcelHelpers.export(exports, "rightArithShiftNumber", ()=>rightArithShiftNumber
);
parcelHelpers.export(exports, "rightLogShiftNumber", ()=>rightLogShiftNumber
);
var _numberJs = require("../../utils/number.js");
var n1 = 'number';
var n2 = 'number, number';
function bitAndNumber(x, y) {
    if (!_numberJs.isInteger(x) || !_numberJs.isInteger(y)) throw new Error('Integers expected in function bitAnd');
    return x & y;
}
bitAndNumber.signature = n2;
function bitNotNumber(x) {
    if (!_numberJs.isInteger(x)) throw new Error('Integer expected in function bitNot');
    return ~x;
}
bitNotNumber.signature = n1;
function bitOrNumber(x, y) {
    if (!_numberJs.isInteger(x) || !_numberJs.isInteger(y)) throw new Error('Integers expected in function bitOr');
    return x | y;
}
bitOrNumber.signature = n2;
function bitXorNumber(x, y) {
    if (!_numberJs.isInteger(x) || !_numberJs.isInteger(y)) throw new Error('Integers expected in function bitXor');
    return x ^ y;
}
bitXorNumber.signature = n2;
function leftShiftNumber(x, y) {
    if (!_numberJs.isInteger(x) || !_numberJs.isInteger(y)) throw new Error('Integers expected in function leftShift');
    return x << y;
}
leftShiftNumber.signature = n2;
function rightArithShiftNumber(x, y) {
    if (!_numberJs.isInteger(x) || !_numberJs.isInteger(y)) throw new Error('Integers expected in function rightArithShift');
    return x >> y;
}
rightArithShiftNumber.signature = n2;
function rightLogShiftNumber(x, y) {
    if (!_numberJs.isInteger(x) || !_numberJs.isInteger(y)) throw new Error('Integers expected in function rightLogShift');
    return x >>> y;
}
rightLogShiftNumber.signature = n2;

},{"../../utils/number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dGBSM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "combinationsNumber", ()=>combinationsNumber
);
var _numberJs = require("../../utils/number.js");
var _productJs = require("../../utils/product.js");
function combinationsNumber(n, k) {
    if (!_numberJs.isInteger(n) || n < 0) throw new TypeError('Positive integer value expected in function combinations');
    if (!_numberJs.isInteger(k) || k < 0) throw new TypeError('Positive integer value expected in function combinations');
    if (k > n) throw new TypeError('k must be less than or equal to n');
    var nMinusk = n - k;
    var prodrange;
    if (k < nMinusk) {
        prodrange = _productJs.product(nMinusk + 1, n);
        return prodrange / _productJs.product(1, k);
    }
    prodrange = _productJs.product(k + 1, n);
    return prodrange / _productJs.product(1, nMinusk);
}
combinationsNumber.signature = 'number, number';

},{"../../utils/number.js":"l1AB8","../../utils/product.js":"8TGRR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8TGRR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** @param {number} i
 *  @param {number} n
 *  @returns {number} product of i to n
 */ parcelHelpers.export(exports, "product", ()=>product
);
function product(i, n) {
    if (n < i) return 1;
    if (n === i) return n;
    var half = n + i >> 1; // divide (n + i) by 2 and truncate to integer
    return product(i, half) * product(half + 1, n);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"avqZ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pi", ()=>pi
);
parcelHelpers.export(exports, "tau", ()=>tau
);
parcelHelpers.export(exports, "e", ()=>e
);
parcelHelpers.export(exports, "phi", ()=>phi
);
var pi = Math.PI;
var tau = 2 * Math.PI;
var e = Math.E;
var phi = 1.618033988749895; // eslint-disable-line no-loss-of-precision

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1bM4L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "notNumber", ()=>notNumber
);
parcelHelpers.export(exports, "orNumber", ()=>orNumber
);
parcelHelpers.export(exports, "xorNumber", ()=>xorNumber
);
parcelHelpers.export(exports, "andNumber", ()=>andNumber
);
var n1 = 'number';
var n2 = 'number, number';
function notNumber(x) {
    return !x;
}
notNumber.signature = n1;
function orNumber(x, y) {
    return !!(x || y);
}
orNumber.signature = n2;
function xorNumber(x, y) {
    return !!x !== !!y;
}
xorNumber.signature = n2;
function andNumber(x, y) {
    return !!(x && y);
}
andNumber.signature = n2;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gOZLq":[function(require,module,exports) {

},{}],"hJOSB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gammaNumber", ()=>gammaNumber
);
parcelHelpers.export(exports, "gammaG", ()=>gammaG
);
parcelHelpers.export(exports, "gammaP", ()=>gammaP
);
/* eslint-disable no-loss-of-precision */ var _numberJs = require("../../utils/number.js");
var _productJs = require("../../utils/product.js");
function gammaNumber(n) {
    var x;
    if (_numberJs.isInteger(n)) {
        if (n <= 0) return isFinite(n) ? Infinity : NaN;
        if (n > 171) return Infinity; // Will overflow
        return _productJs.product(1, n - 1);
    }
    if (n < 0.5) return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));
    if (n >= 171.35) return Infinity; // will overflow
    if (n > 85) {
        // Extended Stirling Approx
        var twoN = n * n;
        var threeN = twoN * n;
        var fourN = threeN * n;
        var fiveN = fourN * n;
        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
    }
    --n;
    x = gammaP[0];
    for(var i = 1; i < gammaP.length; ++i)x += gammaP[i] / (n + i);
    var t = n + gammaG + 0.5;
    return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
}
gammaNumber.signature = 'number'; // TODO: comment on the variables g and p
var gammaG = 4.7421875;
var gammaP = [
    0.9999999999999971,
    57.15623566586292,
    -59.59796035547549,
    14.136097974741746,
    -0.4919138160976202,
    0.00003399464998481189,
    0.00004652362892704858,
    -0.00009837447530487956,
    0.0001580887032249125,
    -0.00021026444172410488,
    0.00021743961811521265,
    -0.0001643181065367639,
    0.00008441822398385275,
    -0.000026190838401581408,
    0.0000036899182659531625
];

},{"../../utils/number.js":"l1AB8","../../utils/product.js":"8TGRR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a7vdt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acosNumber", ()=>acosNumber
);
parcelHelpers.export(exports, "acoshNumber", ()=>acoshNumber
);
parcelHelpers.export(exports, "acotNumber", ()=>acotNumber
);
parcelHelpers.export(exports, "acothNumber", ()=>acothNumber
);
parcelHelpers.export(exports, "acscNumber", ()=>acscNumber
);
parcelHelpers.export(exports, "acschNumber", ()=>acschNumber
);
parcelHelpers.export(exports, "asecNumber", ()=>asecNumber
);
parcelHelpers.export(exports, "asechNumber", ()=>asechNumber
);
parcelHelpers.export(exports, "asinNumber", ()=>asinNumber
);
parcelHelpers.export(exports, "asinhNumber", ()=>asinhNumber
);
parcelHelpers.export(exports, "atanNumber", ()=>atanNumber
);
parcelHelpers.export(exports, "atan2Number", ()=>atan2Number
);
parcelHelpers.export(exports, "atanhNumber", ()=>atanhNumber
);
parcelHelpers.export(exports, "cosNumber", ()=>cosNumber
);
parcelHelpers.export(exports, "coshNumber", ()=>coshNumber
);
parcelHelpers.export(exports, "cotNumber", ()=>cotNumber
);
parcelHelpers.export(exports, "cothNumber", ()=>cothNumber
);
parcelHelpers.export(exports, "cscNumber", ()=>cscNumber
);
parcelHelpers.export(exports, "cschNumber", ()=>cschNumber
);
parcelHelpers.export(exports, "secNumber", ()=>secNumber
);
parcelHelpers.export(exports, "sechNumber", ()=>sechNumber
);
parcelHelpers.export(exports, "sinNumber", ()=>sinNumber
);
parcelHelpers.export(exports, "sinhNumber", ()=>sinhNumber
);
parcelHelpers.export(exports, "tanNumber", ()=>tanNumber
);
parcelHelpers.export(exports, "tanhNumber", ()=>tanhNumber
);
var _numberJs = require("../../utils/number.js");
var n1 = 'number';
var n2 = 'number, number';
function acosNumber(x) {
    return Math.acos(x);
}
acosNumber.signature = n1;
function acoshNumber(x) {
    return _numberJs.acosh(x);
}
acoshNumber.signature = n1;
function acotNumber(x) {
    return Math.atan(1 / x);
}
acotNumber.signature = n1;
function acothNumber(x) {
    return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
}
acothNumber.signature = n1;
function acscNumber(x) {
    return Math.asin(1 / x);
}
acscNumber.signature = n1;
function acschNumber(x) {
    var xInv = 1 / x;
    return Math.log(xInv + Math.sqrt(xInv * xInv + 1));
}
acschNumber.signature = n1;
function asecNumber(x) {
    return Math.acos(1 / x);
}
asecNumber.signature = n1;
function asechNumber(x) {
    var xInv = 1 / x;
    var ret = Math.sqrt(xInv * xInv - 1);
    return Math.log(ret + xInv);
}
asechNumber.signature = n1;
function asinNumber(x) {
    return Math.asin(x);
}
asinNumber.signature = n1;
function asinhNumber(x) {
    return _numberJs.asinh(x);
}
asinhNumber.signature = n1;
function atanNumber(x) {
    return Math.atan(x);
}
atanNumber.signature = n1;
function atan2Number(y, x) {
    return Math.atan2(y, x);
}
atan2Number.signature = n2;
function atanhNumber(x) {
    return _numberJs.atanh(x);
}
atanhNumber.signature = n1;
function cosNumber(x) {
    return Math.cos(x);
}
cosNumber.signature = n1;
function coshNumber(x) {
    return _numberJs.cosh(x);
}
coshNumber.signature = n1;
function cotNumber(x) {
    return 1 / Math.tan(x);
}
cotNumber.signature = n1;
function cothNumber(x) {
    var e = Math.exp(2 * x);
    return (e + 1) / (e - 1);
}
cothNumber.signature = n1;
function cscNumber(x) {
    return 1 / Math.sin(x);
}
cscNumber.signature = n1;
function cschNumber(x) {
    // consider values close to zero (+/-)
    if (x === 0) return Number.POSITIVE_INFINITY;
    else return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * _numberJs.sign(x);
}
cschNumber.signature = n1;
function secNumber(x) {
    return 1 / Math.cos(x);
}
secNumber.signature = n1;
function sechNumber(x) {
    return 2 / (Math.exp(x) + Math.exp(-x));
}
sechNumber.signature = n1;
function sinNumber(x) {
    return Math.sin(x);
}
sinNumber.signature = n1;
function sinhNumber(x) {
    return _numberJs.sinh(x);
}
sinhNumber.signature = n1;
function tanNumber(x) {
    return Math.tan(x);
}
tanNumber.signature = n1;
function tanhNumber(x) {
    return _numberJs.tanh(x);
}
tanhNumber.signature = n1;

},{"../../utils/number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lAnsc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isIntegerNumber", ()=>isIntegerNumber
);
parcelHelpers.export(exports, "isNegativeNumber", ()=>isNegativeNumber
);
parcelHelpers.export(exports, "isPositiveNumber", ()=>isPositiveNumber
);
parcelHelpers.export(exports, "isZeroNumber", ()=>isZeroNumber
);
parcelHelpers.export(exports, "isNaNNumber", ()=>isNaNNumber
);
var _numberJs = require("../../utils/number.js");
var n1 = 'number';
function isIntegerNumber(x) {
    return _numberJs.isInteger(x);
}
isIntegerNumber.signature = n1;
function isNegativeNumber(x) {
    return x < 0;
}
isNegativeNumber.signature = n1;
function isPositiveNumber(x) {
    return x > 0;
}
isPositiveNumber.signature = n1;
function isZeroNumber(x) {
    return x === 0;
}
isZeroNumber.signature = n1;
function isNaNNumber(x) {
    return Number.isNaN(x);
}
isNaNNumber.signature = n1;

},{"../../utils/number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1zlhD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIsNumeric", ()=>createIsNumeric
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'isNumeric';
var dependencies = [
    'typed'
];
var createIsNumeric = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2)                     // returns true
   *    math.isNumeric('2')                   // returns false
   *    math.hasNumericValue('2')             // returns true
   *    math.isNumeric(0)                     // returns true
   *    math.isNumeric(math.bignumber(500))   // returns true
   *    math.isNumeric(math.fraction(4))      // returns true
   *    math.isNumeric(math.complex('2-4i')   // returns false
   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, hasNumericValue
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */ return typed(name, {
        'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
            return true;
        },
        'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {
            return false;
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3kaeo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHasNumericValue", ()=>createHasNumericValue
);
var _factoryJs = require("../../utils/factory.js");
var name = 'hasNumericValue';
var dependencies = [
    'typed',
    'isNumeric'
];
var createHasNumericValue = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , isNumeric  } = _ref;
    /**
   * Test whether a value is an numeric value.
   *
   * In case of a string, true is returned if the string contains a numeric value.
   *
   * Syntax:
   *
   *     math.hasNumericValue(x)
   *
   * Examples:
   *
   *    math.hasNumericValue(2)                     // returns true
   *    math.hasNumericValue('2')                   // returns true
   *    math.isNumeric('2')                         // returns false
   *    math.hasNumericValue(0)                     // returns true
   *    math.hasNumericValue(math.bignumber(500))   // returns true
   *    math.hasNumericValue(math.fraction(4))      // returns true
   *    math.hasNumericValue(math.complex('2-4i')   // returns false
   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, isNumeric
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */ return typed(name, {
        string: function string(x) {
            return x.trim().length > 0 && !isNaN(Number(x));
        },
        any: function any(x) {
            return isNumeric(x);
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7iBpx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIsPositive", ()=>createIsPositive
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'isPositive';
var dependencies = [
    'typed'
];
var createIsPositive = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3)                     // returns true
   *    math.isPositive(-2)                    // returns false
   *    math.isPositive(0)                     // returns false
   *    math.isPositive(-0)                    // returns false
   *    math.isPositive(0.5)                   // returns true
   *    math.isPositive(math.bignumber(2))     // returns true
   *    math.isPositive(math.fraction(-2, 5))  // returns false
   *    math.isPositive(math.fraction(1,3))    // returns false
   *    math.isPositive('2')                   // returns true
   *    math.isPositive([2, 0, -3])            // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: _indexJs.isPositiveNumber,
        BigNumber: function BigNumber(x) {
            return !x.isNeg() && !x.isZero() && !x.isNaN();
        },
        Fraction: function Fraction(x) {
            return x.s > 0 && x.n > 0;
        },
        Unit: function Unit(x) {
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ggTqk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIsZero", ()=>createIsZero
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'isZero';
var dependencies = [
    'typed'
];
var createIsZero = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0)                     // returns true
   *    math.isZero(2)                     // returns false
   *    math.isZero(0.5)                   // returns false
   *    math.isZero(math.bignumber(0))     // returns true
   *    math.isZero(math.fraction(0))      // returns true
   *    math.isZero(math.fraction(1,3))    // returns false
   *    math.isZero(math.complex('2 - 4i') // returns false
   *    math.isZero(math.complex('0i')     // returns true
   *    math.isZero('0')                   // returns true
   *    math.isZero('2')                   // returns false
   *    math.isZero([2, 0, -3]')           // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: _indexJs.isZeroNumber,
        BigNumber: function BigNumber(x) {
            return x.isZero();
        },
        Complex: function Complex(x) {
            return x.re === 0 && x.im === 0;
        },
        Fraction: function Fraction(x) {
            return x.d === 1 && x.n === 0;
        },
        Unit: function Unit(x) {
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aV7KG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIsNaN", ()=>createIsNaN
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'isNaN';
var dependencies = [
    'typed'
];
var createIsNaN = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3)                     // returns false
   *    math.isNaN(NaN)                   // returns true
   *    math.isNaN(0)                     // returns false
   *    math.isNaN(math.bignumber(NaN))   // returns true
   *    math.isNaN(math.bignumber(0))     // returns false
   *    math.isNaN(math.fraction(-2, 5))  // returns false
   *    math.isNaN('-2')                  // returns false
   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: _indexJs.isNaNNumber,
        BigNumber: function BigNumber(x) {
            return x.isNaN();
        },
        Fraction: function Fraction(x) {
            return false;
        },
        Complex: function Complex(x) {
            return x.isNaN();
        },
        Unit: function Unit(x) {
            return Number.isNaN(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, Number.isNaN);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3NbxX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTypeOf", ()=>createTypeOf
);
var _factoryJs = require("../../utils/factory.js");
var _isJs = require("../../utils/is.js");
var name = 'typeOf';
var dependencies = [
    'typed'
];
var createTypeOf = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Determine the type of a variable.
   *
   * Function `typeOf` recognizes the following types of objects:
   *
   * Object                 | Returns       | Example
   * ---------------------- | ------------- | ------------------------------------------
   * null                   | `'null'`      | `math.typeOf(null)`
   * number                 | `'number'`    | `math.typeOf(3.5)`
   * boolean                | `'boolean'`   | `math.typeOf(true)`
   * string                 | `'string'`    | `math.typeOf('hello world')`
   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`
   * Date                   | `'Date'`      | `math.typeOf(new Date())`
   * Function               | `'Function'`  | `math.typeOf(function () {})`
   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`
   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`
   * undefined              | `'undefined'` | `math.typeOf(undefined)`
   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`
   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`
   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`
   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`
   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`
   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`
   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\nb=3'))`
   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`
   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`
   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`
   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`
   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`
   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`
   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`
   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`
   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`
   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`
   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`
   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`
   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`
   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`
   *
   * Syntax:
   *
   *    math.typeOf(x)
   *
   * Examples:
   *
   *    math.typeOf(3.5)                     // returns 'number'
   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'
   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'
   *    math.typeOf('hello world')           // returns 'string'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */ return typed(name, {
        any: _isJs.typeOf
    });
});

},{"../../utils/factory.js":"26foW","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5XebJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createEqualScalar", ()=>createEqualScalar
);
parcelHelpers.export(exports, "createEqualScalarNumber", ()=>createEqualScalarNumber
);
var _nearlyEqualJs = require("../../utils/bignumber/nearlyEqual.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var _complexJs = require("../../utils/complex.js");
var name = 'equalScalar';
var dependencies = [
    'typed',
    'config'
];
var createEqualScalar = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config  } = _ref;
    /**
   * Test whether two scalar values are nearly equal.
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */ return typed(name, {
        'boolean, boolean': function booleanBoolean(x, y) {
            return x === y;
        },
        'number, number': function numberNumber(x, y) {
            return _numberJs.nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return x.eq(y) || _nearlyEqualJs.nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.equals(y);
        },
        'Complex, Complex': function ComplexComplex(x, y) {
            return _complexJs.complexEquals(x, y, config.epsilon);
        },
        'Unit, Unit': function UnitUnit(x, y) {
            if (!x.equalBase(y)) throw new Error('Cannot compare units with different base');
            return this(x.value, y.value);
        }
    });
});
var createEqualScalarNumber = _factoryJs.factory(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed , config  } = _ref2;
    return typed(name, {
        'number, number': function numberNumber(x, y) {
            return _numberJs.nearlyEqual(x, y, config.epsilon);
        }
    });
});

},{"../../utils/bignumber/nearlyEqual.js":"2W3Ce","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","../../utils/complex.js":"18UIj","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2W3Ce":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Compares two BigNumbers.
 * @param {BigNumber} x       First value to compare
 * @param {BigNumber} y       Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
 */ parcelHelpers.export(exports, "nearlyEqual", ()=>nearlyEqual
);
function nearlyEqual(x, y, epsilon) {
    // if epsilon is null or undefined, test whether x and y are exactly equal
    if (epsilon === null || epsilon === undefined) return x.eq(y);
     // use "==" operator, handles infinities
    if (x.eq(y)) return true;
     // NaN
    if (x.isNaN() || y.isNaN()) return false;
     // at this point x and y should be finite
    if (x.isFinite() && y.isFinite()) {
        // check numbers are very close, needed when comparing numbers near zero
        var diff = x.minus(y).abs();
        if (diff.isZero()) return true;
        else {
            // use relative error
            var max = x.constructor.max(x.abs(), y.abs());
            return diff.lte(max.times(epsilon));
        }
    } // Infinite and Number or negative Infinite and positive Infinite cases
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"18UIj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Test whether two complex values are equal provided a given epsilon.
 * Does not use or change the global Complex.EPSILON setting
 * @param {Complex} x
 * @param {Complex} y
 * @param {number} epsilon
 * @returns {boolean}
 */ parcelHelpers.export(exports, "complexEquals", ()=>complexEquals
);
var _numberJs = require("./number.js");
function complexEquals(x, y, epsilon) {
    return _numberJs.nearlyEqual(x.re, y.re, epsilon) && _numberJs.nearlyEqual(x.im, y.im, epsilon);
}

},{"./number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dpdW1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSparseMatrixClass", ()=>createSparseMatrixClass
);
var _isJs = require("../../utils/is.js");
var _numberJs = require("../../utils/number.js");
var _stringJs = require("../../utils/string.js");
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var _dimensionErrorJs = require("../../error/DimensionError.js");
var name = 'SparseMatrix';
var dependencies = [
    'typed',
    'equalScalar',
    'Matrix'
];
var createSparseMatrixClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equalScalar , Matrix  } = _ref;
    /**
   * Sparse Matrix implementation. This type implements
   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))
   * format for two-dimensional sparse matrices.
   * @class SparseMatrix
   */ function SparseMatrix(data, datatype) {
        if (!(this instanceof SparseMatrix)) throw new SyntaxError('Constructor must be called with the new operator');
        if (datatype && !_isJs.isString(datatype)) throw new Error('Invalid datatype: ' + datatype);
        if (_isJs.isMatrix(data)) // create from matrix
        _createFromMatrix(this, data, datatype);
        else if (data && _isJs.isArray(data.index) && _isJs.isArray(data.ptr) && _isJs.isArray(data.size)) {
            // initialize fields
            this._values = data.values;
            this._index = data.index;
            this._ptr = data.ptr;
            this._size = data.size;
            this._datatype = datatype || data.datatype;
        } else if (_isJs.isArray(data)) // create from array
        _createFromArray(this, data, datatype);
        else if (data) // unsupported type
        throw new TypeError('Unsupported type of data (' + _isJs.typeOf(data) + ')');
        else {
            // nothing provided
            this._values = [];
            this._index = [];
            this._ptr = [
                0
            ];
            this._size = [
                0,
                0
            ];
            this._datatype = datatype;
        }
    }
    function _createFromMatrix(matrix, source, datatype) {
        // check matrix type
        if (source.type === 'SparseMatrix') {
            // clone arrays
            matrix._values = source._values ? _objectJs.clone(source._values) : undefined;
            matrix._index = _objectJs.clone(source._index);
            matrix._ptr = _objectJs.clone(source._ptr);
            matrix._size = _objectJs.clone(source._size);
            matrix._datatype = datatype || source._datatype;
        } else // build from matrix data
        _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
    }
    function _createFromArray(matrix, data, datatype) {
        // initialize fields
        matrix._values = [];
        matrix._index = [];
        matrix._ptr = [];
        matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice
        var rows = data.length;
        var columns = 0; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0;
        if (_isJs.isString(datatype)) {
            // find signature that matches (datatype, datatype)
            eq = typed.find(equalScalar, [
                datatype,
                datatype
            ]) || equalScalar; // convert 0 to the same datatype
            zero = typed.convert(0, datatype);
        } // check we have rows (empty array)
        if (rows > 0) {
            // column index
            var j = 0;
            do {
                // store pointer to values index
                matrix._ptr.push(matrix._index.length); // loop rows
                for(var i = 0; i < rows; i++){
                    // current row
                    var row = data[i]; // check row is an array
                    if (_isJs.isArray(row)) {
                        // update columns if needed (only on first column)
                        if (j === 0 && columns < row.length) columns = row.length;
                         // check row has column
                        if (j < row.length) {
                            // value
                            var v = row[j]; // check value != 0
                            if (!eq(v, zero)) {
                                // store value
                                matrix._values.push(v); // index
                                matrix._index.push(i);
                            }
                        }
                    } else {
                        // update columns if needed (only on first column)
                        if (j === 0 && columns < 1) columns = 1;
                         // check value != 0 (row is a scalar)
                        if (!eq(row, zero)) {
                            // store value
                            matrix._values.push(row); // index
                            matrix._index.push(i);
                        }
                    }
                } // increment index
                j++;
            }while (j < columns)
        } // store number of values in ptr
        matrix._ptr.push(matrix._index.length); // size
        matrix._size = [
            rows,
            columns
        ];
    }
    SparseMatrix.prototype = new Matrix();
    /**
   * Create a new SparseMatrix
   */ SparseMatrix.prototype.createSparseMatrix = function(data, datatype) {
        return new SparseMatrix(data, datatype);
    };
    /**
   * Attach type information
   */ SparseMatrix.prototype.type = 'SparseMatrix';
    SparseMatrix.prototype.isSparseMatrix = true;
    /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf SparseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */ SparseMatrix.prototype.getDataType = function() {
        return _arrayJs.getArrayDataType(this._values, _isJs.typeOf);
    };
    /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @memberof SparseMatrix
   * @return {string}           The storage format.
   */ SparseMatrix.prototype.storage = function() {
        return 'sparse';
    };
    /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @memberof SparseMatrix
   * @return {string}           The datatype.
   */ SparseMatrix.prototype.datatype = function() {
        return this._datatype;
    };
    /**
   * Create a new SparseMatrix
   * @memberof SparseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */ SparseMatrix.prototype.create = function(data, datatype) {
        return new SparseMatrix(data, datatype);
    };
    /**
   * Get the matrix density.
   *
   * Usage:
   *     const density = matrix.density()                   // retrieve matrix density
   *
   * @memberof SparseMatrix
   * @return {number}           The matrix density.
   */ SparseMatrix.prototype.density = function() {
        // rows & columns
        var rows = this._size[0];
        var columns = this._size[1]; // calculate density
        return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
    };
    /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof SparseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */ SparseMatrix.prototype.subset = function(index, replacement, defaultValue) {
        // check it is a pattern matrix
        if (!this._values) throw new Error('Cannot invoke subset on a Pattern only matrix');
         // check arguments
        switch(arguments.length){
            case 1:
                return _getsubset(this, index);
            // intentional fall through
            case 2:
            case 3:
                return _setsubset(this, index, replacement, defaultValue);
            default:
                throw new SyntaxError('Wrong number of arguments');
        }
    };
    function _getsubset(matrix, idx) {
        // check idx
        if (!_isJs.isIndex(idx)) throw new TypeError('Invalid index');
        var isScalar = idx.isScalar();
        if (isScalar) // return a scalar
        return matrix.get(idx.min());
         // validate dimensions
        var size = idx.size();
        if (size.length !== matrix._size.length) throw new _dimensionErrorJs.DimensionError(size.length, matrix._size.length);
         // vars
        var i, ii, k, kk; // validate if any of the ranges in the index is out of range
        var min = idx.min();
        var max = idx.max();
        for(i = 0, ii = matrix._size.length; i < ii; i++){
            _arrayJs.validateIndex(min[i], matrix._size[i]);
            _arrayJs.validateIndex(max[i], matrix._size[i]);
        } // matrix arrays
        var mvalues = matrix._values;
        var mindex = matrix._index;
        var mptr = matrix._ptr; // rows & columns dimensions for result matrix
        var rows = idx.dimension(0);
        var columns = idx.dimension(1); // workspace & permutation vector
        var w = [];
        var pv = []; // loop rows in resulting matrix
        rows.forEach(function(i, r) {
            // update permutation vector
            pv[i] = r[0]; // mark i in workspace
            w[i] = true;
        }); // result matrix arrays
        var values = mvalues ? [] : undefined;
        var index = [];
        var ptr = []; // loop columns in result matrix
        columns.forEach(function(j) {
            // update ptr
            ptr.push(index.length); // loop values in column j
            for(k = mptr[j], kk = mptr[j + 1]; k < kk; k++){
                // row
                i = mindex[k]; // check row is in result matrix
                if (w[i] === true) {
                    // push index
                    index.push(pv[i]); // check we need to process values
                    if (values) values.push(mvalues[k]);
                }
            }
        }); // update ptr
        ptr.push(index.length); // return matrix
        return new SparseMatrix({
            values: values,
            index: index,
            ptr: ptr,
            size: size,
            datatype: matrix._datatype
        });
    }
    function _setsubset(matrix, index, submatrix, defaultValue) {
        // check index
        if (!index || index.isIndex !== true) throw new TypeError('Invalid index');
         // get index size and check whether the index contains a single value
        var iSize = index.size();
        var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed
        var sSize;
        if (_isJs.isMatrix(submatrix)) {
            // submatrix size
            sSize = submatrix.size(); // use array representation
            submatrix = submatrix.toArray();
        } else // get submatrix size (array, scalar)
        sSize = _arrayJs.arraySize(submatrix);
         // check index is a scalar
        if (isScalar) {
            // verify submatrix is a scalar
            if (sSize.length !== 0) throw new TypeError('Scalar expected');
             // set value
            matrix.set(index.min(), submatrix, defaultValue);
        } else {
            // validate dimensions, index size must be one or two dimensions
            if (iSize.length !== 1 && iSize.length !== 2) throw new _dimensionErrorJs.DimensionError(iSize.length, matrix._size.length, '<');
             // check submatrix and index have the same dimensions
            if (sSize.length < iSize.length) {
                // calculate number of missing outer dimensions
                var i = 0;
                var outer = 0;
                while(iSize[i] === 1 && sSize[i] === 1)i++;
                while(iSize[i] === 1){
                    outer++;
                    i++;
                } // unsqueeze both outer and inner dimensions
                submatrix = _arrayJs.unsqueeze(submatrix, iSize.length, outer, sSize);
            } // check whether the size of the submatrix matches the index size
            if (!_objectJs.deepStrictEqual(iSize, sSize)) throw new _dimensionErrorJs.DimensionError(iSize, sSize, '>');
             // offsets
            var x0 = index.min()[0];
            var y0 = index.min()[1]; // submatrix rows and columns
            var m = sSize[0];
            var n = sSize[1]; // loop submatrix
            for(var x = 0; x < m; x++)// loop columns
            for(var y = 0; y < n; y++){
                // value at i, j
                var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)
                matrix.set([
                    x + x0,
                    y + y0
                ], v, defaultValue);
            }
        }
        return matrix;
    }
    /**
   * Get a single element from the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */ SparseMatrix.prototype.get = function(index) {
        if (!_isJs.isArray(index)) throw new TypeError('Array expected');
        if (index.length !== this._size.length) throw new _dimensionErrorJs.DimensionError(index.length, this._size.length);
         // check it is a pattern matrix
        if (!this._values) throw new Error('Cannot invoke get on a Pattern only matrix');
         // row and column
        var i = index[0];
        var j = index[1]; // check i, j are valid
        _arrayJs.validateIndex(i, this._size[0]);
        _arrayJs.validateIndex(j, this._size[1]); // find value index
        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row
        if (k < this._ptr[j + 1] && this._index[k] === i) return this._values[k];
        return 0;
    };
    /**
   * Replace a single element in the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} v
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be set to zero.
   * @return {SparseMatrix} self
   */ SparseMatrix.prototype.set = function(index, v, defaultValue) {
        if (!_isJs.isArray(index)) throw new TypeError('Array expected');
        if (index.length !== this._size.length) throw new _dimensionErrorJs.DimensionError(index.length, this._size.length);
         // check it is a pattern matrix
        if (!this._values) throw new Error('Cannot invoke set on a Pattern only matrix');
         // row and column
        var i = index[0];
        var j = index[1]; // rows & columns
        var rows = this._size[0];
        var columns = this._size[1]; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0;
        if (_isJs.isString(this._datatype)) {
            // find signature that matches (datatype, datatype)
            eq = typed.find(equalScalar, [
                this._datatype,
                this._datatype
            ]) || equalScalar; // convert 0 to the same datatype
            zero = typed.convert(0, this._datatype);
        } // check we need to resize matrix
        if (i > rows - 1 || j > columns - 1) {
            // resize matrix
            _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns
            rows = this._size[0];
            columns = this._size[1];
        } // check i, j are valid
        _arrayJs.validateIndex(i, rows);
        _arrayJs.validateIndex(j, columns); // find value index
        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row
        if (k < this._ptr[j + 1] && this._index[k] === i) {
            // check value != 0
            if (!eq(v, zero)) // update value
            this._values[k] = v;
            else // remove value from matrix
            _remove(k, j, this._values, this._index, this._ptr);
        } else // insert value @ (i, j)
        _insert(k, i, j, v, this._values, this._index, this._ptr);
        return this;
    };
    function _getValueIndex(i, top, bottom, index) {
        // check row is on the bottom side
        if (bottom - top === 0) return bottom;
         // loop rows [top, bottom[
        for(var r = top; r < bottom; r++){
            // check we found value index
            if (index[r] === i) return r;
        } // we did not find row
        return top;
    }
    function _remove(k, j, values, index, ptr) {
        // remove value @ k
        values.splice(k, 1);
        index.splice(k, 1); // update pointers
        for(var x = j + 1; x < ptr.length; x++)ptr[x]--;
    }
    function _insert(k, i, j, v, values, index, ptr) {
        // insert value
        values.splice(k, 0, v); // update row for k
        index.splice(k, 0, i); // update column pointers
        for(var x = j + 1; x < ptr.length; x++)ptr[x]++;
    }
    /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof SparseMatrix
   * @param {number[] | Matrix} size  The new size the matrix should have.
   *                                  Since sparse matrices are always two-dimensional,
   *                                  size must be two numbers in either an array or a matrix
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */ SparseMatrix.prototype.resize = function(size, defaultValue, copy) {
        // validate arguments
        if (!_isJs.isCollection(size)) throw new TypeError('Array or Matrix expected');
         // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector
        var sizeArray = size.valueOf().map((value)=>{
            return Array.isArray(value) && value.length === 1 ? value[0] : value;
        });
        if (sizeArray.length !== 2) throw new Error('Only two dimensions matrix are supported');
         // check sizes
        sizeArray.forEach(function(value) {
            if (!_isJs.isNumber(value) || !_numberJs.isInteger(value) || value < 0) throw new TypeError("Invalid size, must contain positive integers (size: " + _stringJs.format(sizeArray) + ')');
        }); // matrix to resize
        var m = copy ? this.clone() : this; // resize matrix
        return _resize(m, sizeArray[0], sizeArray[1], defaultValue);
    };
    function _resize(matrix, rows, columns, defaultValue) {
        // value to insert at the time of growing matrix
        var value = defaultValue || 0; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0;
        if (_isJs.isString(matrix._datatype)) {
            // find signature that matches (datatype, datatype)
            eq = typed.find(equalScalar, [
                matrix._datatype,
                matrix._datatype
            ]) || equalScalar; // convert 0 to the same datatype
            zero = typed.convert(0, matrix._datatype); // convert value to the same datatype
            value = typed.convert(value, matrix._datatype);
        } // should we insert the value?
        var ins = !eq(value, zero); // old columns and rows
        var r = matrix._size[0];
        var c = matrix._size[1];
        var i, j, k; // check we need to increase columns
        if (columns > c) {
            // loop new columns
            for(j = c; j < columns; j++){
                // update matrix._ptr for current column
                matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values
                if (ins) // loop rows
                for(i = 0; i < r; i++){
                    // add new matrix._values
                    matrix._values.push(value); // update matrix._index
                    matrix._index.push(i);
                }
            } // store number of matrix._values in matrix._ptr
            matrix._ptr[columns] = matrix._values.length;
        } else if (columns < c) {
            // truncate matrix._ptr
            matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index
            matrix._values.splice(matrix._ptr[columns], matrix._values.length);
            matrix._index.splice(matrix._ptr[columns], matrix._index.length);
        } // update columns
        c = columns; // check we need to increase rows
        if (rows > r) // check we have to insert values
        {
            if (ins) {
                // inserts
                var n = 0; // loop columns
                for(j = 0; j < c; j++){
                    // update matrix._ptr for current column
                    matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values
                    k = matrix._ptr[j + 1] + n; // pointer
                    var p = 0; // loop new rows, initialize pointer
                    for(i = r; i < rows; i++, p++){
                        // add value
                        matrix._values.splice(k + p, 0, value); // update matrix._index
                        matrix._index.splice(k + p, 0, i); // increment inserts
                        n++;
                    }
                } // store number of matrix._values in matrix._ptr
                matrix._ptr[c] = matrix._values.length;
            }
        } else if (rows < r) {
            // deletes
            var d = 0; // loop columns
            for(j = 0; j < c; j++){
                // update matrix._ptr for current column
                matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column
                var k0 = matrix._ptr[j];
                var k1 = matrix._ptr[j + 1] - d; // loop matrix._index
                for(k = k0; k < k1; k++){
                    // row
                    i = matrix._index[k]; // check we need to delete value and matrix._index
                    if (i > rows - 1) {
                        // remove value
                        matrix._values.splice(k, 1); // remove item from matrix._index
                        matrix._index.splice(k, 1); // increase deletes
                        d++;
                    }
                }
            } // update matrix._ptr for current column
            matrix._ptr[j] = matrix._values.length;
        } // update matrix._size
        matrix._size[0] = rows;
        matrix._size[1] = columns; // return matrix
        return matrix;
    }
    /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof SparseMatrix
   * @param {number[]} sizes          The new size the matrix should have.
   *                                  Since sparse matrices are always two-dimensional,
   *                                  size must be two numbers in either an array or a matrix
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */ SparseMatrix.prototype.reshape = function(sizes, copy) {
        // validate arguments
        if (!_isJs.isArray(sizes)) throw new TypeError('Array expected');
        if (sizes.length !== 2) throw new Error('Sparse matrices can only be reshaped in two dimensions');
         // check sizes
        sizes.forEach(function(value) {
            if (!_isJs.isNumber(value) || !_numberJs.isInteger(value) || value <= -2 || value === 0) throw new TypeError("Invalid size, must contain positive integers or -1 (size: " + _stringJs.format(sizes) + ')');
        });
        var currentLength = this._size[0] * this._size[1];
        sizes = _arrayJs.processSizesWildcard(sizes, currentLength);
        var newLength = sizes[0] * sizes[1]; // m * n must not change
        if (currentLength !== newLength) throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
         // matrix to reshape
        var m = copy ? this.clone() : this; // return unchanged if the same shape
        if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) return m;
         // Convert to COO format (generate a column index)
        var colIndex = [];
        for(var i = 0; i < m._ptr.length; i++)for(var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++)colIndex.push(i);
         // Clone the values array
        var values = m._values.slice(); // Clone the row index array
        var rowIndex = m._index.slice(); // Transform the (row, column) indices
        for(var _i = 0; _i < m._index.length; _i++){
            var r1 = rowIndex[_i];
            var c1 = colIndex[_i];
            var flat = r1 * m._size[1] + c1;
            colIndex[_i] = flat % sizes[1];
            rowIndex[_i] = Math.floor(flat / sizes[1]);
        } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
        // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
        // sorting several arrays based on some other array.
        // OR, we could easily just:
        // 1. Remove all values from the matrix
        m._values.length = 0;
        m._index.length = 0;
        m._ptr.length = sizes[1] + 1;
        m._size = sizes.slice();
        for(var _i2 = 0; _i2 < m._ptr.length; _i2++)m._ptr[_i2] = 0;
         // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
        // This step is probably the most time-consuming
        for(var h = 0; h < values.length; h++){
            var _i3 = rowIndex[h];
            var _j = colIndex[h];
            var v = values[h];
            var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);
            _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
        } // The value indices are inserted out of order, but apparently that's... still OK?
        return m;
    };
    /**
   * Create a clone of the matrix
   * @memberof SparseMatrix
   * @return {SparseMatrix} clone
   */ SparseMatrix.prototype.clone = function() {
        var m = new SparseMatrix({
            values: this._values ? _objectJs.clone(this._values) : undefined,
            index: _objectJs.clone(this._index),
            ptr: _objectJs.clone(this._ptr),
            size: _objectJs.clone(this._size),
            datatype: this._datatype
        });
        return m;
    };
    /**
   * Retrieve the size of the matrix.
   * @memberof SparseMatrix
   * @returns {number[]} size
   */ SparseMatrix.prototype.size = function() {
        return this._size.slice(0); // copy the Array
    };
    /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {SparseMatrix} matrix
   */ SparseMatrix.prototype.map = function(callback, skipZeros) {
        // check it is a pattern matrix
        if (!this._values) throw new Error('Cannot invoke map on a Pattern only matrix');
         // matrix instance
        var me = this; // rows and columns
        var rows = this._size[0];
        var columns = this._size[1]; // invoke callback
        var invoke = function invoke(v, i, j) {
            // invoke callback
            return callback(v, [
                i,
                j
            ], me);
        }; // invoke _map
        return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
    };
    /**
   * Create a new matrix with the results of the callback function executed on the interval
   * [minRow..maxRow, minColumn..maxColumn].
   */ function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
        // result arrays
        var values = [];
        var index = [];
        var ptr = []; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0;
        if (_isJs.isString(matrix._datatype)) {
            // find signature that matches (datatype, datatype)
            eq = typed.find(equalScalar, [
                matrix._datatype,
                matrix._datatype
            ]) || equalScalar; // convert 0 to the same datatype
            zero = typed.convert(0, matrix._datatype);
        } // invoke callback
        var invoke = function invoke(v, x, y) {
            // invoke callback
            v = callback(v, x, y); // check value != 0
            if (!eq(v, zero)) {
                // store value
                values.push(v); // index
                index.push(x);
            }
        }; // loop columns
        for(var j = minColumn; j <= maxColumn; j++){
            // store pointer to values index
            ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
            var k0 = matrix._ptr[j];
            var k1 = matrix._ptr[j + 1];
            if (skipZeros) // loop k within [k0, k1[
            for(var k = k0; k < k1; k++){
                // row index
                var i = matrix._index[k]; // check i is in range
                if (i >= minRow && i <= maxRow) // value @ k
                invoke(matrix._values[k], i - minRow, j - minColumn);
            }
            else {
                // create a cache holding all defined values
                var _values = {
                };
                for(var _k = k0; _k < k1; _k++){
                    var _i4 = matrix._index[_k];
                    _values[_i4] = matrix._values[_k];
                } // loop over all rows (indexes can be unordered so we can't use that),
                // and either read the value or zero
                for(var _i5 = minRow; _i5 <= maxRow; _i5++){
                    var value = _i5 in _values ? _values[_i5] : 0;
                    invoke(value, _i5 - minRow, j - minColumn);
                }
            }
        } // store number of values in ptr
        ptr.push(values.length); // return sparse matrix
        return new SparseMatrix({
            values: values,
            index: index,
            ptr: ptr,
            size: [
                maxRow - minRow + 1,
                maxColumn - minColumn + 1
            ]
        });
    }
    /**
   * Execute a callback function on each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *                              If false, the indices are guaranteed to be in order,
   *                              if true, the indices can be unordered.
   */ SparseMatrix.prototype.forEach = function(callback, skipZeros) {
        // check it is a pattern matrix
        if (!this._values) throw new Error('Cannot invoke forEach on a Pattern only matrix');
         // matrix instance
        var me = this; // rows and columns
        var rows = this._size[0];
        var columns = this._size[1]; // loop columns
        for(var j = 0; j < columns; j++){
            // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
            var k0 = this._ptr[j];
            var k1 = this._ptr[j + 1];
            if (skipZeros) // loop k within [k0, k1[
            for(var k = k0; k < k1; k++){
                // row index
                var i = this._index[k]; // value @ k
                callback(this._values[k], [
                    i,
                    j
                ], me);
            }
            else {
                // create a cache holding all defined values
                var values = {
                };
                for(var _k2 = k0; _k2 < k1; _k2++){
                    var _i6 = this._index[_k2];
                    values[_i6] = this._values[_k2];
                } // loop over all rows (indexes can be unordered so we can't use that),
                // and either read the value or zero
                for(var _i7 = 0; _i7 < rows; _i7++){
                    var value = _i7 in values ? values[_i7] : 0;
                    callback(value, [
                        _i7,
                        j
                    ], me);
                }
            }
        }
    };
    /**
   * Iterate over the matrix elements, skipping zeros
   * @return {Iterable<{ value, index: number[] }>}
   */ SparseMatrix.prototype[Symbol.iterator] = function*() {
        if (!this._values) throw new Error('Cannot iterate a Pattern only matrix');
        var columns = this._size[1];
        for(var j = 0; j < columns; j++){
            var k0 = this._ptr[j];
            var k1 = this._ptr[j + 1];
            for(var k = k0; k < k1; k++){
                // row index
                var i = this._index[k];
                yield {
                    value: this._values[k],
                    index: [
                        i,
                        j
                    ]
                };
            }
        }
    };
    /**
   * Create an Array with a copy of the data of the SparseMatrix
   * @memberof SparseMatrix
   * @returns {Array} array
   */ SparseMatrix.prototype.toArray = function() {
        return _toArray(this._values, this._index, this._ptr, this._size, true);
    };
    /**
   * Get the primitive value of the SparseMatrix: a two dimensions array
   * @memberof SparseMatrix
   * @returns {Array} array
   */ SparseMatrix.prototype.valueOf = function() {
        return _toArray(this._values, this._index, this._ptr, this._size, false);
    };
    function _toArray(values, index, ptr, size, copy) {
        // rows and columns
        var rows = size[0];
        var columns = size[1]; // result
        var a = []; // vars
        var i, j; // initialize array
        for(i = 0; i < rows; i++){
            a[i] = [];
            for(j = 0; j < columns; j++)a[i][j] = 0;
        } // loop columns
        for(j = 0; j < columns; j++){
            // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
            var k0 = ptr[j];
            var k1 = ptr[j + 1]; // loop k within [k0, k1[
            for(var k = k0; k < k1; k++){
                // row index
                i = index[k]; // set value (use one for pattern matrix)
                a[i][j] = values ? copy ? _objectJs.clone(values[k]) : values[k] : 1;
            }
        }
        return a;
    }
    /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof SparseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */ SparseMatrix.prototype.format = function(options) {
        // rows and columns
        var rows = this._size[0];
        var columns = this._size[1]; // density
        var density = this.density(); // rows & columns
        var str = 'Sparse Matrix [' + _stringJs.format(rows, options) + ' x ' + _stringJs.format(columns, options) + '] density: ' + _stringJs.format(density, options) + '\n'; // loop columns
        for(var j = 0; j < columns; j++){
            // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
            var k0 = this._ptr[j];
            var k1 = this._ptr[j + 1]; // loop k within [k0, k1[
            for(var k = k0; k < k1; k++){
                // row index
                var i = this._index[k]; // append value
                str += '\n    (' + _stringJs.format(i, options) + ', ' + _stringJs.format(j, options) + ') ==> ' + (this._values ? _stringJs.format(this._values[k], options) : 'X');
            }
        }
        return str;
    };
    /**
   * Get a string representation of the matrix
   * @memberof SparseMatrix
   * @returns {string} str
   */ SparseMatrix.prototype.toString = function() {
        return _stringJs.format(this.toArray());
    };
    /**
   * Get a JSON representation of the matrix
   * @memberof SparseMatrix
   * @returns {Object}
   */ SparseMatrix.prototype.toJSON = function() {
        return {
            mathjs: 'SparseMatrix',
            values: this._values,
            index: this._index,
            ptr: this._ptr,
            size: this._size,
            datatype: this._datatype
        };
    };
    /**
   * Get the kth Matrix diagonal.
   *
   * @memberof SparseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix vector with the diagonal values.
   */ SparseMatrix.prototype.diagonal = function(k) {
        // validate k if any
        if (k) {
            // convert BigNumber to a number
            if (_isJs.isBigNumber(k)) k = k.toNumber();
             // is must be an integer
            if (!_isJs.isNumber(k) || !_numberJs.isInteger(k)) throw new TypeError('The parameter k must be an integer number');
        } else // default value
        k = 0;
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows & columns
        var rows = this._size[0];
        var columns = this._size[1]; // number diagonal values
        var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays
        var values = [];
        var index = [];
        var ptr = []; // initial ptr value
        ptr[0] = 0; // loop columns
        for(var j = kSuper; j < columns && values.length < n; j++){
            // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
            var k0 = this._ptr[j];
            var k1 = this._ptr[j + 1]; // loop x within [k0, k1[
            for(var x = k0; x < k1; x++){
                // row index
                var i = this._index[x]; // check row
                if (i === j - kSuper + kSub) {
                    // value on this column
                    values.push(this._values[x]); // store row
                    index[values.length - 1] = i - kSub; // exit loop
                    break;
                }
            }
        } // close ptr
        ptr.push(values.length); // return matrix
        return new SparseMatrix({
            values: values,
            index: index,
            ptr: ptr,
            size: [
                n,
                1
            ]
        });
    };
    /**
   * Generate a matrix from a JSON object
   * @memberof SparseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
   *                       where mathjs is optional
   * @returns {SparseMatrix}
   */ SparseMatrix.fromJSON = function(json) {
        return new SparseMatrix(json);
    };
    /**
   * Create a diagonal matrix.
   *
   * @memberof SparseMatrix
   * @param {Array} size                       The matrix size.
   * @param {number | Array | Matrix } value   The values for the diagonal.
   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]            The default value for non-diagonal
   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
   *
   * @returns {SparseMatrix}
   */ SparseMatrix.diagonal = function(size, value, k, defaultValue, datatype) {
        if (!_isJs.isArray(size)) throw new TypeError('Array expected, size parameter');
        if (size.length !== 2) throw new Error('Only two dimensions matrix are supported');
         // map size & validate
        size = size.map(function(s) {
            // check it is a big number
            if (_isJs.isBigNumber(s)) // convert it
            s = s.toNumber();
             // validate arguments
            if (!_isJs.isNumber(s) || !_numberJs.isInteger(s) || s < 1) throw new Error('Size values must be positive integers');
            return s;
        }); // validate k if any
        if (k) {
            // convert BigNumber to a number
            if (_isJs.isBigNumber(k)) k = k.toNumber();
             // is must be an integer
            if (!_isJs.isNumber(k) || !_numberJs.isInteger(k)) throw new TypeError('The parameter k must be an integer number');
        } else // default value
        k = 0;
         // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0;
        if (_isJs.isString(datatype)) {
            // find signature that matches (datatype, datatype)
            eq = typed.find(equalScalar, [
                datatype,
                datatype
            ]) || equalScalar; // convert 0 to the same datatype
            zero = typed.convert(0, datatype);
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // rows and columns
        var rows = size[0];
        var columns = size[1]; // number of non-zero items
        var n = Math.min(rows - kSub, columns - kSuper); // value extraction function
        var _value; // check value
        if (_isJs.isArray(value)) {
            // validate array
            if (value.length !== n) // number of values in array must be n
            throw new Error('Invalid value array length');
             // define function
            _value = function _value(i) {
                // return value @ i
                return value[i];
            };
        } else if (_isJs.isMatrix(value)) {
            // matrix size
            var ms = value.size(); // validate matrix
            if (ms.length !== 1 || ms[0] !== n) // number of values in array must be n
            throw new Error('Invalid matrix length');
             // define function
            _value = function _value(i) {
                // return value @ i
                return value.get([
                    i
                ]);
            };
        } else // define function
        _value = function _value() {
            // return value
            return value;
        };
         // create arrays
        var values = [];
        var index = [];
        var ptr = []; // loop items
        for(var j = 0; j < columns; j++){
            // number of rows with value
            ptr.push(values.length); // diagonal index
            var i1 = j - kSuper; // check we need to set diagonal value
            if (i1 >= 0 && i1 < n) {
                // get value @ i
                var v = _value(i1); // check for zero
                if (!eq(v, zero)) {
                    // column
                    index.push(i1 + kSub); // add value
                    values.push(v);
                }
            }
        } // last value should be number of values
        ptr.push(values.length); // create SparseMatrix
        return new SparseMatrix({
            values: values,
            index: index,
            ptr: ptr,
            size: [
                rows,
                columns
            ]
        });
    };
    /**
   * Swap rows i and j in Matrix.
   *
   * @memberof SparseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */ SparseMatrix.prototype.swapRows = function(i, j) {
        // check index
        if (!_isJs.isNumber(i) || !_numberJs.isInteger(i) || !_isJs.isNumber(j) || !_numberJs.isInteger(j)) throw new Error('Row index must be positive integers');
         // check dimensions
        if (this._size.length !== 2) throw new Error('Only two dimensional matrix is supported');
         // validate index
        _arrayJs.validateIndex(i, this._size[0]);
        _arrayJs.validateIndex(j, this._size[0]); // swap rows
        SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance
        return this;
    };
    /**
   * Loop rows with data in column j.
   *
   * @param {number} j            Column
   * @param {Array} values        Matrix values
   * @param {Array} index         Matrix row indeces
   * @param {Array} ptr           Matrix column pointers
   * @param {Function} callback   Callback function invoked for every row in column j
   */ SparseMatrix._forEachRow = function(j, values, index, ptr, callback) {
        // indeces for column j
        var k0 = ptr[j];
        var k1 = ptr[j + 1]; // loop
        for(var k = k0; k < k1; k++)// invoke callback
        callback(index[k], values[k]);
    };
    /**
   * Swap rows x and y in Sparse Matrix data structures.
   *
   * @param {number} x         Matrix row index 1
   * @param {number} y         Matrix row index 2
   * @param {number} columns   Number of columns in matrix
   * @param {Array} values     Matrix values
   * @param {Array} index      Matrix row indeces
   * @param {Array} ptr        Matrix column pointers
   */ SparseMatrix._swapRows = function(x, y, columns, values, index, ptr) {
        // loop columns
        for(var j = 0; j < columns; j++){
            // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
            var k0 = ptr[j];
            var k1 = ptr[j + 1]; // find value index @ x
            var kx = _getValueIndex(x, k0, k1, index); // find value index @ x
            var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix
            if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
                // swap values (check for pattern matrix)
                if (values) {
                    var v = values[kx];
                    values[kx] = values[ky];
                    values[ky] = v;
                } // next column
                continue;
            } // check x row exist & no y row
            if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
                // value @ x (check for pattern matrix)
                var vx = values ? values[kx] : undefined; // insert value @ y
                index.splice(ky, 0, y);
                if (values) values.splice(ky, 0, vx);
                 // remove value @ x (adjust array index if needed)
                index.splice(ky <= kx ? kx + 1 : kx, 1);
                if (values) values.splice(ky <= kx ? kx + 1 : kx, 1);
                 // next column
                continue;
            } // check y row exist & no x row
            if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
                // value @ y (check for pattern matrix)
                var vy = values ? values[ky] : undefined; // insert value @ x
                index.splice(kx, 0, x);
                if (values) values.splice(kx, 0, vy);
                 // remove value @ y (adjust array index if needed)
                index.splice(kx <= ky ? ky + 1 : ky, 1);
                if (values) values.splice(kx <= ky ? ky + 1 : ky, 1);
            }
        }
    };
    return SparseMatrix;
}, {
    isClass: true
});

},{"../../utils/is.js":"iwdlF","../../utils/number.js":"l1AB8","../../utils/string.js":"0PPSB","../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gZNqR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createNumber", ()=>createNumber
);
var _factoryJs = require("../utils/factory.js");
var _collectionJs = require("../utils/collection.js");
var name = 'number';
var dependencies = [
    'typed'
];
/**
 * Separates the radix, integer part, and fractional part of a non decimal number string
 * @param {string} input string to parse
 * @returns {object} the parts of the string or null if not a valid input
 */ function getNonDecimalNumberParts(input) {
    var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/);
    if (nonDecimalWithRadixMatch) {
        var radix = {
            '0b': 2,
            '0o': 8,
            '0x': 16
        }[nonDecimalWithRadixMatch[1]];
        var integerPart = nonDecimalWithRadixMatch[2];
        var fractionalPart = nonDecimalWithRadixMatch[3];
        return {
            input,
            radix,
            integerPart,
            fractionalPart
        };
    } else return null;
}
/**
 * Makes a number from a radix, and integer part, and a fractional part
 * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)
 * @returns {number} the number
 */ function makeNumberFromNonDecimalParts(parts) {
    var n = parseInt(parts.integerPart, parts.radix);
    var f = 0;
    for(var i = 0; i < parts.fractionalPart.length; i++){
        var digitValue = parseInt(parts.fractionalPart[i], parts.radix);
        f += digitValue / Math.pow(parts.radix, i + 1);
    }
    var result = n + f;
    if (isNaN(result)) throw new SyntaxError('String "' + parts.input + '" is no valid number');
    return result;
}
var createNumber = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Create a number or convert a string, boolean, or unit to a number.
   * When value is a matrix, all elements will be converted to number.
   *
   * Syntax:
   *
   *    math.number(value)
   *    math.number(unit, valuelessUnit)
   *
   * Examples:
   *
   *    math.number(2)                         // returns number 2
   *    math.number('7.2')                     // returns number 7.2
   *    math.number(true)                      // returns number 1
   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, string, unit
   *
   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
   * @return {number | Array | Matrix} The created number
   */ var number = typed('number', {
        '': function _() {
            return 0;
        },
        number: function number(x) {
            return x;
        },
        string: function string(x) {
            if (x === 'NaN') return NaN;
            var nonDecimalNumberParts = getNonDecimalNumberParts(x);
            if (nonDecimalNumberParts) return makeNumberFromNonDecimalParts(nonDecimalNumberParts);
            var size = 0;
            var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);
            if (wordSizeSuffixMatch) {
                // x includes a size suffix like 0xffffi32, so we extract
                // the suffix and remove it from x
                size = Number(wordSizeSuffixMatch[2]);
                x = wordSizeSuffixMatch[1];
            }
            var num = Number(x);
            if (isNaN(num)) throw new SyntaxError('String "' + x + '" is no valid number');
            if (wordSizeSuffixMatch) {
                // x is a signed bin, oct, or hex literal
                // num is the value of string x if x is interpreted as unsigned
                if (num > 2 ** size - 1) // literal is too large for size suffix
                throw new SyntaxError("String \"".concat(x, "\" is out of range"));
                 // check if the bit at index size - 1 is set and if so do the twos complement
                if (num >= 2 ** (size - 1)) num = num - 2 ** size;
            }
            return num;
        },
        BigNumber: function BigNumber(x) {
            return x.toNumber();
        },
        Fraction: function Fraction(x) {
            return x.valueOf();
        },
        Unit: function Unit(x) {
            throw new Error('Second argument with valueless unit expected');
        },
        null: function _null(x) {
            return 0;
        },
        'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
            return unit.toNumber(valuelessUnit);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    }); // reviver function to parse a JSON object like:
    //
    //     {"mathjs":"number","value":"2.3"}
    //
    // into a number 2.3
    number.fromJSON = function(json) {
        return parseFloat(json.value);
    };
    return number;
});

},{"../utils/factory.js":"26foW","../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fBfhg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createString", ()=>createString
);
var _factoryJs = require("../utils/factory.js");
var _collectionJs = require("../utils/collection.js");
var _numberJs = require("../utils/number.js");
var name = 'string';
var dependencies = [
    'typed'
];
var createString = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Create a string or convert any object into a string.
   * Elements of Arrays and Matrices are processed element wise.
   *
   * Syntax:
   *
   *    math.string(value)
   *
   * Examples:
   *
   *    math.string(4.2)               // returns string '4.2'
   *    math.string(math.complex(3, 2) // returns string '3 + 2i'
   *
   *    const u = math.unit(5, 'km')
   *    math.string(u.to('m'))         // returns string '5000 m'
   *
   *    math.string([true, false])     // returns ['true', 'false']
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, unit
   *
   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
   * @return {string | Array | Matrix} The created string
   */ return typed(name, {
        '': function _() {
            return '';
        },
        number: _numberJs.format,
        null: function _null(x) {
            return 'null';
        },
        boolean: function boolean(x) {
            return x + '';
        },
        string: function string(x) {
            return x;
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        },
        any: function any(x) {
            return String(x);
        }
    });
});

},{"../utils/factory.js":"26foW","../utils/collection.js":"4hyl2","../utils/number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4lUuH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBoolean", ()=>createBoolean
);
var _factoryJs = require("../utils/factory.js");
var _collectionJs = require("../utils/collection.js");
var name = 'boolean';
var dependencies = [
    'typed'
];
var createBoolean = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Create a boolean or convert a string or number to a boolean.
   * In case of a number, `true` is returned for non-zero numbers, and `false` in
   * case of zero.
   * Strings can be `'true'` or `'false'`, or can contain a number.
   * When value is a matrix, all elements will be converted to boolean.
   *
   * Syntax:
   *
   *    math.boolean(x)
   *
   * Examples:
   *
   *    math.boolean(0)     // returns false
   *    math.boolean(1)     // returns true
   *    math.boolean(-3)     // returns true
   *    math.boolean('true')     // returns true
   *    math.boolean('false')     // returns false
   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
   *
   * See also:
   *
   *    bignumber, complex, index, matrix, string, unit
   *
   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
   * @return {boolean | Array | Matrix} The boolean value
   */ return typed(name, {
        '': function _() {
            return false;
        },
        boolean: function boolean(x) {
            return x;
        },
        number: function number(x) {
            return !!x;
        },
        null: function _null(x) {
            return false;
        },
        BigNumber: function BigNumber(x) {
            return !x.isZero();
        },
        string: function string(x) {
            // try case insensitive
            var lcase = x.toLowerCase();
            if (lcase === 'true') return true;
            else if (lcase === 'false') return false;
             // test whether value is a valid number
            var num = Number(x);
            if (x !== '' && !isNaN(num)) return !!num;
            throw new Error('Cannot convert "' + x + '" to a boolean');
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../utils/factory.js":"26foW","../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bMy2I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBignumber", ()=>createBignumber
);
var _factoryJs = require("../../../utils/factory.js");
var _collectionJs = require("../../../utils/collection.js");
var name = 'bignumber';
var dependencies = [
    'typed',
    'BigNumber'
];
var createBignumber = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber  } = _ref;
    /**
   * Create a BigNumber, which can store numbers with arbitrary precision.
   * When a matrix is provided, all elements will be converted to BigNumber.
   *
   * Syntax:
   *
   *    math.bignumber(x)
   *
   * Examples:
   *
   *    0.1 + 0.2                                  // returns number 0.30000000000000004
   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
   *
   *
   *    7.2e500                                    // returns number Infinity
   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
   *
   * See also:
   *
   *    boolean, complex, index, matrix, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
   *                                                    0 by default.
   * @returns {BigNumber} The created bignumber
   */ return typed('bignumber', {
        '': function _() {
            return new BigNumber(0);
        },
        number: function number(x) {
            // convert to string to prevent errors in case of >15 digits
            return new BigNumber(x + '');
        },
        string: function string(x) {
            var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);
            if (wordSizeSuffixMatch) {
                // x has a word size suffix
                var size = wordSizeSuffixMatch[2];
                var n = BigNumber(wordSizeSuffixMatch[1]);
                var twoPowSize = new BigNumber(2).pow(Number(size));
                if (n.gt(twoPowSize.sub(1))) throw new SyntaxError("String \"".concat(x, "\" is out of range"));
                var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);
                if (n.gte(twoPowSizeSubOne)) return n.sub(twoPowSize);
                else return n;
            }
            return new BigNumber(x);
        },
        BigNumber: function BigNumber(x) {
            // we assume a BigNumber is immutable
            return x;
        },
        Fraction: function Fraction(x) {
            return new BigNumber(x.n).div(x.d).times(x.s);
        },
        null: function _null(x) {
            return new BigNumber(0);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../../utils/factory.js":"26foW","../../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9oISl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createComplex", ()=>createComplex
);
var _factoryJs = require("../../../utils/factory.js");
var _collectionJs = require("../../../utils/collection.js");
var name = 'complex';
var dependencies = [
    'typed',
    'Complex'
];
var createComplex = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Complex  } = _ref;
    /**
   * Create a complex value or convert a value to a complex value.
   *
   * Syntax:
   *
   *     math.complex()                           // creates a complex value with zero
   *                                              // as real and imaginary part.
   *     math.complex(re : number, im : string)   // creates a complex value with provided
   *                                              // values for real and imaginary part.
   *     math.complex(re : number)                // creates a complex value with provided
   *                                              // real value and zero imaginary part.
   *     math.complex(complex : Complex)          // clones the provided complex value.
   *     math.complex(arg : string)               // parses a string into a complex value.
   *     math.complex(array : Array)              // converts the elements of the array
   *                                              // or matrix element wise into a
   *                                              // complex value.
   *     math.complex({re: number, im: number})   // creates a complex value with provided
   *                                              // values for real an imaginary part.
   *     math.complex({r: number, phi: number})   // creates a complex value with provided
   *                                              // polar coordinates
   *
   * Examples:
   *
   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
   *    a.re = 5                          // a = Complex 5 - 4i
   *    const i = a.im                    // Number -4
   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
   *    const c = math.complex()          // Complex 0 + 0i
   *    const d = math.add(a, b)          // Complex 5 + 2i
   *
   * See also:
   *
   *    bignumber, boolean, index, matrix, number, string, unit
   *
   * @param {* | Array | Matrix} [args]
   *            Arguments specifying the real and imaginary part of the complex number
   * @return {Complex | Array | Matrix} Returns a complex value
   */ return typed('complex', {
        '': function _() {
            return Complex.ZERO;
        },
        number: function number(x) {
            return new Complex(x, 0);
        },
        'number, number': function numberNumber(re, im) {
            return new Complex(re, im);
        },
        // TODO: this signature should be redundant
        'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
            return new Complex(re.toNumber(), im.toNumber());
        },
        Fraction: function Fraction(x) {
            return new Complex(x.valueOf(), 0);
        },
        Complex: function Complex(x) {
            return x.clone();
        },
        string: function string(x) {
            return Complex(x); // for example '2 + 3i'
        },
        null: function _null(x) {
            return Complex(0);
        },
        Object: function Object(x) {
            if ('re' in x && 'im' in x) return new Complex(x.re, x.im);
            if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) return new Complex(x);
            throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../../utils/factory.js":"26foW","../../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fBomH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFraction", ()=>createFraction
);
var _factoryJs = require("../../../utils/factory.js");
var _collectionJs = require("../../../utils/collection.js");
var name = 'fraction';
var dependencies = [
    'typed',
    'Fraction'
];
var createFraction = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Fraction  } = _ref;
    /**
   * Create a fraction convert a value to a fraction.
   *
   * Syntax:
   *     math.fraction(numerator, denominator)
   *     math.fraction({n: numerator, d: denominator})
   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
   *                                                   into fractions
   *
   * Examples:
   *
   *     math.fraction(1, 3)
   *     math.fraction('2/3')
   *     math.fraction({n: 2, d: 3})
   *     math.fraction([0.2, 0.25, 1.25])
   *
   * See also:
   *
   *    bignumber, number, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
   *            Arguments specifying the numerator and denominator of
   *            the fraction
   * @return {Fraction | Array | Matrix} Returns a fraction
   */ return typed('fraction', {
        number: function number(x) {
            if (!isFinite(x) || isNaN(x)) throw new Error(x + ' cannot be represented as a fraction');
            return new Fraction(x);
        },
        string: function string(x) {
            return new Fraction(x);
        },
        'number, number': function numberNumber(numerator, denominator) {
            return new Fraction(numerator, denominator);
        },
        null: function _null(x) {
            return new Fraction(0);
        },
        BigNumber: function BigNumber(x) {
            return new Fraction(x.toString());
        },
        Fraction: function Fraction(x) {
            return x; // fractions are immutable
        },
        Object: function Object(x) {
            return new Fraction(x);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../../utils/factory.js":"26foW","../../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hSgHU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMatrix", ()=>createMatrix
);
var _factoryJs = require("../../../utils/factory.js");
var name = 'matrix';
var dependencies = [
    'typed',
    'Matrix',
    'DenseMatrix',
    'SparseMatrix'
];
var createMatrix = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Matrix , DenseMatrix , SparseMatrix  } = _ref;
    /**
   * Create a new Matrix with given storage format
   * @param {Array} data
   * @param {string} [format]
   * @param {string} [datatype]
   * @returns {Matrix} Returns a new Matrix
   * @private
   */ function _create(data, format, datatype) {
        // get storage format constructor
        if (format === 'dense' || format === 'default' || format === undefined) {
            return new DenseMatrix(data, datatype);
        }
        if (format === 'sparse') {
            return new SparseMatrix(data, datatype);
        }
        throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
    }
    /**
   * Create a Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   * Supported storage formats are 'dense' and 'sparse'.
   *
   * Syntax:
   *
   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
   *
   * Examples:
   *
   *    let m = math.matrix([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, sparse
   *
   * @param {Array | Matrix} [data]    A multi dimensional array
   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`
   * @param {string} [datatype]        Type of the values
   *
   * @return {Matrix} The created matrix
   */ return typed(name, {
        '': function _() {
            return _create([]);
        },
        string: function string(format) {
            return _create([], format);
        },
        'string, string': function stringString(format, datatype) {
            return _create([], format, datatype);
        },
        Array: function Array(data) {
            return _create(data);
        },
        Matrix: function Matrix(data) {
            return _create(data, data.storage());
        },
        'Array | Matrix, string': _create,
        'Array | Matrix, string, string': _create
    });
});

},{"../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hjHIt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMatrixFromFunction", ()=>createMatrixFromFunction
);
var _factoryJs = require("../../utils/factory.js");
var name = 'matrixFromFunction';
var dependencies = [
    'typed',
    'matrix',
    'isZero'
];
var createMatrixFromFunction = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , isZero  } = _ref;
    function _create(size, fn, format, datatype) {
        var m;
        if (datatype !== undefined) {
            m = matrix(format, datatype);
        } else {
            m = matrix(format);
        }
        m.resize(size);
        m.forEach(function(_, index) {
            var val = fn(index);
            if (isZero(val)) return;
            m.set(index, val);
        });
        return m;
    }
    /**
   * Create a matrix by evaluating a generating function at each index.
   * The simplest overload returns a multi-dimensional array as long as `size` is an array.
   * Passing `size` as a Matrix or specifying a `format` will result in returning a Matrix.
   *
   * Syntax:
   *
   *    math.matrixFromFunction(size, fn)
   *    math.matrixFromFunction(size, fn, format)
   *    math.matrixFromFunction(size, fn, format, datatype)
   *    math.matrixFromFunction(size, format, fn)
   *    math.matrixFromFunction(size, format, datatype, fn)
   *
   * Examples:
   *
   *    math.matrixFromFunction([3,3], i => i[0] - i[1]) // an antisymmetric matrix
   *    math.matrixFromFunction([100, 100], 'sparse', i => i[0] - i[1] === 1 ? 4 : 0) // a sparse subdiagonal matrix
   *    math.matrixFromFunction([5], i => math.random()) // a random vector
   *
   * See also:
   *
   *    matrix, zeros
   *
   * @param {Array | Matrix} size   The size of the matrix to be created
   * @param {function} fn           Callback function invoked for every entry in the matrix
   * @param {string} [format]       The Matrix storage format, either `'dense'` or `'sparse'`
   * @param {string} [datatype]     Type of the values
   * @return {Array | Matrix} Returns the created matrix
   */ return typed(name, {
        'Array | Matrix, function, string, string': function ArrayMatrixFunctionStringString(size, fn, format, datatype) {
            return _create(size, fn, format, datatype);
        },
        'Array | Matrix, function, string': function ArrayMatrixFunctionString(size, fn, format) {
            return _create(size, fn, format);
        },
        'Matrix, function': function MatrixFunction(size, fn) {
            return _create(size, fn, 'dense');
        },
        'Array, function': function ArrayFunction(size, fn) {
            return _create(size, fn, 'dense').toArray();
        },
        'Array | Matrix, string, function': function ArrayMatrixStringFunction(size, format, fn) {
            return _create(size, fn, format);
        },
        'Array | Matrix, string, string, function': function ArrayMatrixStringStringFunction(size, format, datatype, fn) {
            return _create(size, fn, format, datatype);
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5b1yw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMatrixFromRows", ()=>createMatrixFromRows
);
var _factoryJs = require("../../utils/factory.js");
var name = 'matrixFromRows';
var dependencies = [
    'typed',
    'matrix',
    'flatten',
    'size'
];
var createMatrixFromRows = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , flatten , size  } = _ref;
    function _createArray(arr) {
        if (arr.length === 0) throw new TypeError('At least one row is needed to construct a matrix.');
        var N = checkVectorTypeAndReturnLength(arr[0]);
        var result = [];
        for (var row of arr){
            var rowLength = checkVectorTypeAndReturnLength(row);
            if (rowLength !== N) {
                throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (rowLength | 0));
            }
            result.push(flatten(row));
        }
        return result;
    }
    function checkVectorTypeAndReturnLength(vec) {
        var s = size(vec);
        if (s.length === 1) {
            // 1D vector
            return s[0];
        } else if (s.length === 2) {
            // 2D vector
            if (s[0] === 1) {
                // row vector
                return s[1];
            } else if (s[1] === 1) {
                // col vector
                return s[0];
            } else {
                throw new TypeError('At least one of the arguments is not a vector.');
            }
        } else {
            throw new TypeError('Only one- or two-dimensional vectors are supported.');
        }
    }
    /**
   * Create a dense matrix from vectors as individual rows.
   * If you pass column vectors, they will be transposed (but not conjugated!)
   *
   * Syntax:
   *
   *    math.matrixFromRows(...arr)
   *    math.matrixFromRows(row1, row2)
   *    math.matrixFromRows(row1, row2, row3)
   *
   * Examples:
   *
   *    math.matrixFromRows([1, 2, 3], [[4],[5],[6]])
   *    math.matrixFromRows(...vectors)
   *
   * See also:
   *
   *    matrix, matrixFromColumns, matrixFromFunction, zeros
   *
   * @param {... Array | Matrix} rows  Multiple rows
   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned
   */ return typed(name, {
        '...Array': function Array(arr) {
            return _createArray(arr);
        },
        '...Matrix': function Matrix(arr) {
            return matrix(_createArray(arr.map((m)=>m.toArray()
            )));
        } // TODO implement this properly for SparseMatrix
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"70U9L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMatrixFromColumns", ()=>createMatrixFromColumns
);
var _factoryJs = require("../../utils/factory.js");
var name = 'matrixFromColumns';
var dependencies = [
    'typed',
    'matrix',
    'flatten',
    'size'
];
var createMatrixFromColumns = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , flatten , size  } = _ref;
    function _createArray(arr) {
        if (arr.length === 0) throw new TypeError('At least one column is needed to construct a matrix.');
        var N = checkVectorTypeAndReturnLength(arr[0]); // create an array with empty rows
        var result = [];
        for(var i = 0; i < N; i++){
            result[i] = [];
        } // loop columns
        for (var col of arr){
            var colLength = checkVectorTypeAndReturnLength(col);
            if (colLength !== N) {
                throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (colLength | 0));
            }
            var f = flatten(col); // push a value to each row
            for(var _i = 0; _i < N; _i++){
                result[_i].push(f[_i]);
            }
        }
        return result;
    }
    function checkVectorTypeAndReturnLength(vec) {
        var s = size(vec);
        if (s.length === 1) {
            // 1D vector
            return s[0];
        } else if (s.length === 2) {
            // 2D vector
            if (s[0] === 1) {
                // row vector
                return s[1];
            } else if (s[1] === 1) {
                // col vector
                return s[0];
            } else {
                throw new TypeError('At least one of the arguments is not a vector.');
            }
        } else {
            throw new TypeError('Only one- or two-dimensional vectors are supported.');
        }
    }
    /**
   * Create a dense matrix from vectors as individual columns.
   * If you pass row vectors, they will be transposed (but not conjugated!)
   *
   * Syntax:
   *
   *    math.matrixFromColumns(...arr)
   *    math.matrixFromColumns(col1, col2)
   *    math.matrixFromColumns(col1, col2, col3)
   *
   * Examples:
   *
   *    math.matrixFromColumns([1, 2, 3], [[4],[5],[6]])
   *    math.matrixFromColumns(...vectors)
   *
   * See also:
   *
   *    matrix, matrixFromRows, matrixFromFunction, zeros
   *
   * @param {... Array | Matrix} cols Multiple columns
   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned
   */ return typed(name, {
        '...Array': function Array(arr) {
            return _createArray(arr);
        },
        '...Matrix': function Matrix(arr) {
            return matrix(_createArray(arr.map((m)=>m.toArray()
            )));
        } // TODO implement this properly for SparseMatrix
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3240p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSplitUnit", ()=>createSplitUnit
);
var _factoryJs = require("../../../utils/factory.js");
var name = 'splitUnit';
var dependencies = [
    'typed'
];
var createSplitUnit = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Split a unit in an array of units whose sum is equal to the original unit.
   *
   * Syntax:
   *
   *     splitUnit(unit: Unit, parts: Array.<Unit>)
   *
   * Example:
   *
   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
   *     // [ 3 feet, 3.3700787401575 inch ]
   *
   * See also:
   *
   *     unit
   *
   * @param {Array} [parts] An array of strings or valueless units.
   * @return {Array} An array of units.
   */ return typed(name, {
        'Unit, Array': function UnitArray(unit, parts) {
            return unit.splitUnit(parts);
        }
    });
});

},{"../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iMfPh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnaryMinus", ()=>createUnaryMinus
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'unaryMinus';
var dependencies = [
    'typed'
];
var createUnaryMinus = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Inverse the sign of a value, apply a unary minus operation.
   *
   * For matrices, the function is evaluated element wise. Boolean values and
   * strings will be converted to a number. For complex numbers, both real and
   * complex value are inverted.
   *
   * Syntax:
   *
   *    math.unaryMinus(x)
   *
   * Examples:
   *
   *    math.unaryMinus(3.5)      // returns -3.5
   *    math.unaryMinus(-4.2)     // returns 4.2
   *
   * See also:
   *
   *    add, subtract, unaryPlus
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
   */ return typed(name, {
        number: _indexJs.unaryMinusNumber,
        Complex: function Complex(x) {
            return x.neg();
        },
        BigNumber: function BigNumber(x) {
            return x.neg();
        },
        Fraction: function Fraction(x) {
            return x.neg();
        },
        Unit: function Unit(x) {
            var res = x.clone();
            res.value = this(x.value);
            return res;
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since unaryMinus(0) = 0
            return _collectionJs.deepMap(x, this, true);
        } // TODO: add support for string
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"caLzb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnaryPlus", ()=>createUnaryPlus
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'unaryPlus';
var dependencies = [
    'typed',
    'config',
    'BigNumber'
];
var createUnaryPlus = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , BigNumber  } = _ref;
    /**
   * Unary plus operation.
   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.unaryPlus(x)
   *
   * Examples:
   *
   *    math.unaryPlus(3.5)      // returns 3.5
   *    math.unaryPlus(1)     // returns 1
   *
   * See also:
   *
   *    unaryMinus, add, subtract
   *
   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
   *            Input value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns the input value when numeric, converts to a number when input is non-numeric.
   */ return typed(name, {
        number: _indexJs.unaryPlusNumber,
        Complex: function Complex(x) {
            return x; // complex numbers are immutable
        },
        BigNumber: function BigNumber(x) {
            return x; // bignumbers are immutable
        },
        Fraction: function Fraction(x) {
            return x; // fractions are immutable
        },
        Unit: function Unit(x) {
            return x.clone();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since unaryPlus(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        'boolean | string': function booleanString(x) {
            // convert to a number or bignumber
            return config.number === 'BigNumber' ? new BigNumber(+x) : +x;
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3JXBn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAbs", ()=>createAbs
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'abs';
var dependencies = [
    'typed'
];
var createAbs = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the absolute value of a number. For matrices, the function is
   * evaluated element wise.
   *
   * Syntax:
   *
   *    math.abs(x)
   *
   * Examples:
   *
   *    math.abs(3.5)                // returns number 3.5
   *    math.abs(-4.2)               // returns number 4.2
   *
   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
   *
   * See also:
   *
   *    sign
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            A number or matrix for which to get the absolute value
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Absolute value of `x`
   */ return typed(name, {
        number: _indexJs.absNumber,
        Complex: function Complex(x) {
            return x.abs();
        },
        BigNumber: function BigNumber(x) {
            return x.abs();
        },
        Fraction: function Fraction(x) {
            return x.abs();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since abs(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        Unit: function Unit(x) {
            return x.abs();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7QrEO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createApply", ()=>createApply
);
var _factoryJs = require("../../utils/factory.js");
var _arrayJs = require("../../utils/array.js");
var _isJs = require("../../utils/is.js");
var _indexErrorJs = require("../../error/IndexError.js");
var name = 'apply';
var dependencies = [
    'typed',
    'isInteger'
];
var createApply = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , isInteger  } = _ref;
    /**
   * Apply a function that maps an array to a scalar
   * along a given axis of a matrix or array.
   * Returns a new matrix or array with one less dimension than the input.
   *
   * Syntax:
   *
   *     math.apply(A, dim, callback)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [3, 4]]
   *    const sum = math.sum
   *
   *    math.apply(A, 0, sum)             // returns [4, 6]
   *    math.apply(A, 1, sum)             // returns [3, 7]
   *
   * See also:
   *
   *    map, filter, forEach
   *
   * @param {Array | Matrix} array   The input Matrix
   * @param {number} dim             The dimension along which the callback is applied
   * @param {Function} callback      The callback function that is applied. This Function
   *                                 should take an array or 1-d matrix as an input and
   *                                 return a number.
   * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.
   */ return typed(name, {
        'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {
            if (!isInteger(dim)) throw new TypeError('Integer number expected for dimension');
            var size = Array.isArray(mat) ? _arrayJs.arraySize(mat) : mat.size();
            if (dim < 0 || dim >= size.length) throw new _indexErrorJs.IndexError(dim, size.length);
            if (_isJs.isMatrix(mat)) return mat.create(_apply(mat.valueOf(), dim, callback));
            else return _apply(mat, dim, callback);
        }
    });
});
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */ function _apply(mat, dim, callback) {
    var i, ret, tran;
    if (dim <= 0) {
        if (!Array.isArray(mat[0])) return callback(mat);
        else {
            tran = _switch(mat);
            ret = [];
            for(i = 0; i < tran.length; i++)ret[i] = _apply(tran[i], dim - 1, callback);
            return ret;
        }
    } else {
        ret = [];
        for(i = 0; i < mat.length; i++)ret[i] = _apply(mat[i], dim - 1, callback);
        return ret;
    }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */ function _switch(mat) {
    var I = mat.length;
    var J = mat[0].length;
    var i, j;
    var ret = [];
    for(j = 0; j < J; j++){
        var tmp = [];
        for(i = 0; i < I; i++)tmp.push(mat[i][j]);
        ret.push(tmp);
    }
    return ret;
}

},{"../../utils/factory.js":"26foW","../../utils/array.js":"3R6c8","../../utils/is.js":"iwdlF","../../error/IndexError.js":"bCMLn","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bDcpY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAddScalar", ()=>createAddScalar
);
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'addScalar';
var dependencies = [
    'typed'
];
var createAddScalar = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Add two scalar values, `x + y`.
   * This function is meant for internal use: it is used by the public function
   * `add`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
   * @private
   */ return typed(name, {
        'number, number': _indexJs.addNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
            return x.add(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return x.plus(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.add(y);
        },
        'Unit, Unit': function UnitUnit(x, y) {
            if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
            if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
            if (!x.equalBase(y)) throw new Error('Units do not match');
            var res = x.clone();
            res.value = this(res.value, y.value);
            res.fixPrefix = false;
            return res;
        }
    });
});

},{"../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eFAIJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCbrt", ()=>createCbrt
);
var _factoryJs = require("../../utils/factory.js");
var _isJs = require("../../utils/is.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'cbrt';
var dependencies = [
    'config',
    'typed',
    'isNegative',
    'unaryMinus',
    'matrix',
    'Complex',
    'BigNumber',
    'Fraction'
];
var createCbrt = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { config , typed , isNegative , unaryMinus , matrix , Complex , BigNumber , Fraction  } = _ref;
    /**
   * Calculate the cubic root for a complex number
   * @param {Complex} x
   * @param {boolean} [allRoots]   If true, the function will return an array
   *                               with all three roots. If false or undefined,
   *                               the principal root is returned.
   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
   * @private
   */ function _cbrtComplex(x, allRoots) {
        // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
        var arg3 = x.arg() / 3;
        var abs = x.abs(); // principal root:
        var principal = new Complex(_indexJs.cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());
        if (allRoots) {
            var all = [
                principal,
                new Complex(_indexJs.cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()),
                new Complex(_indexJs.cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())
            ];
            return config.matrix === 'Array' ? all : matrix(all);
        } else {
            return principal;
        }
    }
    /**
   * Calculate the cubic root for a Unit
   * @param {Unit} x
   * @return {Unit} Returns the cubic root of x
   * @private
   */ function _cbrtUnit(x) {
        if (x.value && _isJs.isComplex(x.value)) {
            var result = x.clone();
            result.value = 1;
            result = result.pow(1 / 3); // Compute the units
            result.value = _cbrtComplex(x.value); // Compute the value
            return result;
        } else {
            var negate = isNegative(x.value);
            if (negate) {
                x.value = unaryMinus(x.value);
            } // TODO: create a helper function for this
            var third;
            if (_isJs.isBigNumber(x.value)) {
                third = new BigNumber(1).div(3);
            } else if (_isJs.isFraction(x.value)) {
                third = new Fraction(1, 3);
            } else {
                third = 1 / 3;
            }
            var _result = x.pow(third);
            if (negate) {
                _result.value = unaryMinus(_result.value);
            }
            return _result;
        }
    }
    /**
   * Calculate the cubic root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cbrt(x)
   *    math.cbrt(x, allRoots)
   *
   * Examples:
   *
   *    math.cbrt(27)                  // returns 3
   *    math.cube(3)                   // returns 27
   *    math.cbrt(-64)                 // returns -4
   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
   *
   *    const x = math.complex('8i')
   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
   *    math.cbrt(x, true)             // returns Matrix [
   *                                    //    1.7320508075689 + i
   *                                    //   -1.7320508075689 + i
   *                                    //   -2i
   *                                    // ]
   *
   * See also:
   *
   *    square, sqrt, cube
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
   *            Value for which to calculate the cubic root.
   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
   *            when `x` is a number or complex number. If true, all complex
   *            roots are returned, if false (default) the principal root is
   *            returned.
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
   *            Returns the cubic root of `x`
   */ return typed(name, {
        number: _indexJs.cbrtNumber,
        // note: signature 'number, boolean' is also supported,
        //       created by typed as it knows how to convert number to Complex
        Complex: _cbrtComplex,
        'Complex, boolean': _cbrtComplex,
        BigNumber: function BigNumber(x) {
            return x.cbrt();
        },
        Unit: _cbrtUnit,
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since cbrt(0) = 0
            return _collectionJs.deepMap(x, this, true);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/is.js":"iwdlF","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jG4vg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCeil", ()=>createCeil
);
var _decimalJs = require("decimal.js");
var _decimalJsDefault = parcelHelpers.interopDefault(_decimalJs);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _numberJs = require("../../utils/number.js");
var _nearlyEqualJs = require("../../utils/bignumber/nearlyEqual.js");
var _indexJs = require("../../plain/number/index.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'ceil';
var dependencies = [
    'typed',
    'config',
    'round',
    'matrix',
    'equalScalar'
];
var createCeil = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , round , matrix , equalScalar  } = _ref;
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Round a value towards plus infinity
   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.ceil(x)
   *    math.ceil(x, n)
   *
   * Examples:
   *
   *    math.ceil(3.2)               // returns number 4
   *    math.ceil(3.8)               // returns number 4
   *    math.ceil(-4.2)              // returns number -4
   *    math.ceil(-4.7)              // returns number -4
   *
   *    math.ceil(3.212, 2)          // returns number 3.22
   *    math.ceil(3.288, 2)          // returns number 3.29
   *    math.ceil(-4.212, 2)         // returns number -4.21
   *    math.ceil(-4.782, 2)         // returns number -4.78
   *
   *    const c = math.complex(3.24, -2.71)
   *    math.ceil(c)                 // returns Complex 4 - 2i
   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i
   *
   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]
   *
   * See also:
   *
   *    floor, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */ return typed('ceil', {
        number: function number(x) {
            if (_numberJs.nearlyEqual(x, round(x), config.epsilon)) return round(x);
            else return _indexJs.ceilNumber(x);
        },
        'number, number': function numberNumber(x, n) {
            if (_numberJs.nearlyEqual(x, round(x, n), config.epsilon)) return round(x, n);
            else {
                var [number, exponent] = "".concat(x, "e").split('e');
                var result = Math.ceil(Number("".concat(number, "e").concat(Number(exponent) + n)));
                [number, exponent] = "".concat(result, "e").split('e');
                return Number("".concat(number, "e").concat(Number(exponent) - n));
            }
        },
        Complex: function Complex(x) {
            return x.ceil();
        },
        'Complex, number': function ComplexNumber(x, n) {
            return x.ceil(n);
        },
        BigNumber: function BigNumber(x) {
            if (_nearlyEqualJs.nearlyEqual(x, round(x), config.epsilon)) return round(x);
            else return x.ceil();
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
            if (_nearlyEqualJs.nearlyEqual(x, round(x, n), config.epsilon)) return round(x, n);
            else return x.toDecimalPlaces(n.toNumber(), _decimalJsDefault.default.ROUND_CEIL);
        },
        Fraction: function Fraction(x) {
            return x.ceil();
        },
        'Fraction, number': function FractionNumber(x, n) {
            return x.ceil(n);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since ceil(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        'Array | Matrix, number': function ArrayMatrixNumber(x, n) {
            // deep map collection, skip zeros since ceil(0) = 0
            return _collectionJs.deepMap(x, (i)=>this(i, n)
            , true);
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            return algorithm14(x, y, this, false);
        },
        'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"decimal.js":"c4thc","../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../utils/number.js":"l1AB8","../../utils/bignumber/nearlyEqual.js":"2W3Ce","../../plain/number/index.js":"8bgPw","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bG0hV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm11", ()=>createAlgorithm11
);
var _factoryJs = require("../../../utils/factory.js");
var name = 'algorithm11';
var dependencies = [
    'typed',
    'equalScalar'
];
var createAlgorithm11 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equalScalar  } = _ref;
    /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */ return function algorithm11(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype; // sparse matrix cannot be a Pattern matrix
        if (!avalues) throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string') {
            // datatype
            dt = adt; // find signature that matches (dt, dt)
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt); // convert b to the same datatype
            b = typed.convert(b, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result arrays
        var cvalues = [];
        var cindex = [];
        var cptr = []; // loop columns
        for(var j = 0; j < columns; j++){
            // initialize ptr
            cptr[j] = cindex.length; // values in j
            for(var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++){
                // row
                var i = aindex[k]; // invoke callback
                var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero
                if (!eq(v, zero)) {
                    // push index & value
                    cindex.push(i);
                    cvalues.push(v);
                }
            }
        } // update ptr
        cptr[columns] = cindex.length; // return sparse matrix
        return s.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"82VrR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm14", ()=>createAlgorithm14
);
var _factoryJs = require("../../../utils/factory.js");
var _objectJs = require("../../../utils/object.js");
var name = 'algorithm14';
var dependencies = [
    'typed'
];
var createAlgorithm14 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    function _iterate(f, level, s, n, av, bv, inverse) {
        // initialize array for this level
        var cv = []; // check we reach the last level
        if (level === s.length - 1) {
            // loop arrays in last level
            for(var i = 0; i < n; i++){
                // invoke callback and store value
                cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
            }
        } else {
            // iterate current level
            for(var j = 0; j < n; j++){
                // iterate next level
                cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
            }
        }
        return cv;
    }
    /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, b)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij..z,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
   */ return function algorithm14(a, b, callback, inverse) {
        // a arrays
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // datatype
        var dt; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string') {
            // datatype
            dt = adt; // convert b to the same datatype
            b = typed.convert(b, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // populate cdata, iterate through dimensions
        var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix
        return a.createDenseMatrix({
            data: cdata,
            size: _objectJs.clone(asize),
            datatype: dt
        });
    }; // recursive function
});

},{"../../../utils/factory.js":"26foW","../../../utils/object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lIS81":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCube", ()=>createCube
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'cube';
var dependencies = [
    'typed'
];
var createCube = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Compute the cube of a value, `x * x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cube(x)
   *
   * Examples:
   *
   *    math.cube(2)            // returns number 8
   *    math.pow(2, 3)          // returns number 8
   *    math.cube(4)            // returns number 64
   *    4 * 4 * 4               // returns number 64
   *
   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
   *
   * See also:
   *
   *    multiply, square, pow, cbrt
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
   */ return typed(name, {
        number: _indexJs.cubeNumber,
        Complex: function Complex(x) {
            return x.mul(x).mul(x); // Is faster than pow(x, 3)
        },
        BigNumber: function BigNumber(x) {
            return x.times(x).times(x);
        },
        Fraction: function Fraction(x) {
            return x.pow(3); // Is faster than mul()mul()mul()
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since cube(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        Unit: function Unit(x) {
            return x.pow(3);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4C3hU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createExp", ()=>createExp
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'exp';
var dependencies = [
    'typed'
];
var createExp = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the exponent of a value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.exp(x)
   *
   * Examples:
   *
   *    math.exp(2)                  // returns number 7.3890560989306495
   *    math.pow(math.e, 2)          // returns number 7.3890560989306495
   *    math.log(math.exp(2))        // returns number 2
   *
   *    math.exp([1, 2, 3])
   *    // returns Array [
   *    //   2.718281828459045,
   *    //   7.3890560989306495,
   *    //   20.085536923187668
   *    // ]
   *
   * See also:
   *
   *    expm1, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */ return typed(name, {
        number: _indexJs.expNumber,
        Complex: function Complex(x) {
            return x.exp();
        },
        BigNumber: function BigNumber(x) {
            return x.exp();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // TODO: exp(sparse) should return a dense matrix since exp(0)==1
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jgL9V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createExpm1", ()=>createExpm1
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'expm1';
var dependencies = [
    'typed',
    'Complex'
];
var createExpm1 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Complex: _Complex  } = _ref;
    /**
   * Calculate the value of subtracting 1 from the exponential value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.expm1(x)
   *
   * Examples:
   *
   *    math.expm1(2)                      // returns number 6.38905609893065
   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
   *    math.log(math.expm1(2) + 1)        // returns number 2
   *
   *    math.expm1([1, 2, 3])
   *    // returns Array [
   *    //   1.718281828459045,
   *    //   6.3890560989306495,
   *    //   19.085536923187668
   *    // ]
   *
   * See also:
   *
   *    exp, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */ return typed(name, {
        number: _indexJs.expm1Number,
        Complex: function Complex(x) {
            var r = Math.exp(x.re);
            return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
        },
        BigNumber: function BigNumber(x) {
            return x.exp().minus(1);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3we1r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFix", ()=>createFix
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'fix';
var dependencies = [
    'typed',
    'Complex',
    'matrix',
    'ceil',
    'floor'
];
var createFix = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Complex: _Complex , matrix , ceil , floor  } = _ref;
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Round a value towards zero.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.fix(x)
   *
   * Examples:
   *
   *    math.fix(3.2)                // returns number 3
   *    math.fix(3.8)                // returns number 3
   *    math.fix(-4.2)               // returns number -4
   *    math.fix(-4.7)               // returns number -4
   *
   *    math.fix(3.12, 1)                // returns number 3.1
   *    math.fix(3.18, 1)                // returns number 3.1
   *    math.fix(-4.12, 1)               // returns number -4.1
   *    math.fix(-4.17, 1)               // returns number -4.1
   *
   *    const c = math.complex(3.22, -2.78)
   *    math.fix(c)                  // returns Complex 3 - 2i
   *    math.fix(c, 1)               // returns Complex 3.2 - 2.7i
   *
   *    math.fix([3.2, 3.8, -4.7])      // returns Array [3, 3, -4]
   *    math.fix([3.2, 3.8, -4.7], 1)   // returns Array [3.2, 3.8, -4.7]
   *
   * See also:
   *
   *    ceil, floor, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x    Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                             Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}     Rounded value
   */ return typed('fix', {
        number: function number(x) {
            return x > 0 ? floor(x) : ceil(x);
        },
        'number, number | BigNumber': function numberNumberBigNumber(x, n) {
            return x > 0 ? floor(x, n) : ceil(x, n);
        },
        Complex: function Complex(x) {
            return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
        },
        'Complex, number | BigNumber': function ComplexNumberBigNumber(x, n) {
            return new _Complex(x.re > 0 ? floor(x.re, n) : ceil(x.re, n), x.im > 0 ? floor(x.im, n) : ceil(x.im, n));
        },
        BigNumber: function BigNumber(x) {
            return x.isNegative() ? ceil(x) : floor(x);
        },
        'BigNumber, number | BigNumber': function BigNumberNumberBigNumber(x, n) {
            return x.isNegative() ? ceil(x, n) : floor(x, n);
        },
        Fraction: function Fraction(x) {
            return x.s < 0 ? x.ceil() : x.floor();
        },
        'Fraction, number | BigNumber': function FractionNumberBigNumber(x, n) {
            return x.s < 0 ? x.ceil(n) : x.floor(n);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since fix(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(x, n) {
            // deep map collection, skip zeros since fix(0) = 0
            return _collectionJs.deepMap(x, (i)=>this(i, n)
            , true);
        },
        'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2vzgv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFloor", ()=>createFloor
);
var _decimalJs = require("decimal.js");
var _decimalJsDefault = parcelHelpers.interopDefault(_decimalJs);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _numberJs = require("../../utils/number.js");
var _nearlyEqualJs = require("../../utils/bignumber/nearlyEqual.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'floor';
var dependencies = [
    'typed',
    'config',
    'round',
    'matrix',
    'equalScalar'
];
var createFloor = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , round , matrix , equalScalar  } = _ref;
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Round a value towards minus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.floor(x)
   *    math.floor(x, n)
   *
   * Examples:
   *
   *    math.floor(3.2)              // returns number 3
   *    math.floor(3.8)              // returns number 3
   *    math.floor(-4.2)             // returns number -5
   *    math.floor(-4.7)             // returns number -5
   *
   *    math.floor(3.212, 2)          // returns number 3.21
   *    math.floor(3.288, 2)          // returns number 3.28
   *    math.floor(-4.212, 2)         // returns number -4.22
   *    math.floor(-4.782, 2)         // returns number -4.79
   *
   *    const c = math.complex(3.24, -2.71)
   *    math.floor(c)                 // returns Complex 3 - 3i
   *    math.floor(c, 1)              // returns Complex 3.2 - 2.8i
   *
   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]
   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]
   *
   * See also:
   *
   *    ceil, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */ return typed('floor', {
        number: function number(x) {
            if (_numberJs.nearlyEqual(x, round(x), config.epsilon)) return round(x);
            else return Math.floor(x);
        },
        'number, number': function numberNumber(x, n) {
            if (_numberJs.nearlyEqual(x, round(x, n), config.epsilon)) return round(x, n);
            else {
                var [number, exponent] = "".concat(x, "e").split('e');
                var result = Math.floor(Number("".concat(number, "e").concat(Number(exponent) + n)));
                [number, exponent] = "".concat(result, "e").split('e');
                return Number("".concat(number, "e").concat(Number(exponent) - n));
            }
        },
        Complex: function Complex(x) {
            return x.floor();
        },
        'Complex, number': function ComplexNumber(x, n) {
            return x.floor(n);
        },
        BigNumber: function BigNumber(x) {
            if (_nearlyEqualJs.nearlyEqual(x, round(x), config.epsilon)) return round(x);
            else return x.floor();
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
            if (_nearlyEqualJs.nearlyEqual(x, round(x, n), config.epsilon)) return round(x, n);
            else return x.toDecimalPlaces(n.toNumber(), _decimalJsDefault.default.ROUND_FLOOR);
        },
        Fraction: function Fraction(x) {
            return x.floor();
        },
        'Fraction, number': function FractionNumber(x, n) {
            return x.floor(n);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since floor(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        'Array | Matrix, number': function ArrayMatrixNumber(x, n) {
            // deep map collection, skip zeros since ceil(0) = 0
            return _collectionJs.deepMap(x, (i)=>this(i, n)
            , true);
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            return algorithm14(x, y, this, false);
        },
        'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"decimal.js":"c4thc","../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../utils/number.js":"l1AB8","../../utils/bignumber/nearlyEqual.js":"2W3Ce","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ftHzT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGcd", ()=>createGcd
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm01Js = require("../../type/matrix/utils/algorithm01.js");
var _algorithm04Js = require("../../type/matrix/utils/algorithm04.js");
var _algorithm10Js = require("../../type/matrix/utils/algorithm10.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'gcd';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'BigNumber',
    'DenseMatrix'
];
var createGcd = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , BigNumber , DenseMatrix  } = _ref;
    var algorithm01 = _algorithm01Js.createAlgorithm01({
        typed
    });
    var algorithm04 = _algorithm04Js.createAlgorithm04({
        typed,
        equalScalar
    });
    var algorithm10 = _algorithm10Js.createAlgorithm10({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Calculate gcd for BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns greatest common denominator of a and b
   * @private
   */ function _gcdBigNumber(a, b) {
        if (!a.isInt() || !b.isInt()) {
            throw new Error('Parameters in function gcd must be integer numbers');
        } // https://en.wikipedia.org/wiki/Euclidean_algorithm
        var zero = new BigNumber(0);
        while(!b.isZero()){
            var r = a.mod(b);
            a = b;
            b = r;
        }
        return a.lt(zero) ? a.neg() : a;
    }
    /**
   * Calculate the greatest common divisor for two or more values or arrays.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gcd(a, b)
   *    math.gcd(a, b, c, ...)
   *
   * Examples:
   *
   *    math.gcd(8, 12)              // returns 4
   *    math.gcd(-4, 6)              // returns 2
   *    math.gcd(25, 15, -10)        // returns 5
   *
   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
   *
   * See also:
   *
   *    lcm, xgcd
   *
   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
   */ return typed(name, {
        'number, number': _indexJs.gcdNumber,
        'BigNumber, BigNumber': _gcdBigNumber,
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.gcd(y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm04(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm01(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            return algorithm10(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
            return algorithm10(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        },
        // TODO: need a smarter notation here
        'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
            var res = this(a, b);
            for(var i = 0; i < args.length; i++)res = this(res, args[i]);
            return res;
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm01.js":"8dKyd","../../type/matrix/utils/algorithm04.js":"lmihc","../../type/matrix/utils/algorithm10.js":"jcqxM","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8dKyd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm01", ()=>createAlgorithm01
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var name = 'algorithm01';
var dependencies = [
    'typed'
];
var createAlgorithm01 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  Dij          ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */ return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype; // sparse matrix arrays
        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
         // sparse matrix cannot be a Pattern matrix
        if (!bvalues) throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // process data types
        var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function
        var cf = dt ? typed.find(callback, [
            dt,
            dt
        ]) : callback; // vars
        var i, j; // result (DenseMatrix)
        var cdata = []; // initialize c
        for(i = 0; i < rows; i++)cdata[i] = [];
         // workspace
        var x = []; // marks indicating we have a value in x for a given column
        var w = []; // loop columns in b
        for(j = 0; j < columns; j++){
            // column mark
            var mark = j + 1; // values in column j
            for(var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++){
                // row
                i = bindex[k]; // update workspace
                x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated
                w[i] = mark;
            } // loop rows
            for(i = 0; i < rows; i++)// check row is in workspace
            if (w[i] === mark) // c[i][j] was already calculated
            cdata[i][j] = x[i];
            else // item does not exist in S
            cdata[i][j] = adata[i][j];
        } // return dense matrix
        return denseMatrix.createDenseMatrix({
            data: cdata,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lmihc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm04", ()=>createAlgorithm04
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var name = 'algorithm04';
var dependencies = [
    'typed',
    'equalScalar'
];
var createAlgorithm04 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equalScalar  } = _ref;
    /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  B(i,j)       ; B(i,j) !== 0
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */ return function algorithm04(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string' && adt === bdt) {
            // datatype
            dt = adt; // find signature that matches (dt, dt)
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result arrays
        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspace
        var xa = avalues && bvalues ? [] : undefined;
        var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column
        var wa = [];
        var wb = []; // vars
        var i, j, k, k0, k1; // loop columns
        for(j = 0; j < columns; j++){
            // update cptr
            cptr[j] = cindex.length; // columns mark
            var mark = j + 1; // loop A(:,j)
            for(k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++){
                // row
                i = aindex[k]; // update c
                cindex.push(i); // update workspace
                wa[i] = mark; // check we need to process values
                if (xa) xa[i] = avalues[k];
            } // loop B(:,j)
            for(k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++){
                // row
                i = bindex[k]; // check row exists in A
                if (wa[i] === mark) // update record in xa @ i
                {
                    if (xa) {
                        // invoke callback
                        var v = cf(xa[i], bvalues[k]); // check for zero
                        if (!eq(v, zero)) // update workspace
                        xa[i] = v;
                        else // remove mark (index will be removed later)
                        wa[i] = null;
                    }
                } else {
                    // update c
                    cindex.push(i); // update workspace
                    wb[i] = mark; // check we need to process values
                    if (xb) xb[i] = bvalues[k];
                }
            } // check we need to process values (non pattern matrix)
            if (xa && xb) {
                // initialize first index in j
                k = cptr[j]; // loop index in j
                while(k < cindex.length){
                    // row
                    i = cindex[k]; // check workspace has value @ i
                    if (wa[i] === mark) {
                        // push value (Aij != 0 || (Aij != 0 && Bij != 0))
                        cvalues[k] = xa[i]; // increment pointer
                        k++;
                    } else if (wb[i] === mark) {
                        // push value (bij != 0)
                        cvalues[k] = xb[i]; // increment pointer
                        k++;
                    } else // remove index @ k
                    cindex.splice(k, 1);
                }
            }
        } // update cptr
        cptr[columns] = cindex.length; // return sparse matrix
        return a.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jcqxM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm10", ()=>createAlgorithm10
);
var _factoryJs = require("../../../utils/factory.js");
var name = 'algorithm10';
var dependencies = [
    'typed',
    'DenseMatrix'
];
var createAlgorithm10 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , DenseMatrix  } = _ref;
    /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  b          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */ return function algorithm10(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype; // sparse matrix cannot be a Pattern matrix
        if (!avalues) throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string') {
            // datatype
            dt = adt; // convert b to the same datatype
            b = typed.convert(b, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result arrays
        var cdata = []; // workspaces
        var x = []; // marks indicating we have a value in x for a given column
        var w = []; // loop columns
        for(var j = 0; j < columns; j++){
            // columns mark
            var mark = j + 1; // values in j
            for(var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++){
                // row
                var r = aindex[k]; // update workspace
                x[r] = avalues[k];
                w[r] = mark;
            } // loop rows
            for(var i = 0; i < rows; i++){
                // initialize C on first column
                if (j === 0) // create row array
                cdata[i] = [];
                 // check sparse matrix has a value @ i,j
                if (w[i] === mark) // invoke callback, update C
                cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
                else // dense matrix value @ i, j
                cdata[i][j] = b;
            }
        } // return dense matrix
        return new DenseMatrix({
            data: cdata,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fiTNq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm13", ()=>createAlgorithm13
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var name = 'algorithm13';
var dependencies = [
    'typed'
];
var createAlgorithm13 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    function _iterate(f, level, s, n, av, bv) {
        // initialize array for this level
        var cv = []; // check we reach the last level
        if (level === s.length - 1) {
            // loop arrays in last level
            for(var i = 0; i < n; i++){
                // invoke callback and store value
                cv[i] = f(av[i], bv[i]);
            }
        } else {
            // iterate current level
            for(var j = 0; j < n; j++){
                // iterate next level
                cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
            }
        }
        return cv;
    }
    /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, Bij..z)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Matrix}   b                 The DenseMatrix instance (B)
   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
   */ return function algorithm13(a, b, callback) {
        // a arrays
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b arrays
        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype; // c arrays
        var csize = []; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // validate each one of the dimension sizes
        for(var s = 0; s < asize.length; s++){
            // must match
            if (asize[s] !== bsize[s]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
             // update dimension in c
            csize[s] = asize[s];
        } // datatype
        var dt; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string' && adt === bdt) {
            // datatype
            dt = adt; // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // populate cdata, iterate through dimensions
        var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix
        return a.createDenseMatrix({
            data: cdata,
            size: csize,
            datatype: dt
        });
    }; // recursive function
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"beY1Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLcm", ()=>createLcm
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm06Js = require("../../type/matrix/utils/algorithm06.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'lcm';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar'
];
var createLcm = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar  } = _ref;
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm06 = _algorithm06Js.createAlgorithm06({
        typed,
        equalScalar
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Calculate lcm for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns the least common multiple of a and b
   * @private
   */ function _lcmBigNumber(a, b) {
        if (!a.isInt() || !b.isInt()) {
            throw new Error('Parameters in function lcm must be integer numbers');
        }
        if (a.isZero()) {
            return a;
        }
        if (b.isZero()) {
            return b;
        } // https://en.wikipedia.org/wiki/Euclidean_algorithm
        // evaluate lcm here inline to reduce overhead
        var prod = a.times(b);
        while(!b.isZero()){
            var t = b;
            b = a.mod(t);
            a = t;
        }
        return prod.div(a).abs();
    }
    /**
   * Calculate the least common multiple for two or more values or arrays.
   *
   * lcm is defined as:
   *
   *     lcm(a, b) = abs(a * b) / gcd(a, b)
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.lcm(a, b)
   *    math.lcm(a, b, c, ...)
   *
   * Examples:
   *
   *    math.lcm(4, 6)               // returns 12
   *    math.lcm(6, 21)              // returns 42
   *    math.lcm(6, 21, 5)           // returns 210
   *
   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
   *
   * See also:
   *
   *    gcd, xgcd
   *
   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
   */ return typed(name, {
        'number, number': _indexJs.lcmNumber,
        'BigNumber, BigNumber': _lcmBigNumber,
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.lcm(y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm06(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm02(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
            return algorithm11(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        },
        // TODO: need a smarter notation here
        'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
            var res = this(a, b);
            for(var i = 0; i < args.length; i++)res = this(res, args[i]);
            return res;
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm06.js":"jh6kl","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"avLDa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm02", ()=>createAlgorithm02
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var name = 'algorithm02';
var dependencies = [
    'typed',
    'equalScalar'
];
var createAlgorithm02 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equalScalar  } = _ref;
    /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */ return function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype; // sparse matrix arrays
        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
         // sparse matrix cannot be a Pattern matrix
        if (!bvalues) throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string' && adt === bdt) {
            // datatype
            dt = adt; // find signature that matches (dt, dt)
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result (SparseMatrix)
        var cvalues = [];
        var cindex = [];
        var cptr = []; // loop columns in b
        for(var j = 0; j < columns; j++){
            // update cptr
            cptr[j] = cindex.length; // values in column j
            for(var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++){
                // row
                var i = bindex[k]; // update C(i,j)
                var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero
                if (!eq(cij, zero)) {
                    // push i & v
                    cindex.push(i);
                    cvalues.push(cij);
                }
            }
        } // update cptr
        cptr[columns] = cindex.length; // return sparse matrix
        return sparseMatrix.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jh6kl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm06", ()=>createAlgorithm06
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var _collectionJs = require("../../../utils/collection.js");
var name = 'algorithm06';
var dependencies = [
    'typed',
    'equalScalar'
];
var createAlgorithm06 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equalScalar  } = _ref;
    /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */ return function algorithm06(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays
        var bvalues = b._values;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string' && adt === bdt) {
            // datatype
            dt = adt; // find signature that matches (dt, dt)
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result arrays
        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspaces
        var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column
        var w = []; // marks indicating value in a given row has been updated
        var u = []; // loop columns
        for(var j = 0; j < columns; j++){
            // update cptr
            cptr[j] = cindex.length; // columns mark
            var mark = j + 1; // scatter the values of A(:,j) into workspace
            _collectionJs.scatter(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace
            _collectionJs.scatter(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)
            if (x) {
                // initialize first index in j
                var k = cptr[j]; // loop index in j
                while(k < cindex.length){
                    // row
                    var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)
                    if (u[i] === mark) {
                        // value @ i
                        var v = x[i]; // check for zero value
                        if (!eq(v, zero)) {
                            // push value
                            cvalues.push(v); // increment pointer
                            k++;
                        } else // remove value @ i, do not increment pointer
                        cindex.splice(k, 1);
                    } else // remove value @ i, do not increment pointer
                    cindex.splice(k, 1);
                }
            } else {
                // initialize first index in j
                var p = cptr[j]; // loop index in j
                while(p < cindex.length){
                    // row
                    var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)
                    if (u[r] !== mark) // remove value @ i, do not increment pointer
                    cindex.splice(p, 1);
                    else // increment pointer
                    p++;
                }
            }
        } // update cptr
        cptr[columns] = cindex.length; // return sparse matrix
        return a.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","../../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lMJMv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLog10", ()=>createLog10
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'log10';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createLog10 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex: _Complex  } = _ref;
    /**
   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log10(x)
   *
   * Examples:
   *
   *    math.log10(0.00001)            // returns -5
   *    math.log10(10000)              // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *    math.pow(10, 4)                // returns 10000
   *
   * See also:
   *
   *    exp, log, log1p, log2
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 10-base logarithm of `x`
   */ return typed(name, {
        number: function number(x) {
            if (x >= 0 || config.predictable) return _indexJs.log10Number(x);
            else // negative value -> complex value computation
            return new _Complex(x, 0).log().div(Math.LN10);
        },
        Complex: function Complex(x) {
            return new _Complex(x).log().div(Math.LN10);
        },
        BigNumber: function BigNumber(x) {
            if (!x.isNegative() || config.predictable) return x.log();
            else // downgrade to number, return Complex valued result
            return new _Complex(x.toNumber(), 0).log().div(Math.LN10);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8Uu0O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLog2", ()=>createLog2
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'log2';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createLog2 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex  } = _ref;
    /**
   * Calculate log2 for a complex value
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */ function _log2Complex(x) {
        var newX = Math.sqrt(x.re * x.re + x.im * x.im);
        return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
    }
    /**
   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log2(x)
   *
   * Examples:
   *
   *    math.log2(0.03125)           // returns -5
   *    math.log2(16)                // returns 4
   *    math.log2(16) / math.log2(2) // returns 4
   *    math.pow(2, 4)               // returns 16
   *
   * See also:
   *
   *    exp, log, log1p, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 2-base logarithm of `x`
   */ return typed(name, {
        number: function number(x) {
            if (x >= 0 || config.predictable) return _indexJs.log2Number(x);
            else // negative value -> complex value computation
            return _log2Complex(new Complex(x, 0));
        },
        Complex: _log2Complex,
        BigNumber: function BigNumber(x) {
            if (!x.isNegative() || config.predictable) return x.log(2);
            else // downgrade to number, return Complex valued result
            return _log2Complex(new Complex(x.toNumber(), 0));
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ebyKM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMod", ()=>createMod
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm05Js = require("../../type/matrix/utils/algorithm05.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'mod';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'DenseMatrix'
];
var createMod = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , DenseMatrix  } = _ref;
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm05 = _algorithm05Js.createAlgorithm05({
        typed,
        equalScalar
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Calculates the modulus, the remainder of an integer division.
   *
   * For matrices, the function is evaluated element wise.
   *
   * The modulus is defined as:
   *
   *     x - y * floor(x / y)
   *
   * See https://en.wikipedia.org/wiki/Modulo_operation.
   *
   * Syntax:
   *
   *    math.mod(x, y)
   *
   * Examples:
   *
   *    math.mod(8, 3)                // returns 2
   *    math.mod(11, 2)               // returns 1
   *
   *    function isOdd(x) {
   *      return math.mod(x, 2) != 0
   *    }
   *
   *    isOdd(2)                      // returns false
   *    isOdd(3)                      // returns true
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
   */ return typed(name, {
        'number, number': _indexJs.modNumber,
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            if (y.isNeg()) throw new Error('Cannot calculate mod for a negative divisor');
            return y.isZero() ? x : x.mod(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            if (y.compare(0) < 0) throw new Error('Cannot calculate mod for a negative divisor');
             // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend
            return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm05(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm05.js":"fZJCI","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fE9Hp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm03", ()=>createAlgorithm03
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var name = 'algorithm03';
var dependencies = [
    'typed'
];
var createAlgorithm03 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
   * Callback function invoked M*N times.
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(Dij, 0)    ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */ return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
        // dense matrix arrays
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype; // sparse matrix arrays
        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
         // sparse matrix cannot be a Pattern matrix
        if (!bvalues) throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // zero value
        var zero = 0; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string' && adt === bdt) {
            // datatype
            dt = adt; // convert 0 to the same datatype
            zero = typed.convert(0, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result (DenseMatrix)
        var cdata = []; // initialize dense matrix
        for(var z = 0; z < rows; z++)// initialize row
        cdata[z] = [];
         // workspace
        var x = []; // marks indicating we have a value in x for a given column
        var w = []; // loop columns in b
        for(var j = 0; j < columns; j++){
            // column mark
            var mark = j + 1; // values in column j
            for(var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++){
                // row
                var i = bindex[k]; // update workspace
                x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
                w[i] = mark;
            } // process workspace
            for(var y = 0; y < rows; y++)// check we have a calculated value for current row
            if (w[y] === mark) // use calculated value
            cdata[y][j] = x[y];
            else // calculate value
            cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
        } // return dense matrix
        return denseMatrix.createDenseMatrix({
            data: cdata,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fZJCI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm05", ()=>createAlgorithm05
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var name = 'algorithm05';
var dependencies = [
    'typed',
    'equalScalar'
];
var createAlgorithm05 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equalScalar  } = _ref;
    /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */ return function algorithm05(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string' && adt === bdt) {
            // datatype
            dt = adt; // find signature that matches (dt, dt)
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result arrays
        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspaces
        var xa = cvalues ? [] : undefined;
        var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column
        var wa = [];
        var wb = []; // vars
        var i, j, k, k1; // loop columns
        for(j = 0; j < columns; j++){
            // update cptr
            cptr[j] = cindex.length; // columns mark
            var mark = j + 1; // loop values A(:,j)
            for(k = aptr[j], k1 = aptr[j + 1]; k < k1; k++){
                // row
                i = aindex[k]; // push index
                cindex.push(i); // update workspace
                wa[i] = mark; // check we need to process values
                if (xa) xa[i] = avalues[k];
            } // loop values B(:,j)
            for(k = bptr[j], k1 = bptr[j + 1]; k < k1; k++){
                // row
                i = bindex[k]; // check row existed in A
                if (wa[i] !== mark) // push index
                cindex.push(i);
                 // update workspace
                wb[i] = mark; // check we need to process values
                if (xb) xb[i] = bvalues[k];
            } // check we need to process values (non pattern matrix)
            if (cvalues) {
                // initialize first index in j
                k = cptr[j]; // loop index in j
                while(k < cindex.length){
                    // row
                    i = cindex[k]; // marks
                    var wai = wa[i];
                    var wbi = wb[i]; // check Aij or Bij are nonzero
                    if (wai === mark || wbi === mark) {
                        // matrix values @ i,j
                        var va = wai === mark ? xa[i] : zero;
                        var vb = wbi === mark ? xb[i] : zero; // Cij
                        var vc = cf(va, vb); // check for zero
                        if (!eq(vc, zero)) {
                            // push value
                            cvalues.push(vc); // increment pointer
                            k++;
                        } else // remove value @ i, do not increment pointer
                        cindex.splice(k, 1);
                    }
                }
            }
        } // update cptr
        cptr[columns] = cindex.length; // return sparse matrix
        return a.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cI0lC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm12", ()=>createAlgorithm12
);
var _factoryJs = require("../../../utils/factory.js");
var name = 'algorithm12';
var dependencies = [
    'typed',
    'DenseMatrix'
];
var createAlgorithm12 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , DenseMatrix  } = _ref;
    /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked MxN times.
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(0, b)    ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */ return function algorithm12(s, b, callback, inverse) {
        // sparse matrix arrays
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype; // sparse matrix cannot be a Pattern matrix
        if (!avalues) throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string') {
            // datatype
            dt = adt; // convert b to the same datatype
            b = typed.convert(b, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result arrays
        var cdata = []; // workspaces
        var x = []; // marks indicating we have a value in x for a given column
        var w = []; // loop columns
        for(var j = 0; j < columns; j++){
            // columns mark
            var mark = j + 1; // values in j
            for(var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++){
                // row
                var r = aindex[k]; // update workspace
                x[r] = avalues[k];
                w[r] = mark;
            } // loop rows
            for(var i = 0; i < rows; i++){
                // initialize C on first column
                if (j === 0) // create row array
                cdata[i] = [];
                 // check sparse matrix has a value @ i,j
                if (w[i] === mark) // invoke callback, update C
                cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
                else // dense matrix value @ i, j
                cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
            }
        } // return dense matrix
        return new DenseMatrix({
            data: cdata,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eVHJ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMultiplyScalar", ()=>createMultiplyScalar
);
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'multiplyScalar';
var dependencies = [
    'typed'
];
var createMultiplyScalar = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Multiply two scalar values, `x * y`.
   * This function is meant for internal use: it is used by the public function
   * `multiply`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
   * @private
   */ return typed('multiplyScalar', {
        'number, number': _indexJs.multiplyNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
            return x.mul(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return x.times(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.mul(y);
        },
        'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
            var res = y.clone();
            res.value = res.value === null ? res._normalize(x) : this(res.value, x);
            return res;
        },
        'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
            var res = x.clone();
            res.value = res.value === null ? res._normalize(y) : this(res.value, y);
            return res;
        },
        'Unit, Unit': function UnitUnit(x, y) {
            return x.multiply(y);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4DNam":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMultiply", ()=>createMultiply
);
var _factoryJs = require("../../utils/factory.js");
var _isJs = require("../../utils/is.js");
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'multiply';
var dependencies = [
    'typed',
    'matrix',
    'addScalar',
    'multiplyScalar',
    'equalScalar',
    'dot'
];
var createMultiply = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , addScalar , multiplyScalar , equalScalar , dot  } = _ref;
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    function _validateMatrixDimensions(size1, size2) {
        // check left operand dimensions
        switch(size1.length){
            case 1:
                // check size2
                switch(size2.length){
                    case 1:
                        // Vector x Vector
                        if (size1[0] !== size2[0]) // throw error
                        throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
                        break;
                    case 2:
                        // Vector x Matrix
                        if (size1[0] !== size2[0]) // throw error
                        throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
                        break;
                    default:
                        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
                }
                break;
            case 2:
                // check size2
                switch(size2.length){
                    case 1:
                        // Matrix x Vector
                        if (size1[1] !== size2[0]) // throw error
                        throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
                        break;
                    case 2:
                        // Matrix x Matrix
                        if (size1[1] !== size2[0]) // throw error
                        throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
                        break;
                    default:
                        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
                }
                break;
            default:
                throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
        }
    }
    /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (N)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {number}             Scalar value
   */ function _multiplyVectorVector(a, b, n) {
        // check empty vector
        if (n === 0) throw new Error('Cannot multiply two empty vectors');
        return dot(a, b);
    }
    /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Matrix         (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */ function _multiplyVectorMatrix(a, b) {
        // process storage
        if (b.storage() !== 'dense') throw new Error('Support for SparseMatrix not implemented');
        return _multiplyVectorDenseMatrix(a, b);
    }
    /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Dense Matrix   (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */ function _multiplyVectorDenseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b dense
        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype; // rows & columns
        var alength = asize[0];
        var bcolumns = bsize[1]; // datatype
        var dt; // addScalar signature to use
        var af = addScalar; // multiplyScalar signature to use
        var mf = multiplyScalar; // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
            // datatype
            dt = adt; // find signatures that matches (dt, dt)
            af = typed.find(addScalar, [
                dt,
                dt
            ]);
            mf = typed.find(multiplyScalar, [
                dt,
                dt
            ]);
        } // result
        var c = []; // loop matrix columns
        for(var j = 0; j < bcolumns; j++){
            // sum (do not initialize it with zero)
            var sum = mf(adata[0], bdata[0][j]); // loop vector
            for(var i = 1; i < alength; i++)// multiply & accumulate
            sum = af(sum, mf(adata[i], bdata[i][j]));
            c[j] = sum;
        } // return matrix
        return a.createDenseMatrix({
            data: c,
            size: [
                bcolumns
            ],
            datatype: dt
        });
    }
    /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {Matrix}             Dense Vector   (M)
   */ var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
        'DenseMatrix, any': _multiplyDenseMatrixVector,
        'SparseMatrix, any': _multiplySparseMatrixVector
    });
    /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Matrix         (NxC)
   *
   * @return {Matrix}             Matrix         (MxC)
   */ var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
        'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
        'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
        'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
        'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
    });
    /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix  (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             Dense Vector (M)
   */ function _multiplyDenseMatrixVector(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b dense
        var bdata = b._data;
        var bdt = b._datatype; // rows & columns
        var arows = asize[0];
        var acolumns = asize[1]; // datatype
        var dt; // addScalar signature to use
        var af = addScalar; // multiplyScalar signature to use
        var mf = multiplyScalar; // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
            // datatype
            dt = adt; // find signatures that matches (dt, dt)
            af = typed.find(addScalar, [
                dt,
                dt
            ]);
            mf = typed.find(multiplyScalar, [
                dt,
                dt
            ]);
        } // result
        var c = []; // loop matrix a rows
        for(var i = 0; i < arows; i++){
            // current row
            var row = adata[i]; // sum (do not initialize it with zero)
            var sum = mf(row[0], bdata[0]); // loop matrix a columns
            for(var j = 1; j < acolumns; j++)// multiply & accumulate
            sum = af(sum, mf(row[j], bdata[j]));
            c[i] = sum;
        } // return matrix
        return a.createDenseMatrix({
            data: c,
            size: [
                arows
            ],
            datatype: dt
        });
    }
    /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            DenseMatrix    (NxC)
   *
   * @return {Matrix}             DenseMatrix    (MxC)
   */ function _multiplyDenseMatrixDenseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b dense
        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype; // rows & columns
        var arows = asize[0];
        var acolumns = asize[1];
        var bcolumns = bsize[1]; // datatype
        var dt; // addScalar signature to use
        var af = addScalar; // multiplyScalar signature to use
        var mf = multiplyScalar; // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
            // datatype
            dt = adt; // find signatures that matches (dt, dt)
            af = typed.find(addScalar, [
                dt,
                dt
            ]);
            mf = typed.find(multiplyScalar, [
                dt,
                dt
            ]);
        } // result
        var c = []; // loop matrix a rows
        for(var i = 0; i < arows; i++){
            // current row
            var row = adata[i]; // initialize row array
            c[i] = []; // loop matrix b columns
            for(var j = 0; j < bcolumns; j++){
                // sum (avoid initializing sum to zero)
                var sum = mf(row[0], bdata[0][j]); // loop matrix a columns
                for(var x = 1; x < acolumns; x++)// multiply & accumulate
                sum = af(sum, mf(row[x], bdata[x][j]));
                c[i][j] = sum;
            }
        } // return matrix
        return a.createDenseMatrix({
            data: c,
            size: [
                arows,
                bcolumns
            ],
            datatype: dt
        });
    }
    /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            SparseMatrix   (NxC)
   *
   * @return {Matrix}             SparseMatrix   (MxC)
   */ function _multiplyDenseMatrixSparseMatrix(a, b) {
        // a dense
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype; // b sparse
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate b matrix
        if (!bvalues) throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
         // rows & columns
        var arows = asize[0];
        var bcolumns = bsize[1]; // datatype
        var dt; // addScalar signature to use
        var af = addScalar; // multiplyScalar signature to use
        var mf = multiplyScalar; // equalScalar signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
            // datatype
            dt = adt; // find signatures that matches (dt, dt)
            af = typed.find(addScalar, [
                dt,
                dt
            ]);
            mf = typed.find(multiplyScalar, [
                dt,
                dt
            ]);
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt);
        } // result
        var cvalues = [];
        var cindex = [];
        var cptr = []; // c matrix
        var c = b.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                arows,
                bcolumns
            ],
            datatype: dt
        }); // loop b columns
        for(var jb = 0; jb < bcolumns; jb++){
            // update ptr
            cptr[jb] = cindex.length; // indeces in column jb
            var kb0 = bptr[jb];
            var kb1 = bptr[jb + 1]; // do not process column jb if no data exists
            if (kb1 > kb0) {
                // last row mark processed
                var last = 0; // loop a rows
                for(var i = 0; i < arows; i++){
                    // column mark
                    var mark = i + 1; // C[i, jb]
                    var cij = void 0; // values in b column j
                    for(var kb = kb0; kb < kb1; kb++){
                        // row
                        var ib = bindex[kb]; // check value has been initialized
                        if (last !== mark) {
                            // first value in column jb
                            cij = mf(adata[i][ib], bvalues[kb]); // update mark
                            last = mark;
                        } else // accumulate value
                        cij = af(cij, mf(adata[i][ib], bvalues[kb]));
                    } // check column has been processed and value != 0
                    if (last === mark && !eq(cij, zero)) {
                        // push row & value
                        cindex.push(i);
                        cvalues.push(cij);
                    }
                }
            }
        } // update ptr
        cptr[bcolumns] = cindex.length; // return sparse matrix
        return c;
    }
    /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix    (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             SparseMatrix    (M, 1)
   */ function _multiplySparseMatrixVector(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype; // validate a matrix
        if (!avalues) throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
         // b dense
        var bdata = b._data;
        var bdt = b._datatype; // rows & columns
        var arows = a._size[0];
        var brows = b._size[0]; // result
        var cvalues = [];
        var cindex = [];
        var cptr = []; // datatype
        var dt; // addScalar signature to use
        var af = addScalar; // multiplyScalar signature to use
        var mf = multiplyScalar; // equalScalar signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
            // datatype
            dt = adt; // find signatures that matches (dt, dt)
            af = typed.find(addScalar, [
                dt,
                dt
            ]);
            mf = typed.find(multiplyScalar, [
                dt,
                dt
            ]);
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt);
        } // workspace
        var x = []; // vector with marks indicating a value x[i] exists in a given column
        var w = []; // update ptr
        cptr[0] = 0; // rows in b
        for(var ib = 0; ib < brows; ib++){
            // b[ib]
            var vbi = bdata[ib]; // check b[ib] != 0, avoid loops
            if (!eq(vbi, zero)) // A values & index in ib column
            for(var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++){
                // a row
                var ia = aindex[ka]; // check value exists in current j
                if (!w[ia]) {
                    // ia is new entry in j
                    w[ia] = true; // add i to pattern of C
                    cindex.push(ia); // x(ia) = A
                    x[ia] = mf(vbi, avalues[ka]);
                } else // i exists in C already
                x[ia] = af(x[ia], mf(vbi, avalues[ka]));
            }
        } // copy values from x to column jb of c
        for(var p1 = cindex.length, p = 0; p < p1; p++){
            // row
            var ic = cindex[p]; // copy value
            cvalues[p] = x[ic];
        } // update ptr
        cptr[1] = cindex.length; // return sparse matrix
        return a.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                arows,
                1
            ],
            datatype: dt
        });
    }
    /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            DenseMatrix       (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */ function _multiplySparseMatrixDenseMatrix(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype; // validate a matrix
        if (!avalues) throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
         // b dense
        var bdata = b._data;
        var bdt = b._datatype; // rows & columns
        var arows = a._size[0];
        var brows = b._size[0];
        var bcolumns = b._size[1]; // datatype
        var dt; // addScalar signature to use
        var af = addScalar; // multiplyScalar signature to use
        var mf = multiplyScalar; // equalScalar signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
            // datatype
            dt = adt; // find signatures that matches (dt, dt)
            af = typed.find(addScalar, [
                dt,
                dt
            ]);
            mf = typed.find(multiplyScalar, [
                dt,
                dt
            ]);
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt);
        } // result
        var cvalues = [];
        var cindex = [];
        var cptr = []; // c matrix
        var c = a.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                arows,
                bcolumns
            ],
            datatype: dt
        }); // workspace
        var x = []; // vector with marks indicating a value x[i] exists in a given column
        var w = []; // loop b columns
        for(var jb = 0; jb < bcolumns; jb++){
            // update ptr
            cptr[jb] = cindex.length; // mark in workspace for current column
            var mark = jb + 1; // rows in jb
            for(var ib = 0; ib < brows; ib++){
                // b[ib, jb]
                var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops
                if (!eq(vbij, zero)) // A values & index in ib column
                for(var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++){
                    // a row
                    var ia = aindex[ka]; // check value exists in current j
                    if (w[ia] !== mark) {
                        // ia is new entry in j
                        w[ia] = mark; // add i to pattern of C
                        cindex.push(ia); // x(ia) = A
                        x[ia] = mf(vbij, avalues[ka]);
                    } else // i exists in C already
                    x[ia] = af(x[ia], mf(vbij, avalues[ka]));
                }
            } // copy values from x to column jb of c
            for(var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++){
                // row
                var ic = cindex[p]; // copy value
                cvalues[p] = x[ic];
            }
        } // update ptr
        cptr[bcolumns] = cindex.length; // return sparse matrix
        return c;
    }
    /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            SparseMatrix      (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */ function _multiplySparseMatrixSparseMatrix(a, b) {
        // a sparse
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype; // b sparse
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bdt = b._datatype; // rows & columns
        var arows = a._size[0];
        var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data
        var values = avalues && bvalues; // datatype
        var dt; // addScalar signature to use
        var af = addScalar; // multiplyScalar signature to use
        var mf = multiplyScalar; // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
            // datatype
            dt = adt; // find signatures that matches (dt, dt)
            af = typed.find(addScalar, [
                dt,
                dt
            ]);
            mf = typed.find(multiplyScalar, [
                dt,
                dt
            ]);
        } // result
        var cvalues = values ? [] : undefined;
        var cindex = [];
        var cptr = []; // c matrix
        var c = a.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                arows,
                bcolumns
            ],
            datatype: dt
        }); // workspace
        var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column
        var w = []; // variables
        var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns
        for(var jb = 0; jb < bcolumns; jb++){
            // update ptr
            cptr[jb] = cindex.length; // mark in workspace for current column
            var mark = jb + 1; // B values & index in j
            for(kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++){
                // b row
                ib = bindex[kb]; // check we need to process values
                if (values) // loop values in a[:,ib]
                for(ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++){
                    // row
                    ia = aindex[ka]; // check value exists in current j
                    if (w[ia] !== mark) {
                        // ia is new entry in j
                        w[ia] = mark; // add i to pattern of C
                        cindex.push(ia); // x(ia) = A
                        x[ia] = mf(bvalues[kb], avalues[ka]);
                    } else // i exists in C already
                    x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
                }
                else // loop values in a[:,ib]
                for(ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++){
                    // row
                    ia = aindex[ka]; // check value exists in current j
                    if (w[ia] !== mark) {
                        // ia is new entry in j
                        w[ia] = mark; // add i to pattern of C
                        cindex.push(ia);
                    }
                }
            } // check we need to process matrix values (pattern matrix)
            if (values) // copy values from x to column jb of c
            for(var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++){
                // row
                var ic = cindex[p]; // copy value
                cvalues[p] = x[ic];
            }
        } // update ptr
        cptr[bcolumns] = cindex.length; // return sparse matrix
        return c;
    }
    /**
   * Multiply two or more values, `x * y`.
   * For matrices, the matrix product is calculated.
   *
   * Syntax:
   *
   *    math.multiply(x, y)
   *    math.multiply(x, y, z, ...)
   *
   * Examples:
   *
   *    math.multiply(4, 5.2)        // returns number 20.8
   *    math.multiply(2, 3, 4)       // returns number 24
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.multiply(a, b)          // returns Complex 5 + 14i
   *
   *    const c = [[1, 2], [4, 3]]
   *    const d = [[1, 2, 3], [3, -4, 7]]
   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
   *
   *    const e = math.unit('2.1 km')
   *    math.multiply(3, e)          // returns Unit 6.3 km
   *
   * See also:
   *
   *    divide, prod, cross, dot
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
   */ return typed(name, _objectJs.extend({
        // we extend the signatures of multiplyScalar with signatures dealing with matrices
        'Array, Array': function ArrayArray(x, y) {
            // check dimensions
            _validateMatrixDimensions(_arrayJs.arraySize(x), _arrayJs.arraySize(y)); // use dense matrix implementation
            var m = this(matrix(x), matrix(y)); // return array or scalar
            return _isJs.isMatrix(m) ? m.valueOf() : m;
        },
        'Matrix, Matrix': function MatrixMatrix(x, y) {
            // dimensions
            var xsize = x.size();
            var ysize = y.size(); // check dimensions
            _validateMatrixDimensions(xsize, ysize); // process dimensions
            if (xsize.length === 1) {
                // process y dimensions
                if (ysize.length === 1) // Vector * Vector
                return _multiplyVectorVector(x, y, xsize[0]);
                 // Vector * Matrix
                return _multiplyVectorMatrix(x, y);
            } // process y dimensions
            if (ysize.length === 1) // Matrix * Vector
            return _multiplyMatrixVector(x, y);
             // Matrix * Matrix
            return _multiplyMatrixMatrix(x, y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use Matrix * Matrix implementation
            return this(x, matrix(y));
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use Matrix * Matrix implementation
            return this(matrix(x, y.storage()), y);
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm11(x, y, multiplyScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, multiplyScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm11(y, x, multiplyScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, multiplyScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
        },
        'any, any': multiplyScalar,
        'any, any, ...any': function anyAnyAny(x, y, rest) {
            var result = this(x, y);
            for(var i = 0; i < rest.length; i++)result = this(result, rest[i]);
            return result;
        }
    }, multiplyScalar.signatures));
});

},{"../../utils/factory.js":"26foW","../../utils/is.js":"iwdlF","../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1wWmy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createNthRoot", ()=>createNthRoot
);
parcelHelpers.export(exports, "createNthRootNumber", ()=>createNthRootNumber
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm01Js = require("../../type/matrix/utils/algorithm01.js");
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm06Js = require("../../type/matrix/utils/algorithm06.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'nthRoot';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'BigNumber'
];
var createNthRoot = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , BigNumber: _BigNumber  } = _ref;
    var algorithm01 = _algorithm01Js.createAlgorithm01({
        typed
    });
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm06 = _algorithm06Js.createAlgorithm06({
        typed,
        equalScalar
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Calculate the nth root of a value.
   * The principal nth root of a positive real number A, is the positive real
   * solution of the equation
   *
   *     x^root = A
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *     math.nthRoot(a)
   *     math.nthRoot(a, root)
   *
   * Examples:
   *
   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
   *     math.sqrt(9)          // returns 3, as 3^2 == 9
   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param {number | BigNumber | Array | Matrix | Complex} a
   *              Value for which to calculate the nth root
   * @param {number | BigNumber} [root=2]    The root.
   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
   */ var complexErr = "Complex number not supported in function nthRoot. Use nthRoots instead.";
    /**
   * Calculate the nth root of a for BigNumbers, solve x^root == a
   * https://rosettacode.org/wiki/Nth_root#JavaScript
   * @param {BigNumber} a
   * @param {BigNumber} root
   * @private
   */ function _bigNthRoot(a, root) {
        var precision = _BigNumber.precision;
        var Big = _BigNumber.clone({
            precision: precision + 2
        });
        var zero = new _BigNumber(0);
        var one = new Big(1);
        var inv = root.isNegative();
        if (inv) {
            root = root.neg();
        }
        if (root.isZero()) {
            throw new Error('Root must be non-zero');
        }
        if (a.isNegative() && !root.abs().mod(2).equals(1)) {
            throw new Error('Root must be odd when a is negative.');
        } // edge cases zero and infinity
        if (a.isZero()) {
            return inv ? new Big(Infinity) : 0;
        }
        if (!a.isFinite()) {
            return inv ? zero : a;
        }
        var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
        // so (-1) ^ (1/root) = -1
        x = a.isNeg() ? x.neg() : x;
        return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));
    }
    return typed(name, {
        number: function number(x) {
            return _indexJs.nthRootNumber(x, 2);
        },
        'number, number': _indexJs.nthRootNumber,
        BigNumber: function BigNumber(x) {
            return _bigNthRoot(x, new _BigNumber(2));
        },
        Complex: function Complex(x) {
            throw new Error(complexErr);
        },
        'Complex, number': function ComplexNumber(x, y) {
            throw new Error(complexErr);
        },
        'BigNumber, BigNumber': _bigNthRoot,
        'Array | Matrix': function ArrayMatrix(x) {
            return this(x, 2);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            // density must be one (no zeros in matrix)
            if (y.density() === 1) // sparse + sparse
            return algorithm06(x, y, this);
            else // throw exception
            throw new Error('Root must be non-zero');
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            // density must be one (no zeros in matrix)
            if (y.density() === 1) // dense + sparse
            return algorithm01(x, y, this, false);
            else // throw exception
            throw new Error('Root must be non-zero');
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
            // density must be one (no zeros in matrix)
            if (y.density() === 1) // sparse - scalar
            return algorithm11(y, x, this, true);
            else // throw exception
            throw new Error('Root must be non-zero');
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
            // use matrix implementation
            return this(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y)).valueOf();
        }
    });
});
var createNthRootNumber = /* #__PURE__ */ _factoryJs.factory(name, [
    'typed'
], (_ref2)=>{
    var { typed  } = _ref2;
    return typed(name, {
        number: _indexJs.nthRootNumber,
        'number, number': _indexJs.nthRootNumber
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm01.js":"8dKyd","../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm06.js":"jh6kl","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k4jW9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSign", ()=>createSign
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'sign';
var dependencies = [
    'typed',
    'BigNumber',
    'Fraction',
    'complex'
];
var createSign = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber: _BigNumber , complex , Fraction: _Fraction  } = _ref;
    /**
   * Compute the sign of a value. The sign of a value x is:
   *
   * -  1 when x > 0
   * - -1 when x < 0
   * -  0 when x == 0
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sign(x)
   *
   * Examples:
   *
   *    math.sign(3.5)               // returns 1
   *    math.sign(-4.2)              // returns -1
   *    math.sign(0)                 // returns 0
   *
   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
   *
   * See also:
   *
   *    abs
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            The number for which to determine the sign
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
   *            The sign of `x`
   */ return typed(name, {
        number: _indexJs.signNumber,
        Complex: function Complex(x) {
            return x.im === 0 ? complex(_indexJs.signNumber(x.re)) : x.sign();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(x.cmp(0));
        },
        Fraction: function Fraction(x) {
            return new _Fraction(x.s, 1);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since sign(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        Unit: function Unit(x) {
            return this(x.value);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"exmR0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSqrt", ()=>createSqrt
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'sqrt';
var dependencies = [
    'config',
    'typed',
    'Complex'
];
var createSqrt = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { config , typed , Complex  } = _ref;
    /**
   * Calculate sqrt for a number
   * @param {number} x
   * @returns {number | Complex} Returns the square root of x
   * @private
   */ function _sqrtNumber(x) {
        if (isNaN(x)) {
            return NaN;
        } else if (x >= 0 || config.predictable) {
            return Math.sqrt(x);
        } else {
            return new Complex(x, 0).sqrt();
        }
    }
    /**
   * Calculate the square root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sqrt(x)
   *
   * Examples:
   *
   *    math.sqrt(25)                // returns 5
   *    math.square(5)               // returns 25
   *    math.sqrt(-4)                // returns Complex 2i
   *
   * See also:
   *
   *    square, multiply, cube, cbrt, sqrtm
   *
   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
   *            Value for which to calculate the square root.
   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
   *            Returns the square root of `x`
   */ return typed('sqrt', {
        number: _sqrtNumber,
        Complex: function Complex(x) {
            return x.sqrt();
        },
        BigNumber: function BigNumber(x) {
            if (!x.isNegative() || config.predictable) return x.sqrt();
            else // negative value -> downgrade to number to do complex value computation
            return _sqrtNumber(x.toNumber());
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since sqrt(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        Unit: function Unit(x) {
            // Someday will work for complex units when they are implemented
            return x.pow(0.5);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"99xfA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSquare", ()=>createSquare
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'square';
var dependencies = [
    'typed'
];
var createSquare = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Compute the square of a value, `x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.square(x)
   *
   * Examples:
   *
   *    math.square(2)           // returns number 4
   *    math.square(3)           // returns number 9
   *    math.pow(3, 2)           // returns number 9
   *    math.multiply(3, 3)      // returns number 9
   *
   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
   *
   * See also:
   *
   *    multiply, cube, sqrt, pow
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            Number for which to calculate the square
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Squared value
   */ return typed(name, {
        number: _indexJs.squareNumber,
        Complex: function Complex(x) {
            return x.mul(x);
        },
        BigNumber: function BigNumber(x) {
            return x.times(x);
        },
        Fraction: function Fraction(x) {
            return x.mul(x);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since square(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        Unit: function Unit(x) {
            return x.pow(2);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"UkKSg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSubtract", ()=>createSubtract
);
var _factoryJs = require("../../utils/factory.js");
var _dimensionErrorJs = require("../../error/DimensionError.js");
var _algorithm01Js = require("../../type/matrix/utils/algorithm01.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm05Js = require("../../type/matrix/utils/algorithm05.js");
var _algorithm10Js = require("../../type/matrix/utils/algorithm10.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'subtract';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'addScalar',
    'unaryMinus',
    'DenseMatrix'
];
var createSubtract = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , addScalar , unaryMinus , DenseMatrix  } = _ref;
    // TODO: split function subtract in two: subtract and subtractScalar
    var algorithm01 = _algorithm01Js.createAlgorithm01({
        typed
    });
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm05 = _algorithm05Js.createAlgorithm05({
        typed,
        equalScalar
    });
    var algorithm10 = _algorithm10Js.createAlgorithm10({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Subtract two values, `x - y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.subtract(x, y)
   *
   * Examples:
   *
   *    math.subtract(5.3, 2)        // returns number 3.3
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.subtract(a, b)          // returns Complex -2 + 2i
   *
   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
   *
   *    const c = math.unit('2.1 km')
   *    const d = math.unit('500m')
   *    math.subtract(c, d)          // returns Unit 1.6 km
   *
   * See also:
   *
   *    add
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
   *            Initial value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
   *            Value to subtract from `x`
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Subtraction of `x` and `y`
   */ return typed(name, {
        'number, number': function numberNumber(x, y) {
            return x - y;
        },
        'Complex, Complex': function ComplexComplex(x, y) {
            return x.sub(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return x.minus(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.sub(y);
        },
        'Unit, Unit': function UnitUnit(x, y) {
            if (x.value === null) throw new Error('Parameter x contains a unit with undefined value');
            if (y.value === null) throw new Error('Parameter y contains a unit with undefined value');
            if (!x.equalBase(y)) throw new Error('Units do not match');
            var res = x.clone();
            res.value = this(res.value, y.value);
            res.fixPrefix = false;
            return res;
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            checkEqualDimensions(x, y);
            return algorithm05(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            checkEqualDimensions(x, y);
            return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            checkEqualDimensions(x, y);
            return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            checkEqualDimensions(x, y);
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm10(x, unaryMinus(y), addScalar);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm10(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});
/**
 * Check whether matrix x and y have the same number of dimensions.
 * Throws a DimensionError when dimensions are not equal
 * @param {Matrix} x
 * @param {Matrix} y
 */ function checkEqualDimensions(x, y) {
    var xsize = x.size();
    var ysize = y.size();
    if (xsize.length !== ysize.length) throw new _dimensionErrorJs.DimensionError(xsize.length, ysize.length);
}

},{"../../utils/factory.js":"26foW","../../error/DimensionError.js":"49REC","../../type/matrix/utils/algorithm01.js":"8dKyd","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm05.js":"fZJCI","../../type/matrix/utils/algorithm10.js":"jcqxM","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3GrQP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createXgcd", ()=>createXgcd
);
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'xgcd';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'BigNumber'
];
var createXgcd = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , BigNumber  } = _ref;
    /**
   * Calculate xgcd for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @return {BigNumber[]} result
   * @private
   */ function _xgcdBigNumber(a, b) {
        // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
        var t;
        var q;
        var r;
        var zero = new BigNumber(0);
        var one = new BigNumber(1);
        var x = zero;
        var lastx = one;
        var y = one;
        var lasty = zero;
        if (!a.isInt() || !b.isInt()) {
            throw new Error('Parameters in function xgcd must be integer numbers');
        }
        while(!b.isZero()){
            q = a.div(b).floor();
            r = a.mod(b);
            t = x;
            x = lastx.minus(q.times(x));
            lastx = t;
            t = y;
            y = lasty.minus(q.times(y));
            lasty = t;
            a = b;
            b = r;
        }
        var res;
        if (a.lt(zero)) {
            res = [
                a.neg(),
                lastx.neg(),
                lasty.neg()
            ];
        } else {
            res = [
                a,
                !a.isZero() ? lastx : 0,
                lasty
            ];
        }
        return config.matrix === 'Array' ? res : matrix(res);
    }
    /**
   * Calculate the extended greatest common divisor for two values.
   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
   *
   * Syntax:
   *
   *    math.xgcd(a, b)
   *
   * Examples:
   *
   *    math.xgcd(8, 12)             // returns [4, -1, 1]
   *    math.gcd(8, 12)              // returns 4
   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
   *
   * See also:
   *
   *    gcd, lcm
   *
   * @param {number | BigNumber} a  An integer number
   * @param {number | BigNumber} b  An integer number
   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
   */ return typed(name, {
        'number, number': function numberNumber(a, b) {
            var res = _indexJs.xgcdNumber(a, b);
            return config.matrix === 'Array' ? res : matrix(res);
        },
        'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction
    });
});

},{"../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2PAjr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDotMultiply", ()=>createDotMultiply
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm09Js = require("../../type/matrix/utils/algorithm09.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'dotMultiply';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'multiplyScalar'
];
var createDotMultiply = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , multiplyScalar  } = _ref;
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm09 = _algorithm09Js.createAlgorithm09({
        typed,
        equalScalar
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Multiply two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotMultiply(x, y)
   *
   * Examples:
   *
   *    math.dotMultiply(2, 4) // returns 8
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
   *
   * See also:
   *
   *    multiply, divide, dotDivide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
   */ return typed(name, {
        'any, any': multiplyScalar,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm09(x, y, multiplyScalar, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, multiplyScalar, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm02(x, y, multiplyScalar, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, multiplyScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm11(x, y, multiplyScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, multiplyScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm11(y, x, multiplyScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, multiplyScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm09.js":"ffaMS","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ffaMS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm09", ()=>createAlgorithm09
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var name = 'algorithm09';
var dependencies = [
    'typed',
    'equalScalar'
];
var createAlgorithm09 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equalScalar  } = _ref;
    /**
   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
   * Callback function invoked NZA times, number of nonzero elements in A.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */ return function algorithm09(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string' && adt === bdt) {
            // datatype
            dt = adt; // find signature that matches (dt, dt)
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result arrays
        var cvalues = avalues && bvalues ? [] : undefined;
        var cindex = [];
        var cptr = []; // workspaces
        var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column
        var w = []; // vars
        var i, j, k, k0, k1; // loop columns
        for(j = 0; j < columns; j++){
            // update cptr
            cptr[j] = cindex.length; // column mark
            var mark = j + 1; // check we need to process values
            if (x) // loop B(:,j)
            for(k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++){
                // row
                i = bindex[k]; // update workspace
                w[i] = mark;
                x[i] = bvalues[k];
            }
             // loop A(:,j)
            for(k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++){
                // row
                i = aindex[k]; // check we need to process values
                if (x) {
                    // b value @ i,j
                    var vb = w[i] === mark ? x[i] : zero; // invoke f
                    var vc = cf(avalues[k], vb); // check zero value
                    if (!eq(vc, zero)) {
                        // push index
                        cindex.push(i); // push value
                        cvalues.push(vc);
                    }
                } else // push index
                cindex.push(i);
            }
        } // update cptr
        cptr[columns] = cindex.length; // return sparse matrix
        return a.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2NRtA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBitAnd", ()=>createBitAnd
);
var _bitwiseJs = require("../../utils/bignumber/bitwise.js");
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm06Js = require("../../type/matrix/utils/algorithm06.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'bitAnd';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar'
];
var createBitAnd = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar  } = _ref;
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm06 = _algorithm06Js.createAlgorithm06({
        typed,
        equalScalar
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Bitwise AND two values, `x & y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitAnd(x, y)
   *
   * Examples:
   *
   *    math.bitAnd(53, 131)               // returns number 1
   *
   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
   *
   * See also:
   *
   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to and
   * @param  {number | BigNumber | Array | Matrix} y Second value to and
   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
   */ return typed(name, {
        'number, number': _indexJs.bitAndNumber,
        'BigNumber, BigNumber': _bitwiseJs.bitAndBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm06(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm02(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm11(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../utils/bignumber/bitwise.js":"66wRI","../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm06.js":"jh6kl","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"66wRI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Bitwise and for Bignumbers
 *
 * Special Cases:
 *   N &  n =  N
 *   n &  0 =  0
 *   n & -1 =  n
 *   n &  n =  n
 *   I &  I =  I
 *  -I & -I = -I
 *   I & -I =  0
 *   I &  n =  n
 *   I & -n =  I
 *  -I &  n =  0
 *  -I & -n = -I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` & `y`, is fully precise
 * @private
 */ parcelHelpers.export(exports, "bitAndBigNumber", ()=>bitAndBigNumber
);
/**
 * Bitwise not
 * @param {BigNumber} x
 * @return {BigNumber} Result of ~`x`, fully precise
 *
 */ parcelHelpers.export(exports, "bitNotBigNumber", ()=>bitNotBigNumber
);
/**
 * Bitwise OR for BigNumbers
 *
 * Special Cases:
 *   N |  n =  N
 *   n |  0 =  n
 *   n | -1 = -1
 *   n |  n =  n
 *   I |  I =  I
 *  -I | -I = -I
 *   I | -n = -1
 *   I | -I = -1
 *   I |  n =  I
 *  -I |  n = -I
 *  -I | -n = -n
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` | `y`, fully precise
 */ parcelHelpers.export(exports, "bitOrBigNumber", ()=>bitOrBigNumber
);
/**
 * Applies bitwise function to numbers
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @param {function (a, b)} func
 * @return {BigNumber}
 */ parcelHelpers.export(exports, "bitwise", ()=>bitwise
);
/**
 * Bitwise XOR for BigNumbers
 *
 * Special Cases:
 *   N ^  n =  N
 *   n ^  0 =  n
 *   n ^  n =  0
 *   n ^ -1 = ~n
 *   I ^  n =  I
 *   I ^ -n = -I
 *   I ^ -I = -1
 *  -I ^  n = -I
 *  -I ^ -n =  I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` ^ `y`, fully precise
 *
 */ parcelHelpers.export(exports, "bitXor", ()=>bitXor
);
/**
 * Bitwise left shift
 *
 * Special Cases:
 *  n << -n = N
 *  n <<  N = N
 *  N <<  n = N
 *  n <<  0 = n
 *  0 <<  n = 0
 *  I <<  I = N
 *  I <<  n = I
 *  n <<  I = I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` << `y`
 *
 */ parcelHelpers.export(exports, "leftShiftBigNumber", ()=>leftShiftBigNumber
);
/*
 * Special Cases:
 *   n >> -n =  N
 *   n >>  N =  N
 *   N >>  n =  N
 *   I >>  I =  N
 *   n >>  0 =  n
 *   I >>  n =  I
 *  -I >>  n = -I
 *  -I >>  I = -I
 *   n >>  I =  I
 *  -n >>  I = -1
 *   0 >>  n =  0
 *
 * @param {BigNumber} value
 * @param {BigNumber} value
 * @return {BigNumber} Result of `x` >> `y`
 *
 */ parcelHelpers.export(exports, "rightArithShiftBigNumber", ()=>rightArithShiftBigNumber
);
function bitAndBigNumber(x, y) {
    if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) throw new Error('Integers expected in function bitAnd');
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN()) return new BigNumber(NaN);
    if (x.isZero() || y.eq(-1) || x.eq(y)) return x;
    if (y.isZero() || x.eq(-1)) return y;
    if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !y.isFinite()) {
            if (x.isNegative() === y.isNegative()) return x;
            return new BigNumber(0);
        }
        if (!x.isFinite()) {
            if (y.isNegative()) return x;
            if (x.isNegative()) return new BigNumber(0);
            return y;
        }
        if (!y.isFinite()) {
            if (x.isNegative()) return y;
            if (y.isNegative()) return new BigNumber(0);
            return x;
        }
    }
    return bitwise(x, y, function(a, b) {
        return a & b;
    });
}
function bitNotBigNumber(x) {
    if (x.isFinite() && !x.isInteger()) throw new Error('Integer expected in function bitNot');
    var BigNumber = x.constructor;
    var prevPrec = BigNumber.precision;
    BigNumber.config({
        precision: 1000000000
    });
    var result = x.plus(new BigNumber(1));
    result.s = -result.s || null;
    BigNumber.config({
        precision: prevPrec
    });
    return result;
}
function bitOrBigNumber(x, y) {
    if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) throw new Error('Integers expected in function bitOr');
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN()) return new BigNumber(NaN);
    var negOne = new BigNumber(-1);
    if (x.isZero() || y.eq(negOne) || x.eq(y)) return y;
    if (y.isZero() || x.eq(negOne)) return x;
    if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) return negOne;
        if (x.isNegative() && y.isNegative()) return x.isFinite() ? x : y;
        return x.isFinite() ? y : x;
    }
    return bitwise(x, y, function(a, b) {
        return a | b;
    });
}
function bitwise(x, y, func) {
    var BigNumber = x.constructor;
    var xBits, yBits;
    var xSign = +(x.s < 0);
    var ySign = +(y.s < 0);
    if (xSign) {
        xBits = decCoefficientToBinaryString(bitNotBigNumber(x));
        for(var i = 0; i < xBits.length; ++i)xBits[i] ^= 1;
    } else xBits = decCoefficientToBinaryString(x);
    if (ySign) {
        yBits = decCoefficientToBinaryString(bitNotBigNumber(y));
        for(var _i = 0; _i < yBits.length; ++_i)yBits[_i] ^= 1;
    } else yBits = decCoefficientToBinaryString(y);
    var minBits, maxBits, minSign;
    if (xBits.length <= yBits.length) {
        minBits = xBits;
        maxBits = yBits;
        minSign = xSign;
    } else {
        minBits = yBits;
        maxBits = xBits;
        minSign = ySign;
    }
    var shortLen = minBits.length;
    var longLen = maxBits.length;
    var expFuncVal = func(xSign, ySign) ^ 1;
    var outVal = new BigNumber(expFuncVal ^ 1);
    var twoPower = new BigNumber(1);
    var two = new BigNumber(2);
    var prevPrec = BigNumber.precision;
    BigNumber.config({
        precision: 1000000000
    });
    while(shortLen > 0){
        if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) outVal = outVal.plus(twoPower);
        twoPower = twoPower.times(two);
    }
    while(longLen > 0){
        if (func(minSign, maxBits[--longLen]) === expFuncVal) outVal = outVal.plus(twoPower);
        twoPower = twoPower.times(two);
    }
    BigNumber.config({
        precision: prevPrec
    });
    if (expFuncVal === 0) outVal.s = -outVal.s;
    return outVal;
}
/* Extracted from decimal.js, and edited to specialize. */ function decCoefficientToBinaryString(x) {
    // Convert to string
    var a = x.d; // array with digits
    var r = a[0] + '';
    for(var i = 1; i < a.length; ++i){
        var s = a[i] + '';
        for(var z = 7 - s.length; z--;)s = '0' + s;
        r += s;
    }
    var j = r.length;
    while(r.charAt(j) === '0')j--;
    var xe = x.e;
    var str = r.slice(0, j + 1 || 1);
    var strL = str.length;
    if (xe > 0) {
        if (++xe > strL) {
            // Append zeros.
            xe -= strL;
            while(xe--)str += '0';
        } else if (xe < strL) str = str.slice(0, xe) + '.' + str.slice(xe);
    } // Convert from base 10 (decimal) to base 2
    var arr = [
        0
    ];
    for(var _i2 = 0; _i2 < str.length;){
        var arrL = arr.length;
        while(arrL--)arr[arrL] *= 10;
        arr[0] += parseInt(str.charAt(_i2++)); // convert to int
        for(var _j = 0; _j < arr.length; ++_j)if (arr[_j] > 1) {
            if (arr[_j + 1] === null || arr[_j + 1] === undefined) arr[_j + 1] = 0;
            arr[_j + 1] += arr[_j] >> 1;
            arr[_j] &= 1;
        }
    }
    return arr.reverse();
}
function bitXor(x, y) {
    if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) throw new Error('Integers expected in function bitXor');
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN()) return new BigNumber(NaN);
    if (x.isZero()) return y;
    if (y.isZero()) return x;
    if (x.eq(y)) return new BigNumber(0);
    var negOne = new BigNumber(-1);
    if (x.eq(negOne)) return bitNotBigNumber(y);
    if (y.eq(negOne)) return bitNotBigNumber(x);
    if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !y.isFinite()) return negOne;
        return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
    }
    return bitwise(x, y, function(a, b) {
        return a ^ b;
    });
}
function leftShiftBigNumber(x, y) {
    if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) throw new Error('Integers expected in function leftShift');
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) return new BigNumber(NaN);
    if (x.isZero() || y.isZero()) return x;
    if (!x.isFinite() && !y.isFinite()) return new BigNumber(NaN);
     // Math.pow(2, y) is fully precise for y < 55, and fast
    if (y.lt(55)) return x.times(Math.pow(2, y.toNumber()) + '');
    return x.times(new BigNumber(2).pow(y));
}
function rightArithShiftBigNumber(x, y) {
    if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) throw new Error('Integers expected in function rightArithShift');
    var BigNumber = x.constructor;
    if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) return new BigNumber(NaN);
    if (x.isZero() || y.isZero()) return x;
    if (!y.isFinite()) {
        if (x.isNegative()) return new BigNumber(-1);
        if (!x.isFinite()) return new BigNumber(NaN);
        return new BigNumber(0);
    } // Math.pow(2, y) is fully precise for y < 55, and fast
    if (y.lt(55)) return x.div(Math.pow(2, y.toNumber()) + '').floor();
    return x.div(new BigNumber(2).pow(y)).floor();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fFElL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBitNot", ()=>createBitNot
);
var _bitwiseJs = require("../../utils/bignumber/bitwise.js");
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'bitNot';
var dependencies = [
    'typed'
];
var createBitNot = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Bitwise NOT value, `~x`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.bitNot(x)
   *
   * Examples:
   *
   *    math.bitNot(1)               // returns number -2
   *
   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
   *
   * See also:
   *
   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to not
   * @return {number | BigNumber | Array | Matrix} NOT of `x`
   */ return typed(name, {
        number: _indexJs.bitNotNumber,
        BigNumber: _bitwiseJs.bitNotBigNumber,
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/bignumber/bitwise.js":"66wRI","../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6jMO0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBitOr", ()=>createBitOr
);
var _bitwiseJs = require("../../utils/bignumber/bitwise.js");
var _factoryJs = require("../../utils/factory.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm10Js = require("../../type/matrix/utils/algorithm10.js");
var _algorithm04Js = require("../../type/matrix/utils/algorithm04.js");
var _algorithm01Js = require("../../type/matrix/utils/algorithm01.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'bitOr';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'DenseMatrix'
];
var createBitOr = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , DenseMatrix  } = _ref;
    var algorithm01 = _algorithm01Js.createAlgorithm01({
        typed
    });
    var algorithm04 = _algorithm04Js.createAlgorithm04({
        typed,
        equalScalar
    });
    var algorithm10 = _algorithm10Js.createAlgorithm10({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Bitwise OR two values, `x | y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the lowest print base.
   *
   * Syntax:
   *
   *    math.bitOr(x, y)
   *
   * Examples:
   *
   *    math.bitOr(1, 2)               // returns number 3
   *
   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to or
   * @param  {number | BigNumber | Array | Matrix} y Second value to or
   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
   */ return typed(name, {
        'number, number': _indexJs.bitOrNumber,
        'BigNumber, BigNumber': _bitwiseJs.bitOrBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm04(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm01(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm10(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm10(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../utils/bignumber/bitwise.js":"66wRI","../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm10.js":"jcqxM","../../type/matrix/utils/algorithm04.js":"lmihc","../../type/matrix/utils/algorithm01.js":"8dKyd","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iOZc5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBitXor", ()=>createBitXor
);
var _bitwiseJs = require("../../utils/bignumber/bitwise.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'bitXor';
var dependencies = [
    'typed',
    'matrix',
    'DenseMatrix'
];
var createBitXor = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Bitwise XOR two values, `x ^ y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitXor(x, y)
   *
   * Examples:
   *
   *    math.bitXor(1, 2)               // returns number 3
   *
   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to xor
   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
   */ return typed(name, {
        'number, number': _indexJs.bitXorNumber,
        'BigNumber, BigNumber': _bitwiseJs.bitXor,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../utils/bignumber/bitwise.js":"66wRI","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8nI4z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm07", ()=>createAlgorithm07
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var name = 'algorithm07';
var dependencies = [
    'typed',
    'DenseMatrix'
];
var createAlgorithm07 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , DenseMatrix  } = _ref;
    function _scatter(m, j, w, x, mark) {
        // a arrays
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // loop values in column j
        for(var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++){
            // row
            var i = index[k]; // update workspace
            w[i] = mark;
            x[i] = values[k];
        }
    }
    /**
   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
   * Callback function invoked MxN times.
   *
   * C(i,j) = f(Aij, Bij)
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */ return function algorithm07(a, b, callback) {
        // sparse matrix arrays
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // zero value
        var zero = 0; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string' && adt === bdt) {
            // datatype
            dt = adt; // convert 0 to the same datatype
            zero = typed.convert(0, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // vars
        var i, j; // result arrays
        var cdata = []; // initialize c
        for(i = 0; i < rows; i++)cdata[i] = [];
         // workspaces
        var xa = [];
        var xb = []; // marks indicating we have a value in x for a given column
        var wa = [];
        var wb = []; // loop columns
        for(j = 0; j < columns; j++){
            // columns mark
            var mark = j + 1; // scatter the values of A(:,j) into workspace
            _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace
            _scatter(b, j, wb, xb, mark); // loop rows
            for(i = 0; i < rows; i++){
                // matrix values @ i,j
                var va = wa[i] === mark ? xa[i] : zero;
                var vb = wb[i] === mark ? xb[i] : zero; // invoke callback
                cdata[i][j] = cf(va, vb);
            }
        } // return dense matrix
        return new DenseMatrix({
            data: cdata,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8GSVY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createArg", ()=>createArg
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'arg';
var dependencies = [
    'typed'
];
var createArg = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Compute the argument of a complex value.
   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.arg(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 2)
   *    math.arg(a) / math.pi          // returns number 0.25
   *
   *    const b = math.complex('2 + 3i')
   *    math.arg(b)                    // returns number 0.982793723247329
   *    math.atan2(3, 2)               // returns number 0.982793723247329
   *
   * See also:
   *
   *    re, im, conj, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The argument of x
   */ return typed(name, {
        number: function number(x) {
            return Math.atan2(0, x);
        },
        BigNumber: function BigNumber(x) {
            return x.constructor.atan2(0, x);
        },
        Complex: function Complex(x) {
            return x.arg();
        },
        // TODO: implement BigNumber support for function arg
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dMO5w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConj", ()=>createConj
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'conj';
var dependencies = [
    'typed'
];
var createConj = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Compute the complex conjugate of a complex value.
   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.conj(x)
   *
   * Examples:
   *
   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
   *
   * See also:
   *
   *    re, im, arg, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            The complex conjugate of x
   */ return typed(name, {
        number: function number(x) {
            return x;
        },
        BigNumber: function BigNumber(x) {
            return x;
        },
        Complex: function Complex(x) {
            return x.conjugate();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jEoFX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIm", ()=>createIm
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'im';
var dependencies = [
    'typed'
];
var createIm = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Get the imaginary part of a complex number.
   * For a complex number `a + bi`, the function returns `b`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.im(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number -5.2
   *    math.re(math.complex(2.4))     // returns number 0
   *
   * See also:
   *
   *    re, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
   */ return typed(name, {
        number: function number(x) {
            return 0;
        },
        BigNumber: function BigNumber(x) {
            return x.mul(0);
        },
        Fraction: function Fraction(x) {
            return x.mul(0);
        },
        Complex: function Complex(x) {
            return x.im;
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"khG4H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRe", ()=>createRe
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 're';
var dependencies = [
    'typed'
];
var createRe = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Get the real part of a complex number.
   * For a complex number `a + bi`, the function returns `a`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.re(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number 0
   *    math.re(math.complex(2.4))     // returns number 2.4
   *
   * See also:
   *
   *    im, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The real part of x
   */ return typed(name, {
        number: function number(x) {
            return x;
        },
        BigNumber: function BigNumber(x) {
            return x;
        },
        Fraction: function Fraction(x) {
            return x;
        },
        Complex: function Complex(x) {
            return x.re;
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9AHwk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createNot", ()=>createNot
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'not';
var dependencies = [
    'typed'
];
var createNot = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Logical `not`. Flips boolean value of a given parameter.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.not(x)
   *
   * Examples:
   *
   *    math.not(2)      // returns false
   *    math.not(0)      // returns true
   *    math.not(true)   // returns false
   *
   *    a = [2, -7, 0]
   *    math.not(a)      // returns [false, false, true]
   *
   * See also:
   *
   *    and, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when input is a zero or empty value.
   */ return typed(name, {
        number: _indexJs.notNumber,
        Complex: function Complex(x) {
            return x.re === 0 && x.im === 0;
        },
        BigNumber: function BigNumber(x) {
            return x.isZero() || x.isNaN();
        },
        Unit: function Unit(x) {
            return x.value !== null ? this(x.value) : true;
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"61pO5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createOr", ()=>createOr
);
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm05Js = require("../../type/matrix/utils/algorithm05.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'or';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'DenseMatrix'
];
var createOr = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm05 = _algorithm05Js.createAlgorithm05({
        typed,
        equalScalar
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.or(x, y)
   *
   * Examples:
   *
   *    math.or(2, 4)   // returns true
   *
   *    a = [2, 5, 0]
   *    b = [0, 22, 0]
   *    c = 0
   *
   *    math.or(a, b)   // returns [true, true, false]
   *    math.or(b, c)   // returns [false, true, false]
   *
   * See also:
   *
   *    and, not, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
   */ return typed(name, {
        'number, number': _indexJs.orNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
            return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
        },
        'Unit, Unit': function UnitUnit(x, y) {
            return this(x.value || 0, y.value || 0);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm05(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm05.js":"fZJCI","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kaGFp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createXor", ()=>createXor
);
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'xor';
var dependencies = [
    'typed',
    'matrix',
    'DenseMatrix'
];
var createXor = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.xor(x, y)
   *
   * Examples:
   *
   *    math.xor(2, 4)   // returns false
   *
   *    a = [2, 0, 0]
   *    b = [2, 7, 0]
   *    c = 0
   *
   *    math.xor(a, b)   // returns [false, true, false]
   *    math.xor(a, c)   // returns [true, false, false]
   *
   * See also:
   *
   *    and, not, or
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
   */ return typed(name, {
        'number, number': _indexJs.xorNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
            return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
        },
        'Unit, Unit': function UnitUnit(x, y) {
            return this(x.value || 0, y.value || 0);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jDA7k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConcat", ()=>createConcat
);
var _isJs = require("../../utils/is.js");
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var _indexErrorJs = require("../../error/IndexError.js");
var _dimensionErrorJs = require("../../error/DimensionError.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'concat';
var dependencies = [
    'typed',
    'matrix',
    'isInteger'
];
var createConcat = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , isInteger  } = _ref;
    /**
   * Concatenate two or more matrices.
   *
   * Syntax:
   *
   *     math.concat(A, B, C, ...)
   *     math.concat(A, B, C, ..., dim)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *   By default the last dimension of the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [5, 6]]
   *    const B = [[3, 4], [7, 8]]
   *
   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
   *    math.concat('hello', ' ', 'world') // returns 'hello world'
   *
   * See also:
   *
   *    size, squeeze, subset, transpose
   *
   * @param {... Array | Matrix} args     Two or more matrices
   * @return {Array | Matrix} Concatenated matrix
   */ return typed(name, {
        // TODO: change signature to '...Array | Matrix, dim?' when supported
        '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
            var i;
            var len = args.length;
            var dim = -1; // zero-based dimension
            var prevDim;
            var asMatrix = false;
            var matrices = []; // contains multi dimensional arrays
            for(i = 0; i < len; i++){
                var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)
                if (_isJs.isMatrix(arg)) asMatrix = true;
                if (_isJs.isNumber(arg) || _isJs.isBigNumber(arg)) {
                    if (i !== len - 1) throw new Error('Dimension must be specified as last argument');
                     // last argument contains the dimension on which to concatenate
                    prevDim = dim;
                    dim = arg.valueOf(); // change BigNumber to number
                    if (!isInteger(dim)) throw new TypeError('Integer number expected for dimension');
                    if (dim < 0 || i > 0 && dim > prevDim) // TODO: would be more clear when throwing a DimensionError here
                    throw new _indexErrorJs.IndexError(dim, prevDim + 1);
                } else {
                    // this is a matrix or array
                    var m = _objectJs.clone(arg).valueOf();
                    var size = _arrayJs.arraySize(m);
                    matrices[i] = m;
                    prevDim = dim;
                    dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions
                    if (i > 0 && dim !== prevDim) throw new _dimensionErrorJs.DimensionError(prevDim + 1, dim + 1);
                }
            }
            if (matrices.length === 0) throw new SyntaxError('At least one matrix expected');
            var res = matrices.shift();
            while(matrices.length)res = _concat(res, matrices.shift(), dim, 0);
            return asMatrix ? matrix(res) : res;
        },
        '...string': function string(args) {
            return args.join('');
        }
    });
});
/**
 * Recursively concatenate two matrices.
 * The contents of the matrices is not cloned.
 * @param {Array} a             Multi dimensional array
 * @param {Array} b             Multi dimensional array
 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
 * @param {number} dim          The current dim (zero-based)
 * @return {Array} c            The concatenated matrix
 * @private
 */ function _concat(a, b, concatDim, dim) {
    if (dim < concatDim) {
        // recurse into next dimension
        if (a.length !== b.length) throw new _dimensionErrorJs.DimensionError(a.length, b.length);
        var c = [];
        for(var i = 0; i < a.length; i++)c[i] = _concat(a[i], b[i], concatDim, dim + 1);
        return c;
    } else // concatenate this dimension
    return a.concat(b);
}

},{"../../utils/is.js":"iwdlF","../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","../../error/IndexError.js":"bCMLn","../../error/DimensionError.js":"49REC","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kSV9g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createColumn", ()=>createColumn
);
var _factoryJs = require("../../utils/factory.js");
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var name = 'column';
var dependencies = [
    'typed',
    'Index',
    'matrix',
    'range'
];
var createColumn = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Index , matrix , range  } = _ref;
    /**
   * Retrieve a column of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} column  The index of the column
   * @return {Matrix}        The retrieved column
   */ function _column(value, column) {
        // check dimensions
        if (value.size().length !== 2) {
            throw new Error('Only two dimensional matrix is supported');
        }
        _arrayJs.validateIndex(column, value.size()[1]);
        var rowRange = range(0, value.size()[0]);
        var index = new Index(rowRange, column);
        return value.subset(index);
    }
    /**
   * Return a column from a Matrix.
   *
   * Syntax:
   *
   *     math.column(value, index)
   *
   * Example:
   *
   *     // get a column
   *     const d = [[1, 2], [3, 4]]
   *     math.column(d, 1) // returns [[2], [4]]
   *
   * See also:
   *
   *     row
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} column           The index of the column
   * @return {Array | Matrix}         The retrieved column
   */ return typed(name, {
        'Matrix, number': _column,
        'Array, number': function ArrayNumber(value, column) {
            return _column(matrix(_objectJs.clone(value)), column).valueOf();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eDmRD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCount", ()=>createCount
);
var _factoryJs = require("../../utils/factory.js");
var name = 'count';
var dependencies = [
    'typed',
    'size',
    'prod'
];
var createCount = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , prod  } = _ref;
    /**
   * Count the number of elements of a matrix, array or string.
   *
   * Syntax:
   *
   *     math.count(x)
   *
   * Examples:
   *
   *     math.count('hello world')        // returns 11
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.count(A)                    // returns 6
   *     math.count(math.range(1,6))      // returns 5
   *
   * See also:
   *
   *     size
   *
   * @param {string | Array | Matrix} x  A matrix or string
   * @return {number} An integer with the elements in `x`.
   */ return typed(name, {
        string: function string(x) {
            return x.length;
        },
        'Matrix | Array': function MatrixArray(x) {
            return prod(size(x));
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"77jz0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCross", ()=>createCross
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'cross';
var dependencies = [
    'typed',
    'matrix',
    'subtract',
    'multiply'
];
var createCross = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , subtract , multiply  } = _ref;
    /**
   * Calculate the cross product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {Array} Returns the cross product of x and y
   * @private
   */ function _cross(x, y) {
        var highestDimension = Math.max(_arrayJs.arraySize(x).length, _arrayJs.arraySize(y).length);
        x = _arrayJs.squeeze(x);
        y = _arrayJs.squeeze(y);
        var xSize = _arrayJs.arraySize(x);
        var ySize = _arrayJs.arraySize(y);
        if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
            throw new RangeError("Vectors with length 3 expected (Size A = [" + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
        }
        var product = [
            subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),
            subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),
            subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))
        ];
        if (highestDimension > 1) {
            return [
                product
            ];
        } else {
            return product;
        }
    }
    /**
   * Calculate the cross product for two vectors in three dimensional space.
   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
   * as:
   *
   *    cross(A, B) = [
   *      a2 * b3 - a3 * b2,
   *      a3 * b1 - a1 * b3,
   *      a1 * b2 - a2 * b1
   *    ]
   *
   * If one of the input vectors has a dimension greater than 1, the output
   * vector will be a 1x3 (2-dimensional) matrix.
   *
   * Syntax:
   *
   *    math.cross(x, y)
   *
   * Examples:
   *
   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
   *
   * See also:
   *
   *    dot, multiply
   *
   * @param  {Array | Matrix} x   First vector
   * @param  {Array | Matrix} y   Second vector
   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
   */ return typed(name, {
        'Matrix, Matrix': function MatrixMatrix(x, y) {
            return matrix(_cross(x.toArray(), y.toArray()));
        },
        'Matrix, Array': function MatrixArray(x, y) {
            return matrix(_cross(x.toArray(), y));
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            return matrix(_cross(x, y.toArray()));
        },
        'Array, Array': _cross
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k80Uf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDiag", ()=>createDiag
);
var _isJs = require("../../utils/is.js");
var _arrayJs = require("../../utils/array.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'diag';
var dependencies = [
    'typed',
    'matrix',
    'DenseMatrix',
    'SparseMatrix'
];
var createDiag = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , DenseMatrix , SparseMatrix  } = _ref;
    /**
   * Creeate diagonal matrix from a vector or vice versa
   * @param {Array | Matrix} x
   * @param {number} k
   * @param {string} format Storage format for matrix. If null,
   *                          an Array is returned
   * @returns {Array | Matrix}
   * @private
   */ function _diag(x, k, size, format) {
        if (!_numberJs.isInteger(k)) {
            throw new TypeError('Second parameter in function diag must be an integer');
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0; // check dimensions
        switch(size.length){
            case 1:
                return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
            case 2:
                return _getDiagonal(x, k, format, size, kSub, kSuper);
        }
        throw new RangeError('Matrix for function diag must be 2 dimensional');
    }
    function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
        // matrix size
        var ms = [
            l + kSub,
            l + kSuper
        ];
        if (format && format !== 'sparse' && format !== 'dense') {
            throw new TypeError("Unknown matrix type ".concat(format, "\""));
        } // create diagonal matrix
        var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k); // check we need to return a matrix
        return format !== null ? m : m.valueOf();
    }
    function _getDiagonal(x, k, format, s, kSub, kSuper) {
        // check x is a Matrix
        if (_isJs.isMatrix(x)) {
            // get diagonal matrix
            var dm = x.diagonal(k); // check we need to return a matrix
            if (format !== null) {
                // check we need to change matrix format
                if (format !== dm.storage()) {
                    return matrix(dm, format);
                }
                return dm;
            }
            return dm.valueOf();
        } // vector size
        var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values
        var vector = []; // loop diagonal
        for(var i = 0; i < n; i++){
            vector[i] = x[i + kSub][i + kSuper];
        } // check we need to return a matrix
        return format !== null ? matrix(vector) : vector;
    }
    /**
   * Create a diagonal matrix or retrieve the diagonal of a matrix
   *
   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
   * When k is positive, the values are placed on the super diagonal.
   * When k is negative, the values are placed on the sub diagonal.
   *
   * Syntax:
   *
   *     math.diag(X)
   *     math.diag(X, format)
   *     math.diag(X, k)
   *     math.diag(X, k, format)
   *
   * Examples:
   *
   *     // create a diagonal matrix
   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *
   *    // retrieve the diagonal from a matrix
   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
   *    math.diag(a)   // returns [1, 5, 9]
   *
   * See also:
   *
   *     ones, zeros, identity
   *
   * @param {Matrix | Array} x          A two dimensional matrix or a vector
   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
   *                                    in or retrieved.
   * @param {string} [format='dense']   The matrix storage format.
   *
   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
   */ return typed(name, {
        // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
        Array: function Array(x) {
            return _diag(x, 0, _arrayJs.arraySize(x), null);
        },
        'Array, number': function ArrayNumber(x, k) {
            return _diag(x, k, _arrayJs.arraySize(x), null);
        },
        'Array, BigNumber': function ArrayBigNumber(x, k) {
            return _diag(x, k.toNumber(), _arrayJs.arraySize(x), null);
        },
        'Array, string': function ArrayString(x, format) {
            return _diag(x, 0, _arrayJs.arraySize(x), format);
        },
        'Array, number, string': function ArrayNumberString(x, k, format) {
            return _diag(x, k, _arrayJs.arraySize(x), format);
        },
        'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
            return _diag(x, k.toNumber(), _arrayJs.arraySize(x), format);
        },
        Matrix: function Matrix(x) {
            return _diag(x, 0, x.size(), x.storage());
        },
        'Matrix, number': function MatrixNumber(x, k) {
            return _diag(x, k, x.size(), x.storage());
        },
        'Matrix, BigNumber': function MatrixBigNumber(x, k) {
            return _diag(x, k.toNumber(), x.size(), x.storage());
        },
        'Matrix, string': function MatrixString(x, format) {
            return _diag(x, 0, x.size(), format);
        },
        'Matrix, number, string': function MatrixNumberString(x, k, format) {
            return _diag(x, k, x.size(), format);
        },
        'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
            return _diag(x, k.toNumber(), x.size(), format);
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/array.js":"3R6c8","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1GkSF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFilter", ()=>createFilter
);
var _arrayJs = require("../../utils/array.js");
var _functionJs = require("../../utils/function.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'filter';
var dependencies = [
    'typed'
];
var createFilter = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Filter the items in an array or one dimensional matrix.
   *
   * Syntax:
   *
   *    math.filter(x, test)
   *
   * Examples:
   *
   *    function isPositive (x) {
   *      return x > 0
   *    }
   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
   *
   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
   *
   * See also:
   *
   *    forEach, map, sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
   * @param {Function | RegExp} test
   *        A function or regular expression to test items.
   *        All entries for which `test` returns true are returned.
   *        When `test` is a function, it is invoked with three parameters:
   *        the value of the element, the index of the element, and the
   *        matrix/array being traversed. The function must return a boolean.
   * @return {Matrix | Array} Returns the filtered matrix.
   */ return typed('filter', {
        'Array, function': _filterCallback,
        'Matrix, function': function MatrixFunction(x, test) {
            return x.create(_filterCallback(x.toArray(), test));
        },
        'Array, RegExp': _arrayJs.filterRegExp,
        'Matrix, RegExp': function MatrixRegExp(x, test) {
            return x.create(_arrayJs.filterRegExp(x.toArray(), test));
        }
    });
});
/**
 * Filter values in a callback given a callback function
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */ function _filterCallback(x, callback) {
    // figure out what number of arguments the callback function expects
    var args = _functionJs.maxArgumentCount(callback);
    return _arrayJs.filter(x, function(value, index, array) {
        // invoke the callback function with the right number of arguments
        if (args === 1) return callback(value);
        else if (args === 2) return callback(value, [
            index
        ]);
        else // 3 or -1
        return callback(value, [
            index
        ], array);
    });
}

},{"../../utils/array.js":"3R6c8","../../utils/function.js":"b1EsA","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b1EsA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Memoize a given function by caching the computed result.
 * The cache of a memoized function can be cleared by deleting the `cache`
 * property of the function.
 *
 * @param {function} fn                     The function to be memoized.
 *                                          Must be a pure function.
 * @param {Object} [options]
 * @param {function(args: Array): string} [options.hasher]
 *    A custom hash builder. Is JSON.stringify by default.
 * @param {number | undefined} [options.limit]
 *    Maximum number of values that may be cached. Undefined indicates
 *    unlimited (default)
 * @return {function}                       Returns the memoized function
 */ parcelHelpers.export(exports, "memoize", ()=>memoize1
);
/**
 * Memoize a given function by caching all results and the arguments,
 * and comparing against the arguments of previous results before
 * executing again.
 * This is less performant than `memoize` which calculates a hash,
 * which is very fast to compare. Use `memoizeCompare` only when it is
 * not possible to create a unique serializable hash from the function
 * arguments.
 * The isEqual function must compare two sets of arguments
 * and return true when equal (can be a deep equality check for example).
 * @param {function} fn
 * @param {function(a: *, b: *) : boolean} isEqual
 * @returns {function}
 */ parcelHelpers.export(exports, "memoizeCompare", ()=>memoizeCompare
);
/**
 * Find the maximum number of arguments expected by a typed function.
 * @param {function} fn   A typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */ parcelHelpers.export(exports, "maxArgumentCount", ()=>maxArgumentCount
);
// function utils
var _lruQueueJs = require("./lruQueue.js");
function memoize1(fn) {
    var { hasher , limit  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    };
    limit = limit == null ? Number.POSITIVE_INFINITY : limit;
    hasher = hasher == null ? JSON.stringify : hasher;
    return function memoize() {
        if (typeof memoize.cache !== 'object') memoize.cache = {
            values: new Map(),
            lru: _lruQueueJs.lruQueue(limit || Number.POSITIVE_INFINITY)
        };
        var args = [];
        for(var i = 0; i < arguments.length; i++)args[i] = arguments[i];
        var hash = hasher(args);
        if (memoize.cache.values.has(hash)) {
            memoize.cache.lru.hit(hash);
            return memoize.cache.values.get(hash);
        }
        var newVal = fn.apply(fn, args);
        memoize.cache.values.set(hash, newVal);
        memoize.cache.values.delete(memoize.cache.lru.hit(hash));
        return newVal;
    };
}
function memoizeCompare(fn, isEqual) {
    var memoize2 = function memoize() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args[i] = arguments[i];
        for(var c = 0; c < memoize.cache.length; c++){
            var cached = memoize.cache[c];
            if (isEqual(args, cached.args)) // TODO: move this cache entry to the top so recently used entries move up?
            return cached.res;
        }
        var res = fn.apply(fn, args);
        memoize.cache.unshift({
            args,
            res
        });
        return res;
    };
    memoize2.cache = [];
    return memoize2;
}
function maxArgumentCount(fn) {
    return Object.keys(fn.signatures || {
    }).reduce(function(args, signature) {
        var count = (signature.match(/,/g) || []).length + 1;
        return Math.max(args, count);
    }, -1);
}

},{"./lruQueue.js":"7e7S2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7e7S2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// (c) 2018, Mariusz Nowak
// SPDX-License-Identifier: ISC
// Derived from https://github.com/medikoo/lru-queue
parcelHelpers.export(exports, "lruQueue", ()=>lruQueue
);
function lruQueue(limit) {
    var size = 0;
    var base = 1;
    var queue = Object.create(null);
    var map = Object.create(null);
    var index = 0;
    var del = function del(id) {
        var oldIndex = map[id];
        if (!oldIndex) return;
        delete queue[oldIndex];
        delete map[id];
        --size;
        if (base !== oldIndex) return;
        if (!size) {
            index = 0;
            base = 1;
            return;
        }
        while(!hasOwnProperty.call(queue, ++base))continue;
    };
    limit = Math.abs(limit);
    return {
        hit: function hit(id) {
            var oldIndex = map[id];
            var nuIndex = ++index;
            queue[nuIndex] = id;
            map[id] = nuIndex;
            if (!oldIndex) {
                ++size;
                if (size <= limit) return undefined;
                id = queue[base];
                del(id);
                return id;
            }
            delete queue[oldIndex];
            if (base !== oldIndex) return undefined;
            while(!hasOwnProperty.call(queue, ++base))continue;
            return undefined;
        },
        delete: del,
        clear: function clear() {
            size = index = 0;
            base = 1;
            queue = Object.create(null);
            map = Object.create(null);
        }
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gl6HX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFlatten", ()=>createFlatten
);
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'flatten';
var dependencies = [
    'typed',
    'matrix'
];
var createFlatten = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix  } = _ref;
    /**
   * Flatten a multi dimensional matrix into a single dimensional matrix.
   * It is guaranteed to always return a clone of the argument.
   *
   * Syntax:
   *
   *    math.flatten(x)
   *
   * Examples:
   *
   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
   *
   * See also:
   *
   *    concat, resize, size, squeeze
   *
   * @param {Matrix | Array} x   Matrix to be flattened
   * @return {Matrix | Array} Returns the flattened matrix
   */ return typed(name, {
        Array: function Array(x) {
            return _arrayJs.flatten(_objectJs.clone(x));
        },
        Matrix: function Matrix(x) {
            var flat = _arrayJs.flatten(_objectJs.clone(x.toArray())); // TODO: return the same matrix type as x
            return matrix(flat);
        }
    });
});

},{"../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jwWtz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createForEach", ()=>createForEach
);
var _functionJs = require("../../utils/function.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'forEach';
var dependencies = [
    'typed'
];
var createForEach = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Iterate over all elements of a matrix/array, and executes the given callback function.
   *
   * Syntax:
   *
   *    math.forEach(x, callback)
   *
   * Examples:
   *
   *    math.forEach([1, 2, 3], function(value) {
   *      console.log(value)
   *    })
   *    // outputs 1, 2, 3
   *
   * See also:
   *
   *    filter, map, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix/array being traversed.
   */ return typed(name, {
        'Array, function': _forEach,
        'Matrix, function': function MatrixFunction(x, callback) {
            return x.forEach(callback);
        }
    });
});
/**
 * forEach for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @private
 */ function _forEach(array, callback) {
    // figure out what number of arguments the callback function expects
    var args = _functionJs.maxArgumentCount(callback);
    var recurse1 = function recurse(value, index) {
        if (Array.isArray(value)) _arrayJs.forEach(value, function(child, i) {
            // we create a copy of the index array and append the new index value
            recurse(child, index.concat(i));
        });
        else {
            // invoke the callback function with the right number of arguments
            if (args === 1) callback(value);
            else if (args === 2) callback(value, index);
            else // 3 or -1
            callback(value, index, array);
        }
    };
    recurse1(array, []);
}

},{"../../utils/function.js":"b1EsA","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8WL3H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGetMatrixDataType", ()=>createGetMatrixDataType
);
var _factoryJs = require("../../utils/factory.js");
var _arrayJs = require("../../utils/array.js");
var _isJs = require("../../utils/is.js");
var name = 'getMatrixDataType';
var dependencies = [
    'typed'
];
var createGetMatrixDataType = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Find the data type of all elements in a matrix or array,
   * for example 'number' if all items are a number and 'Complex' if all values
   * are complex numbers.
   * If a matrix contains more than one data type, it will return 'mixed'.
   *
   * Syntax:
   *
   *    math.getMatrixDataType(x)
   *
   * Examples:
   *
   *    const x = [ [1, 2, 3], [4, 5, 6] ]
   *    const mixedX = [ [1, true], [2, 3] ]
   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]
   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
   *    const sparse = math.sparse(x)
   *    const dense = math.matrix(x)
   *    math.getMatrixDataType(x)   // returns 'number'
   *    math.getMatrixDataType(sparse)   // returns 'number'
   *    math.getMatrixDataType(dense)   // returns 'number'
   *    math.getMatrixDataType(mixedX) // returns 'mixed'
   *    math.getMatrixDataType(fractionX) // returns 'Fraction'
   *    math.getMatrixDataType(unitX) // returns 'Unit'
   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
   *
   * See also:
   *  SparseMatrix, DenseMatrix
   *
   * @param {...Matrix | Array} x   The Matrix with values.
   *
   * @return {string} A string representation of the matrix type
   */ return typed(name, {
        Array: function Array(x) {
            return _arrayJs.getArrayDataType(x, _isJs.typeOf);
        },
        Matrix: function Matrix(x) {
            return x.getDataType();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/array.js":"3R6c8","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b0mbb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIdentity", ()=>createIdentity
);
var _isJs = require("../../utils/is.js");
var _arrayJs = require("../../utils/array.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'identity';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'BigNumber',
    'DenseMatrix',
    'SparseMatrix'
];
var createIdentity = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , BigNumber , DenseMatrix , SparseMatrix  } = _ref;
    function _identityVector(size, format) {
        switch(size.length){
            case 0:
                return format ? matrix(format) : [];
            case 1:
                return _identity(size[0], size[0], format);
            case 2:
                return _identity(size[0], size[1], format);
            default:
                throw new Error('Vector containing two values expected');
        }
    }
    /**
   * Create an identity matrix
   * @param {number | BigNumber} rows
   * @param {number | BigNumber} cols
   * @param {string} [format]
   * @returns {Matrix}
   * @private
   */ function _identity(rows, cols, format) {
        // BigNumber constructor with the right precision
        var Big = _isJs.isBigNumber(rows) || _isJs.isBigNumber(cols) ? BigNumber : null;
        if (_isJs.isBigNumber(rows)) rows = rows.toNumber();
        if (_isJs.isBigNumber(cols)) cols = cols.toNumber();
        if (!_numberJs.isInteger(rows) || rows < 1) {
            throw new Error('Parameters in function identity must be positive integers');
        }
        if (!_numberJs.isInteger(cols) || cols < 1) {
            throw new Error('Parameters in function identity must be positive integers');
        }
        var one = Big ? new BigNumber(1) : 1;
        var defaultValue = Big ? new Big(0) : 0;
        var size = [
            rows,
            cols
        ]; // check we need to return a matrix
        if (format) {
            // create diagonal matrix (use optimized implementation for storage format)
            if (format === 'sparse') {
                return SparseMatrix.diagonal(size, one, 0, defaultValue);
            }
            if (format === 'dense') {
                return DenseMatrix.diagonal(size, one, 0, defaultValue);
            }
            throw new TypeError("Unknown matrix type \"".concat(format, "\""));
        } // create and resize array
        var res = _arrayJs.resize([], size, defaultValue); // fill in ones on the diagonal
        var minimum = rows < cols ? rows : cols; // fill diagonal
        for(var d = 0; d < minimum; d++){
            res[d][d] = one;
        }
        return res;
    }
    /**
   * Create a 2-dimensional identity matrix with size m x n or n x n.
   * The matrix has ones on the diagonal and zeros elsewhere.
   *
   * Syntax:
   *
   *    math.identity(n)
   *    math.identity(n, format)
   *    math.identity(m, n)
   *    math.identity(m, n, format)
   *    math.identity([m, n])
   *    math.identity([m, n], format)
   *
   * Examples:
   *
   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
   *
   * See also:
   *
   *    diag, ones, zeros, size, range
   *
   * @param {...number | Matrix | Array} size   The size for the matrix
   * @param {string} [format]                   The Matrix storage format
   *
   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
   */ return typed(name, {
        '': function _() {
            return config.matrix === 'Matrix' ? matrix([]) : [];
        },
        string: function string(format) {
            return matrix(format);
        },
        'number | BigNumber': function numberBigNumber(rows) {
            return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);
        },
        'number | BigNumber, string': function numberBigNumberString(rows, format) {
            return _identity(rows, rows, format);
        },
        'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
            return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);
        },
        'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
            return _identity(rows, cols, format);
        },
        Array: function Array(size) {
            return _identityVector(size);
        },
        'Array, string': function ArrayString(size, format) {
            return _identityVector(size, format);
        },
        Matrix: function Matrix(size) {
            return _identityVector(size.valueOf(), size.storage());
        },
        'Matrix, string': function MatrixString(size, format) {
            return _identityVector(size.valueOf(), format);
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/array.js":"3R6c8","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fIqvA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createKron", ()=>createKron
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'kron';
var dependencies = [
    'typed',
    'matrix',
    'multiplyScalar'
];
var createKron = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , multiplyScalar  } = _ref;
    /**
     * Calculate the kronecker product of two matrices / vectors
     * @param {Array} a  First vector
     * @param {Array} b  Second vector
     * @returns {Array} Returns the kronecker product of x and y
     * @private
     */ function _kron(a1, b1) {
        // Deal with the dimensions of the matricies.
        if (_arrayJs.arraySize(a1).length === 1) {
            // Wrap it in a 2D Matrix
            a1 = [
                a1
            ];
        }
        if (_arrayJs.arraySize(b1).length === 1) {
            // Wrap it in a 2D Matrix
            b1 = [
                b1
            ];
        }
        if (_arrayJs.arraySize(a1).length > 2 || _arrayJs.arraySize(b1).length > 2) {
            throw new RangeError("Vectors with dimensions greater then 2 are not supported expected (Size x = " + JSON.stringify(a1.length) + ', y = ' + JSON.stringify(b1.length) + ')');
        }
        var t = [];
        var r = [];
        return a1.map(function(a) {
            return b1.map(function(b) {
                r = [];
                t.push(r);
                return a.map(function(y) {
                    return b.map(function(x) {
                        return r.push(multiplyScalar(y, x));
                    });
                });
            });
        }) && t;
    }
    /**
     * Calculates the kronecker product of 2 matrices or vectors.
     *
     * NOTE: If a one dimensional vector / matrix is given, it will be
     * wrapped so its two dimensions.
     * See the examples.
     *
     * Syntax:
     *
     *    math.kron(x, y)
     *
     * Examples:
     *
     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
     *
     *    math.kron([1,1], [2,3,4])
     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
     *
     * See also:
     *
     *    multiply, dot, cross
     *
     * @param  {Array | Matrix} x     First vector
     * @param  {Array | Matrix} y     Second vector
     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
     */ return typed(name, {
        'Matrix, Matrix': function MatrixMatrix(x, y) {
            return matrix(_kron(x.toArray(), y.toArray()));
        },
        'Matrix, Array': function MatrixArray(x, y) {
            return matrix(_kron(x.toArray(), y));
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            return matrix(_kron(x, y.toArray()));
        },
        'Array, Array': _kron
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"520NC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMap", ()=>createMap
);
var _functionJs = require("../../utils/function.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'map';
var dependencies = [
    'typed'
];
var createMap = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Create a new matrix or array with the results of the callback function executed on
   * each entry of the matrix/array.
   *
   * Syntax:
   *
   *    math.map(x, callback)
   *
   * Examples:
   *
   *    math.map([1, 2, 3], function(value) {
   *      return value * value
   *    })  // returns [1, 4, 9]
   *
   * See also:
   *
   *    filter, forEach, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the matrix being traversed.
   * @return {Matrix | array}     Transformed map of x
   */ return typed(name, {
        'Array, function': _map,
        'Matrix, function': function MatrixFunction(x, callback) {
            return x.map(callback);
        }
    });
});
/**
 * Map for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @return {Array}
 * @private
 */ function _map(array, callback) {
    // figure out what number of arguments the callback function expects
    var args = _functionJs.maxArgumentCount(callback);
    var recurse1 = function recurse(value, index) {
        if (Array.isArray(value)) return value.map(function(child, i) {
            // we create a copy of the index array and append the new index value
            return recurse(child, index.concat(i));
        });
        else {
            // invoke the callback function with the right number of arguments
            if (args === 1) return callback(value);
            else if (args === 2) return callback(value, index);
            else // 3 or -1
            return callback(value, index, array);
        }
    };
    return recurse1(array, []);
}

},{"../../utils/function.js":"b1EsA","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1noV6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDiff", ()=>createDiff
);
var _factoryJs = require("../../utils/factory.js");
var _numberJs = require("../../utils/number.js");
var _isJs = require("../../utils/is.js");
var name = 'diff';
var dependencies = [
    'typed',
    'matrix',
    'subtract',
    'number'
];
var createDiff = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , subtract , number  } = _ref;
    /**
   * Recursively find the correct dimension in the array/matrix
   * Then Apply _diff to that dimension
   *
   * @param {Array} arr      The array
   * @param {number} dim     Dimension
   * @return {Array}         resulting array
   */ function _recursive(arr, dim) {
        if (_isJs.isMatrix(arr)) {
            arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly
        }
        if (!Array.isArray(arr)) {
            throw RangeError('Array/Matrix does not have that many dimensions');
        }
        if (dim > 0) {
            var result = [];
            arr.forEach((element)=>{
                result.push(_recursive(element, dim - 1));
            });
            return result;
        } else if (dim === 0) {
            return _diff(arr);
        } else {
            throw RangeError('Cannot have negative dimension');
        }
    }
    /**
   * Difference between elements in the array
   *
   * @param {Array} arr      An array
   * @return {Array}         resulting array
   */ function _diff(arr) {
        var result = [];
        var size = arr.length;
        if (size < 2) {
            return arr;
        }
        for(var i = 1; i < size; i++){
            result.push(_ElementDiff(arr[i - 1], arr[i]));
        }
        return result;
    }
    /**
   * Difference between 2 objects
   *
   * @param {Object} obj1    First object
   * @param {Object} obj2    Second object
   * @return {Array}         resulting array
   */ function _ElementDiff(obj1, obj2) {
        // Convert matrices to arrays
        if (_isJs.isMatrix(obj1)) obj1 = obj1.toArray();
        if (_isJs.isMatrix(obj2)) obj2 = obj2.toArray();
        var obj1IsArray = Array.isArray(obj1);
        var obj2IsArray = Array.isArray(obj2);
        if (obj1IsArray && obj2IsArray) {
            return _ArrayDiff(obj1, obj2);
        }
        if (!obj1IsArray && !obj2IsArray) {
            return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)
        }
        throw TypeError('Cannot calculate difference between 1 array and 1 non-array');
    }
    /**
   * Difference of elements in 2 arrays
   *
   * @param {Array} arr1     Array 1
   * @param {Array} arr2     Array 2
   * @return {Array}         resulting array
   */ function _ArrayDiff(arr1, arr2) {
        if (arr1.length !== arr2.length) {
            throw RangeError('Not all sub-arrays have the same length');
        }
        var result = [];
        var size = arr1.length;
        for(var i = 0; i < size; i++){
            result.push(_ElementDiff(arr1[i], arr2[i]));
        }
        return result;
    }
    /**
   * Create a new matrix or array of the difference between elements of the given array
   * The optional dim parameter lets you specify the dimension to evaluate the difference of
   * If no dimension parameter is passed it is assumed as dimension 0
   *
   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber
   * Arrays must be 'rectangular' meaning arrays like [1, 2]
   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays
   *
   * Syntax:
   *
   *     math.diff(arr)
   *     math.diff(arr, dim)
   *
   * Examples:
   *
   *     const arr = [1, 2, 4, 7, 0]
   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)
   *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])
   *
   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]
   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
   *
   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3
   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed
   *
   *     // These will all produce the same result
   *     math.diff([[1, 2], [3, 4]])
   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])
   *     math.diff([[1, 2], math.matrix([3, 4])])
   *     math.diff([math.matrix([1, 2]), [3, 4]])
   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix
   *
   * See Also:
   *
   *      sum
   *      subtract
   *      partitionSelect
   *
   * @param {Array | Matrix} arr    An array or matrix
   * @param {number} dim            Dimension
   * @return {Array | Matrix}       Difference between array elements in given dimension
   */ return typed(name, {
        'Array | Matrix': function ArrayMatrix(arr) {
            // No dimension specified => assume dimension 0
            if (_isJs.isMatrix(arr)) return matrix(_diff(arr.toArray()));
            else return _diff(arr);
        },
        'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {
            if (!_numberJs.isInteger(dim)) throw new RangeError('Dimension must be a whole number');
            if (_isJs.isMatrix(arr)) return matrix(_recursive(arr.toArray(), dim));
            else return _recursive(arr, dim);
        },
        'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {
            return this(arr, number(dim));
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/number.js":"l1AB8","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1ORUL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createOnes", ()=>createOnes
);
var _isJs = require("../../utils/is.js");
var _numberJs = require("../../utils/number.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'ones';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'BigNumber'
];
var createOnes = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , BigNumber  } = _ref;
    /**
   * Create an Array or Matrix with ones
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */ function _ones(size, format) {
        var hasBigNumbers = _normalize(size);
        var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;
        _validate(size);
        if (format) {
            // return a matrix
            var m = matrix(format);
            if (size.length > 0) {
                return m.resize(size, defaultValue);
            }
            return m;
        } else {
            // return an Array
            var arr = [];
            if (size.length > 0) {
                return _arrayJs.resize(arr, size, defaultValue);
            }
            return arr;
        }
    } // replace BigNumbers with numbers, returns true if size contained BigNumbers
    function _normalize(size) {
        var hasBigNumbers = false;
        size.forEach(function(value, index, arr) {
            if (_isJs.isBigNumber(value)) {
                hasBigNumbers = true;
                arr[index] = value.toNumber();
            }
        });
        return hasBigNumbers;
    } // validate arguments
    function _validate(size) {
        size.forEach(function(value) {
            if (typeof value !== 'number' || !_numberJs.isInteger(value) || value < 0) {
                throw new Error('Parameters in function ones must be positive integers');
            }
        });
    }
    /**
   * Create a matrix filled with ones. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.ones(m)
   *    math.ones(m, format)
   *    math.ones(m, n)
   *    math.ones(m, n, format)
   *    math.ones([m, n])
   *    math.ones([m, n], format)
   *    math.ones([m, n, p, ...])
   *    math.ones([m, n, p, ...], format)
   *
   * Examples:
   *
   *    math.ones(3)                   // returns [1, 1, 1]
   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
   *
   * See also:
   *
   *    zeros, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix | number}  A matrix filled with ones
   */ return typed('ones', {
        '': function _() {
            return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
        },
        // math.ones(m, n, p, ..., format)
        // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
        '...number | BigNumber | string': function numberBigNumberString(size) {
            var last = size[size.length - 1];
            if (typeof last === 'string') {
                var format = size.pop();
                return _ones(size, format);
            } else if (config.matrix === 'Array') return _ones(size);
            else return _ones(size, 'default');
        },
        Array: _ones,
        Matrix: function Matrix(size) {
            var format = size.storage();
            return _ones(size.valueOf(), format);
        },
        'Array | Matrix, string': function ArrayMatrixString(size, format) {
            return _ones(size.valueOf(), format);
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/number.js":"l1AB8","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cwFZb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRange", ()=>createRange
);
var _factoryJs = require("../../utils/factory.js");
var _noopJs = require("../../utils/noop.js");
var name = 'range';
var dependencies = [
    'typed',
    'config',
    '?matrix',
    '?bignumber',
    'smaller',
    'smallerEq',
    'larger',
    'largerEq'
];
var createRange = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , bignumber , smaller , smallerEq , larger , largerEq  } = _ref;
    function _out(arr) {
        if (config.matrix === 'Matrix') {
            return matrix ? matrix(arr) : _noopJs.noMatrix();
        }
        return arr;
    }
    function _strRange(str, includeEnd) {
        var r = _parse(str);
        if (!r) {
            throw new SyntaxError('String "' + str + '" is no valid range');
        }
        var fn;
        if (config.number === 'BigNumber') {
            if (bignumber === undefined) {
                _noopJs.noBignumber();
            }
            fn = includeEnd ? _bigRangeInc : _bigRangeEx;
            return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));
        } else {
            fn = includeEnd ? _rangeInc : _rangeEx;
            return _out(fn(r.start, r.end, r.step));
        }
    }
    /**
   * Create a range with numbers. End is excluded
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */ function _rangeEx(start, end, step) {
        var array = [];
        var x = start;
        if (step > 0) {
            while(smaller(x, end)){
                array.push(x);
                x += step;
            }
        } else if (step < 0) {
            while(larger(x, end)){
                array.push(x);
                x += step;
            }
        }
        return array;
    }
    /**
   * Create a range with numbers. End is included
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */ function _rangeInc(start, end, step) {
        var array = [];
        var x = start;
        if (step > 0) {
            while(smallerEq(x, end)){
                array.push(x);
                x += step;
            }
        } else if (step < 0) {
            while(largerEq(x, end)){
                array.push(x);
                x += step;
            }
        }
        return array;
    }
    /**
   * Create a range with big numbers. End is excluded
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */ function _bigRangeEx(start, end, step) {
        var zero = bignumber(0);
        var array = [];
        var x = start;
        if (step.gt(zero)) {
            while(smaller(x, end)){
                array.push(x);
                x = x.plus(step);
            }
        } else if (step.lt(zero)) {
            while(larger(x, end)){
                array.push(x);
                x = x.plus(step);
            }
        }
        return array;
    }
    /**
   * Create a range with big numbers. End is included
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */ function _bigRangeInc(start, end, step) {
        var zero = bignumber(0);
        var array = [];
        var x = start;
        if (step.gt(zero)) {
            while(smallerEq(x, end)){
                array.push(x);
                x = x.plus(step);
            }
        } else if (step.lt(zero)) {
            while(largerEq(x, end)){
                array.push(x);
                x = x.plus(step);
            }
        }
        return array;
    }
    /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @param {string} str
   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
   * @private
   */ function _parse(str) {
        var args = str.split(':'); // number
        var nums = args.map(function(arg) {
            // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
            return Number(arg);
        });
        var invalid = nums.some(function(num) {
            return isNaN(num);
        });
        if (invalid) {
            return null;
        }
        switch(nums.length){
            case 2:
                return {
                    start: nums[0],
                    end: nums[1],
                    step: 1
                };
            case 3:
                return {
                    start: nums[0],
                    end: nums[2],
                    step: nums[1]
                };
            default:
                return null;
        }
    }
    /**
   * Create an array from a range.
   * By default, the range end is excluded. This can be customized by providing
   * an extra parameter `includeEnd`.
   *
   * Syntax:
   *
   *     math.range(str [, includeEnd])               // Create a range from a string,
   *                                                  // where the string contains the
   *                                                  // start, optional step, and end,
   *                                                  // separated by a colon.
   *     math.range(start, end [, includeEnd])        // Create a range with start and
   *                                                  // end and a step size of 1.
   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
   *                                                  // and end.
   *
   * Where:
   *
   * - `str: string`
   *   A string 'start:end' or 'start:step:end'
   * - `start: {number | BigNumber}`
   *   Start of the range
   * - `end: number | BigNumber`
   *   End of the range, excluded by default, included when parameter includeEnd=true
   * - `step: number | BigNumber`
   *   Step size. Default value is 1.
   * - `includeEnd: boolean`
   *   Option to specify whether to include the end or not. False by default.
   *
   * Examples:
   *
   *     math.range(2, 6)        // [2, 3, 4, 5]
   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
   *     math.range('2:1:6')     // [2, 3, 4, 5]
   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
   *
   * See also:
   *
   *     ones, zeros, size, subset
   *
   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
   * @return {Array | Matrix} range
   */ return typed(name, {
        // TODO: simplify signatures when typed-function supports default values and optional arguments
        // TODO: a number or boolean should not be converted to string here
        string: _strRange,
        'string, boolean': _strRange,
        'number, number': function numberNumber(start, end) {
            return _out(_rangeEx(start, end, 1));
        },
        'number, number, number': function numberNumberNumber(start, end, step) {
            return _out(_rangeEx(start, end, step));
        },
        'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
            return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
        },
        'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
            return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
            var BigNumber = start.constructor;
            return _out(_bigRangeEx(start, end, new BigNumber(1)));
        },
        'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
            return _out(_bigRangeEx(start, end, step));
        },
        'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
            var BigNumber = start.constructor;
            return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));
        },
        'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
            return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/noop.js":"fXPyT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fXPyT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "noBignumber", ()=>noBignumber
);
parcelHelpers.export(exports, "noFraction", ()=>noFraction
);
parcelHelpers.export(exports, "noMatrix", ()=>noMatrix
);
parcelHelpers.export(exports, "noIndex", ()=>noIndex
);
parcelHelpers.export(exports, "noSubset", ()=>noSubset
);
function noBignumber() {
    throw new Error('No "bignumber" implementation available');
}
function noFraction() {
    throw new Error('No "fraction" implementation available');
}
function noMatrix() {
    throw new Error('No "matrix" implementation available');
}
function noIndex() {
    throw new Error('No "index" implementation available');
}
function noSubset() {
    throw new Error('No "matrix" implementation available');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dm28E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createReshape", ()=>createReshape
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'reshape';
var dependencies = [
    'typed',
    'isInteger',
    'matrix'
];
var createReshape = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , isInteger  } = _ref;
    /**
   * Reshape a multi dimensional array to fit the specified dimensions
   *
   * Syntax:
   *
   *     math.reshape(x, sizes)
   *
   * Examples:
   *
   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
   *
   *     math.reshape([[1, 2], [3, 4]], [1, 4])
   *     // returns Array  [[1, 2, 3, 4]]
   *
   *     math.reshape([[1, 2], [3, 4]], [4])
   *     // returns Array [1, 2, 3, 4]
   *
   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
   *     math.reshape(x, [2, 2, 2])
   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
   *
   *    math.reshape([1, 2, 3, 4], [-1, 2])
   *    // returns Matrix [[1, 2], [3, 4]]
   *
   * See also:
   *
   *     size, squeeze, resize
   *
   * @param {Array | Matrix | *} x  Matrix to be reshaped
   * @param {number[]} sizes        One dimensional array with integral sizes for
   *                                each dimension. One -1 is allowed as wildcard,
   *                                which calculates this dimension automatically.
   *
   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
   *
   * @throws {TypeError}            If `sizes` does not contain solely integers
   * @throws {DimensionError}       If the product of the new dimension sizes does
   *                                not equal that of the old ones
   */ return typed(name, {
        'Matrix, Array': function MatrixArray(x, sizes) {
            return x.reshape(sizes);
        },
        'Array, Array': function ArrayArray(x, sizes) {
            sizes.forEach(function(size) {
                if (!isInteger(size)) throw new TypeError('Invalid size for dimension: ' + size);
            });
            return _arrayJs.reshape(x, sizes);
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lWzrZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createResize", ()=>createResize
);
var _isJs = require("../../utils/is.js");
var _dimensionErrorJs = require("../../error/DimensionError.js");
var _argumentsErrorJs = require("../../error/ArgumentsError.js");
var _numberJs = require("../../utils/number.js");
var _stringJs = require("../../utils/string.js");
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'resize';
var dependencies = [
    'config',
    'matrix'
];
var createResize = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { config , matrix  } = _ref;
    /**
   * Resize a string
   * @param {string} str
   * @param {number[]} size
   * @param {string} [defaultChar=' ']
   * @private
   */ function _resizeString(str, size, defaultChar) {
        if (defaultChar !== undefined) {
            if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
                throw new TypeError('Single character expected as defaultValue');
            }
        } else {
            defaultChar = ' ';
        }
        if (size.length !== 1) {
            throw new _dimensionErrorJs.DimensionError(size.length, 1);
        }
        var len = size[0];
        if (typeof len !== 'number' || !_numberJs.isInteger(len)) {
            throw new TypeError("Invalid size, must contain positive integers (size: " + _stringJs.format(size) + ')');
        }
        if (str.length > len) {
            return str.substring(0, len);
        } else if (str.length < len) {
            var res = str;
            for(var i = 0, ii = len - str.length; i < ii; i++){
                res += defaultChar;
            }
            return res;
        } else {
            return str;
        }
    }
    /**
   * Resize a matrix
   *
   * Syntax:
   *
   *     math.resize(x, size)
   *     math.resize(x, size, defaultValue)
   *
   * Examples:
   *
   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
   *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
   *
   * See also:
   *
   *     size, squeeze, subset, reshape
   *
   * @param {Array | Matrix | *} x             Matrix to be resized
   * @param {Array | Matrix} size              One dimensional array with numbers
   * @param {number | string} [defaultValue=0] Zero by default, except in
   *                                           case of a string, in that case
   *                                           defaultValue = ' '
   * @return {* | Array | Matrix} A resized clone of matrix `x`
   */ // TODO: rework resize to a typed-function
    return function resize(x, size, defaultValue) {
        if (arguments.length !== 2 && arguments.length !== 3) throw new _argumentsErrorJs.ArgumentsError('resize', arguments.length, 2, 3);
        if (_isJs.isMatrix(size)) size = size.valueOf(); // get Array
        if (_isJs.isBigNumber(size[0])) // convert bignumbers to numbers
        size = size.map(function(value) {
            return !_isJs.isBigNumber(value) ? value : value.toNumber();
        });
         // check x is a Matrix
        if (_isJs.isMatrix(x)) // use optimized matrix implementation, return copy
        return x.resize(size, defaultValue, true);
        if (typeof x === 'string') // resize string
        return _resizeString(x, size, defaultValue);
         // check result should be a matrix
        var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';
        if (size.length === 0) {
            // output a scalar
            while(Array.isArray(x))x = x[0];
            return _objectJs.clone(x);
        } else {
            // output an array/matrix
            if (!Array.isArray(x)) x = [
                x
            ];
            x = _objectJs.clone(x);
            var res = _arrayJs.resize(x, size, defaultValue);
            return asMatrix ? matrix(res) : res;
        }
    };
});

},{"../../utils/is.js":"iwdlF","../../error/DimensionError.js":"49REC","../../error/ArgumentsError.js":"botyZ","../../utils/number.js":"l1AB8","../../utils/string.js":"0PPSB","../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"botyZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */ parcelHelpers.export(exports, "ArgumentsError", ()=>ArgumentsError
);
function ArgumentsError(fn, count, min, max) {
    if (!(this instanceof ArgumentsError)) throw new SyntaxError('Constructor must be called with the new operator');
    this.fn = fn;
    this.count = count;
    this.min = min;
    this.max = max;
    this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
    this.stack = new Error().stack;
}
ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = Error;
ArgumentsError.prototype.name = 'ArgumentsError';
ArgumentsError.prototype.isArgumentsError = true;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1Gyas":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRotate", ()=>createRotate
);
var _factoryJs = require("../../utils/factory.js");
var _arrayJs = require("../../utils/array.js");
var name = 'rotate';
var dependencies = [
    'typed',
    'multiply',
    'rotationMatrix'
];
var createRotate = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , multiply , rotationMatrix  } = _ref;
    function _validateSize(v, expectedSize) {
        var actualSize = Array.isArray(v) ? _arrayJs.arraySize(v) : v.size();
        if (actualSize.length > 2) {
            throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
        }
        if (actualSize.length === 2 && actualSize[1] !== 1) {
            throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
        }
        if (actualSize[0] !== expectedSize) {
            throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
        }
    }
    /**
     * Rotate a vector of size 1x2 counter-clockwise by a given angle
     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis
     *
     * Syntax:
     *
     *    math.rotate(w, theta)
     *    math.rotate(w, theta, v)
     *
     * Examples:
     *
     *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])
     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])
     *
     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])
     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])
     *
     *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])
     *
     * See also:
     *
     *    matrix, rotationMatrix
     *
     * @param {Array | Matrix} w                             Vector to rotate
     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
     * @param {Array | Matrix} [v]                           Rotation axis
     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w
     */ return typed(name, {
        'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {
            _validateSize(w, 2);
            var matrixRes = multiply(rotationMatrix(theta), w);
            return matrixRes.toArray();
        },
        'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {
            _validateSize(w, 2);
            return multiply(rotationMatrix(theta), w);
        },
        'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
            _validateSize(w, 3);
            var matrixRes = multiply(rotationMatrix(theta, v), w);
            return matrixRes;
        },
        'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
            _validateSize(w, 3);
            return multiply(rotationMatrix(theta, v), w);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/array.js":"3R6c8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lftL1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRotationMatrix", ()=>createRotationMatrix
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'rotationMatrix';
var dependencies = [
    'typed',
    'config',
    'multiplyScalar',
    'addScalar',
    'unaryMinus',
    'norm',
    'matrix',
    'BigNumber',
    'DenseMatrix',
    'SparseMatrix',
    'cos',
    'sin'
];
var createRotationMatrix = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , multiplyScalar , addScalar , unaryMinus , norm , BigNumber , matrix , DenseMatrix , SparseMatrix , cos , sin  } = _ref;
    /**
   * Returns 2x2 matrix of 2D rotation of angle theta
   *
   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle
   * @param {string} format                              The result Matrix storage format
   * @returns {Matrix}
   * @private
   */ function _rotationMatrix2x2(theta, format) {
        var Big = _isJs.isBigNumber(theta);
        var minusOne = Big ? new BigNumber(-1) : -1;
        var cosTheta = cos(theta);
        var sinTheta = sin(theta);
        var data = [
            [
                cosTheta,
                multiplyScalar(minusOne, sinTheta)
            ],
            [
                sinTheta,
                cosTheta
            ]
        ];
        return _convertToFormat(data, format);
    }
    function _validateVector(v) {
        var size = v.size();
        if (size.length < 1 || size[0] !== 3) {
            throw new RangeError('Vector must be of dimensions 1x3');
        }
    }
    function _mul(array) {
        return array.reduce((p, curr)=>multiplyScalar(p, curr)
        );
    }
    function _convertToFormat(data, format) {
        if (format) {
            if (format === 'sparse') {
                return new SparseMatrix(data);
            }
            if (format === 'dense') {
                return new DenseMatrix(data);
            }
            throw new TypeError("Unknown matrix type \"".concat(format, "\""));
        }
        return data;
    }
    /**
   * Returns a 3x3 matrix of rotation of angle theta around vector v
   *
   * @param {number | BigNumber | Complex | Unit} theta The rotation angle
   * @param {Matrix} v                                  The rotation axis vector
   * @param {string} format                             The storage format of the resulting matrix
   * @returns {Matrix}
   * @private
   */ function _rotationMatrix3x3(theta, v, format) {
        var normV = norm(v);
        if (normV === 0) {
            throw new RangeError('Rotation around zero vector');
        }
        var Big = _isJs.isBigNumber(theta) ? BigNumber : null;
        var one = Big ? new Big(1) : 1;
        var minusOne = Big ? new Big(-1) : -1;
        var vx = Big ? new Big(v.get([
            0
        ]) / normV) : v.get([
            0
        ]) / normV;
        var vy = Big ? new Big(v.get([
            1
        ]) / normV) : v.get([
            1
        ]) / normV;
        var vz = Big ? new Big(v.get([
            2
        ]) / normV) : v.get([
            2
        ]) / normV;
        var c = cos(theta);
        var oneMinusC = addScalar(one, unaryMinus(c));
        var s = sin(theta);
        var r11 = addScalar(c, _mul([
            vx,
            vx,
            oneMinusC
        ]));
        var r12 = addScalar(_mul([
            vx,
            vy,
            oneMinusC
        ]), _mul([
            minusOne,
            vz,
            s
        ]));
        var r13 = addScalar(_mul([
            vx,
            vz,
            oneMinusC
        ]), _mul([
            vy,
            s
        ]));
        var r21 = addScalar(_mul([
            vx,
            vy,
            oneMinusC
        ]), _mul([
            vz,
            s
        ]));
        var r22 = addScalar(c, _mul([
            vy,
            vy,
            oneMinusC
        ]));
        var r23 = addScalar(_mul([
            vy,
            vz,
            oneMinusC
        ]), _mul([
            minusOne,
            vx,
            s
        ]));
        var r31 = addScalar(_mul([
            vx,
            vz,
            oneMinusC
        ]), _mul([
            minusOne,
            vy,
            s
        ]));
        var r32 = addScalar(_mul([
            vy,
            vz,
            oneMinusC
        ]), _mul([
            vx,
            s
        ]));
        var r33 = addScalar(c, _mul([
            vz,
            vz,
            oneMinusC
        ]));
        var data = [
            [
                r11,
                r12,
                r13
            ],
            [
                r21,
                r22,
                r23
            ],
            [
                r31,
                r32,
                r33
            ]
        ];
        return _convertToFormat(data, format);
    }
    /**
   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).
   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).
   *
   * Syntax:
   *
   *    math.rotationMatrix(theta)
   *    math.rotationMatrix(theta, format)
   *    math.rotationMatrix(theta, [v])
   *    math.rotationMatrix(theta, [v], format)
   *
   * Examples:
   *
   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]
   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]
   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]
   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]
   *
   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]
   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])
   *
   *
   * See also:
   *
   *    matrix, cos, sin
   *
   *
   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
   * @param {Array | Matrix} [v]                           Rotation axis
   * @param {string} [format]                              Result Matrix storage format
   * @return {Array | Matrix}                              Rotation matrix
   */ return typed(name, {
        '': function _() {
            return config.matrix === 'Matrix' ? matrix([]) : [];
        },
        string: function string(format) {
            return matrix(format);
        },
        'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {
            return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);
        },
        'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {
            return _rotationMatrix2x2(theta, format);
        },
        'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {
            var matrixV = matrix(v);
            _validateVector(matrixV);
            return _rotationMatrix3x3(theta, matrixV, undefined);
        },
        'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {
            _validateVector(v);
            var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);
            return _rotationMatrix3x3(theta, v, storageType);
        },
        'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {
            var matrixV = matrix(v);
            _validateVector(matrixV);
            return _rotationMatrix3x3(theta, matrixV, format);
        },
        'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {
            _validateVector(v);
            return _rotationMatrix3x3(theta, v, format);
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2blb8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRow", ()=>createRow
);
var _factoryJs = require("../../utils/factory.js");
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var name = 'row';
var dependencies = [
    'typed',
    'Index',
    'matrix',
    'range'
];
var createRow = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Index , matrix , range  } = _ref;
    /**
   * Retrieve a row of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} row     The index of the row
   * @return {Matrix}        The retrieved row
   */ function _row(value, row) {
        // check dimensions
        if (value.size().length !== 2) {
            throw new Error('Only two dimensional matrix is supported');
        }
        _arrayJs.validateIndex(row, value.size()[0]);
        var columnRange = range(0, value.size()[1]);
        var index = new Index(row, columnRange);
        return value.subset(index);
    }
    /**
   * Return a row from a Matrix.
   *
   * Syntax:
   *
   *     math.row(value, index)
   *
   * Example:
   *
   *     // get a row
   *     const d = [[1, 2], [3, 4]]
   *     math.row(d, 1) // returns [[3, 4]]
   *
   * See also:
   *
   *     column
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} row              The index of the row
   * @return {Array | Matrix}         The retrieved row
   */ return typed(name, {
        'Matrix, number': _row,
        'Array, number': function ArrayNumber(value, row) {
            return _row(matrix(_objectJs.clone(value)), row).valueOf();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9ReWg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSize", ()=>createSize
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var _noopJs = require("../../utils/noop.js");
var name = 'size';
var dependencies = [
    'typed',
    'config',
    '?matrix'
];
var createSize = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix  } = _ref;
    /**
   * Calculate the size of a matrix or scalar.
   *
   * Syntax:
   *
   *     math.size(x)
   *
   * Examples:
   *
   *     math.size(2.3)                  // returns []
   *     math.size('hello world')        // returns [11]
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.size(A)                    // returns [2, 3]
   *     math.size(math.range(1,6))      // returns [5]
   *
   * See also:
   *
   *     count, resize, squeeze, subset
   *
   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
   * @return {Array | Matrix} A vector with size of `x`.
   */ return typed(name, {
        Matrix: function Matrix(x) {
            return x.create(x.size());
        },
        Array: _arrayJs.arraySize,
        string: function string(x) {
            return config.matrix === 'Array' ? [
                x.length
            ] : matrix([
                x.length
            ]);
        },
        'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
            // scalar
            return config.matrix === 'Array' ? [] : matrix ? matrix([]) : _noopJs.noMatrix();
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","../../utils/noop.js":"fXPyT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gRAln":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSqueeze", ()=>createSqueeze
);
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'squeeze';
var dependencies = [
    'typed',
    'matrix'
];
var createSqueeze = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix  } = _ref;
    /**
   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
   *
   * Syntax:
   *
   *     math.squeeze(x)
   *
   * Examples:
   *
   *     math.squeeze([3])           // returns 3
   *     math.squeeze([[3]])         // returns 3
   *
   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
   *
   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
   *
   *     // only inner and outer dimensions are removed
   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *
   * See also:
   *
   *     subset
   *
   * @param {Matrix | Array} x      Matrix to be squeezed
   * @return {Matrix | Array} Squeezed matrix
   */ return typed(name, {
        Array: function Array(x) {
            return _arrayJs.squeeze(_objectJs.clone(x));
        },
        Matrix: function Matrix(x) {
            var res = _arrayJs.squeeze(x.toArray()); // FIXME: return the same type of matrix as the input
            return Array.isArray(res) ? matrix(res) : res;
        },
        any: function any(x) {
            // scalar
            return _objectJs.clone(x);
        }
    });
});

},{"../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ikxy0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSubset", ()=>createSubset
);
var _isJs = require("../../utils/is.js");
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var _customsJs = require("../../utils/customs.js");
var _dimensionErrorJs = require("../../error/DimensionError.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'subset';
var dependencies = [
    'typed',
    'matrix'
];
var createSubset = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix  } = _ref;
    /**
   * Get or set a subset of a matrix or string.
   *
   * Syntax:
   *     math.subset(value, index)                                // retrieve a subset
   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
   *
   * Examples:
   *
   *     // get a subset
   *     const d = [[1, 2], [3, 4]]
   *     math.subset(d, math.index(1, 0))        // returns 3
   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]
   *
   *     // replace a subset
   *     const e = []
   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]
   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
   *
   * See also:
   *
   *     size, resize, squeeze, index
   *
   * @param {Array | Matrix | string} matrix  An array, matrix, or string
   * @param {Index} index                     An index containing ranges for each
   *                                          dimension
   * @param {*} [replacement]                 An array, matrix, or scalar.
   *                                          If provided, the subset is replaced with replacement.
   *                                          If not provided, the subset is returned
   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
   *                                          the matrix is resized. If not provided,
   *                                          math.matrix elements will be left undefined.
   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
   */ return typed(name, {
        // get subset
        'Array, Index': function ArrayIndex(value, index) {
            var m = matrix(value);
            var subset = m.subset(index); // returns a Matrix
            return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
        },
        'Matrix, Index': function MatrixIndex(value, index) {
            return value.subset(index);
        },
        'Object, Index': _getObjectProperty,
        'string, Index': _getSubstring,
        // set subset
        'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
            return matrix(_objectJs.clone(value)).subset(index, replacement, undefined).valueOf();
        },
        'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
            return matrix(_objectJs.clone(value)).subset(index, replacement, defaultValue).valueOf();
        },
        'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
            return value.clone().subset(index, replacement);
        },
        'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
            return value.clone().subset(index, replacement, defaultValue);
        },
        'string, Index, string': _setSubstring,
        'string, Index, string, string': _setSubstring,
        'Object, Index, any': _setObjectProperty
    });
});
/**
 * Retrieve a subset of a string
 * @param {string} str            string from which to get a substring
 * @param {Index} index           An index containing ranges for each dimension
 * @returns {string} substring
 * @private
 */ function _getSubstring(str, index) {
    if (!_isJs.isIndex(index)) // TODO: better error message
    throw new TypeError('Index expected');
    if (index.size().length !== 1) throw new _dimensionErrorJs.DimensionError(index.size().length, 1);
     // validate whether the range is out of range
    var strLen = str.length;
    _arrayJs.validateIndex(index.min()[0], strLen);
    _arrayJs.validateIndex(index.max()[0], strLen);
    var range = index.dimension(0);
    var substr = '';
    range.forEach(function(v) {
        substr += str.charAt(v);
    });
    return substr;
}
/**
 * Replace a substring in a string
 * @param {string} str            string to be replaced
 * @param {Index} index           An index containing ranges for each dimension
 * @param {string} replacement    Replacement string
 * @param {string} [defaultValue] Default value to be uses when resizing
 *                                the string. is ' ' by default
 * @returns {string} result
 * @private
 */ function _setSubstring(str, index, replacement, defaultValue) {
    if (!index || index.isIndex !== true) // TODO: better error message
    throw new TypeError('Index expected');
    if (index.size().length !== 1) throw new _dimensionErrorJs.DimensionError(index.size().length, 1);
    if (defaultValue !== undefined) {
        if (typeof defaultValue !== 'string' || defaultValue.length !== 1) throw new TypeError('Single character expected as defaultValue');
    } else defaultValue = ' ';
    var range = index.dimension(0);
    var len = range.size()[0];
    if (len !== replacement.length) throw new _dimensionErrorJs.DimensionError(range.size()[0], replacement.length);
     // validate whether the range is out of range
    var strLen = str.length;
    _arrayJs.validateIndex(index.min()[0]);
    _arrayJs.validateIndex(index.max()[0]); // copy the string into an array with characters
    var chars = [];
    for(var i1 = 0; i1 < strLen; i1++)chars[i1] = str.charAt(i1);
    range.forEach(function(v, i) {
        chars[v] = replacement.charAt(i[0]);
    }); // initialize undefined characters with a space
    if (chars.length > strLen) {
        for(var _i = strLen - 1, _len = chars.length; _i < _len; _i++)if (!chars[_i]) chars[_i] = defaultValue;
    }
    return chars.join('');
}
/**
 * Retrieve a property from an object
 * @param {Object} object
 * @param {Index} index
 * @return {*} Returns the value of the property
 * @private
 */ function _getObjectProperty(object, index) {
    if (index.size().length !== 1) throw new _dimensionErrorJs.DimensionError(index.size(), 1);
    var key = index.dimension(0);
    if (typeof key !== 'string') throw new TypeError('String expected as index to retrieve an object property');
    return _customsJs.getSafeProperty(object, key);
}
/**
 * Set a property on an object
 * @param {Object} object
 * @param {Index} index
 * @param {*} replacement
 * @return {*} Returns the updated object
 * @private
 */ function _setObjectProperty(object, index, replacement) {
    if (index.size().length !== 1) throw new _dimensionErrorJs.DimensionError(index.size(), 1);
    var key = index.dimension(0);
    if (typeof key !== 'string') throw new TypeError('String expected as index to retrieve an object property');
     // clone the object, and apply the property to the clone
    var updated = _objectJs.clone(object);
    _customsJs.setSafeProperty(updated, key, replacement);
    return updated;
}

},{"../../utils/is.js":"iwdlF","../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","../../utils/customs.js":"8gSIx","../../error/DimensionError.js":"49REC","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5Gf7D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTranspose", ()=>createTranspose
);
var _objectJs = require("../../utils/object.js");
var _stringJs = require("../../utils/string.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'transpose';
var dependencies = [
    'typed',
    'matrix'
];
var createTranspose = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix  } = _ref;
    function _denseTranspose(m, rows, columns) {
        // matrix array
        var data = m._data; // transposed matrix data
        var transposed = [];
        var transposedRow; // loop columns
        for(var j = 0; j < columns; j++){
            // initialize row
            transposedRow = transposed[j] = []; // loop rows
            for(var i = 0; i < rows; i++){
                // set data
                transposedRow[i] = _objectJs.clone(data[i][j]);
            }
        } // return matrix
        return m.createDenseMatrix({
            data: transposed,
            size: [
                columns,
                rows
            ],
            datatype: m._datatype
        });
    }
    function _sparseTranspose(m, rows, columns) {
        // matrix arrays
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // result matrices
        var cvalues = values ? [] : undefined;
        var cindex = [];
        var cptr = []; // row counts
        var w = [];
        for(var x = 0; x < rows; x++){
            w[x] = 0;
        } // vars
        var p, l, j; // loop values in matrix
        for(p = 0, l = index.length; p < l; p++){
            // number of values in row
            w[index[p]]++;
        } // cumulative sum
        var sum = 0; // initialize cptr with the cummulative sum of row counts
        for(var i = 0; i < rows; i++){
            // update cptr
            cptr.push(sum); // update sum
            sum += w[i]; // update w
            w[i] = cptr[i];
        } // update cptr
        cptr.push(sum); // loop columns
        for(j = 0; j < columns; j++){
            // values & index in column
            for(var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++){
                // C values & index
                var q = w[index[k]]++; // C[j, i] = A[i, j]
                cindex[q] = j; // check we need to process values (pattern matrix)
                if (values) {
                    cvalues[q] = _objectJs.clone(values[k]);
                }
            }
        } // return matrix
        return m.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                columns,
                rows
            ],
            datatype: m._datatype
        });
    }
    /**
   * Transpose a matrix. All values of the matrix are reflected over its
   * main diagonal. Only applicable to two dimensional matrices containing
   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
   * vectors and scalars return the input unchanged.
   *
   * Syntax:
   *
   *     math.transpose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
   *
   * See also:
   *
   *     diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be transposed
   * @return {Array | Matrix}   The transposed matrix
   */ return typed('transpose', {
        Array: function Array(x) {
            // use dense matrix implementation
            return this(matrix(x)).valueOf();
        },
        Matrix: function Matrix(x) {
            // matrix size
            var size = x.size(); // result
            var c; // process dimensions
            switch(size.length){
                case 1:
                    // vector
                    c = x.clone();
                    break;
                case 2:
                    // rows and columns
                    var rows = size[0];
                    var columns = size[1]; // check columns
                    if (columns === 0) // throw exception
                    throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + _stringJs.format(size) + ')');
                     // process storage format
                    switch(x.storage()){
                        case 'dense':
                            c = _denseTranspose(x, rows, columns);
                            break;
                        case 'sparse':
                            c = _sparseTranspose(x, rows, columns);
                            break;
                    }
                    break;
                default:
                    // multi dimensional
                    throw new RangeError('Matrix must be a vector or two dimensional (size: ' + _stringJs.format(this._size) + ')');
            }
            return c;
        },
        // scalars
        any: function any(x) {
            return _objectJs.clone(x);
        }
    });
});

},{"../../utils/object.js":"eRHhH","../../utils/string.js":"0PPSB","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5dD2s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCtranspose", ()=>createCtranspose
);
var _factoryJs = require("../../utils/factory.js");
var name = 'ctranspose';
var dependencies = [
    'typed',
    'transpose',
    'conj'
];
var createCtranspose = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , transpose , conj  } = _ref;
    /**
   * Transpose and complex conjugate a matrix. All values of the matrix are
   * reflected over its main diagonal and then the complex conjugate is
   * taken. This is equivalent to complex conjugation for scalars and
   * vectors.
   *
   * Syntax:
   *
   *     math.ctranspose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
   *
   * See also:
   *
   *     transpose, diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be ctransposed
   * @return {Array | Matrix}   The ctransposed matrix
   */ return typed(name, {
        any: function any(x) {
            return conj(transpose(x));
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kyZ2e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createZeros", ()=>createZeros
);
var _isJs = require("../../utils/is.js");
var _numberJs = require("../../utils/number.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'zeros';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'BigNumber'
];
var createZeros = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , BigNumber  } = _ref;
    /**
   * Create an Array or Matrix with zeros
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */ function _zeros(size, format) {
        var hasBigNumbers = _normalize(size);
        var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;
        _validate(size);
        if (format) {
            // return a matrix
            var m = matrix(format);
            if (size.length > 0) {
                return m.resize(size, defaultValue);
            }
            return m;
        } else {
            // return an Array
            var arr = [];
            if (size.length > 0) {
                return _arrayJs.resize(arr, size, defaultValue);
            }
            return arr;
        }
    } // replace BigNumbers with numbers, returns true if size contained BigNumbers
    function _normalize(size) {
        var hasBigNumbers = false;
        size.forEach(function(value, index, arr) {
            if (_isJs.isBigNumber(value)) {
                hasBigNumbers = true;
                arr[index] = value.toNumber();
            }
        });
        return hasBigNumbers;
    } // validate arguments
    function _validate(size) {
        size.forEach(function(value) {
            if (typeof value !== 'number' || !_numberJs.isInteger(value) || value < 0) {
                throw new Error('Parameters in function zeros must be positive integers');
            }
        });
    }
    /**
   * Create a matrix filled with zeros. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.zeros(m)
   *    math.zeros(m, format)
   *    math.zeros(m, n)
   *    math.zeros(m, n, format)
   *    math.zeros([m, n])
   *    math.zeros([m, n], format)
   *
   * Examples:
   *
   *    math.zeros(3)                  // returns [0, 0, 0]
   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
   *    math.zeros(3, 'dense')         // returns [0, 0, 0]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
   *
   * See also:
   *
   *    ones, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix}           A matrix filled with zeros
   */ return typed(name, {
        '': function _() {
            return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
        },
        // math.zeros(m, n, p, ..., format)
        // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
        '...number | BigNumber | string': function numberBigNumberString(size) {
            var last = size[size.length - 1];
            if (typeof last === 'string') {
                var format = size.pop();
                return _zeros(size, format);
            } else if (config.matrix === 'Array') return _zeros(size);
            else return _zeros(size, 'default');
        },
        Array: _zeros,
        Matrix: function Matrix(size) {
            var format = size.storage();
            return _zeros(size.valueOf(), format);
        },
        'Array | Matrix, string': function ArrayMatrixString(size, format) {
            return _zeros(size.valueOf(), format);
        }
    });
}); // TODO: zeros contains almost the same code as ones. Reuse this?

},{"../../utils/is.js":"iwdlF","../../utils/number.js":"l1AB8","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7rjrb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createErf", ()=>createErf
);
/* eslint-disable no-loss-of-precision */ var _collectionJs = require("../../utils/collection.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'erf';
var dependencies = [
    'typed'
];
var createErf = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Approximates the error function erf() for x <= 0.46875 using this function:
   *               n
   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
   *              j=0
   */ function erf1(y) {
        var ysq = y * y;
        var xnum = P[0][4] * ysq;
        var xden = ysq;
        var i;
        for(i = 0; i < 3; i += 1){
            xnum = (xnum + P[0][i]) * ysq;
            xden = (xden + Q[0][i]) * ysq;
        }
        return y * (xnum + P[0][3]) / (xden + Q[0][3]);
    }
    /**
   * Approximates the complement of the error function erfc() for
   * 0.46875 <= x <= 4.0 using this function:
   *                       n
   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
   *                      j=0
   */ function erfc2(y) {
        var xnum = P[1][8] * y;
        var xden = y;
        var i;
        for(i = 0; i < 7; i += 1){
            xnum = (xnum + P[1][i]) * y;
            xden = (xden + Q[1][i]) * y;
        }
        var result = (xnum + P[1][7]) / (xden + Q[1][7]);
        var ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
    }
    /**
   * Approximates the complement of the error function erfc() for x > 4.0 using
   * this function:
   *
   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
   *               n
   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
   *              j=0
   */ function erfc3(y) {
        var ysq = 1 / (y * y);
        var xnum = P[2][5] * ysq;
        var xden = ysq;
        var i;
        for(i = 0; i < 4; i += 1){
            xnum = (xnum + P[2][i]) * ysq;
            xden = (xden + Q[2][i]) * ysq;
        }
        var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
        result = (SQRPI - result) / y;
        ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
    }
    /**
   * Compute the erf function of a value using a rational Chebyshev
   * approximations for different intervals of x.
   *
   * This is a translation of W. J. Cody's Fortran implementation from 1987
   * ( https://www.netlib.org/specfun/erf ). See the AMS publication
   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
   * for an explanation of this process.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.erf(x)
   *
   * Examples:
   *
   *    math.erf(0.2)    // returns 0.22270258921047847
   *    math.erf(-0.5)   // returns -0.5204998778130465
   *    math.erf(4)      // returns 0.9999999845827421
   *
   * @param {number | Array | Matrix} x   A real number
   * @return {number | Array | Matrix}    The erf of `x`
   */ return typed('name', {
        number: function number(x) {
            var y = Math.abs(x);
            if (y >= MAX_NUM) return _numberJs.sign(x);
            if (y <= THRESH) return _numberJs.sign(x) * erf1(y);
            if (y <= 4) return _numberJs.sign(x) * (1 - erfc2(y));
            return _numberJs.sign(x) * (1 - erfc3(y));
        },
        'Array | Matrix': function ArrayMatrix(n) {
            return _collectionJs.deepMap(n, this);
        } // TODO: For complex numbers, use the approximation for the Faddeeva function
    });
});
/**
 * Upper bound for the first approximation interval, 0 <= x <= THRESH
 * @constant
 */ var THRESH = 0.46875;
/**
 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
 * @constant
 */ var SQRPI = 0.5641895835477563;
/**
 * Coefficients for each term of the numerator sum (p_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */ var P = [
    [
        3.1611237438705655,
        113.86415415105016,
        377.485237685302,
        3209.3775891384694,
        0.18577770618460315
    ],
    [
        0.5641884969886701,
        8.883149794388377,
        66.11919063714163,
        298.6351381974001,
        881.952221241769,
        1712.0476126340707,
        2051.0783778260716,
        1230.3393547979972,
        0.000000021531153547440383
    ],
    [
        0.30532663496123236,
        0.36034489994980445,
        0.12578172611122926,
        0.016083785148742275,
        0.0006587491615298378,
        0.016315387137302097
    ]
];
/**
 * Coefficients for each term of the denominator sum (q_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */ var Q = [
    [
        23.601290952344122,
        244.02463793444417,
        1282.6165260773723,
        2844.236833439171
    ],
    [
        15.744926110709835,
        117.6939508913125,
        537.1811018620099,
        1621.3895745666903,
        3290.7992357334597,
        4362.619090143247,
        3439.3676741437216,
        1230.3393548037495
    ],
    [
        2.568520192289822,
        1.8729528499234604,
        0.5279051029514285,
        0.06051834131244132,
        0.0023352049762686918
    ]
];
/**
 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
 * return 1
 */ var MAX_NUM = Math.pow(2, 53);

},{"../../utils/collection.js":"4hyl2","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hoyRJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMode", ()=>createMode
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'mode';
var dependencies = [
    'typed',
    'isNaN',
    'isNumeric'
];
var createMode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , isNaN , isNumeric  } = _ref;
    /**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {Array} mode
   * @private
   */ function _mode(values) {
        values = _arrayJs.flatten(values.valueOf());
        var num = values.length;
        if (num === 0) {
            throw new Error('Cannot calculate mode of an empty array');
        }
        var count = {
        };
        var mode = [];
        var max = 0;
        for(var i = 0; i < values.length; i++){
            var value = values[i];
            if (isNumeric(value) && isNaN(value)) {
                throw new Error('Cannot calculate mode of an array containing NaN values');
            }
            if (!(value in count)) {
                count[value] = 0;
            }
            count[value]++;
            if (count[value] === max) {
                mode.push(value);
            } else if (count[value] > max) {
                max = count[value];
                mode = [
                    value
                ];
            }
        }
        return mode;
    }
    /**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are more than one modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */ return typed(name, {
        'Array | Matrix': _mode,
        '...': function _(args) {
            return _mode(args);
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dLtzz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createProd", ()=>createProd
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _improveErrorMessageJs = require("./utils/improveErrorMessage.js");
var name = 'prod';
var dependencies = [
    'typed',
    'config',
    'multiplyScalar',
    'numeric'
];
var createProd = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , multiplyScalar , numeric  } = _ref;
    /**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */ function _prod(array) {
        var prod;
        _collectionJs.deepForEach(array, function(value) {
            try {
                prod = prod === undefined ? value : multiplyScalar(prod, value);
            } catch (err) {
                throw _improveErrorMessageJs.improveErrorMessage(err, 'prod', value);
            }
        }); // make sure returning numeric value: parse a string into a numeric value
        if (typeof prod === 'string') {
            prod = numeric(prod, config.number);
        }
        if (prod === undefined) {
            throw new Error('Cannot calculate prod of an empty array');
        }
        return prod;
    }
    /**
   * Compute the product of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3)           // returns 6
   *     math.prod(2, 3)               // returns 6
   *     math.prod(2, 3, 4)            // returns 24
   *     math.prod([2, 3, 4])          // returns 24
   *     math.prod([[2, 5], [4, 3]])   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */ return typed(name, {
        // prod([a, b, c, d, ...])
        'Array | Matrix': _prod,
        // prod([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
            // TODO: implement prod(A, dim)
            throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)
        },
        // prod(a, b, c, d, ...)
        '...': function _(args) {
            return _prod(args);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","./utils/improveErrorMessage.js":"ee5yO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ee5yO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Improve error messages for statistics functions. Errors are typically
 * thrown in an internally used function like larger, causing the error
 * not to mention the function (like max) which is actually used by the user.
 *
 * @param {Error} err
 * @param {String} fnName
 * @param {*} [value]
 * @return {Error}
 */ parcelHelpers.export(exports, "improveErrorMessage", ()=>improveErrorMessage
);
var _isJs = require("../../../utils/is.js");
function improveErrorMessage(err, fnName, value) {
    // TODO: add information with the index (also needs transform in expression parser)
    var details;
    if (String(err).indexOf('Unexpected type') !== -1) {
        details = arguments.length > 2 ? ' (type: ' + _isJs.typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
        return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
    }
    if (String(err).indexOf('complex numbers') !== -1) {
        details = arguments.length > 2 ? ' (type: ' + _isJs.typeOf(value) + ', value: ' + JSON.stringify(value) + ')' : '';
        return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
    }
    return err;
}

},{"../../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2qmec":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFormat", ()=>createFormat
);
var _stringJs = require("../../utils/string.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'format';
var dependencies = [
    'typed'
];
var createFormat = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Format a value of any type into a string.
   *
   * Syntax:
   *
   *    math.format(value)
   *    math.format(value, options)
   *    math.format(value, precision)
   *    math.format(value, callback)
   *
   * Where:
   *
   *  - `value: *`
   *    The value to be formatted
   *  - `options: Object`
   *    An object with formatting options. Available options:
   *    - `notation: string`
   *      Number notation. Choose from:
   *      - 'fixed'
   *        Always use regular number notation.
   *        For example '123.40' and '14000000'
   *      - 'exponential'
   *        Always use exponential notation.
   *        For example '1.234e+2' and '1.4e+7'
   *      - 'engineering'
   *        Always use engineering notation: always have exponential notation,
   *        and select the exponent to be a multiple of 3.
   *        For example '123.4e+0' and '14.0e+6'
   *      - 'auto' (default)
   *        Regular number notation for numbers having an absolute value between
   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
   *        Lower bound is included, upper bound is excluded.
   *        For example '123.4' and '1.4e7'.
   *      - 'bin', 'oct, or 'hex'
   *        Format the number using binary, octal, or hexadecimal notation.
   *        For example '0b1101' and '0x10fe'.
   *    - `wordSize: number`
   *      The word size in bits to use for formatting in binary, octal, or
   *      hexadecimal notation. To be used only with 'bin', 'oct', or 'hex'
   *      values for 'notation' option. When this option is defined the value
   *      is formatted as a signed twos complement integer of the given word
   *      size and the size suffix is appended to the output.
   *      For example format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
   *      Default value is undefined.
   *    - `precision: number`
   *      Limit the number of digits of the formatted value.
   *      For regular numbers, must be a number between 0 and 16.
   *      For bignumbers, the maximum depends on the configured precision,
   *      see function `config()`.
   *      In case of notations 'exponential', 'engineering', and 'auto', `precision`
   *      defines the total number of significant digits returned.
   *      In case of notation 'fixed', `precision` defines the number of
   *      significant digits after the decimal point.
   *      `precision` is undefined by default.
   *    - `lowerExp: number`
   *      Exponent determining the lower boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `-3`.
   *    - `upperExp: number`
   *      Exponent determining the upper boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `5`.
   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
   *      configured, and will output `0.(3)` when 'decimal' is configured.
   * - `callback: function`
   *   A custom formatting function, invoked for all numeric elements in `value`,
   *   for example all elements of a matrix, or the real and imaginary
   *   parts of a complex number. This callback can be used to override the
   *   built-in numeric notation with any type of formatting. Function `callback`
   *   is called with `value` as parameter and must return a string.
   *
   * When `value` is an Object:
   *
   * - When the object contains a property `format` being a function, this function
   *   is invoked as `value.format(options)` and the result is returned.
   * - When the object has its own `toString` method, this method is invoked
   *   and the result is returned.
   * - In other cases the function will loop over all object properties and
   *   return JSON object notation like '{"a": 2, "b": 3}'.
   *
   * When value is a function:
   *
   * - When the function has a property `syntax`, it returns this
   *   syntax description.
   * - In other cases, a string `'function'` is returned.
   *
   * Examples:
   *
   *    math.format(6.4)                                        // returns '6.4'
   *    math.format(1240000)                                    // returns '1.24e6'
   *    math.format(1/3)                                        // returns '0.3333333333333333'
   *    math.format(1/3, 3)                                     // returns '0.333'
   *    math.format(21385, 2)                                   // returns '21000'
   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
   *
   *    function formatCurrency(value) {
   *      // return currency notation with two digits:
   *      return '$' + value.toFixed(2)
   *
   *      // you could also use math.format inside the callback:
   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
   *    }
   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'
   *
   * See also:
   *
   *    print
   *
   * @param {*} value                               Value to be stringified
   * @param {Object | Function | number} [options]  Formatting options
   * @return {string} The formatted value
   */ return typed(name, {
        any: _stringJs.format,
        'any, Object | function | number': _stringJs.format
    });
});

},{"../../utils/string.js":"0PPSB","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eC100":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBin", ()=>createBin
);
var _factoryJs = require("../../utils/factory.js");
var name = 'bin';
var dependencies = [
    'typed',
    'format'
];
var createBin = _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , format  } = _ref;
    return typed(name, {
        'number | BigNumber': function numberBigNumber(n) {
            return format(n, {
                notation: 'bin'
            });
        },
        'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
            return format(n, {
                notation: 'bin',
                wordSize: wordSize
            });
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3s5tn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createOct", ()=>createOct
);
var _factoryJs = require("../../utils/factory.js");
var name = 'oct';
var dependencies = [
    'typed',
    'format'
];
var createOct = _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , format  } = _ref;
    return typed(name, {
        'number | BigNumber': function numberBigNumber(n) {
            return format(n, {
                notation: 'oct'
            });
        },
        'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
            return format(n, {
                notation: 'oct',
                wordSize: wordSize
            });
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7vqvG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHex", ()=>createHex
);
var _factoryJs = require("../../utils/factory.js");
var name = 'hex';
var dependencies = [
    'typed',
    'format'
];
var createHex = _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , format  } = _ref;
    return typed(name, {
        'number | BigNumber': function numberBigNumber(n) {
            return format(n, {
                notation: 'hex'
            });
        },
        'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
            return format(n, {
                notation: 'hex',
                wordSize: wordSize
            });
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b00Rf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPrint", ()=>createPrint
);
var _stringJs = require("../../utils/string.js");
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'print';
var dependencies = [
    'typed'
];
var createPrint = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Interpolate values into a string template.
   *
   * Syntax:
   *
   *     math.print(template, values)
   *     math.print(template, values, precision)
   *     math.print(template, values, options)
   *
   * Example usage:
   *
   *     // the following outputs: 'Lucy is 5 years old'
   *     math.print('Lucy is $age years old', {age: 5})
   *
   *     // the following outputs: 'The value of pi is 3.141592654'
   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
   *
   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
   *     math.print('Hello $user.name! The date is $date', {
   *       user: {
   *         name: 'Mary',
   *       },
   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
   *     })
   *
   *     // the following outputs: 'My favorite fruits are apples and bananas !'
   *     math.print('My favorite fruits are $0 and $1 !', [
   *       'apples',
   *       'bananas'
   *     ])
   *
   * See also:
   *
   *     format
   *
   * @param {string} template           A string containing variable placeholders.
   * @param {Object | Array | Matrix}   values An object or array containing variables
   *                                    which will be filled in in the template.
   * @param {number | Object} [options] Formatting options,
   *                                    or the number of digits to format numbers.
   *                                    See function math.format for a description
   *                                    of all options.
   * @return {string} Interpolated string
   */ return typed(name, {
        // note: Matrix will be converted automatically to an Array
        'string, Object | Array': _print,
        'string, Object | Array, number | Object': _print
    });
});
/**
 * Interpolate values into a string template.
 * @param {string} template
 * @param {Object} values
 * @param {number | Object} [options]
 * @returns {string} Interpolated string
 * @private
 */ function _print(template, values, options) {
    return template.replace(/\$([\w.]+)/g, function(original, key) {
        var keys = key.split('.');
        var value = values[keys.shift()];
        while(keys.length && value !== undefined){
            var k = keys.shift();
            value = k ? value[k] : value + '.';
        }
        if (value !== undefined) {
            if (!_isJs.isString(value)) return _stringJs.format(value, options);
            else return value;
        }
        return original;
    });
}

},{"../../utils/string.js":"0PPSB","../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cRFrL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTo", ()=>createTo
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'to';
var dependencies = [
    'typed',
    'matrix'
];
var createTo = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix  } = _ref;
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Change the unit of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.to(x, unit)
   *
   * Examples:
   *
   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
   *
   * See also:
   *
   *    unit
   *
   * @param {Unit | Array | Matrix} x     The unit to be converted.
   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
   *                                      or a unit without value.
   * @return {Unit | Array | Matrix} value with changed, fixed unit.
   */ return typed(name, {
        'Unit, Unit | string': function UnitUnitString(x, unit) {
            return x.to(unit);
        },
        'Matrix, Matrix': function MatrixMatrix(x, y) {
            // SparseMatrix does not support Units
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'Matrix, any': function MatrixAny(x, y) {
            // SparseMatrix does not support Units
            return algorithm14(x, y, this, false);
        },
        'any, Matrix': function anyMatrix(x, y) {
            // SparseMatrix does not support Units
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"l6bhv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIsPrime", ()=>createIsPrime
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'isPrime';
var dependencies = [
    'typed'
];
var createIsPrime = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3)                     // returns true
   *    math.isPrime(-2)                    // returns false
   *    math.isPrime(0)                     // returns false
   *    math.isPrime(-0)                    // returns false
   *    math.isPrime(0.5)                   // returns false
   *    math.isPrime('2')                   // returns true
   *    math.isPrime([2, 17, 100])           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */ return typed(name, {
        number: function number(x) {
            if (x * 0 !== 0) return false;
            if (x <= 3) return x > 1;
            if (x % 2 === 0 || x % 3 === 0) return false;
            for(var i = 5; i * i <= x; i += 6){
                if (x % i === 0 || x % (i + 2) === 0) return false;
            }
            return true;
        },
        BigNumber: function BigNumber(n) {
            if (n.toNumber() * 0 !== 0) return false;
            if (n.lte(3)) return n.gt(1);
            if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;
            if (n.lt(Math.pow(2, 32))) {
                var x = n.toNumber();
                for(var i = 5; i * i <= x; i += 6){
                    if (x % i === 0 || x % (i + 2) === 0) return false;
                }
                return true;
            }
            function modPow(base, exponent, modulus) {
                // exponent can be huge, use non-recursive variant
                var accumulator = 1;
                while(!exponent.eq(0))if (exponent.mod(2).eq(0)) {
                    exponent = exponent.div(2);
                    base = base.mul(base).mod(modulus);
                } else {
                    exponent = exponent.sub(1);
                    accumulator = base.mul(accumulator).mod(modulus);
                }
                return accumulator;
            } // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants
            var Decimal = n.constructor.clone({
                precision: n.toFixed(0).length * 2
            });
            n = new Decimal(n);
            var r = 0;
            var d = n.sub(1);
            while(d.mod(2).eq(0)){
                d = d.div(2);
                r += 1;
            }
            var bases = null; // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases
            if (n.lt('3317044064679887385961981')) bases = [
                2,
                3,
                5,
                7,
                11,
                13,
                17,
                19,
                23,
                29,
                31,
                37,
                41
            ].filter((x)=>x < n
            );
            else {
                var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));
                bases = [];
                for(var _i = 2; _i <= max; _i += 1)bases.push(max);
            }
            for(var _i2 = 0; _i2 < bases.length; _i2 += 1){
                var a = bases[_i2];
                var adn = modPow(n.sub(n).add(a), d, n);
                if (!adn.eq(1)) for(var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)){
                    if (_i3 === r - 1) return false;
                }
            }
            return true;
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ajCZO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createNumeric", ()=>createNumeric
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var _noopJs = require("../../utils/noop.js");
var name = 'numeric';
var dependencies = [
    'number',
    '?bignumber',
    '?fraction'
];
var createNumeric = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { number: _number , bignumber , fraction  } = _ref;
    var validInputTypes = {
        string: true,
        number: true,
        BigNumber: true,
        Fraction: true
    }; // Load the conversion functions for each output type
    var validOutputTypes = {
        number: (x)=>_number(x)
        ,
        BigNumber: bignumber ? (x)=>bignumber(x)
         : _noopJs.noBignumber,
        Fraction: fraction ? (x)=>fraction(x)
         : _noopJs.noFraction
    };
    /**
   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
   *
   * Syntax:
   *
   *    math.numeric(x)
   *
   * Examples:
   *
   *    math.numeric('4')                           // returns number 4
   *    math.numeric('4', 'number')                 // returns number 4
   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
   *    math.numeric('4', 'Fraction')               // returns Fraction 4
   *    math.numeric(4, 'Fraction')                 // returns Fraction 4
   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4
   *
   * See also:
   *
   *    number, fraction, bignumber, string, format
   *
   * @param {string | number | BigNumber | Fraction } value
   *              A numeric value or a string containing a numeric value
   * @param {string} outputType
   *              Desired numeric output type.
   *              Available values: 'number', 'BigNumber', or 'Fraction'
   * @return {number | BigNumber | Fraction}
   *              Returns an instance of the numeric in the requested type
   */ return function numeric(value, outputType) {
        var inputType = _isJs.typeOf(value);
        if (!(inputType in validInputTypes)) throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
        if (!(outputType in validOutputTypes)) throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
        if (outputType === inputType) return value;
        else return validOutputTypes[outputType](value);
    };
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","../../utils/noop.js":"fXPyT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bRXBJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDivideScalar", ()=>createDivideScalar
);
var _factoryJs = require("../../utils/factory.js");
var _isJs = require("../../utils/is.js");
var name = 'divideScalar';
var dependencies = [
    'typed',
    'numeric'
];
var createDivideScalar = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , numeric  } = _ref;
    /**
   * Divide two scalar values, `x / y`.
   * This function is meant for internal use: it is used by the public functions
   * `divide` and `inv`.
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
   * @private
   */ return typed(name, {
        'number, number': function numberNumber(x, y) {
            return x / y;
        },
        'Complex, Complex': function ComplexComplex(x, y) {
            return x.div(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return x.div(y);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.div(y);
        },
        'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
            var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit
            var one = numeric(1, _isJs.typeOf(y));
            res.value = this(res.value === null ? res._normalize(one) : res.value, y);
            return res;
        },
        'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
            var res = y.clone();
            res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit
            var one = numeric(1, _isJs.typeOf(x));
            res.value = this(x, y.value === null ? y._normalize(one) : y.value);
            return res;
        },
        'Unit, Unit': function UnitUnit(x, y) {
            return x.divide(y);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ieEGr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPow", ()=>createPow
);
var _factoryJs = require("../../utils/factory.js");
var _numberJs = require("../../utils/number.js");
var _arrayJs = require("../../utils/array.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'pow';
var dependencies = [
    'typed',
    'config',
    'identity',
    'multiply',
    'matrix',
    'fraction',
    'number',
    'Complex'
];
var createPow = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , identity , multiply , matrix , number , fraction , Complex  } = _ref;
    /**
   * Calculates the power of x to y, x^y, for two numbers.
   * @param {number} x
   * @param {number} y
   * @return {number | Complex} res
   * @private
   */ function _pow(x, y) {
        // Alternatively could define a 'realmode' config option or something, but
        // 'predictable' will work for now
        if (config.predictable && !_numberJs.isInteger(y) && x < 0) {
            // Check to see if y can be represented as a fraction
            try {
                var yFrac = fraction(y);
                var yNum = number(yFrac);
                if (y === yNum || Math.abs((y - yNum) / y) < 0.00000000000001) {
                    if (yFrac.d % 2 === 1) {
                        return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
                    }
                }
            } catch (ex) {
            } // Unable to express y as a fraction, so continue on
        } // **for predictable mode** x^Infinity === NaN if x < -1
        // N.B. this behavour is different from `Math.pow` which gives
        // (-2)^Infinity === Infinity
        if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
            return NaN;
        }
        if (_numberJs.isInteger(y) || x >= 0 || config.predictable) {
            return _indexJs.powNumber(x, y);
        } else {
            // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow
            // x^Infinity === 0 if -1 < x < 1
            // A real number 0 is returned instead of complex(0)
            if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
                return 0;
            }
            return new Complex(x, 0).pow(y, 0);
        }
    }
    /**
   * Calculate the power of a 2d array
   * @param {Array} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Array}
   * @private
   */ function _powArray(x, y) {
        if (!_numberJs.isInteger(y) || y < 0) {
            throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
        } // verify that A is a 2 dimensional square matrix
        var s = _arrayJs.arraySize(x);
        if (s.length !== 2) {
            throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
        }
        if (s[0] !== s[1]) {
            throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
        }
        var res = identity(s[0]).valueOf();
        var px = x;
        while(y >= 1){
            if ((y & 1) === 1) {
                res = multiply(px, res);
            }
            y >>= 1;
            px = multiply(px, px);
        }
        return res;
    }
    /**
   * Calculate the power of a 2d matrix
   * @param {Matrix} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Matrix}
   * @private
   */ function _powMatrix(x, y) {
        return matrix(_powArray(x.valueOf(), y));
    }
    /**
   * Calculates the power of x to y, `x ^ y`.
   * Matrix exponentiation is supported for square matrices `x`, and positive
   * integer exponents `y`.
   *
   * For cubic roots of negative numbers, the function returns the principal
   * root by default. In order to let the function return the real root,
   * math.js can be configured with `math.config({predictable: true})`.
   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
   *
   * Syntax:
   *
   *    math.pow(x, y)
   *
   * Examples:
   *
   *    math.pow(2, 3)               // returns number 8
   *
   *    const a = math.complex(2, 3)
   *    math.pow(a, 2)                // returns Complex -5 + 12i
   *
   *    const b = [[1, 2], [4, 3]]
   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    multiply, sqrt, cbrt, nthRoot
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex} y                          The exponent
   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
   */ return typed(name, {
        'number, number': _pow,
        'Complex, Complex': function ComplexComplex(x, y) {
            return x.pow(y);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            if (y.isInteger() || x >= 0 || config.predictable) return x.pow(y);
            else return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            var result = x.pow(y);
            if (result != null) return result;
            if (config.predictable) throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');
            else return _pow(x.valueOf(), y.valueOf());
        },
        'Array, number': _powArray,
        'Array, BigNumber': function ArrayBigNumber(x, y) {
            return _powArray(x, y.toNumber());
        },
        'Matrix, number': _powMatrix,
        'Matrix, BigNumber': function MatrixBigNumber(x, y) {
            return _powMatrix(x, y.toNumber());
        },
        'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {
            return x.pow(y);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/number.js":"l1AB8","../../utils/array.js":"3R6c8","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3aowV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRound", ()=>createRound
);
parcelHelpers.export(exports, "createRoundNumber", ()=>createRoundNumber
);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _numberJs = require("../../utils/number.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _indexJs = require("../../plain/number/index.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _definePropertyDefault.default(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var NO_INT = 'Number of decimals in function round must be an integer';
var name = 'round';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'zeros',
    'BigNumber',
    'DenseMatrix'
];
var createRound = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , zeros , BigNumber , DenseMatrix  } = _ref;
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Round a value towards the nearest integer.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.round(x)
   *    math.round(x, n)
   *
   * Examples:
   *
   *    math.round(3.22)             // returns number 3
   *    math.round(3.82)             // returns number 4
   *    math.round(-4.2)             // returns number -4
   *    math.round(-4.7)             // returns number -5
   *    math.round(3.22, 1)          // returns number 3.2
   *    math.round(3.88, 1)          // returns number 3.9
   *    math.round(-4.21, 1)         // returns number -4.2
   *    math.round(-4.71, 1)         // returns number -4.7
   *    math.round(math.pi, 3)       // returns number 3.142
   *    math.round(123.45678, 2)     // returns number 123.46
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.round(c)                // returns Complex 3 - 3i
   *
   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
   *
   * See also:
   *
   *    ceil, fix, floor
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */ return typed(name, _objectSpread(_objectSpread({
    }, roundNumberSignatures), {
    }, {
        Complex: function Complex(x) {
            return x.round();
        },
        'Complex, number': function ComplexNumber(x, n) {
            if (n % 1) throw new TypeError(NO_INT);
            return x.round(n);
        },
        'Complex, BigNumber': function ComplexBigNumber(x, n) {
            if (!n.isInteger()) throw new TypeError(NO_INT);
            var _n = n.toNumber();
            return x.round(_n);
        },
        'number, BigNumber': function numberBigNumber(x, n) {
            if (!n.isInteger()) throw new TypeError(NO_INT);
            return new BigNumber(x).toDecimalPlaces(n.toNumber());
        },
        BigNumber: function BigNumber(x) {
            return x.toDecimalPlaces(0);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
            if (!n.isInteger()) throw new TypeError(NO_INT);
            return x.toDecimalPlaces(n.toNumber());
        },
        Fraction: function Fraction(x) {
            return x.round();
        },
        'Fraction, number': function FractionNumber(x, n) {
            if (n % 1) throw new TypeError(NO_INT);
            return x.round(n);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since round(0) = 0
            return _collectionJs.deepMap(x, this, true);
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            return algorithm14(x, y, this, false);
        },
        'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {
            // check scalar is zero
            if (equalScalar(x, 0)) // do not execute algorithm, result will be a zero matrix
            return zeros(y.size(), y.storage());
            return algorithm12(y, x, this, true);
        },
        'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {
            // check scalar is zero
            if (equalScalar(x, 0)) // do not execute algorithm, result will be a zero matrix
            return zeros(y.size(), y.storage());
            return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    }));
});
var roundNumberSignatures = {
    number: _indexJs.roundNumber,
    'number, number': function numberNumber(x, n) {
        if (!_numberJs.isInteger(n)) throw new TypeError(NO_INT);
        if (n < 0 || n > 15) throw new Error('Number of decimals in function round must be in the range of 0-15');
        return _indexJs.roundNumber(x, n);
    }
};
var createRoundNumber = /* #__PURE__ */ _factoryJs.factory(name, [
    'typed'
], (_ref2)=>{
    var { typed  } = _ref2;
    return typed(name, roundNumberSignatures);
});

},{"@babel/runtime/helpers/defineProperty":"ls4GC","../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../utils/number.js":"l1AB8","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm14.js":"82VrR","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ls4GC":[function(require,module,exports) {
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"hW2HW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLog", ()=>createLog
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'log';
var dependencies = [
    'config',
    'typed',
    'divideScalar',
    'Complex'
];
var createLog = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , divideScalar , Complex  } = _ref;
    /**
   * Calculate the logarithm of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log(x)
   *    math.log(x, base)
   *
   * Examples:
   *
   *    math.log(3.5)                  // returns 1.252762968495368
   *    math.exp(math.log(2.4))        // returns 2.4
   *
   *    math.pow(10, 4)                // returns 10000
   *    math.log(10000, 10)            // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *
   *    math.log(1024, 2)              // returns 10
   *    math.pow(2, 10)                // returns 1024
   *
   * See also:
   *
   *    exp, log2, log10, log1p
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x`
   */ return typed(name, {
        number: function number(x) {
            if (x >= 0 || config.predictable) return _indexJs.logNumber(x);
            else // negative value -> complex value computation
            return new Complex(x, 0).log();
        },
        Complex: function Complex(x) {
            return x.log();
        },
        BigNumber: function BigNumber(x) {
            if (!x.isNegative() || config.predictable) return x.ln();
            else // downgrade to number, return Complex valued result
            return new Complex(x.toNumber(), 0).log();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        },
        'any, any': function anyAny(x, base) {
            // calculate logarithm for a specified base, log(x, base)
            return divideScalar(this(x), this(base));
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dY0Yo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLog1p", ()=>createLog1p
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _numberJs = require("../../utils/number.js");
var name = 'log1p';
var dependencies = [
    'typed',
    'config',
    'divideScalar',
    'log',
    'Complex'
];
var createLog1p = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , divideScalar , log , Complex  } = _ref;
    /**
   * Calculate the natural logarithm of a complex number + 1
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */ function _log1pComplex(x) {
        var xRe1p = x.re + 1;
        return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
    }
    /**
   * Calculate the logarithm of a `value+1`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log1p(x)
   *    math.log1p(x, base)
   *
   * Examples:
   *
   *    math.log1p(2.5)                 // returns 1.252762968495368
   *    math.exp(math.log1p(1.4))       // returns 2.4
   *
   *    math.pow(10, 4)                 // returns 10000
   *    math.log1p(9999, 10)            // returns 4
   *    math.log1p(9999) / math.log(10) // returns 4
   *
   * See also:
   *
   *    exp, log, log2, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm of `x+1`.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x+1` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x+1`
   */ return typed(name, {
        number: function number(x) {
            if (x >= -1 || config.predictable) return _numberJs.log1p(x);
            else // negative value -> complex value computation
            return _log1pComplex(new Complex(x, 0));
        },
        Complex: _log1pComplex,
        BigNumber: function BigNumber(x) {
            var y = x.plus(1);
            if (!y.isNegative() || config.predictable) return y.ln();
            else // downgrade to number, return Complex valued result
            return _log1pComplex(new Complex(x.toNumber(), 0));
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        },
        'any, any': function anyAny(x, base) {
            // calculate logarithm for a specified base, log1p(x, base)
            return divideScalar(this(x), log(base));
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../utils/number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"826ky":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createNthRoots", ()=>createNthRoots
);
var _factoryJs = require("../../utils/factory.js");
var name = 'nthRoots';
var dependencies = [
    'config',
    'typed',
    'divideScalar',
    'Complex'
];
var createNthRoots = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , divideScalar , Complex  } = _ref;
    /**
   * Each function here returns a real multiple of i as a Complex value.
   * @param  {number} val
   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
   */ // This is used to fix float artifacts for zero-valued components.
    var _calculateExactResult = [
        function realPos(val) {
            return new Complex(val, 0);
        },
        function imagPos(val) {
            return new Complex(0, val);
        },
        function realNeg(val) {
            return new Complex(-val, 0);
        },
        function imagNeg(val) {
            return new Complex(0, -val);
        }
    ];
    /**
   * Calculate the nth root of a Complex Number a using De Movire's Theorem.
   * @param  {Complex} a
   * @param  {number} root
   * @return {Array} array of n Complex Roots
   */ function _nthComplexRoots(a, root) {
        if (root < 0) throw new Error('Root must be greater than zero');
        if (root === 0) throw new Error('Root must be non-zero');
        if (root % 1 !== 0) throw new Error('Root must be an integer');
        if (a === 0 || a.abs() === 0) return [
            new Complex(0, 0)
        ];
        var aIsNumeric = typeof a === 'number';
        var offset; // determine the offset (argument of a)/(pi/2)
        if (aIsNumeric || a.re === 0 || a.im === 0) {
            if (aIsNumeric) offset = 2 * +(a < 0); // numeric value on the real axis
            else if (a.im === 0) offset = 2 * +(a.re < 0); // complex value on the real axis
            else offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
        }
        var arg = a.arg();
        var abs = a.abs();
        var roots = [];
        var r = Math.pow(abs, 1 / root);
        for(var k = 0; k < root; k++){
            var halfPiFactor = (offset + 4 * k) / root;
            /**
       * If (offset + 4*k)/root is an integral multiple of pi/2
       * then we can produce a more exact result.
       */ if (halfPiFactor === Math.round(halfPiFactor)) {
                roots.push(_calculateExactResult[halfPiFactor % 4](r));
                continue;
            }
            roots.push(new Complex({
                r: r,
                phi: (arg + 2 * Math.PI * k) / root
            }));
        }
        return roots;
    }
    /**
   * Calculate the nth roots of a value.
   * An nth root of a positive real number A,
   * is a positive real solution of the equation "x^root = A".
   * This function returns an array of complex values.
   *
   * Syntax:
   *
   *    math.nthRoots(x)
   *    math.nthRoots(x, root)
   *
   * Examples:
   *
   *    math.nthRoots(1)
   *    // returns [
   *    //   {re: 1, im: 0},
   *    //   {re: -1, im: 0}
   *    // ]
   *    nthRoots(1, 3)
   *    // returns [
   *    //   { re: 1, im: 0 },
   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
   *    ]
   *
   * See also:
   *
   *    nthRoot, pow, sqrt
   *
   * @param {number | BigNumber | Fraction | Complex} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex}            Rounded value
   */ return typed(name, {
        Complex: function Complex(x) {
            return _nthComplexRoots(x, 2);
        },
        'Complex, number': _nthComplexRoots
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jSanc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDotPow", ()=>createDotPow
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'dotPow';
var dependencies = [
    'typed',
    'equalScalar',
    'matrix',
    'pow',
    'DenseMatrix'
];
var createDotPow = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equalScalar , matrix , pow , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Calculates the power of x to y element wise.
   *
   * Syntax:
   *
   *    math.dotPow(x, y)
   *
   * Examples:
   *
   *    math.dotPow(2, 3)            // returns number 8
   *
   *    const a = [[1, 2], [4, 3]]
   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    pow, sqrt, multiply
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
   */ return typed(name, {
        'any, any': pow,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, pow, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, pow, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, pow, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, pow);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2paho":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDotDivide", ()=>createDotDivide
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'dotDivide';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'divideScalar',
    'DenseMatrix'
];
var createDotDivide = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , divideScalar , DenseMatrix  } = _ref;
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Divide two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotDivide(x, y)
   *
   * Examples:
   *
   *    math.dotDivide(2, 4)   // returns 0.5
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
   *
   * See also:
   *
   *    divide, multiply, dotMultiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
   */ return typed(name, {
        'any, any': divideScalar,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, divideScalar, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, divideScalar, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, divideScalar, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, divideScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm11(x, y, divideScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, divideScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, divideScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, divideScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, divideScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, divideScalar, true).valueOf();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1tmPD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLsolve", ()=>createLsolve
);
var _factoryJs = require("../../../utils/factory.js");
var _solveValidationJs = require("./utils/solveValidation.js");
var name = 'lsolve';
var dependencies = [
    'typed',
    'matrix',
    'divideScalar',
    'multiplyScalar',
    'subtract',
    'equalScalar',
    'DenseMatrix'
];
var createLsolve = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , divideScalar , multiplyScalar , subtract , equalScalar , DenseMatrix  } = _ref;
    var solveValidation = _solveValidationJs.createSolveValidation({
        DenseMatrix
    });
    function _denseForwardSubstitution(m, b) {
        // validate matrix and vector, return copy of column vector b
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1]; // result
        var x = [];
        var mdata = m._data; // loop columns
        for(var j = 0; j < columns; j++){
            var bj = bdata[j][0] || 0;
            var xj = void 0;
            if (!equalScalar(bj, 0)) {
                // non-degenerate row, find solution
                var vjj = mdata[j][j];
                if (equalScalar(vjj, 0)) {
                    throw new Error('Linear system cannot be solved since matrix is singular');
                }
                xj = divideScalar(bj, vjj); // loop rows
                for(var i = j + 1; i < rows; i++){
                    bdata[i] = [
                        subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))
                    ];
                }
            } else {
                // degenerate row, we can choose any value
                xj = 0;
            }
            x[j] = [
                xj
            ];
        }
        return new DenseMatrix({
            data: x,
            size: [
                rows,
                1
            ]
        });
    }
    function _sparseForwardSubstitution(m, b) {
        // validate matrix and vector, return copy of column vector b
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // result
        var x = []; // loop columns
        for(var j = 0; j < columns; j++){
            var bj = bdata[j][0] || 0;
            if (!equalScalar(bj, 0)) {
                // non-degenerate row, find solution
                var vjj = 0; // matrix values & indices (column j)
                var jValues = [];
                var jIndices = []; // first and last index in the column
                var firstIndex = ptr[j];
                var lastIndex = ptr[j + 1]; // values in column, find value at [j, j]
                for(var k = firstIndex; k < lastIndex; k++){
                    var i = index[k]; // check row (rows are not sorted!)
                    if (i === j) {
                        vjj = values[k];
                    } else if (i > j) {
                        // store lower triangular
                        jValues.push(values[k]);
                        jIndices.push(i);
                    }
                } // at this point we must have a value in vjj
                if (equalScalar(vjj, 0)) {
                    throw new Error('Linear system cannot be solved since matrix is singular');
                }
                var xj = divideScalar(bj, vjj);
                for(var _k = 0, l = jIndices.length; _k < l; _k++){
                    var _i = jIndices[_k];
                    bdata[_i] = [
                        subtract(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))
                    ];
                }
                x[j] = [
                    xj
                ];
            } else {
                // degenerate row, we can choose any value
                x[j] = [
                    0
                ];
            }
        }
        return new DenseMatrix({
            data: x,
            size: [
                rows,
                1
            ]
        });
    }
    /**
   * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolve(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolve(a, b)  // [[-5.5], [20]]
   *
   * See also:
   *
   *    lsolveAll, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */ return typed(name, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
            return _sparseForwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
            return _denseForwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
            var m = matrix(a);
            var r = _denseForwardSubstitution(m, b);
            return r.valueOf();
        }
    });
});

},{"../../../utils/factory.js":"26foW","./utils/solveValidation.js":"69cYB","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"69cYB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSolveValidation", ()=>createSolveValidation
);
var _isJs = require("../../../../utils/is.js");
var _arrayJs = require("../../../../utils/array.js");
var _stringJs = require("../../../../utils/string.js");
function createSolveValidation(_ref) {
    var { DenseMatrix  } = _ref;
    /**
   * Validates matrix and column vector b for backward/forward substitution algorithms.
   *
   * @param {Matrix} m            An N x N matrix
   * @param {Array | Matrix} b    A column vector
   * @param {Boolean} copy        Return a copy of vector b
   *
   * @return {DenseMatrix}        Dense column vector b
   */ return function solveValidation(m, b, copy) {
        var mSize = m.size();
        if (mSize.length !== 2) throw new RangeError('Matrix must be two dimensional (size: ' + _stringJs.format(mSize) + ')');
        var rows = mSize[0];
        var columns = mSize[1];
        if (rows !== columns) throw new RangeError('Matrix must be square (size: ' + _stringJs.format(mSize) + ')');
        var data = [];
        if (_isJs.isMatrix(b)) {
            var bSize = b.size();
            var bdata = b._data; // 1-dim vector
            if (bSize.length === 1) {
                if (bSize[0] !== rows) throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                for(var i = 0; i < rows; i++)data[i] = [
                    bdata[i]
                ];
                return new DenseMatrix({
                    data: data,
                    size: [
                        rows,
                        1
                    ],
                    datatype: b._datatype
                });
            } // 2-dim column
            if (bSize.length === 2) {
                if (bSize[0] !== rows || bSize[1] !== 1) throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                if (_isJs.isDenseMatrix(b)) {
                    if (copy) {
                        data = [];
                        for(var _i = 0; _i < rows; _i++)data[_i] = [
                            bdata[_i][0]
                        ];
                        return new DenseMatrix({
                            data: data,
                            size: [
                                rows,
                                1
                            ],
                            datatype: b._datatype
                        });
                    }
                    return b;
                }
                if (_isJs.isSparseMatrix(b)) {
                    for(var _i2 = 0; _i2 < rows; _i2++)data[_i2] = [
                        0
                    ];
                    var values = b._values;
                    var index = b._index;
                    var ptr = b._ptr;
                    for(var k1 = ptr[1], k = ptr[0]; k < k1; k++){
                        var _i3 = index[k];
                        data[_i3][0] = values[k];
                    }
                    return new DenseMatrix({
                        data: data,
                        size: [
                            rows,
                            1
                        ],
                        datatype: b._datatype
                    });
                }
            }
            throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
        }
        if (_isJs.isArray(b)) {
            var bsize = _arrayJs.arraySize(b);
            if (bsize.length === 1) {
                if (bsize[0] !== rows) throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                for(var _i4 = 0; _i4 < rows; _i4++)data[_i4] = [
                    b[_i4]
                ];
                return new DenseMatrix({
                    data: data,
                    size: [
                        rows,
                        1
                    ]
                });
            }
            if (bsize.length === 2) {
                if (bsize[0] !== rows || bsize[1] !== 1) throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
                for(var _i5 = 0; _i5 < rows; _i5++)data[_i5] = [
                    b[_i5][0]
                ];
                return new DenseMatrix({
                    data: data,
                    size: [
                        rows,
                        1
                    ]
                });
            }
            throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
        }
    };
}

},{"../../../../utils/is.js":"iwdlF","../../../../utils/array.js":"3R6c8","../../../../utils/string.js":"0PPSB","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cQvGm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUsolve", ()=>createUsolve
);
var _factoryJs = require("../../../utils/factory.js");
var _solveValidationJs = require("./utils/solveValidation.js");
var name = 'usolve';
var dependencies = [
    'typed',
    'matrix',
    'divideScalar',
    'multiplyScalar',
    'subtract',
    'equalScalar',
    'DenseMatrix'
];
var createUsolve = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , divideScalar , multiplyScalar , subtract , equalScalar , DenseMatrix  } = _ref;
    var solveValidation = _solveValidationJs.createSolveValidation({
        DenseMatrix
    });
    function _denseBackwardSubstitution(m, b) {
        // make b into a column vector
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1]; // result
        var x = [];
        var mdata = m._data; // loop columns backwards
        for(var j = columns - 1; j >= 0; j--){
            // b[j]
            var bj = bdata[j][0] || 0; // x[j]
            var xj = void 0;
            if (!equalScalar(bj, 0)) {
                // value at [j, j]
                var vjj = mdata[j][j];
                if (equalScalar(vjj, 0)) {
                    // system cannot be solved
                    throw new Error('Linear system cannot be solved since matrix is singular');
                }
                xj = divideScalar(bj, vjj); // loop rows
                for(var i = j - 1; i >= 0; i--){
                    // update copy of b
                    bdata[i] = [
                        subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))
                    ];
                }
            } else {
                // zero value at j
                xj = 0;
            } // update x
            x[j] = [
                xj
            ];
        }
        return new DenseMatrix({
            data: x,
            size: [
                rows,
                1
            ]
        });
    }
    function _sparseBackwardSubstitution(m, b) {
        // make b into a column vector
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // result
        var x = []; // loop columns backwards
        for(var j = columns - 1; j >= 0; j--){
            var bj = bdata[j][0] || 0;
            if (!equalScalar(bj, 0)) {
                // non-degenerate row, find solution
                var vjj = 0; // upper triangular matrix values & index (column j)
                var jValues = [];
                var jIndices = []; // first & last indeces in column
                var firstIndex = ptr[j];
                var lastIndex = ptr[j + 1]; // values in column, find value at [j, j], loop backwards
                for(var k = lastIndex - 1; k >= firstIndex; k--){
                    var i = index[k]; // check row (rows are not sorted!)
                    if (i === j) {
                        vjj = values[k];
                    } else if (i < j) {
                        // store upper triangular
                        jValues.push(values[k]);
                        jIndices.push(i);
                    }
                } // at this point we must have a value in vjj
                if (equalScalar(vjj, 0)) {
                    throw new Error('Linear system cannot be solved since matrix is singular');
                }
                var xj = divideScalar(bj, vjj);
                for(var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++){
                    var _i = jIndices[_k];
                    bdata[_i] = [
                        subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))
                    ];
                }
                x[j] = [
                    xj
                ];
            } else {
                // degenerate row, we can choose any value
                x[j] = [
                    0
                ];
            }
        }
        return new DenseMatrix({
            data: x,
            size: [
                rows,
                1
            ]
        });
    }
    /**
   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolve(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolve(a, b)  // [[8], [9]]
   *
   * See also:
   *
   *    usolveAll, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */ return typed(name, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
            return _sparseBackwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
            return _denseBackwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
            var m = matrix(a);
            var r = _denseBackwardSubstitution(m, b);
            return r.valueOf();
        }
    });
});

},{"../../../utils/factory.js":"26foW","./utils/solveValidation.js":"69cYB","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cd2CS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLsolveAll", ()=>createLsolveAll
);
var _factoryJs = require("../../../utils/factory.js");
var _solveValidationJs = require("./utils/solveValidation.js");
var name = 'lsolveAll';
var dependencies = [
    'typed',
    'matrix',
    'divideScalar',
    'multiplyScalar',
    'subtract',
    'equalScalar',
    'DenseMatrix'
];
var createLsolveAll = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , divideScalar , multiplyScalar , subtract , equalScalar , DenseMatrix  } = _ref;
    var solveValidation = _solveValidationJs.createSolveValidation({
        DenseMatrix
    });
    function _denseForwardSubstitution(m, b_) {
        // the algorithm is derived from
        // https://www.overleaf.com/read/csvgqdxggyjv
        // array of right-hand sides
        var B = [
            solveValidation(m, b_, true)._data.map((e)=>e[0]
            )
        ];
        var M = m._data;
        var rows = m._size[0];
        var columns = m._size[1]; // loop columns
        for(var i = 0; i < columns; i++){
            var L = B.length; // loop right-hand sides
            for(var k = 0; k < L; k++){
                var b = B[k];
                if (!equalScalar(M[i][i], 0)) {
                    // non-singular row
                    b[i] = divideScalar(b[i], M[i][i]);
                    for(var j = i + 1; j < columns; j++){
                        // b[j] -= b[i] * M[j,i]
                        b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
                    }
                } else if (!equalScalar(b[i], 0)) {
                    // singular row, nonzero RHS
                    if (k === 0) {
                        // There is no valid solution
                        return [];
                    } else {
                        // This RHS is invalid but other solutions may still exist
                        B.splice(k, 1);
                        k -= 1;
                        L -= 1;
                    }
                } else if (k === 0) {
                    // singular row, RHS is zero
                    var bNew = [
                        ...b
                    ];
                    bNew[i] = 1;
                    for(var _j = i + 1; _j < columns; _j++){
                        bNew[_j] = subtract(bNew[_j], M[_j][i]);
                    }
                    B.push(bNew);
                }
            }
        }
        return B.map((x)=>new DenseMatrix({
                data: x.map((e)=>[
                        e
                    ]
                ),
                size: [
                    rows,
                    1
                ]
            })
        );
    }
    function _sparseForwardSubstitution(m, b_) {
        // array of right-hand sides
        var B = [
            solveValidation(m, b_, true)._data.map((e)=>e[0]
            )
        ];
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // loop columns
        for(var i = 0; i < columns; i++){
            var L = B.length; // loop right-hand sides
            for(var k = 0; k < L; k++){
                var b = B[k]; // values & indices (column i)
                var iValues = [];
                var iIndices = []; // first & last indeces in column
                var firstIndex = ptr[i];
                var lastIndex = ptr[i + 1]; // find the value at [i, i]
                var Mii = 0;
                for(var j = firstIndex; j < lastIndex; j++){
                    var J = index[j]; // check row
                    if (J === i) {
                        Mii = values[j];
                    } else if (J > i) {
                        // store lower triangular
                        iValues.push(values[j]);
                        iIndices.push(J);
                    }
                }
                if (!equalScalar(Mii, 0)) {
                    // non-singular row
                    b[i] = divideScalar(b[i], Mii);
                    for(var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++){
                        var _J = iIndices[_j2];
                        b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
                    }
                } else if (!equalScalar(b[i], 0)) {
                    // singular row, nonzero RHS
                    if (k === 0) {
                        // There is no valid solution
                        return [];
                    } else {
                        // This RHS is invalid but other solutions may still exist
                        B.splice(k, 1);
                        k -= 1;
                        L -= 1;
                    }
                } else if (k === 0) {
                    // singular row, RHS is zero
                    var bNew = [
                        ...b
                    ];
                    bNew[i] = 1;
                    for(var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++){
                        var _J2 = iIndices[_j3];
                        bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
                    }
                    B.push(bNew);
                }
            }
        }
        return B.map((x)=>new DenseMatrix({
                data: x.map((e)=>[
                        e
                    ]
                ),
                size: [
                    rows,
                    1
                ]
            })
        );
    }
    /**
   * Finds all solutions of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolveAll(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolveAll(a, b)  // [ [[-5.5], [20]] ]
   *
   * See also:
   *
   *    lsolve, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
   */ return typed(name, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
            return _sparseForwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
            return _denseForwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
            var m = matrix(a);
            var R = _denseForwardSubstitution(m, b);
            return R.map((r)=>r.valueOf()
            );
        }
    });
});

},{"../../../utils/factory.js":"26foW","./utils/solveValidation.js":"69cYB","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kQeH7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUsolveAll", ()=>createUsolveAll
);
var _factoryJs = require("../../../utils/factory.js");
var _solveValidationJs = require("./utils/solveValidation.js");
var name = 'usolveAll';
var dependencies = [
    'typed',
    'matrix',
    'divideScalar',
    'multiplyScalar',
    'subtract',
    'equalScalar',
    'DenseMatrix'
];
var createUsolveAll = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , divideScalar , multiplyScalar , subtract , equalScalar , DenseMatrix  } = _ref;
    var solveValidation = _solveValidationJs.createSolveValidation({
        DenseMatrix
    });
    function _denseBackwardSubstitution(m, b_) {
        // the algorithm is derived from
        // https://www.overleaf.com/read/csvgqdxggyjv
        // array of right-hand sides
        var B = [
            solveValidation(m, b_, true)._data.map((e)=>e[0]
            )
        ];
        var M = m._data;
        var rows = m._size[0];
        var columns = m._size[1]; // loop columns backwards
        for(var i = columns - 1; i >= 0; i--){
            var L = B.length; // loop right-hand sides
            for(var k = 0; k < L; k++){
                var b = B[k];
                if (!equalScalar(M[i][i], 0)) {
                    // non-singular row
                    b[i] = divideScalar(b[i], M[i][i]);
                    for(var j = i - 1; j >= 0; j--){
                        // b[j] -= b[i] * M[j,i]
                        b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
                    }
                } else if (!equalScalar(b[i], 0)) {
                    // singular row, nonzero RHS
                    if (k === 0) {
                        // There is no valid solution
                        return [];
                    } else {
                        // This RHS is invalid but other solutions may still exist
                        B.splice(k, 1);
                        k -= 1;
                        L -= 1;
                    }
                } else if (k === 0) {
                    // singular row, RHS is zero
                    var bNew = [
                        ...b
                    ];
                    bNew[i] = 1;
                    for(var _j = i - 1; _j >= 0; _j--){
                        bNew[_j] = subtract(bNew[_j], M[_j][i]);
                    }
                    B.push(bNew);
                }
            }
        }
        return B.map((x)=>new DenseMatrix({
                data: x.map((e)=>[
                        e
                    ]
                ),
                size: [
                    rows,
                    1
                ]
            })
        );
    }
    function _sparseBackwardSubstitution(m, b_) {
        // array of right-hand sides
        var B = [
            solveValidation(m, b_, true)._data.map((e)=>e[0]
            )
        ];
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // loop columns backwards
        for(var i = columns - 1; i >= 0; i--){
            var L = B.length; // loop right-hand sides
            for(var k = 0; k < L; k++){
                var b = B[k]; // values & indices (column i)
                var iValues = [];
                var iIndices = []; // first & last indeces in column
                var firstIndex = ptr[i];
                var lastIndex = ptr[i + 1]; // find the value at [i, i]
                var Mii = 0;
                for(var j = lastIndex - 1; j >= firstIndex; j--){
                    var J = index[j]; // check row
                    if (J === i) {
                        Mii = values[j];
                    } else if (J < i) {
                        // store upper triangular
                        iValues.push(values[j]);
                        iIndices.push(J);
                    }
                }
                if (!equalScalar(Mii, 0)) {
                    // non-singular row
                    b[i] = divideScalar(b[i], Mii); // loop upper triangular
                    for(var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++){
                        var _J = iIndices[_j2];
                        b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
                    }
                } else if (!equalScalar(b[i], 0)) {
                    // singular row, nonzero RHS
                    if (k === 0) {
                        // There is no valid solution
                        return [];
                    } else {
                        // This RHS is invalid but other solutions may still exist
                        B.splice(k, 1);
                        k -= 1;
                        L -= 1;
                    }
                } else if (k === 0) {
                    // singular row, RHS is zero
                    var bNew = [
                        ...b
                    ];
                    bNew[i] = 1; // loop upper triangular
                    for(var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++){
                        var _J2 = iIndices[_j3];
                        bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
                    }
                    B.push(bNew);
                }
            }
        }
        return B.map((x)=>new DenseMatrix({
                data: x.map((e)=>[
                        e
                    ]
                ),
                size: [
                    rows,
                    1
                ]
            })
        );
    }
    /**
   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolveAll(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolveAll(a, b)  // [ [[8], [9]] ]
   *
   * See also:
   *
   *    usolve, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
   */ return typed(name, {
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
            return _sparseBackwardSubstitution(m, b);
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
            return _denseBackwardSubstitution(m, b);
        },
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
            var m = matrix(a);
            var R = _denseBackwardSubstitution(m, b);
            return R.map((r)=>r.valueOf()
            );
        }
    });
});

},{"../../../utils/factory.js":"26foW","./utils/solveValidation.js":"69cYB","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7RYYE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLeftShift", ()=>createLeftShift
);
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm01Js = require("../../type/matrix/utils/algorithm01.js");
var _algorithm10Js = require("../../type/matrix/utils/algorithm10.js");
var _algorithm08Js = require("../../type/matrix/utils/algorithm08.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var _bitwiseJs = require("../../utils/bignumber/bitwise.js");
var name = 'leftShift';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'zeros',
    'DenseMatrix'
];
var createLeftShift = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , zeros , DenseMatrix  } = _ref;
    var algorithm01 = _algorithm01Js.createAlgorithm01({
        typed
    });
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm08 = _algorithm08Js.createAlgorithm08({
        typed,
        equalScalar
    });
    var algorithm10 = _algorithm10Js.createAlgorithm10({
        typed,
        DenseMatrix
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.leftShift(x, y)
   *
   * Examples:
   *
   *    math.leftShift(1, 2)               // returns number 4
   *
   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
   *
   * See also:
   *
   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
   */ return typed(name, {
        'number, number': _indexJs.leftShiftNumber,
        'BigNumber, BigNumber': _bitwiseJs.leftShiftBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm08(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            // check scalar
            if (equalScalar(y, 0)) return x.clone();
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            // check scalar
            if (equalScalar(y, 0)) return x.clone();
            return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
            // check scalar
            if (equalScalar(x, 0)) return zeros(y.size(), y.storage());
            return algorithm10(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
            // check scalar
            if (equalScalar(x, 0)) return zeros(y.size(), y.storage());
            return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
            // use matrix implementation
            return this(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y)).valueOf();
        }
    });
});

},{"../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm01.js":"8dKyd","../../type/matrix/utils/algorithm10.js":"jcqxM","../../type/matrix/utils/algorithm08.js":"1PK1F","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","../../utils/bignumber/bitwise.js":"66wRI","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1PK1F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAlgorithm08", ()=>createAlgorithm08
);
var _factoryJs = require("../../../utils/factory.js");
var _dimensionErrorJs = require("../../../error/DimensionError.js");
var name = 'algorithm08';
var dependencies = [
    'typed',
    'equalScalar'
];
var createAlgorithm08 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equalScalar  } = _ref;
    /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */ return function algorithm08(a, b, callback) {
        // sparse matrix arrays
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype; // sparse matrix arrays
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype; // validate dimensions
        if (asize.length !== bsize.length) throw new _dimensionErrorJs.DimensionError(asize.length, bsize.length);
         // check rows & columns
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
         // sparse matrix cannot be a Pattern matrix
        if (!avalues || !bvalues) throw new Error('Cannot perform operation on Pattern Sparse Matrices');
         // rows & columns
        var rows = asize[0];
        var columns = asize[1]; // datatype
        var dt; // equal signature to use
        var eq = equalScalar; // zero value
        var zero = 0; // callback signature to use
        var cf = callback; // process data types
        if (typeof adt === 'string' && adt === bdt) {
            // datatype
            dt = adt; // find signature that matches (dt, dt)
            eq = typed.find(equalScalar, [
                dt,
                dt
            ]); // convert 0 to the same datatype
            zero = typed.convert(0, dt); // callback
            cf = typed.find(callback, [
                dt,
                dt
            ]);
        } // result arrays
        var cvalues = [];
        var cindex = [];
        var cptr = []; // workspace
        var x = []; // marks indicating we have a value in x for a given column
        var w = []; // vars
        var k, k0, k1, i; // loop columns
        for(var j = 0; j < columns; j++){
            // update cptr
            cptr[j] = cindex.length; // columns mark
            var mark = j + 1; // loop values in a
            for(k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++){
                // row
                i = aindex[k]; // mark workspace
                w[i] = mark; // set value
                x[i] = avalues[k]; // add index
                cindex.push(i);
            } // loop values in b
            for(k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++){
                // row
                i = bindex[k]; // check value exists in workspace
                if (w[i] === mark) // evaluate callback
                x[i] = cf(x[i], bvalues[k]);
            } // initialize first index in j
            k = cptr[j]; // loop index in j
            while(k < cindex.length){
                // row
                i = cindex[k]; // value @ i
                var v = x[i]; // check for zero value
                if (!eq(v, zero)) {
                    // push value
                    cvalues.push(v); // increment pointer
                    k++;
                } else // remove value @ i, do not increment pointer
                cindex.splice(k, 1);
            }
        } // update cptr
        cptr[columns] = cindex.length; // return sparse matrix
        return a.createSparseMatrix({
            values: cvalues,
            index: cindex,
            ptr: cptr,
            size: [
                rows,
                columns
            ],
            datatype: dt
        });
    };
});

},{"../../../utils/factory.js":"26foW","../../../error/DimensionError.js":"49REC","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aWCle":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRightArithShift", ()=>createRightArithShift
);
var _bitwiseJs = require("../../utils/bignumber/bitwise.js");
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm01Js = require("../../type/matrix/utils/algorithm01.js");
var _algorithm10Js = require("../../type/matrix/utils/algorithm10.js");
var _algorithm08Js = require("../../type/matrix/utils/algorithm08.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'rightArithShift';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'zeros',
    'DenseMatrix'
];
var createRightArithShift = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , zeros , DenseMatrix  } = _ref;
    var algorithm01 = _algorithm01Js.createAlgorithm01({
        typed
    });
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm08 = _algorithm08Js.createAlgorithm08({
        typed,
        equalScalar
    });
    var algorithm10 = _algorithm10Js.createAlgorithm10({
        typed,
        DenseMatrix
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightArithShift(x, y)
   *
   * Examples:
   *
   *    math.rightArithShift(4, 2)               // returns number 1
   *
   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
   */ return typed(name, {
        'number, number': _indexJs.rightArithShiftNumber,
        'BigNumber, BigNumber': _bitwiseJs.rightArithShiftBigNumber,
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm08(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            // check scalar
            if (equalScalar(y, 0)) return x.clone();
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            // check scalar
            if (equalScalar(y, 0)) return x.clone();
            return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
            // check scalar
            if (equalScalar(x, 0)) return zeros(y.size(), y.storage());
            return algorithm10(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
            // check scalar
            if (equalScalar(x, 0)) return zeros(y.size(), y.storage());
            return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
            // use matrix implementation
            return this(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y)).valueOf();
        }
    });
});

},{"../../utils/bignumber/bitwise.js":"66wRI","../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm01.js":"8dKyd","../../type/matrix/utils/algorithm10.js":"jcqxM","../../type/matrix/utils/algorithm08.js":"1PK1F","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2jB8p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRightLogShift", ()=>createRightLogShift
);
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm01Js = require("../../type/matrix/utils/algorithm01.js");
var _algorithm10Js = require("../../type/matrix/utils/algorithm10.js");
var _algorithm08Js = require("../../type/matrix/utils/algorithm08.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'rightLogShift';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'zeros',
    'DenseMatrix'
];
var createRightLogShift = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , zeros , DenseMatrix  } = _ref;
    var algorithm01 = _algorithm01Js.createAlgorithm01({
        typed
    });
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm08 = _algorithm08Js.createAlgorithm08({
        typed,
        equalScalar
    });
    var algorithm10 = _algorithm10Js.createAlgorithm10({
        typed,
        DenseMatrix
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightLogShift(x, y)
   *
   * Examples:
   *
   *    math.rightLogShift(4, 2)               // returns number 1
   *
   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
   *
   * @param  {number | Array | Matrix} x Value to be shifted
   * @param  {number} y Amount of shifts
   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
   */ return typed(name, {
        'number, number': _indexJs.rightLogShiftNumber,
        // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm08(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm01(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            // check scalar
            if (equalScalar(y, 0)) return x.clone();
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            // check scalar
            if (equalScalar(y, 0)) return x.clone();
            return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
            // check scalar
            if (equalScalar(x, 0)) return zeros(y.size(), y.storage());
            return algorithm10(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
            // check scalar
            if (equalScalar(x, 0)) return zeros(y.size(), y.storage());
            return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
            // use matrix implementation
            return this(matrix(x), y).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y)).valueOf();
        }
    });
});

},{"../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm01.js":"8dKyd","../../type/matrix/utils/algorithm10.js":"jcqxM","../../type/matrix/utils/algorithm08.js":"1PK1F","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"huNvl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAnd", ()=>createAnd
);
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm06Js = require("../../type/matrix/utils/algorithm06.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'and';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'zeros',
    'not'
];
var createAnd = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , zeros , not  } = _ref;
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm06 = _algorithm06Js.createAlgorithm06({
        typed,
        equalScalar
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.and(x, y)
   *
   * Examples:
   *
   *    math.and(2, 4)   // returns true
   *
   *    a = [2, 0, 0]
   *    b = [3, 7, 0]
   *    c = 0
   *
   *    math.and(a, b)   // returns [true, false, false]
   *    math.and(a, c)   // returns [false, false, false]
   *
   * See also:
   *
   *    not, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when both inputs are defined with a nonzero/nonempty value.
   */ return typed(name, {
        'number, number': _indexJs.andNumber,
        'Complex, Complex': function ComplexComplex(x, y) {
            return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
        },
        'Unit, Unit': function UnitUnit(x, y) {
            return this(x.value || 0, y.value || 0);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm06(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm02(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            // check scalar
            if (not(y)) // return zero matrix
            return zeros(x.size(), x.storage());
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            // check scalar
            if (not(y)) // return zero matrix
            return zeros(x.size(), x.storage());
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            // check scalar
            if (not(x)) // return zero matrix
            return zeros(x.size(), x.storage());
            return algorithm11(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            // check scalar
            if (not(x)) // return zero matrix
            return zeros(x.size(), x.storage());
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return this(matrix(x), y).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y)).valueOf();
        }
    });
});

},{"../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm06.js":"jh6kl","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cUzwI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCompare", ()=>createCompare
);
parcelHelpers.export(exports, "createCompareNumber", ()=>createCompareNumber
);
var _nearlyEqualJs = require("../../utils/bignumber/nearlyEqual.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm05Js = require("../../type/matrix/utils/algorithm05.js");
var name = 'compare';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'equalScalar',
    'BigNumber',
    'Fraction',
    'DenseMatrix'
];
var createCompare = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , equalScalar , matrix , BigNumber , Fraction , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm05 = _algorithm05Js.createAlgorithm05({
        typed,
        equalScalar
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1)           // returns 1
   *    math.compare(2, 3)           // returns -1
   *    math.compare(7, 7)           // returns 0
   *    math.compare('10', '2')      // returns 1
   *    math.compare('1000', '1e3')  // returns 0
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compare(a, b)           // returns 1
   *
   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
   *
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
   */ return typed(name, {
        'boolean, boolean': function booleanBoolean(x, y) {
            return x === y ? 0 : x > y ? 1 : -1;
        },
        'number, number': function numberNumber(x, y) {
            return _numberJs.nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return _nearlyEqualJs.nearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return new Fraction(x.compare(y));
        },
        'Complex, Complex': function ComplexComplex() {
            throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
            if (!x.equalBase(y)) throw new Error('Cannot compare units with different base');
            return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm05(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});
var createCompareNumber = /* #__PURE__ */ _factoryJs.factory(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed , config  } = _ref2;
    return typed(name, {
        'number, number': function numberNumber(x, y) {
            return _numberJs.nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
        }
    });
});

},{"../../utils/bignumber/nearlyEqual.js":"2W3Ce","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm05.js":"fZJCI","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fv4dy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCompareNatural", ()=>createCompareNatural
);
var _javascriptNaturalSort = require("javascript-natural-sort");
var _javascriptNaturalSortDefault = parcelHelpers.interopDefault(_javascriptNaturalSort);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'compareNatural';
var dependencies = [
    'typed',
    'compare'
];
var createCompareNatural = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , compare  } = _ref;
    var compareBooleans = compare.signatures['boolean,boolean'];
    /**
   * Compare mixed matrix/array types, by converting to same-shaped array.
   * This comparator is non-deterministic regarding input types.
   * @param {Array | SparseMatrix | DenseMatrix | *} x
   * @param {Array | SparseMatrix | DenseMatrix | *} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */ function compareMatricesAndArrays(compareNatural, x, y) {
        if (_isJs.isSparseMatrix(x) && _isJs.isSparseMatrix(y)) {
            return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);
        }
        if (_isJs.isSparseMatrix(x)) {
            // note: convert to array is expensive
            return compareMatricesAndArrays(compareNatural, x.toArray(), y);
        }
        if (_isJs.isSparseMatrix(y)) {
            // note: convert to array is expensive
            return compareMatricesAndArrays(compareNatural, x, y.toArray());
        } // convert DenseArray into Array
        if (_isJs.isDenseMatrix(x)) {
            return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);
        }
        if (_isJs.isDenseMatrix(y)) {
            return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);
        } // convert scalars to array
        if (!Array.isArray(x)) {
            return compareMatricesAndArrays(compareNatural, [
                x
            ], y);
        }
        if (!Array.isArray(y)) {
            return compareMatricesAndArrays(compareNatural, x, [
                y
            ]);
        }
        return compareArrays(compareNatural, x, y);
    }
    /**
   * Compare two Arrays
   *
   * - First, compares value by value
   * - Next, if all corresponding values are equal,
   *   look at the length: longest array will be considered largest
   *
   * @param {Array} x
   * @param {Array} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */ function compareArrays(compareNatural, x, y) {
        // compare each value
        for(var i = 0, ii = Math.min(x.length, y.length); i < ii; i++){
            var v = compareNatural(x[i], y[i]);
            if (v !== 0) {
                return v;
            }
        } // compare the size of the arrays
        if (x.length > y.length) {
            return 1;
        }
        if (x.length < y.length) {
            return -1;
        } // both Arrays have equal size and content
        return 0;
    }
    /**
   * Compare two objects
   *
   * - First, compare sorted property names
   * - Next, compare the property values
   *
   * @param {Object} x
   * @param {Object} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */ function compareObjects(compareNatural, x, y) {
        var keysX = Object.keys(x);
        var keysY = Object.keys(y); // compare keys
        keysX.sort(_javascriptNaturalSortDefault.default);
        keysY.sort(_javascriptNaturalSortDefault.default);
        var c = compareArrays(compareNatural, keysX, keysY);
        if (c !== 0) {
            return c;
        } // compare values
        for(var i = 0; i < keysX.length; i++){
            var v = compareNatural(x[keysX[i]], y[keysY[i]]);
            if (v !== 0) {
                return v;
            }
        }
        return 0;
    }
    /**
   * Compare two values of any type in a deterministic, natural way.
   *
   * For numeric values, the function works the same as `math.compare`.
   * For types of values that can't be compared mathematically,
   * the function compares in a natural way.
   *
   * For numeric values, x and y are considered equal when the relative
   * difference between x and y is smaller than the configured epsilon.
   * The function cannot be used to compare values smaller than
   * approximately 2.22e-16.
   *
   * For Complex numbers, first the real parts are compared. If equal,
   * the imaginary parts are compared.
   *
   * Strings are compared with a natural sorting algorithm, which
   * orders strings in a "logic" way following some heuristics.
   * This differs from the function `compare`, which converts the string
   * into a numeric value and compares that. The function `compareText`
   * on the other hand compares text lexically.
   *
   * Arrays and Matrices are compared value by value until there is an
   * unequal pair of values encountered. Objects are compared by sorted
   * keys until the keys or their values are unequal.
   *
   * Syntax:
   *
   *    math.compareNatural(x, y)
   *
   * Examples:
   *
   *    math.compareNatural(6, 1)              // returns 1
   *    math.compareNatural(2, 3)              // returns -1
   *    math.compareNatural(7, 7)              // returns 0
   *
   *    math.compareNatural('10', '2')         // returns 1
   *    math.compareText('10', '2')            // returns -1
   *    math.compare('10', '2')                // returns 1
   *
   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
   *    math.compare('Answer: 10', 'Answer: 2')
   *        // Error: Cannot convert "Answer: 10" to a number
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compareNatural(a, b)              // returns 1
   *
   *    const c = math.complex('2 + 3i')
   *    const d = math.complex('2 + 4i')
   *    math.compareNatural(c, d)              // returns -1
   *
   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
   *    math.compareNatural([1, 2], [1, 2])       // returns 0
   *
   *    math.compareNatural({a: 2}, {a: 4})       // returns -1
   *
   * See also:
   *
   *    compare, compareText
   *
   * @param  {*} x First value to compare
   * @param  {*} y Second value to compare
   * @return {number} Returns the result of the comparison:
   *                  1 when x > y, -1 when x < y, and 0 when x == y.
   */ return typed(name, {
        'any, any': function anyAny(x, y) {
            var typeX = _isJs.typeOf(x);
            var typeY = _isJs.typeOf(y);
            var c; // numeric types
            if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
                c = compare(x, y);
                if (c.toString() !== '0') // c can be number, BigNumber, or Fraction
                return c > 0 ? 1 : -1; // return a number
                else return _javascriptNaturalSortDefault.default(typeX, typeY);
            } // matrix types
            if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
                c = compareMatricesAndArrays(this, x, y);
                if (c !== 0) return c;
                else return _javascriptNaturalSortDefault.default(typeX, typeY);
            } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'
            if (typeX !== typeY) return _javascriptNaturalSortDefault.default(typeX, typeY);
            if (typeX === 'Complex') return compareComplexNumbers(x, y);
            if (typeX === 'Unit') {
                if (x.equalBase(y)) return this(x.value, y.value);
                 // compare by units
                return compareArrays(this, x.formatUnits(), y.formatUnits());
            }
            if (typeX === 'boolean') return compareBooleans(x, y);
            if (typeX === 'string') return _javascriptNaturalSortDefault.default(x, y);
            if (typeX === 'Object') return compareObjects(this, x, y);
            if (typeX === 'null') return 0;
            if (typeX === 'undefined') return 0;
             // this should not occur...
            throw new TypeError('Unsupported type of value "' + typeX + '"');
        }
    });
});
/**
 * Compare two complex numbers, `x` and `y`:
 *
 * - First, compare the real values of `x` and `y`
 * - If equal, compare the imaginary values of `x` and `y`
 *
 * @params {Complex} x
 * @params {Complex} y
 * @returns {number} Returns the comparison result: -1, 0, or 1
 */ function compareComplexNumbers(x, y) {
    if (x.re > y.re) return 1;
    if (x.re < y.re) return -1;
    if (x.im > y.im) return 1;
    if (x.im < y.im) return -1;
    return 0;
}

},{"javascript-natural-sort":"ltAqK","../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ltAqK":[function(require,module,exports) {
/*
 * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
 */ /*jshint unused:false */ module.exports = function naturalSort(a, b) {
    var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi, sre = /(^[ ]*|[ ]*$)/g, dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/, hre = /^0x[0-9a-f]+$/i, ore = /^0/, i = function(s) {
        return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s;
    }, // convert all to strings strip whitespace
    x = i(a).replace(sre, '') || '', y = i(b).replace(sre, '') || '', // chunk/tokenize
    xN = x.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'), yN = y.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'), // numeric, hex or date detection
    xD = parseInt(x.match(hre), 16) || xN.length !== 1 && x.match(dre) && Date.parse(x), yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null, oFxNcL, oFyNcL;
    // first try and sort Hex codes or Dates
    if (yD) {
        if (xD < yD) return -1;
        else if (xD > yD) return 1;
    }
    // natural sorting through split numeric strings and default strings
    for(var cLoc = 0, numS = Math.max(xN.length, yN.length); cLoc < numS; cLoc++){
        // find floats not starting with '0', string or 0 if not defined (Clint Priest)
        oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
        oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
        // handle numeric vs string comparison - number < string - (Kyle Adams)
        if (isNaN(oFxNcL) !== isNaN(oFyNcL)) return isNaN(oFxNcL) ? 1 : -1;
        else if (typeof oFxNcL !== typeof oFyNcL) {
            oFxNcL += '';
            oFyNcL += '';
        }
        if (oFxNcL < oFyNcL) return -1;
        if (oFxNcL > oFyNcL) return 1;
    }
    return 0;
};

},{}],"dDUh2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCompareText", ()=>createCompareText
);
parcelHelpers.export(exports, "createCompareTextNumber", ()=>createCompareTextNumber
);
var _stringJs = require("../../utils/string.js");
var _factoryJs = require("../../utils/factory.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var name = 'compareText';
var dependencies = [
    'typed',
    'matrix'
];
var createCompareText = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix  } = _ref;
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Compare two strings lexically. Comparison is case sensitive.
   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compareText(x, y)
   *
   * Examples:
   *
   *    math.compareText('B', 'A')     // returns 1
   *    math.compareText('2', '10')    // returns 1
   *    math.compare('2', '10')        // returns -1
   *    math.compareNatural('2', '10') // returns -1
   *
   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, equalText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns the result of the comparison:
   *                                        1 when x > y, -1 when x < y, and 0 when x == y.
   */ return typed(name, {
        'any, any': _stringJs.compareText,
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, _stringJs.compareText);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, _stringJs.compareText, false);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, _stringJs.compareText, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, _stringJs.compareText, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, _stringJs.compareText, true).valueOf();
        }
    });
});
var createCompareTextNumber = /* #__PURE__ */ _factoryJs.factory(name, [
    'typed'
], (_ref2)=>{
    var { typed  } = _ref2;
    return typed(name, {
        'any, any': _stringJs.compareText
    });
});

},{"../../utils/string.js":"0PPSB","../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm13.js":"fiTNq","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"426bt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createEqual", ()=>createEqual
);
parcelHelpers.export(exports, "createEqualNumber", ()=>createEqualNumber
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'equal';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'DenseMatrix'
];
var createEqual = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Test whether two values are equal.
   *
   * The function tests whether the relative difference between x and y is
   * smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is only
   * equal to `null` and nothing else, and `undefined` is only equal to
   * `undefined` and nothing else. Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.equal(x, y)
   *
   * Examples:
   *
   *    math.equal(2 + 2, 3)         // returns false
   *    math.equal(2 + 2, 4)         // returns true
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.equal(a, b)             // returns true
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.equal(c, d)             // returns [true, false, true]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.equal("1000", "1e3")    // returns true
   *    math.equal(0, null)          // returns false
   *
   * See also:
   *
   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
   *
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
   */ return typed(name, {
        'any, any': function anyAny(x, y) {
            // strict equality for null and undefined?
            if (x === null) return y === null;
            if (y === null) return x === null;
            if (x === undefined) return y === undefined;
            if (y === undefined) return x === undefined;
            return equalScalar(x, y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, equalScalar);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, equalScalar, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, equalScalar, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, equalScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, equalScalar, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, equalScalar, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, equalScalar, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, equalScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, equalScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, equalScalar, true).valueOf();
        }
    });
});
var createEqualNumber = _factoryJs.factory(name, [
    'typed',
    'equalScalar'
], (_ref2)=>{
    var { typed , equalScalar  } = _ref2;
    return typed(name, {
        'any, any': function anyAny(x, y) {
            // strict equality for null and undefined?
            if (x === null) return y === null;
            if (y === null) return x === null;
            if (x === undefined) return y === undefined;
            if (y === undefined) return x === undefined;
            return equalScalar(x, y);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fAsVn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createEqualText", ()=>createEqualText
);
var _factoryJs = require("../../utils/factory.js");
var name = 'equalText';
var dependencies = [
    'typed',
    'compareText',
    'isZero'
];
var createEqualText = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , compareText , isZero  } = _ref;
    /**
   * Check equality of two strings. Comparison is case sensitive.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.equalText(x, y)
   *
   * Examples:
   *
   *    math.equalText('Hello', 'Hello')     // returns true
   *    math.equalText('a', 'A')             // returns false
   *    math.equal('2e3', '2000')            // returns true
   *    math.equalText('2e3', '2000')        // returns false
   *
   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
   *
   * See also:
   *
   *    equal, compareText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
   */ return typed(name, {
        'any, any': function anyAny(x, y) {
            return isZero(compareText(x, y));
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hKA0G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSmaller", ()=>createSmaller
);
parcelHelpers.export(exports, "createSmallerNumber", ()=>createSmallerNumber
);
var _nearlyEqualJs = require("../../utils/bignumber/nearlyEqual.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var name = 'smaller';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'DenseMatrix'
];
var createSmaller = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3)            // returns true
   *    math.smaller(5, 2 * 2)        // returns false
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.smaller(a, b)            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */ return typed(name, {
        'boolean, boolean': function booleanBoolean(x, y) {
            return x < y;
        },
        'number, number': function numberNumber(x, y) {
            return x < y && !_numberJs.nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return x.lt(y) && !_nearlyEqualJs.nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.compare(y) === -1;
        },
        'Complex, Complex': function ComplexComplex(x, y) {
            throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
            if (!x.equalBase(y)) throw new Error('Cannot compare units with different base');
            return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});
var createSmallerNumber = /* #__PURE__ */ _factoryJs.factory(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed , config  } = _ref2;
    return typed(name, {
        'number, number': function numberNumber(x, y) {
            return x < y && !_numberJs.nearlyEqual(x, y, config.epsilon);
        }
    });
});

},{"../../utils/bignumber/nearlyEqual.js":"2W3Ce","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm13.js":"fiTNq","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dPhTD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSmallerEq", ()=>createSmallerEq
);
parcelHelpers.export(exports, "createSmallerEqNumber", ()=>createSmallerEqNumber
);
var _nearlyEqualJs = require("../../utils/bignumber/nearlyEqual.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var name = 'smallerEq';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'DenseMatrix'
];
var createSmallerEq = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Test whether value x is smaller or equal to y.
   *
   * The function returns true when x is smaller than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smallerEq(x, y)
   *
   * Examples:
   *
   *    math.smaller(1 + 2, 3)        // returns false
   *    math.smallerEq(1 + 2, 3)      // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */ return typed(name, {
        'boolean, boolean': function booleanBoolean(x, y) {
            return x <= y;
        },
        'number, number': function numberNumber(x, y) {
            return x <= y || _numberJs.nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return x.lte(y) || _nearlyEqualJs.nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.compare(y) !== 1;
        },
        'Complex, Complex': function ComplexComplex() {
            throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
            if (!x.equalBase(y)) throw new Error('Cannot compare units with different base');
            return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});
var createSmallerEqNumber = /* #__PURE__ */ _factoryJs.factory(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed , config  } = _ref2;
    return typed(name, {
        'number, number': function numberNumber(x, y) {
            return x <= y || _numberJs.nearlyEqual(x, y, config.epsilon);
        }
    });
});

},{"../../utils/bignumber/nearlyEqual.js":"2W3Ce","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm13.js":"fiTNq","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lsndL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLarger", ()=>createLarger
);
parcelHelpers.export(exports, "createLargerNumber", ()=>createLargerNumber
);
var _nearlyEqualJs = require("../../utils/bignumber/nearlyEqual.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var name = 'larger';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'DenseMatrix'
];
var createLarger = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3)             // returns false
   *    math.larger(5, 2 + 2)         // returns true
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.larger(a, b)             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */ return typed(name, {
        'boolean, boolean': function booleanBoolean(x, y) {
            return x > y;
        },
        'number, number': function numberNumber(x, y) {
            return x > y && !_numberJs.nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return x.gt(y) && !_nearlyEqualJs.nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.compare(y) === 1;
        },
        'Complex, Complex': function ComplexComplex() {
            throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
            if (!x.equalBase(y)) throw new Error('Cannot compare units with different base');
            return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});
var createLargerNumber = /* #__PURE__ */ _factoryJs.factory(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed , config  } = _ref2;
    return typed(name, {
        'number, number': function numberNumber(x, y) {
            return x > y && !_numberJs.nearlyEqual(x, y, config.epsilon);
        }
    });
});

},{"../../utils/bignumber/nearlyEqual.js":"2W3Ce","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm13.js":"fiTNq","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"81hwb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLargerEq", ()=>createLargerEq
);
parcelHelpers.export(exports, "createLargerEqNumber", ()=>createLargerEqNumber
);
var _nearlyEqualJs = require("../../utils/bignumber/nearlyEqual.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var name = 'largerEq';
var dependencies = [
    'typed',
    'config',
    'matrix',
    'DenseMatrix'
];
var createLargerEq = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Test whether value x is larger or equal to y.
   *
   * The function returns true when x is larger than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.largerEq(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 1 + 1)         // returns false
   *    math.largerEq(2, 1 + 1)       // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
   */ return typed(name, {
        'boolean, boolean': function booleanBoolean(x, y) {
            return x >= y;
        },
        'number, number': function numberNumber(x, y) {
            return x >= y || _numberJs.nearlyEqual(x, y, config.epsilon);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
            return x.gte(y) || _nearlyEqualJs.nearlyEqual(x, y, config.epsilon);
        },
        'Fraction, Fraction': function FractionFraction(x, y) {
            return x.compare(y) !== -1;
        },
        'Complex, Complex': function ComplexComplex() {
            throw new TypeError('No ordering relation is defined for complex numbers');
        },
        'Unit, Unit': function UnitUnit(x, y) {
            if (!x.equalBase(y)) throw new Error('Cannot compare units with different base');
            return this(x.value, y.value);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, this);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, this, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, this, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, this, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, this, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});
var createLargerEqNumber = /* #__PURE__ */ _factoryJs.factory(name, [
    'typed',
    'config'
], (_ref2)=>{
    var { typed , config  } = _ref2;
    return typed(name, {
        'number, number': function numberNumber(x, y) {
            return x >= y || _numberJs.nearlyEqual(x, y, config.epsilon);
        }
    });
});

},{"../../utils/bignumber/nearlyEqual.js":"2W3Ce","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm13.js":"fiTNq","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6X2ab":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDeepEqual", ()=>createDeepEqual
);
var _factoryJs = require("../../utils/factory.js");
var name = 'deepEqual';
var dependencies = [
    'typed',
    'equal'
];
var createDeepEqual = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , equal  } = _ref;
    /**
   * Test whether two arrays have the same size and all elements are equal
   * @param {Array | *} x
   * @param {Array | *} y
   * @return {boolean} Returns true if both arrays are deep equal
   */ function _deepEqual(x, y) {
        if (Array.isArray(x)) {
            if (Array.isArray(y)) {
                var len = x.length;
                if (len !== y.length) {
                    return false;
                }
                for(var i = 0; i < len; i++){
                    if (!_deepEqual(x[i], y[i])) {
                        return false;
                    }
                }
                return true;
            } else {
                return false;
            }
        } else {
            if (Array.isArray(y)) {
                return false;
            } else {
                return equal(x, y);
            }
        }
    }
    /**
   * Test element wise whether two matrices are equal.
   * The function accepts both matrices and scalar values.
   *
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.deepEqual(x, y)
   *
   * Examples:
   *
   *    math.deepEqual(2, 4)   // returns false
   *
   *    a = [2, 5, 1]
   *    b = [2, 7, 1]
   *
   *    math.deepEqual(a, b)   // returns false
   *    math.equal(a, b)       // returns [true, false, true]
   *
   * See also:
   *
   *    equal, unequal
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns true when the input matrices have the same size and each of their elements is equal.
   */ return typed(name, {
        'any, any': function anyAny(x, y) {
            return _deepEqual(x.valueOf(), y.valueOf());
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ayjUy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnequal", ()=>createUnequal
);
parcelHelpers.export(exports, "createUnequalNumber", ()=>createUnequalNumber
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm07Js = require("../../type/matrix/utils/algorithm07.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var name = 'unequal';
var dependencies = [
    'typed',
    'config',
    'equalScalar',
    'matrix',
    'DenseMatrix'
];
var createUnequal = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , equalScalar , matrix , DenseMatrix  } = _ref;
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm07 = _algorithm07Js.createAlgorithm07({
        typed,
        DenseMatrix
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    function _unequal(x, y) {
        return !equalScalar(x, y);
    }
    /**
   * Test whether two values are unequal.
   *
   * The function tests whether the relative difference between x and y is
   * larger than the configured epsilon. The function cannot be used to compare
   * values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
   * Strings are compared by their numerical value.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
   * with everything except `null`, and `undefined` is unequal with everything
   * except `undefined`.
   *
   * Syntax:
   *
   *    math.unequal(x, y)
   *
   * Examples:
   *
   *    math.unequal(2 + 2, 3)       // returns true
   *    math.unequal(2 + 2, 4)       // returns false
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.unequal(a, b)           // returns false
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.unequal(c, d)           // returns [false, true, false]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.unequal(0, null)        // returns true
   * See also:
   *
   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
   */ return typed('unequal', {
        'any, any': function anyAny(x, y) {
            // strict equality for null and undefined?
            if (x === null) return y !== null;
            if (y === null) return x !== null;
            if (x === undefined) return y !== undefined;
            if (y === undefined) return x !== undefined;
            return _unequal(x, y);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm07(x, y, _unequal);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm03(y, x, _unequal, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, _unequal, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, _unequal);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm12(x, y, _unequal, false);
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, _unequal, false);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm12(y, x, _unequal, true);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, _unequal, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, _unequal, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, _unequal, true).valueOf();
        }
    });
});
var createUnequalNumber = _factoryJs.factory(name, [
    'typed',
    'equalScalar'
], (_ref2)=>{
    var { typed , equalScalar  } = _ref2;
    return typed(name, {
        'any, any': function anyAny(x, y) {
            // strict equality for null and undefined?
            if (x === null) return y !== null;
            if (y === null) return x !== null;
            if (x === undefined) return y !== undefined;
            if (y === undefined) return x !== undefined;
            return !equalScalar(x, y);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm07.js":"8nI4z","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm14.js":"82VrR","../../type/matrix/utils/algorithm13.js":"fiTNq","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lIhe0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPartitionSelect", ()=>createPartitionSelect
);
var _isJs = require("../../utils/is.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'partitionSelect';
var dependencies = [
    'typed',
    'isNumeric',
    'isNaN',
    'compare'
];
var createPartitionSelect = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , isNumeric , isNaN , compare: compare1  } = _ref;
    var asc = compare1;
    var desc = (a, b)=>-compare1(a, b)
    ;
    function _partitionSelect(x, k, compare) {
        if (!_numberJs.isInteger(k) || k < 0) {
            throw new Error('k must be a non-negative integer');
        }
        if (_isJs.isMatrix(x)) {
            var size = x.size();
            if (size.length > 1) {
                throw new Error('Only one dimensional matrices supported');
            }
            return quickSelect(x.valueOf(), k, compare);
        }
        if (Array.isArray(x)) {
            return quickSelect(x, k, compare);
        }
    }
    /**
   * Quickselect algorithm.
   * Code adapted from:
   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
   *
   * @param {Array} arr
   * @param {Number} k
   * @param {Function} compare
   * @private
   */ function quickSelect(arr, k, compare) {
        if (k >= arr.length) {
            throw new Error('k out of bounds');
        } // check for NaN values since these can cause an infinite while loop
        for(var i = 0; i < arr.length; i++){
            if (isNumeric(arr[i]) && isNaN(arr[i])) {
                return arr[i]; // return NaN
            }
        }
        var from = 0;
        var to = arr.length - 1; // if from == to we reached the kth element
        while(from < to){
            var r = from;
            var w = to;
            var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets
            while(r < w){
                // arr[r] >= pivot
                if (compare(arr[r], pivot) >= 0) {
                    // put the large values at the end
                    var tmp = arr[w];
                    arr[w] = arr[r];
                    arr[r] = tmp;
                    --w;
                } else {
                    // the value is smaller than the pivot, skip
                    ++r;
                }
            } // if we stepped up (r++) we need to step one down (arr[r] > pivot)
            if (compare(arr[r], pivot) > 0) {
                --r;
            } // the r pointer is on the end of the first k elements
            if (k <= r) {
                to = r;
            } else {
                from = r + 1;
            }
        }
        return arr[k];
    }
    /**
   * Partition-based selection of an array or 1D matrix.
   * Will find the kth smallest value, and mutates the input array.
   * Uses Quickselect.
   *
   * Syntax:
   *
   *    math.partitionSelect(x, k)
   *    math.partitionSelect(x, k, compare)
   *
   * Examples:
   *
   *    math.partitionSelect([5, 10, 1], 2)           // returns 10
   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
   *
   * See also:
   *
   *    sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Number} k            The kth smallest value to be retrieved zero-based index
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {*} Returns the kth lowest value.
   */ return typed(name, {
        'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
            return _partitionSelect(x, k, asc);
        },
        'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
            if (compare === 'asc') return _partitionSelect(x, k, asc);
            else if (compare === 'desc') return _partitionSelect(x, k, desc);
            else throw new Error('Compare string must be "asc" or "desc"');
        },
        'Array | Matrix, number, function': _partitionSelect
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bFbH6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSort", ()=>createSort
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'sort';
var dependencies = [
    'typed',
    'matrix',
    'compare',
    'compareNatural'
];
var createSort = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix: matrix1 , compare , compareNatural  } = _ref;
    var compareAsc = compare;
    var compareDesc = (a, b)=>-compare(a, b)
    ;
    /**
   * Get the comparator for given order ('asc', 'desc', 'natural')
   * @param {'asc' | 'desc' | 'natural'} order
   * @return {Function} Returns a _comparator function
   */ function _comparator1(order) {
        if (order === 'asc') {
            return compareAsc;
        } else if (order === 'desc') {
            return compareDesc;
        } else if (order === 'natural') {
            return compareNatural;
        } else {
            throw new Error('String "asc", "desc", or "natural" expected');
        }
    }
    /**
   * Validate whether an array is one dimensional
   * Throws an error when this is not the case
   * @param {Array} array
   * @private
   */ function _arrayIsVector(array) {
        if (_arrayJs.arraySize(array).length !== 1) {
            throw new Error('One dimensional array expected');
        }
    }
    /**
   * Validate whether a matrix is one dimensional
   * Throws an error when this is not the case
   * @param {Matrix} matrix
   * @private
   */ function _matrixIsVector(matrix) {
        if (matrix.size().length !== 1) {
            throw new Error('One dimensional matrix expected');
        }
    }
    /**
   * Sort the items in a matrix.
   *
   * Syntax:
   *
   *    math.sort(x)
   *    math.sort(x, compare)
   *
   * Examples:
   *
   *    math.sort([5, 10, 1]) // returns [1, 5, 10]
   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
   *    // returns ['A', 'B', 'C', 'D']
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
   *    // returns ['Tom', 'Sara', 'Langdon']
   *
   * See also:
   *
   *    filter, forEach, map, compare, compareNatural
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
   *        An optional _comparator function or name. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {Matrix | Array} Returns the sorted matrix.
   */ return typed(name, {
        Array: function Array(x) {
            _arrayIsVector(x);
            return x.sort(compareAsc);
        },
        Matrix: function Matrix(x) {
            _matrixIsVector(x);
            return matrix1(x.toArray().sort(compareAsc), x.storage());
        },
        'Array, function': function ArrayFunction(x, _comparator) {
            _arrayIsVector(x);
            return x.sort(_comparator);
        },
        'Matrix, function': function MatrixFunction(x, _comparator) {
            _matrixIsVector(x);
            return matrix1(x.toArray().sort(_comparator), x.storage());
        },
        'Array, string': function ArrayString(x, order) {
            _arrayIsVector(x);
            return x.sort(_comparator1(order));
        },
        'Matrix, string': function MatrixString(x, order) {
            _matrixIsVector(x);
            return matrix1(x.toArray().sort(_comparator1(order)), x.storage());
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8eqWS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMax", ()=>createMax
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _improveErrorMessageJs = require("./utils/improveErrorMessage.js");
var name = 'max';
var dependencies = [
    'typed',
    'config',
    'numeric',
    'larger'
];
var createMax = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , numeric , larger  } = _ref;
    /**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */ function _largest(x, y) {
        try {
            return larger(x, y) ? x : y;
        } catch (err) {
            throw _improveErrorMessageJs.improveErrorMessage(err, 'max', y);
        }
    }
    /**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */ function _max(array) {
        var res;
        _collectionJs.deepForEach(array, function(value) {
            try {
                if (isNaN(value) && typeof value === 'number') {
                    res = NaN;
                } else if (res === undefined || larger(value, res)) {
                    res = value;
                }
            } catch (err) {
                throw _improveErrorMessageJs.improveErrorMessage(err, 'max', value);
            }
        });
        if (res === undefined) {
            throw new Error('Cannot calculate max of an empty array');
        } // make sure returning numeric value: parse a string into a numeric value
        if (typeof res === 'string') {
            res = numeric(res, config.number);
        }
        return res;
    }
    /**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dim)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3)                  // returns 4
   *     math.max([2, 1, 4, 3])                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */ return typed(name, {
        // max([a, b, c, d, ...])
        'Array | Matrix': _max,
        // max([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
            return _collectionJs.reduce(array, dim.valueOf(), _largest);
        },
        // max(a, b, c, d, ...)
        '...': function _(args) {
            if (_collectionJs.containsCollections(args)) throw new TypeError('Scalar values expected in function max');
            return _max(args);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","./utils/improveErrorMessage.js":"ee5yO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eSLZj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMin", ()=>createMin
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _improveErrorMessageJs = require("./utils/improveErrorMessage.js");
var name = 'min';
var dependencies = [
    'typed',
    'config',
    'numeric',
    'smaller'
];
var createMin = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , numeric , smaller  } = _ref;
    /**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */ function _smallest(x, y) {
        try {
            return smaller(x, y) ? x : y;
        } catch (err) {
            throw _improveErrorMessageJs.improveErrorMessage(err, 'min', y);
        }
    }
    /**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */ function _min(array) {
        var min;
        _collectionJs.deepForEach(array, function(value) {
            try {
                if (isNaN(value) && typeof value === 'number') {
                    min = NaN;
                } else if (min === undefined || smaller(value, min)) {
                    min = value;
                }
            } catch (err) {
                throw _improveErrorMessageJs.improveErrorMessage(err, 'min', value);
            }
        });
        if (min === undefined) {
            throw new Error('Cannot calculate min of an empty array');
        } // make sure returning numeric value: parse a string into a numeric value
        if (typeof min === 'string') {
            min = numeric(min, config.number);
        }
        return min;
    }
    /**
   * Compute the minimum value of a matrix or a  list of values.
   * In case of a multi dimensional array, the minimum of the flattened array
   * will be calculated. When `dim` is provided, the minimum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dim)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3)                  // returns 1
   *     math.min([2, 1, 4, 3])                // returns 1
   *
   *     // minimum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */ return typed(name, {
        // min([a, b, c, d, ...])
        'Array | Matrix': _min,
        // min([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
            return _collectionJs.reduce(array, dim.valueOf(), _smallest);
        },
        // min(a, b, c, d, ...)
        '...': function _(args) {
            if (_collectionJs.containsCollections(args)) throw new TypeError('Scalar values expected in function min');
            return _min(args);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","./utils/improveErrorMessage.js":"ee5yO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kYuYp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createImmutableDenseMatrixClass", ()=>createImmutableDenseMatrixClass
);
var _isJs = require("../../utils/is.js");
var _objectJs = require("../../utils/object.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'ImmutableDenseMatrix';
var dependencies = [
    'smaller',
    'DenseMatrix'
];
var createImmutableDenseMatrixClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { smaller , DenseMatrix  } = _ref;
    function ImmutableDenseMatrix(data, datatype) {
        if (!(this instanceof ImmutableDenseMatrix)) throw new SyntaxError('Constructor must be called with the new operator');
        if (datatype && !_isJs.isString(datatype)) throw new Error('Invalid datatype: ' + datatype);
        if (_isJs.isMatrix(data) || _isJs.isArray(data)) {
            // use DenseMatrix implementation
            var matrix = new DenseMatrix(data, datatype); // internal structures
            this._data = matrix._data;
            this._size = matrix._size;
            this._datatype = matrix._datatype;
            this._min = null;
            this._max = null;
        } else if (data && _isJs.isArray(data.data) && _isJs.isArray(data.size)) {
            // initialize fields from JSON representation
            this._data = data.data;
            this._size = data.size;
            this._datatype = data.datatype;
            this._min = typeof data.min !== 'undefined' ? data.min : null;
            this._max = typeof data.max !== 'undefined' ? data.max : null;
        } else if (data) // unsupported type
        throw new TypeError('Unsupported type of data (' + _isJs.typeOf(data) + ')');
        else {
            // nothing provided
            this._data = [];
            this._size = [
                0
            ];
            this._datatype = datatype;
            this._min = null;
            this._max = null;
        }
    }
    ImmutableDenseMatrix.prototype = new DenseMatrix();
    /**
   * Attach type information
   */ ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
    ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
    /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | ImmutableDenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */ ImmutableDenseMatrix.prototype.subset = function(index) {
        switch(arguments.length){
            case 1:
                // use base implementation
                var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix
                if (_isJs.isMatrix(m)) // return immutable matrix
                return new ImmutableDenseMatrix({
                    data: m._data,
                    size: m._size,
                    datatype: m._datatype
                });
                return m;
            // intentional fall through
            case 2:
            case 3:
                throw new Error('Cannot invoke set subset on an Immutable Matrix instance');
            default:
                throw new SyntaxError('Wrong number of arguments');
        }
    };
    /**
   * Replace a single element in the matrix.
   * @param {Number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {ImmutableDenseMatrix} self
   */ ImmutableDenseMatrix.prototype.set = function() {
        throw new Error('Cannot invoke set on an Immutable Matrix instance');
    };
    /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {Number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */ ImmutableDenseMatrix.prototype.resize = function() {
        throw new Error('Cannot invoke resize on an Immutable Matrix instance');
    };
    /**
   * Disallows reshaping in favor of immutability.
   *
   * @throws {Error} Operation not allowed
   */ ImmutableDenseMatrix.prototype.reshape = function() {
        throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
    };
    /**
   * Create a clone of the matrix
   * @return {ImmutableDenseMatrix} clone
   */ ImmutableDenseMatrix.prototype.clone = function() {
        return new ImmutableDenseMatrix({
            data: _objectJs.clone(this._data),
            size: _objectJs.clone(this._size),
            datatype: this._datatype
        });
    };
    /**
   * Get a JSON representation of the matrix
   * @returns {Object}
   */ ImmutableDenseMatrix.prototype.toJSON = function() {
        return {
            mathjs: 'ImmutableDenseMatrix',
            data: this._data,
            size: this._size,
            datatype: this._datatype
        };
    };
    /**
   * Generate a matrix from a JSON object
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {ImmutableDenseMatrix}
   */ ImmutableDenseMatrix.fromJSON = function(json) {
        return new ImmutableDenseMatrix(json);
    };
    /**
   * Swap rows i and j in Matrix.
   *
   * @param {Number} i       Matrix row index 1
   * @param {Number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */ ImmutableDenseMatrix.prototype.swapRows = function() {
        throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
    };
    /**
   * Calculate the minimum value in the set
   * @return {Number | undefined} min
   */ ImmutableDenseMatrix.prototype.min = function() {
        // check min has been calculated before
        if (this._min === null) {
            // minimum
            var m = null; // compute min
            this.forEach(function(v) {
                if (m === null || smaller(v, m)) m = v;
            });
            this._min = m !== null ? m : undefined;
        }
        return this._min;
    };
    /**
   * Calculate the maximum value in the set
   * @return {Number | undefined} max
   */ ImmutableDenseMatrix.prototype.max = function() {
        // check max has been calculated before
        if (this._max === null) {
            // maximum
            var m = null; // compute max
            this.forEach(function(v) {
                if (m === null || smaller(m, v)) m = v;
            });
            this._max = m !== null ? m : undefined;
        }
        return this._max;
    };
    return ImmutableDenseMatrix;
}, {
    isClass: true
});

},{"../../utils/is.js":"iwdlF","../../utils/object.js":"eRHhH","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1st82":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIndexClass", ()=>createIndexClass
);
var _isJs = require("../../utils/is.js");
var _objectJs = require("../../utils/object.js");
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'Index';
var dependencies = [
    'ImmutableDenseMatrix'
];
var createIndexClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { ImmutableDenseMatrix  } = _ref;
    /**
   * Create an index. An Index can store ranges and sets for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Usage:
   *     const index = new Index(range1, range2, matrix1, array1, ...)
   *
   * Where each parameter can be any of:
   *     A number
   *     A string (containing a name of an object property)
   *     An instance of Range
   *     An Array with the Set values
   *     A Matrix with the Set values
   *
   * The parameters start, end, and step must be integer numbers.
   *
   * @class Index
   * @Constructor Index
   * @param {...*} ranges
   */ function Index(ranges) {
        if (!(this instanceof Index)) throw new SyntaxError('Constructor must be called with the new operator');
        this._dimensions = [];
        this._isScalar = true;
        for(var i = 0, ii = arguments.length; i < ii; i++){
            var arg = arguments[i];
            if (_isJs.isRange(arg)) {
                this._dimensions.push(arg);
                this._isScalar = false;
            } else if (Array.isArray(arg) || _isJs.isMatrix(arg)) {
                // create matrix
                var m = _createImmutableMatrix(arg.valueOf());
                this._dimensions.push(m); // size
                var size = m.size(); // scalar
                if (size.length !== 1 || size[0] !== 1) this._isScalar = false;
            } else if (typeof arg === 'number') this._dimensions.push(_createImmutableMatrix([
                arg
            ]));
            else if (typeof arg === 'string') // object property (arguments.count should be 1)
            this._dimensions.push(arg);
            else throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
             // TODO: implement support for wildcard '*'
        }
    }
    /**
   * Attach type information
   */ Index.prototype.type = 'Index';
    Index.prototype.isIndex = true;
    function _createImmutableMatrix(arg) {
        // loop array elements
        for(var i = 0, l = arg.length; i < l; i++){
            if (typeof arg[i] !== 'number' || !_numberJs.isInteger(arg[i])) throw new TypeError('Index parameters must be positive integer numbers');
        } // create matrix
        return new ImmutableDenseMatrix(arg);
    }
    /**
   * Create a clone of the index
   * @memberof Index
   * @return {Index} clone
   */ Index.prototype.clone = function() {
        var index = new Index();
        index._dimensions = _objectJs.clone(this._dimensions);
        index._isScalar = this._isScalar;
        return index;
    };
    /**
   * Create an index from an array with ranges/numbers
   * @memberof Index
   * @param {Array.<Array | number>} ranges
   * @return {Index} index
   * @private
   */ Index.create = function(ranges) {
        var index = new Index();
        Index.apply(index, ranges);
        return index;
    };
    /**
   * Retrieve the size of the index, the number of elements for each dimension.
   * @memberof Index
   * @returns {number[]} size
   */ Index.prototype.size = function() {
        var size = [];
        for(var i = 0, ii = this._dimensions.length; i < ii; i++){
            var d = this._dimensions[i];
            size[i] = typeof d === 'string' ? 1 : d.size()[0];
        }
        return size;
    };
    /**
   * Get the maximum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} max
   */ Index.prototype.max = function() {
        var values = [];
        for(var i = 0, ii = this._dimensions.length; i < ii; i++){
            var range = this._dimensions[i];
            values[i] = typeof range === 'string' ? range : range.max();
        }
        return values;
    };
    /**
   * Get the minimum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} min
   */ Index.prototype.min = function() {
        var values = [];
        for(var i = 0, ii = this._dimensions.length; i < ii; i++){
            var range = this._dimensions[i];
            values[i] = typeof range === 'string' ? range : range.min();
        }
        return values;
    };
    /**
   * Loop over each of the ranges of the index
   * @memberof Index
   * @param {Function} callback   Called for each range with a Range as first
   *                              argument, the dimension as second, and the
   *                              index object as third.
   */ Index.prototype.forEach = function(callback) {
        for(var i = 0, ii = this._dimensions.length; i < ii; i++)callback(this._dimensions[i], i, this);
    };
    /**
   * Retrieve the dimension for the given index
   * @memberof Index
   * @param {Number} dim                  Number of the dimension
   * @returns {Range | null} range
   */ Index.prototype.dimension = function(dim) {
        return this._dimensions[dim] || null;
    };
    /**
   * Test whether this index contains an object property
   * @returns {boolean} Returns true if the index is an object property
   */ Index.prototype.isObjectProperty = function() {
        return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
    };
    /**
   * Returns the object property name when the Index holds a single object property,
   * else returns null
   * @returns {string | null}
   */ Index.prototype.getObjectProperty = function() {
        return this.isObjectProperty() ? this._dimensions[0] : null;
    };
    /**
   * Test whether this index contains only a single value.
   *
   * This is the case when the index is created with only scalar values as ranges,
   * not for ranges resolving into a single value.
   * @memberof Index
   * @return {boolean} isScalar
   */ Index.prototype.isScalar = function() {
        return this._isScalar;
    };
    /**
   * Expand the Index into an array.
   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
   * @memberof Index
   * @returns {Array} array
   */ Index.prototype.toArray = function() {
        var array = [];
        for(var i = 0, ii = this._dimensions.length; i < ii; i++){
            var dimension = this._dimensions[i];
            array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
        }
        return array;
    };
    /**
   * Get the primitive value of the Index, a two dimensional array.
   * Equivalent to Index.toArray().
   * @memberof Index
   * @returns {Array} array
   */ Index.prototype.valueOf = Index.prototype.toArray;
    /**
   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
   * @memberof Index
   * @returns {String} str
   */ Index.prototype.toString = function() {
        var strings = [];
        for(var i = 0, ii = this._dimensions.length; i < ii; i++){
            var dimension = this._dimensions[i];
            if (typeof dimension === 'string') strings.push(JSON.stringify(dimension));
            else strings.push(dimension.toString());
        }
        return '[' + strings.join(', ') + ']';
    };
    /**
   * Get a JSON representation of the Index
   * @memberof Index
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   */ Index.prototype.toJSON = function() {
        return {
            mathjs: 'Index',
            dimensions: this._dimensions
        };
    };
    /**
   * Instantiate an Index from a JSON object
   * @memberof Index
   * @param {Object} json A JSON object structured as:
   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   * @return {Index}
   */ Index.fromJSON = function(json) {
        return Index.create(json.dimensions);
    };
    return Index;
}, {
    isClass: true
});

},{"../../utils/is.js":"iwdlF","../../utils/object.js":"eRHhH","../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"34h3D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFibonacciHeapClass", ()=>createFibonacciHeapClass
);
var _factoryJs = require("../../utils/factory.js");
var name = 'FibonacciHeap';
var dependencies = [
    'smaller',
    'larger'
];
var createFibonacciHeapClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { smaller , larger  } = _ref;
    var oneOverLogPhi = 1 / Math.log((1 + Math.sqrt(5)) / 2);
    /**
   * Fibonacci Heap implementation, used interally for Matrix math.
   * @class FibonacciHeap
   * @constructor FibonacciHeap
   */ function FibonacciHeap() {
        if (!(this instanceof FibonacciHeap)) throw new SyntaxError('Constructor must be called with the new operator');
         // initialize fields
        this._minimum = null;
        this._size = 0;
    }
    /**
   * Attach type information
   */ FibonacciHeap.prototype.type = 'FibonacciHeap';
    FibonacciHeap.prototype.isFibonacciHeap = true;
    /**
   * Inserts a new data element into the heap. No heap consolidation is
   * performed at this time, the new node is simply inserted into the root
   * list of this heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */ FibonacciHeap.prototype.insert = function(key, value) {
        // create node
        var node = {
            key: key,
            value: value,
            degree: 0
        }; // check we have a node in the minimum
        if (this._minimum) {
            // minimum node
            var minimum = this._minimum; // update left & right of node
            node.left = minimum;
            node.right = minimum.right;
            minimum.right = node;
            node.right.left = node; // update minimum node in heap if needed
            if (smaller(key, minimum.key)) // node has a smaller key, use it as minimum
            this._minimum = node;
        } else {
            // set left & right
            node.left = node;
            node.right = node; // this is the first node
            this._minimum = node;
        } // increment number of nodes in heap
        this._size++; // return node
        return node;
    };
    /**
   * Returns the number of nodes in heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */ FibonacciHeap.prototype.size = function() {
        return this._size;
    };
    /**
   * Removes all elements from this heap.
   * @memberof FibonacciHeap
   */ FibonacciHeap.prototype.clear = function() {
        this._minimum = null;
        this._size = 0;
    };
    /**
   * Returns true if the heap is empty, otherwise false.
   * @memberof FibonacciHeap
   */ FibonacciHeap.prototype.isEmpty = function() {
        return this._size === 0;
    };
    /**
   * Extracts the node with minimum key from heap. Amortized running
   * time: O(log n).
   * @memberof FibonacciHeap
   */ FibonacciHeap.prototype.extractMinimum = function() {
        // node to remove
        var node = this._minimum; // check we have a minimum
        if (node === null) return node;
         // current minimum
        var minimum = this._minimum; // get number of children
        var numberOfChildren = node.degree; // pointer to the first child
        var x = node.child; // for each child of node do...
        while(numberOfChildren > 0){
            // store node in right side
            var tempRight = x.right; // remove x from child list
            x.left.right = x.right;
            x.right.left = x.left; // add x to root list of heap
            x.left = minimum;
            x.right = minimum.right;
            minimum.right = x;
            x.right.left = x; // set Parent[x] to null
            x.parent = null;
            x = tempRight;
            numberOfChildren--;
        } // remove node from root list of heap
        node.left.right = node.right;
        node.right.left = node.left; // update minimum
        if (node === node.right) // empty
        minimum = null;
        else {
            // update minimum
            minimum = node.right; // we need to update the pointer to the root with minimum key
            minimum = _findMinimumNode(minimum, this._size);
        } // decrement size of heap
        this._size--; // update minimum
        this._minimum = minimum; // return node
        return node;
    };
    /**
   * Removes a node from the heap given the reference to the node. The trees
   * in the heap will be consolidated, if necessary. This operation may fail
   * to remove the correct element if there are nodes with key value -Infinity.
   * Running time: O(log n) amortized.
   * @memberof FibonacciHeap
   */ FibonacciHeap.prototype.remove = function(node) {
        // decrease key value
        this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest
        this.extractMinimum();
    };
    /**
   * Decreases the key value for a heap node, given the new value to take on.
   * The structure of the heap may be changed and will not be consolidated.
   * Running time: O(1) amortized.
   * @memberof FibonacciHeap
   */ function _decreaseKey(minimum, node, key) {
        // set node key
        node.key = key; // get parent node
        var parent = node.parent;
        if (parent && smaller(node.key, parent.key)) {
            // remove node from parent
            _cut(minimum, node, parent); // remove all nodes from parent to the root parent
            _cascadingCut(minimum, parent);
        } // update minimum node if needed
        if (smaller(node.key, minimum.key)) minimum = node;
         // return minimum
        return minimum;
    }
    /**
   * The reverse of the link operation: removes node from the child list of parent.
   * This method assumes that min is non-null. Running time: O(1).
   * @memberof FibonacciHeap
   */ function _cut(minimum, node, parent) {
        // remove node from parent children and decrement Degree[parent]
        node.left.right = node.right;
        node.right.left = node.left;
        parent.degree--; // reset y.child if necessary
        if (parent.child === node) parent.child = node.right;
         // remove child if degree is 0
        if (parent.degree === 0) parent.child = null;
         // add node to root list of heap
        node.left = minimum;
        node.right = minimum.right;
        minimum.right = node;
        node.right.left = node; // set parent[node] to null
        node.parent = null; // set mark[node] to false
        node.mark = false;
    }
    /**
   * Performs a cascading cut operation. This cuts node from its parent and then
   * does the same for its parent, and so on up the tree.
   * Running time: O(log n); O(1) excluding the recursion.
   * @memberof FibonacciHeap
   */ function _cascadingCut(minimum, node) {
        // store parent node
        var parent = node.parent; // if there's a parent...
        if (!parent) return;
         // if node is unmarked, set it marked
        if (!node.mark) node.mark = true;
        else {
            // it's marked, cut it from parent
            _cut(minimum, node, parent); // cut its parent as well
            _cascadingCut(parent);
        }
    }
    /**
   * Make the first node a child of the second one. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */ var _linkNodes = function _linkNodes(node, parent) {
        // remove node from root list of heap
        node.left.right = node.right;
        node.right.left = node.left; // make node a Child of parent
        node.parent = parent;
        if (!parent.child) {
            parent.child = node;
            node.right = node;
            node.left = node;
        } else {
            node.left = parent.child;
            node.right = parent.child.right;
            parent.child.right = node;
            node.right.left = node;
        } // increase degree[parent]
        parent.degree++; // set mark[node] false
        node.mark = false;
    };
    function _findMinimumNode(minimum, size) {
        // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
        var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity
        var array = new Array(arraySize); // find the number of root nodes.
        var numRoots = 0;
        var x = minimum;
        if (x) {
            numRoots++;
            x = x.right;
            while(x !== minimum){
                numRoots++;
                x = x.right;
            }
        } // vars
        var y; // For each node in root list do...
        while(numRoots > 0){
            // access this node's degree..
            var d = x.degree; // get next node
            var next = x.right; // check if there is a node already in array with the same degree
            while(true){
                // get node with the same degree is any
                y = array[d];
                if (!y) break;
                 // make one node with the same degree a child of the other, do this based on the key value.
                if (larger(x.key, y.key)) {
                    var temp = y;
                    y = x;
                    x = temp;
                } // make y a child of x
                _linkNodes(y, x); // we have handled this degree, go to next one.
                array[d] = null;
                d++;
            } // save this node for later when we might encounter another of the same degree.
            array[d] = x; // move forward through list.
            x = next;
            numRoots--;
        } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].
        minimum = null; // loop nodes in array
        for(var i = 0; i < arraySize; i++){
            // get current node
            y = array[i];
            if (!y) continue;
             // check if we have a linked list
            if (minimum) {
                // First remove node from root list.
                y.left.right = y.right;
                y.right.left = y.left; // now add to root list, again.
                y.left = minimum;
                y.right = minimum.right;
                minimum.right = y;
                y.right.left = y; // check if this is a new min.
                if (smaller(y.key, minimum.key)) minimum = y;
            } else minimum = y;
        }
        return minimum;
    }
    return FibonacciHeap;
}, {
    isClass: true
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3FtHu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSpaClass", ()=>createSpaClass
);
var _factoryJs = require("../../utils/factory.js");
var name = 'Spa';
var dependencies = [
    'addScalar',
    'equalScalar',
    'FibonacciHeap'
];
var createSpaClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { addScalar , equalScalar , FibonacciHeap  } = _ref;
    /**
   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
   * of the vector elements and an ordered list of non-zero elements.
   */ function Spa() {
        if (!(this instanceof Spa)) throw new SyntaxError('Constructor must be called with the new operator');
         // allocate vector, TODO use typed arrays
        this._values = [];
        this._heap = new FibonacciHeap();
    }
    /**
   * Attach type information
   */ Spa.prototype.type = 'Spa';
    Spa.prototype.isSpa = true;
    /**
   * Set the value for index i.
   *
   * @param {number} i                       The index
   * @param {number | BigNumber | Complex}   The value at index i
   */ Spa.prototype.set = function(i, v) {
        // check we have a value @ i
        if (!this._values[i]) {
            // insert in heap
            var node = this._heap.insert(i, v); // set the value @ i
            this._values[i] = node;
        } else // update the value @ i
        this._values[i].value = v;
    };
    Spa.prototype.get = function(i) {
        var node = this._values[i];
        if (node) return node.value;
        return 0;
    };
    Spa.prototype.accumulate = function(i, v) {
        // node @ i
        var node = this._values[i];
        if (!node) {
            // insert in heap
            node = this._heap.insert(i, v); // initialize value
            this._values[i] = node;
        } else // accumulate value
        node.value = addScalar(node.value, v);
    };
    Spa.prototype.forEach = function(from, to, callback) {
        // references
        var heap = this._heap;
        var values = this._values; // nodes
        var nodes = []; // node with minimum key, save it
        var node = heap.extractMinimum();
        if (node) nodes.push(node);
         // extract nodes from heap (ordered)
        while(node && node.key <= to){
            // check it is in range
            if (node.key >= from) // check value is not zero
            {
                if (!equalScalar(node.value, 0)) // invoke callback
                callback(node.key, node.value, this);
            } // extract next node, save it
            node = heap.extractMinimum();
            if (node) nodes.push(node);
        } // reinsert all nodes in heap
        for(var i = 0; i < nodes.length; i++){
            // current node
            var n = nodes[i]; // insert node in heap
            node = heap.insert(n.key, n.value); // update values
            values[node.key] = node;
        }
    };
    Spa.prototype.swap = function(i, j) {
        // node @ i and j
        var nodei = this._values[i];
        var nodej = this._values[j]; // check we need to insert indeces
        if (!nodei && nodej) {
            // insert in heap
            nodei = this._heap.insert(i, nodej.value); // remove from heap
            this._heap.remove(nodej); // set values
            this._values[i] = nodei;
            this._values[j] = undefined;
        } else if (nodei && !nodej) {
            // insert in heap
            nodej = this._heap.insert(j, nodei.value); // remove from heap
            this._heap.remove(nodei); // set values
            this._values[j] = nodej;
            this._values[i] = undefined;
        } else if (nodei && nodej) {
            // swap values
            var v = nodei.value;
            nodei.value = nodej.value;
            nodej.value = v;
        }
    };
    return Spa;
}, {
    isClass: true
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fs5Xx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnitClass", ()=>createUnitClass
);
var _extends = require("@babel/runtime/helpers/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var _functionJs = require("../../utils/function.js");
var _stringJs = require("../../utils/string.js");
var _objectJs = require("../../utils/object.js");
var _constantsJs = require("../../utils/bignumber/constants.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _definePropertyDefault.default(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var name1 = 'Unit';
var dependencies = [
    '?on',
    'config',
    'addScalar',
    'subtract',
    'multiplyScalar',
    'divideScalar',
    'pow',
    'abs',
    'fix',
    'round',
    'equal',
    'isNumeric',
    'format',
    'number',
    'Complex',
    'BigNumber',
    'Fraction'
];
var createUnitClass = /* #__PURE__ */ _factoryJs.factory(name1, dependencies, (_ref)=>{
    var { on , config: config1 , addScalar , subtract , multiplyScalar , divideScalar , pow , abs , fix , round , equal , isNumeric , format , number: number1 , Complex , BigNumber: _BigNumber , Fraction: _Fraction  } = _ref;
    var toNumber = number1;
    /**
   * A unit can be constructed in the following ways:
   *
   *     const a = new Unit(value, name)
   *     const b = new Unit(null, name)
   *     const c = Unit.parse(str)
   *
   * Example usage:
   *
   *     const a = new Unit(5, 'cm')               // 50 mm
   *     const b = Unit.parse('23 kg')             // 23 kg
   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
   *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
   *
   * @class Unit
   * @constructor Unit
   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
   */ function Unit(value, name) {
        if (!(this instanceof Unit)) throw new Error('Constructor must be called with the new operator');
        if (!(value === null || value === undefined || isNumeric(value) || _isJs.isComplex(value))) throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
        if (name !== undefined && (typeof name !== 'string' || name === '')) throw new TypeError('Second parameter in Unit constructor must be a string');
        if (name !== undefined) {
            var u = Unit.parse(name);
            this.units = u.units;
            this.dimensions = u.dimensions;
        } else {
            this.units = [
                {
                    unit: UNIT_NONE,
                    prefix: PREFIXES.NONE,
                    // link to a list with supported prefixes
                    power: 0
                }
            ];
            this.dimensions = [];
            for(var i = 0; i < BASE_DIMENSIONS.length; i++)this.dimensions[i] = 0;
        }
        this.value = value !== undefined && value !== null ? this._normalize(value) : null;
        this.fixPrefix = false; // if true, function format will not search for the
        // best prefix but leave it as initially provided.
        // fixPrefix is set true by the method Unit.to
        // The justification behind this is that if the constructor is explicitly called,
        // the caller wishes the units to be returned exactly as he supplied.
        this.skipAutomaticSimplification = true;
    }
    /**
   * Attach type information
   */ Unit.prototype.type = 'Unit';
    Unit.prototype.isUnit = true; // private variables and functions for the Unit parser
    var text, index, c1;
    function skipWhitespace() {
        while(c1 === ' ' || c1 === '\t')next();
    }
    function isDigitDot(c) {
        return c >= '0' && c <= '9' || c === '.';
    }
    function isDigit(c) {
        return c >= '0' && c <= '9';
    }
    function next() {
        index++;
        c1 = text.charAt(index);
    }
    function revert(oldIndex) {
        index = oldIndex;
        c1 = text.charAt(index);
    }
    function parseNumber() {
        var number = '';
        var oldIndex = index;
        if (c1 === '+') next();
        else if (c1 === '-') {
            number += c1;
            next();
        }
        if (!isDigitDot(c1)) {
            // a + or - must be followed by a digit
            revert(oldIndex);
            return null;
        } // get number, can have a single dot
        if (c1 === '.') {
            number += c1;
            next();
            if (!isDigit(c1)) {
                // this is no legal number, it is just a dot
                revert(oldIndex);
                return null;
            }
        } else {
            while(isDigit(c1)){
                number += c1;
                next();
            }
            if (c1 === '.') {
                number += c1;
                next();
            }
        }
        while(isDigit(c1)){
            number += c1;
            next();
        } // check for exponential notation like "2.3e-4" or "1.23e50"
        if (c1 === 'E' || c1 === 'e') {
            // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
            var tentativeNumber = '';
            var tentativeIndex = index;
            tentativeNumber += c1;
            next();
            if (c1 === '+' || c1 === '-') {
                tentativeNumber += c1;
                next();
            } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)
            if (!isDigit(c1)) {
                // The e or E must belong to something else, so return the number without the e or E.
                revert(tentativeIndex);
                return number;
            } // We can now safely say that this is scientific notation.
            number = number + tentativeNumber;
            while(isDigit(c1)){
                number += c1;
                next();
            }
        }
        return number;
    }
    function parseUnit() {
        var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]
        while(isDigit(c1) || Unit.isValidAlpha(c1)){
            unitName += c1;
            next();
        } // Must begin with [a-zA-Z]
        var firstC = unitName.charAt(0);
        if (Unit.isValidAlpha(firstC)) return unitName;
        else return null;
    }
    function parseCharacter(toFind) {
        if (c1 === toFind) {
            next();
            return toFind;
        } else return null;
    }
    /**
   * Parse a string into a unit. The value of the unit is parsed as number,
   * BigNumber, or Fraction depending on the math.js config setting `number`.
   *
   * Throws an exception if the provided string does not contain a valid unit or
   * cannot be parsed.
   * @memberof Unit
   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
   * @return {Unit} unit
   */ Unit.parse = function(str, options) {
        options = options || {
        };
        text = str;
        index = -1;
        c1 = '';
        if (typeof text !== 'string') throw new TypeError('Invalid argument in Unit.parse, string expected');
        var unit = new Unit();
        unit.units = [];
        var powerMultiplierCurrent = 1;
        var expectingUnit = false; // A unit should follow this pattern:
        // [number] ...[ [*/] unit[^number] ]
        // unit[^number] ... [ [*/] unit[^number] ]
        // Rules:
        // number is any floating point number.
        // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
        // The string may optionally begin with a number.
        // Each unit may optionally be followed by ^number.
        // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
        //   2m^2kg/s^2
        // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
        //   4erg
        next();
        skipWhitespace(); // Optional number at the start of the string
        var valueStr = parseNumber();
        var value = null;
        if (valueStr) {
            if (config1.number === 'BigNumber') value = new _BigNumber(valueStr);
            else if (config1.number === 'Fraction') try {
                // not all numbers can be turned in Fractions, for example very small numbers not
                value = new _Fraction(valueStr);
            } catch (err) {
                value = parseFloat(valueStr);
            }
            else // number
            value = parseFloat(valueStr);
            skipWhitespace(); // Whitespace is not required here
            // handle multiplication or division right after the value, like '1/s'
            if (parseCharacter('*')) {
                powerMultiplierCurrent = 1;
                expectingUnit = true;
            } else if (parseCharacter('/')) {
                powerMultiplierCurrent = -1;
                expectingUnit = true;
            }
        } // Stack to keep track of powerMultipliers applied to each parentheses group
        var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack
        var powerMultiplierStackProduct = 1;
        while(true){
            skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
            // A '(' will always appear directly before a unit.
            while(c1 === '('){
                powerMultiplierStack.push(powerMultiplierCurrent);
                powerMultiplierStackProduct *= powerMultiplierCurrent;
                powerMultiplierCurrent = 1;
                next();
                skipWhitespace();
            } // Is there something here?
            var uStr = void 0;
            if (c1) {
                var oldC = c1;
                uStr = parseUnit();
                if (uStr === null) throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
            } else break;
             // Verify the unit exists and get the prefix (if any)
            var res = _findUnit(uStr);
            if (res === null) // Unit not found.
            throw new SyntaxError('Unit "' + uStr + '" not found.');
            var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a "^ number"?
            skipWhitespace();
            if (parseCharacter('^')) {
                skipWhitespace();
                var p = parseNumber();
                if (p === null) // No valid number found for the power!
                throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
                power *= p;
            } // Add the unit to the list
            unit.units.push({
                unit: res.unit,
                prefix: res.prefix,
                power: power
            });
            for(var i = 0; i < BASE_DIMENSIONS.length; i++)unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
             // Check for and consume closing parentheses, popping from the stack.
            // A ')' will always follow a unit.
            skipWhitespace();
            while(c1 === ')'){
                if (powerMultiplierStack.length === 0) throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
                powerMultiplierStackProduct /= powerMultiplierStack.pop();
                next();
                skipWhitespace();
            } // "*" and "/" should mean we are expecting something to come next.
            // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.
            expectingUnit = false;
            if (parseCharacter('*')) {
                // explicit multiplication
                powerMultiplierCurrent = 1;
                expectingUnit = true;
            } else if (parseCharacter('/')) {
                // division
                powerMultiplierCurrent = -1;
                expectingUnit = true;
            } else // implicit multiplication
            powerMultiplierCurrent = 1;
             // Replace the unit into the auto unit system
            if (res.unit.base) {
                var baseDim = res.unit.base.key;
                UNIT_SYSTEMS.auto[baseDim] = {
                    unit: res.unit,
                    prefix: res.prefix
                };
            }
        } // Has the string been entirely consumed?
        skipWhitespace();
        if (c1) throw new SyntaxError('Could not parse: "' + str + '"');
         // Is there a trailing slash?
        if (expectingUnit) throw new SyntaxError('Trailing characters: "' + str + '"');
         // Is the parentheses stack empty?
        if (powerMultiplierStack.length !== 0) throw new SyntaxError('Unmatched "(" in "' + text + '"');
         // Are there any units at all?
        if (unit.units.length === 0 && !options.allowNoUnits) throw new SyntaxError('"' + str + '" contains no units');
        unit.value = value !== undefined ? unit._normalize(value) : null;
        return unit;
    };
    /**
   * create a copy of this unit
   * @memberof Unit
   * @return {Unit} Returns a cloned version of the unit
   */ Unit.prototype.clone = function() {
        var unit = new Unit();
        unit.fixPrefix = this.fixPrefix;
        unit.skipAutomaticSimplification = this.skipAutomaticSimplification;
        unit.value = _objectJs.clone(this.value);
        unit.dimensions = this.dimensions.slice(0);
        unit.units = [];
        for(var i = 0; i < this.units.length; i++){
            unit.units[i] = {
            };
            for(var p in this.units[i])if (_objectJs.hasOwnProperty(this.units[i], p)) unit.units[i][p] = this.units[i][p];
        }
        return unit;
    };
    /**
   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
   * @memberof Unit
   * @return {boolean} True if the unit is derived
   */ Unit.prototype._isDerived = function() {
        if (this.units.length === 0) return false;
        return this.units.length > 1 || Math.abs(this.units[0].power - 1) > 0.000000000000001;
    };
    /**
   * Normalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number | BigNumber | Fraction | boolean} value
   * @return {number | BigNumber | Fraction | boolean} normalized value
   * @private
   */ Unit.prototype._normalize = function(value) {
        var unitValue, unitOffset, unitPower, unitPrefixValue;
        var convert;
        if (value === null || value === undefined || this.units.length === 0) return value;
        else if (this._isDerived()) {
            // This is a derived unit, so do not apply offsets.
            // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
            var res = value;
            convert = Unit._getNumberConverter(_isJs.typeOf(value)); // convert to Fraction or BigNumber if needed
            for(var i = 0; i < this.units.length; i++){
                unitValue = convert(this.units[i].unit.value);
                unitPrefixValue = convert(this.units[i].prefix.value);
                unitPower = convert(this.units[i].power);
                res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
            }
            return res;
        } else {
            // This is a single unit of power 1, like kg or degC
            convert = Unit._getNumberConverter(_isJs.typeOf(value)); // convert to Fraction or BigNumber if needed
            unitValue = convert(this.units[0].unit.value);
            unitOffset = convert(this.units[0].unit.offset);
            unitPrefixValue = convert(this.units[0].prefix.value);
            return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));
        }
    };
    /**
   * Denormalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number} value
   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
   * @return {number} denormalized value
   * @private
   */ Unit.prototype._denormalize = function(value, prefixValue) {
        var unitValue, unitOffset, unitPower, unitPrefixValue;
        var convert;
        if (value === null || value === undefined || this.units.length === 0) return value;
        else if (this._isDerived()) {
            // This is a derived unit, so do not apply offsets.
            // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
            // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
            var res = value;
            convert = Unit._getNumberConverter(_isJs.typeOf(value)); // convert to Fraction or BigNumber if needed
            for(var i = 0; i < this.units.length; i++){
                unitValue = convert(this.units[i].unit.value);
                unitPrefixValue = convert(this.units[i].prefix.value);
                unitPower = convert(this.units[i].power);
                res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
            }
            return res;
        } else {
            // This is a single unit of power 1, like kg or degC
            convert = Unit._getNumberConverter(_isJs.typeOf(value)); // convert to Fraction or BigNumber if needed
            unitValue = convert(this.units[0].unit.value);
            unitPrefixValue = convert(this.units[0].prefix.value);
            unitOffset = convert(this.units[0].unit.offset);
            if (prefixValue === undefined || prefixValue === null) return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);
            else return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);
        }
    };
    /**
   * Find a unit from a string
   * @memberof Unit
   * @param {string} str              A string like 'cm' or 'inch'
   * @returns {Object | null} result  When found, an object with fields unit and
   *                                  prefix is returned. Else, null is returned.
   * @private
   */ var _findUnit = _functionJs.memoize((str)=>{
        // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
        if (_objectJs.hasOwnProperty(UNITS, str)) {
            var unit = UNITS[str];
            var prefix = unit.prefixes[''];
            return {
                unit,
                prefix
            };
        }
        for(var _name in UNITS){
            if (_objectJs.hasOwnProperty(UNITS, _name)) {
                if (_stringJs.endsWith(str, _name)) {
                    var _unit = UNITS[_name];
                    var prefixLen = str.length - _name.length;
                    var prefixName = str.substring(0, prefixLen);
                    var _prefix = _objectJs.hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;
                    if (_prefix !== undefined) // store unit, prefix, and value
                    return {
                        unit: _unit,
                        prefix: _prefix
                    };
                }
            }
        }
        return null;
    }, {
        hasher: (args)=>args[0]
        ,
        limit: 100
    });
    /**
   * Test if the given expression is a unit.
   * The unit can have a prefix but cannot have a value.
   * @memberof Unit
   * @param {string} name   A string to be tested whether it is a value less unit.
   *                        The unit can have prefix, like "cm"
   * @return {boolean}      true if the given string is a unit
   */ Unit.isValuelessUnit = function(name) {
        return _findUnit(name) !== null;
    };
    /**
   * check if this unit has given base unit
   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
   * @memberof Unit
   * @param {BASE_UNITS | string | undefined} base
   */ Unit.prototype.hasBase = function(base) {
        if (typeof base === 'string') base = BASE_UNITS[base];
        if (!base) return false;
         // All dimensions must be the same
        for(var i = 0; i < BASE_DIMENSIONS.length; i++){
            if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 0.000000000001) return false;
        }
        return true;
    };
    /**
   * Check if this unit has a base or bases equal to another base or bases
   * For derived units, the exponent on each base also must match
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if equal base
   */ Unit.prototype.equalBase = function(other) {
        // All dimensions must be the same
        for(var i = 0; i < BASE_DIMENSIONS.length; i++){
            if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 0.000000000001) return false;
        }
        return true;
    };
    /**
   * Check if this unit equals another unit
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if both units are equal
   */ Unit.prototype.equals = function(other) {
        return this.equalBase(other) && equal(this.value, other.value);
    };
    /**
   * Multiply this unit with another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} product of this unit and the other unit
   */ Unit.prototype.multiply = function(other) {
        var res = this.clone();
        for(var i = 0; i < BASE_DIMENSIONS.length; i++)// Dimensions arrays may be of different lengths. Default to 0.
        res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
         // Append other's units list onto res
        for(var _i = 0; _i < other.units.length; _i++){
            // Make a shallow copy of every unit
            var inverted = _objectSpread({
            }, other.units[_i]);
            res.units.push(inverted);
        } // If at least one operand has a value, then the result should also have a value
        if (this.value !== null || other.value !== null) {
            var valThis = this.value === null ? this._normalize(1) : this.value;
            var valOther = other.value === null ? other._normalize(1) : other.value;
            res.value = multiplyScalar(valThis, valOther);
        } else res.value = null;
        res.skipAutomaticSimplification = false;
        return getNumericIfUnitless(res);
    };
    /**
   * Divide this unit by another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} result of dividing this unit by the other unit
   */ Unit.prototype.divide = function(other) {
        var res = this.clone();
        for(var i = 0; i < BASE_DIMENSIONS.length; i++)// Dimensions arrays may be of different lengths. Default to 0.
        res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
         // Invert and append other's units list onto res
        for(var _i2 = 0; _i2 < other.units.length; _i2++){
            // Make a shallow copy of every unit
            var inverted = _objectSpread(_objectSpread({
            }, other.units[_i2]), {
            }, {
                power: -other.units[_i2].power
            });
            res.units.push(inverted);
        } // If at least one operand has a value, the result should have a value
        if (this.value !== null || other.value !== null) {
            var valThis = this.value === null ? this._normalize(1) : this.value;
            var valOther = other.value === null ? other._normalize(1) : other.value;
            res.value = divideScalar(valThis, valOther);
        } else res.value = null;
        res.skipAutomaticSimplification = false;
        return getNumericIfUnitless(res);
    };
    /**
   * Calculate the power of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} p
   * @returns {Unit}      The result: this^p
   */ Unit.prototype.pow = function(p) {
        var res = this.clone();
        for(var i = 0; i < BASE_DIMENSIONS.length; i++)// Dimensions arrays may be of different lengths. Default to 0.
        res.dimensions[i] = (this.dimensions[i] || 0) * p;
         // Adjust the power of each unit in the list
        for(var _i3 = 0; _i3 < res.units.length; _i3++)res.units[_i3].power *= p;
        if (res.value !== null) res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number
        else res.value = null;
        res.skipAutomaticSimplification = false;
        return getNumericIfUnitless(res);
    };
    /**
   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
   * @param {Unit} unit
   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
   */ function getNumericIfUnitless(unit) {
        if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config1.predictable) return unit.value;
        else return unit;
    }
    /**
   * Calculate the absolute value of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} x
   * @returns {Unit}      The result: |x|, absolute value of x
   */ Unit.prototype.abs = function() {
        // This gives correct, but unexpected, results for units with an offset.
        // For example, abs(-283.15 degC) = -263.15 degC !!!
        var ret = this.clone();
        ret.value = ret.value !== null ? abs(ret.value) : null;
        for(var i in ret.units)if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') ret.units[i].unit = UNITS.W;
        return ret;
    };
    /**
   * Convert the unit to a specific unit name.
   * @memberof Unit
   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
   */ Unit.prototype.to = function(valuelessUnit) {
        var other;
        var value = this.value === null ? this._normalize(1) : this.value;
        if (typeof valuelessUnit === 'string') {
            // other = new Unit(null, valuelessUnit)
            other = Unit.parse(valuelessUnit);
            if (!this.equalBase(other)) throw new Error("Units do not match ('".concat(other.toString(), "' != '").concat(this.toString(), "')"));
            if (other.value !== null) throw new Error('Cannot convert to a unit with a value');
            other.value = _objectJs.clone(value);
            other.fixPrefix = true;
            other.skipAutomaticSimplification = true;
            return other;
        } else if (_isJs.isUnit(valuelessUnit)) {
            if (!this.equalBase(valuelessUnit)) throw new Error("Units do not match ('".concat(valuelessUnit.toString(), "' != '").concat(this.toString(), "')"));
            if (valuelessUnit.value !== null) throw new Error('Cannot convert to a unit with a value');
            other = valuelessUnit.clone();
            other.value = _objectJs.clone(value);
            other.fixPrefix = true;
            other.skipAutomaticSimplification = true;
            return other;
        } else throw new Error('String or Unit expected as parameter');
    };
    /**
   * Return the value of the unit when represented with given valueless unit
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number} Returns the unit value as number.
   */ // TODO: deprecate Unit.toNumber? It's always better to use toNumeric
    Unit.prototype.toNumber = function(valuelessUnit) {
        return toNumber(this.toNumeric(valuelessUnit));
    };
    /**
   * Return the value of the unit in the original numeric type
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number | BigNumber | Fraction} Returns the unit value
   */ Unit.prototype.toNumeric = function(valuelessUnit) {
        var other;
        if (valuelessUnit) // Allow getting the numeric value without converting to a different unit
        other = this.to(valuelessUnit);
        else other = this.clone();
        if (other._isDerived() || other.units.length === 0) return other._denormalize(other.value);
        else return other._denormalize(other.value, other.units[0].prefix.value);
    };
    /**
   * Get a string representation of the unit.
   * @memberof Unit
   * @return {string}
   */ Unit.prototype.toString = function() {
        return this.format();
    };
    /**
   * Get a JSON representation of the unit
   * @memberof Unit
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   */ Unit.prototype.toJSON = function() {
        return {
            mathjs: 'Unit',
            value: this._denormalize(this.value),
            unit: this.formatUnits(),
            fixPrefix: this.fixPrefix
        };
    };
    /**
   * Instantiate a Unit from a JSON object
   * @memberof Unit
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   * @return {Unit}
   */ Unit.fromJSON = function(json) {
        var unit = new Unit(json.value, json.unit);
        unit.fixPrefix = json.fixPrefix || false;
        return unit;
    };
    /**
   * Returns the string representation of the unit.
   * @memberof Unit
   * @return {string}
   */ Unit.prototype.valueOf = Unit.prototype.toString;
    /**
   * Simplify this Unit's unit list and return a new Unit with the simplified list.
   * The returned Unit will contain a list of the "best" units for formatting.
   */ Unit.prototype.simplify = function() {
        var ret = this.clone();
        var proposedUnitList = []; // Search for a matching base
        var matchingBase;
        for(var key in currentUnitSystem){
            if (_objectJs.hasOwnProperty(currentUnitSystem, key)) {
                if (ret.hasBase(BASE_UNITS[key])) {
                    matchingBase = key;
                    break;
                }
            }
        }
        if (matchingBase === 'NONE') ret.units = [];
        else {
            var matchingUnit;
            if (matchingBase) // Does the unit system have a matching unit?
            {
                if (_objectJs.hasOwnProperty(currentUnitSystem, matchingBase)) matchingUnit = currentUnitSystem[matchingBase];
            }
            if (matchingUnit) ret.units = [
                {
                    unit: matchingUnit.unit,
                    prefix: matchingUnit.prefix,
                    power: 1
                }
            ];
            else {
                // Multiple units or units with powers are formatted like this:
                // 5 (kg m^2) / (s^3 mol)
                // Build an representation from the base units of the current unit system
                var missingBaseDim = false;
                for(var i = 0; i < BASE_DIMENSIONS.length; i++){
                    var baseDim = BASE_DIMENSIONS[i];
                    if (Math.abs(ret.dimensions[i] || 0) > 0.000000000001) {
                        if (_objectJs.hasOwnProperty(currentUnitSystem, baseDim)) proposedUnitList.push({
                            unit: currentUnitSystem[baseDim].unit,
                            prefix: currentUnitSystem[baseDim].prefix,
                            power: ret.dimensions[i] || 0
                        });
                        else missingBaseDim = true;
                    }
                } // Is the proposed unit list "simpler" than the existing one?
                if (proposedUnitList.length < ret.units.length && !missingBaseDim) // Replace this unit list with the proposed list
                ret.units = proposedUnitList;
            }
        }
        return ret;
    };
    /**
   * Returns a new Unit in the SI system with the same value as this one
   */ Unit.prototype.toSI = function() {
        var ret = this.clone();
        var proposedUnitList = []; // Multiple units or units with powers are formatted like this:
        // 5 (kg m^2) / (s^3 mol)
        // Build an representation from the base units of the SI unit system
        for(var i = 0; i < BASE_DIMENSIONS.length; i++){
            var baseDim = BASE_DIMENSIONS[i];
            if (Math.abs(ret.dimensions[i] || 0) > 0.000000000001) {
                if (_objectJs.hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) proposedUnitList.push({
                    unit: UNIT_SYSTEMS.si[baseDim].unit,
                    prefix: UNIT_SYSTEMS.si[baseDim].prefix,
                    power: ret.dimensions[i] || 0
                });
                else throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
            }
        } // Replace this unit list with the proposed list
        ret.units = proposedUnitList;
        ret.fixPrefix = true;
        ret.skipAutomaticSimplification = true;
        return ret;
    };
    /**
   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.
   * @memberof Unit
   * @return {string}
   */ Unit.prototype.formatUnits = function() {
        var strNum = '';
        var strDen = '';
        var nNum = 0;
        var nDen = 0;
        for(var i = 0; i < this.units.length; i++){
            if (this.units[i].power > 0) {
                nNum++;
                strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;
                if (Math.abs(this.units[i].power - 1) > 0.000000000000001) strNum += '^' + this.units[i].power;
            } else if (this.units[i].power < 0) nDen++;
        }
        if (nDen > 0) {
            for(var _i4 = 0; _i4 < this.units.length; _i4++)if (this.units[_i4].power < 0) {
                if (nNum > 0) {
                    strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
                    if (Math.abs(this.units[_i4].power + 1) > 0.000000000000001) strDen += '^' + -this.units[_i4].power;
                } else {
                    strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
                    strDen += '^' + this.units[_i4].power;
                }
            }
        } // Remove leading " "
        strNum = strNum.substr(1);
        strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting
        if (nNum > 1 && nDen > 0) strNum = '(' + strNum + ')';
        if (nDen > 1 && nNum > 0) strDen = '(' + strDen + ')';
        var str = strNum;
        if (nNum > 0 && nDen > 0) str += ' / ';
        str += strDen;
        return str;
    };
    /**
   * Get a string representation of the Unit, with optional formatting options.
   * @memberof Unit
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string}
   */ Unit.prototype.format = function(options) {
        // Simplfy the unit list, unless it is valueless or was created directly in the
        // constructor or as the result of to or toSI
        var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.
        var isImaginary = false;
        if (typeof simp.value !== 'undefined' && simp.value !== null && _isJs.isComplex(simp.value)) // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
        isImaginary = Math.abs(simp.value.re) < 0.00000000000001;
        for(var i in simp.units){
            if (_objectJs.hasOwnProperty(simp.units, i)) {
                if (simp.units[i].unit) {
                    if (simp.units[i].unit.name === 'VA' && isImaginary) simp.units[i].unit = UNITS.VAR;
                    else if (simp.units[i].unit.name === 'VAR' && !isImaginary) simp.units[i].unit = UNITS.VA;
                }
            }
        } // Now apply the best prefix
        // Units must have only one unit and not have the fixPrefix flag set
        if (simp.units.length === 1 && !simp.fixPrefix) // Units must have integer powers, otherwise the prefix will change the
        // outputted value by not-an-integer-power-of-ten
        {
            if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 0.00000000000001) // Apply the best prefix
            simp.units[0].prefix = simp._bestPrefix();
        }
        var value = simp._denormalize(simp.value);
        var str = simp.value !== null ? format(value, options || {
        }) : '';
        var unitStr = simp.formatUnits();
        if (simp.value && _isJs.isComplex(simp.value)) str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
        if (unitStr.length > 0 && str.length > 0) str += ' ';
        str += unitStr;
        return str;
    };
    /**
   * Calculate the best prefix using current value.
   * @memberof Unit
   * @returns {Object} prefix
   * @private
   */ Unit.prototype._bestPrefix = function() {
        if (this.units.length !== 1) throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
        if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 0.00000000000001) throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
         // find the best prefix value (resulting in the value of which
        // the absolute value of the log10 is closest to zero,
        // though with a little offset of 1.2 for nicer values: you get a
        // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
        // Note: the units value can be any numeric type, but to find the best
        // prefix it's enough to work with limited precision of a regular number
        // Update: using mathjs abs since we also allow complex numbers
        var absValue = this.value !== null ? abs(this.value) : 0;
        var absUnitValue = abs(this.units[0].unit.value);
        var bestPrefix = this.units[0].prefix;
        if (absValue === 0) return bestPrefix;
        var power = this.units[0].power;
        var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
        if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix
        bestDiff = Math.abs(bestDiff);
        var prefixes = this.units[0].unit.prefixes;
        for(var p in prefixes)if (_objectJs.hasOwnProperty(prefixes, p)) {
            var prefix = prefixes[p];
            if (prefix.scientific) {
                var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);
                if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
                    // choose the prefix with the smallest diff, or if equal, choose the one
                    // with the shortest name (can happen with SHORTLONG for example)
                    bestPrefix = prefix;
                    bestDiff = diff;
                }
            }
        }
        return bestPrefix;
    };
    /**
   * Returns an array of units whose sum is equal to this unit
   * @memberof Unit
   * @param {Array} [parts] An array of strings or valueless units.
   *
   *   Example:
   *
   *   const u = new Unit(1, 'm')
   *   u.splitUnit(['feet', 'inch'])
   *     [ 3 feet, 3.3700787401575 inch ]
   *
   * @return {Array} An array of units.
   */ Unit.prototype.splitUnit = function(parts) {
        var x = this.clone();
        var ret = [];
        for(var i = 0; i < parts.length; i++){
            // Convert x to the requested unit
            x = x.to(parts[i]);
            if (i === parts.length - 1) break; // Get the numeric value of this unit
            var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,
            // since fix can incorrectly round down if there is round-off error
            var xRounded = round(xNumeric);
            var xFixed = void 0;
            var isNearlyEqual = equal(xRounded, xNumeric);
            if (isNearlyEqual) xFixed = xRounded;
            else xFixed = fix(x.toNumeric());
            var y = new Unit(xFixed, parts[i].toString());
            ret.push(y);
            x = subtract(x, y);
        } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
        // But instead of comparing x, the remainder, with zero--we will compare the sum of
        // all the parts so far with the original value. If they are nearly equal,
        // we set the remainder to 0.
        var testSum = 0;
        for(var _i5 = 0; _i5 < ret.length; _i5++)testSum = addScalar(testSum, ret[_i5].value);
        if (equal(testSum, this.value)) x.value = 0;
        ret.push(x);
        return ret;
    };
    var PREFIXES = {
        NONE: {
            '': {
                name: '',
                value: 1,
                scientific: true
            }
        },
        SHORT: {
            '': {
                name: '',
                value: 1,
                scientific: true
            },
            da: {
                name: 'da',
                value: 10,
                scientific: false
            },
            h: {
                name: 'h',
                value: 100,
                scientific: false
            },
            k: {
                name: 'k',
                value: 1000,
                scientific: true
            },
            M: {
                name: 'M',
                value: 1000000,
                scientific: true
            },
            G: {
                name: 'G',
                value: 1000000000,
                scientific: true
            },
            T: {
                name: 'T',
                value: 1000000000000,
                scientific: true
            },
            P: {
                name: 'P',
                value: 1000000000000000,
                scientific: true
            },
            E: {
                name: 'E',
                value: 1000000000000000000,
                scientific: true
            },
            Z: {
                name: 'Z',
                value: 1000000000000000000000,
                scientific: true
            },
            Y: {
                name: 'Y',
                value: 1000000000000000000000000,
                scientific: true
            },
            d: {
                name: 'd',
                value: 0.1,
                scientific: false
            },
            c: {
                name: 'c',
                value: 0.01,
                scientific: false
            },
            m: {
                name: 'm',
                value: 0.001,
                scientific: true
            },
            u: {
                name: 'u',
                value: 0.000001,
                scientific: true
            },
            n: {
                name: 'n',
                value: 0.000000001,
                scientific: true
            },
            p: {
                name: 'p',
                value: 0.000000000001,
                scientific: true
            },
            f: {
                name: 'f',
                value: 0.000000000000001,
                scientific: true
            },
            a: {
                name: 'a',
                value: 0.000000000000000001,
                scientific: true
            },
            z: {
                name: 'z',
                value: 0.000000000000000000001,
                scientific: true
            },
            y: {
                name: 'y',
                value: 0.000000000000000000000001,
                scientific: true
            }
        },
        LONG: {
            '': {
                name: '',
                value: 1,
                scientific: true
            },
            deca: {
                name: 'deca',
                value: 10,
                scientific: false
            },
            hecto: {
                name: 'hecto',
                value: 100,
                scientific: false
            },
            kilo: {
                name: 'kilo',
                value: 1000,
                scientific: true
            },
            mega: {
                name: 'mega',
                value: 1000000,
                scientific: true
            },
            giga: {
                name: 'giga',
                value: 1000000000,
                scientific: true
            },
            tera: {
                name: 'tera',
                value: 1000000000000,
                scientific: true
            },
            peta: {
                name: 'peta',
                value: 1000000000000000,
                scientific: true
            },
            exa: {
                name: 'exa',
                value: 1000000000000000000,
                scientific: true
            },
            zetta: {
                name: 'zetta',
                value: 1000000000000000000000,
                scientific: true
            },
            yotta: {
                name: 'yotta',
                value: 1000000000000000000000000,
                scientific: true
            },
            deci: {
                name: 'deci',
                value: 0.1,
                scientific: false
            },
            centi: {
                name: 'centi',
                value: 0.01,
                scientific: false
            },
            milli: {
                name: 'milli',
                value: 0.001,
                scientific: true
            },
            micro: {
                name: 'micro',
                value: 0.000001,
                scientific: true
            },
            nano: {
                name: 'nano',
                value: 0.000000001,
                scientific: true
            },
            pico: {
                name: 'pico',
                value: 0.000000000001,
                scientific: true
            },
            femto: {
                name: 'femto',
                value: 0.000000000000001,
                scientific: true
            },
            atto: {
                name: 'atto',
                value: 0.000000000000000001,
                scientific: true
            },
            zepto: {
                name: 'zepto',
                value: 0.000000000000000000001,
                scientific: true
            },
            yocto: {
                name: 'yocto',
                value: 0.000000000000000000000001,
                scientific: true
            }
        },
        SQUARED: {
            '': {
                name: '',
                value: 1,
                scientific: true
            },
            da: {
                name: 'da',
                value: 100,
                scientific: false
            },
            h: {
                name: 'h',
                value: 10000,
                scientific: false
            },
            k: {
                name: 'k',
                value: 1000000,
                scientific: true
            },
            M: {
                name: 'M',
                value: 1000000000000,
                scientific: true
            },
            G: {
                name: 'G',
                value: 1000000000000000000,
                scientific: true
            },
            T: {
                name: 'T',
                value: 1000000000000000000000000,
                scientific: true
            },
            P: {
                name: 'P',
                value: 1000000000000000000000000000000,
                scientific: true
            },
            E: {
                name: 'E',
                value: 1000000000000000000000000000000000000,
                scientific: true
            },
            Z: {
                name: 'Z',
                value: 1000000000000000000000000000000000000000000,
                scientific: true
            },
            Y: {
                name: 'Y',
                value: 1000000000000000000000000000000000000000000000000,
                scientific: true
            },
            d: {
                name: 'd',
                value: 0.01,
                scientific: false
            },
            c: {
                name: 'c',
                value: 0.0001,
                scientific: false
            },
            m: {
                name: 'm',
                value: 0.000001,
                scientific: true
            },
            u: {
                name: 'u',
                value: 0.000000000001,
                scientific: true
            },
            n: {
                name: 'n',
                value: 0.000000000000000001,
                scientific: true
            },
            p: {
                name: 'p',
                value: 0.000000000000000000000001,
                scientific: true
            },
            f: {
                name: 'f',
                value: 0.000000000000000000000000000001,
                scientific: true
            },
            a: {
                name: 'a',
                value: 0.000000000000000000000000000000000001,
                scientific: true
            },
            z: {
                name: 'z',
                value: 0.000000000000000000000000000000000000000001,
                scientific: true
            },
            y: {
                name: 'y',
                value: 0.000000000000000000000000000000000000000000000001,
                scientific: true
            }
        },
        CUBIC: {
            '': {
                name: '',
                value: 1,
                scientific: true
            },
            da: {
                name: 'da',
                value: 1000,
                scientific: false
            },
            h: {
                name: 'h',
                value: 1000000,
                scientific: false
            },
            k: {
                name: 'k',
                value: 1000000000,
                scientific: true
            },
            M: {
                name: 'M',
                value: 1000000000000000000,
                scientific: true
            },
            G: {
                name: 'G',
                value: 1000000000000000000000000000,
                scientific: true
            },
            T: {
                name: 'T',
                value: 1000000000000000000000000000000000000,
                scientific: true
            },
            P: {
                name: 'P',
                value: 1000000000000000000000000000000000000000000000,
                scientific: true
            },
            E: {
                name: 'E',
                value: 1000000000000000000000000000000000000000000000000000000,
                scientific: true
            },
            Z: {
                name: 'Z',
                value: 1000000000000000000000000000000000000000000000000000000000000000,
                scientific: true
            },
            Y: {
                name: 'Y',
                value: 1000000000000000000000000000000000000000000000000000000000000000000000000,
                scientific: true
            },
            d: {
                name: 'd',
                value: 0.001,
                scientific: false
            },
            c: {
                name: 'c',
                value: 0.000001,
                scientific: false
            },
            m: {
                name: 'm',
                value: 0.000000001,
                scientific: true
            },
            u: {
                name: 'u',
                value: 0.000000000000000001,
                scientific: true
            },
            n: {
                name: 'n',
                value: 0.000000000000000000000000001,
                scientific: true
            },
            p: {
                name: 'p',
                value: 0.000000000000000000000000000000000001,
                scientific: true
            },
            f: {
                name: 'f',
                value: 0.000000000000000000000000000000000000000000001,
                scientific: true
            },
            a: {
                name: 'a',
                value: 0.000000000000000000000000000000000000000000000000000001,
                scientific: true
            },
            z: {
                name: 'z',
                value: 0.000000000000000000000000000000000000000000000000000000000000001,
                scientific: true
            },
            y: {
                name: 'y',
                value: 0.000000000000000000000000000000000000000000000000000000000000000000000001,
                scientific: true
            }
        },
        BINARY_SHORT_SI: {
            '': {
                name: '',
                value: 1,
                scientific: true
            },
            k: {
                name: 'k',
                value: 1000,
                scientific: true
            },
            M: {
                name: 'M',
                value: 1000000,
                scientific: true
            },
            G: {
                name: 'G',
                value: 1000000000,
                scientific: true
            },
            T: {
                name: 'T',
                value: 1000000000000,
                scientific: true
            },
            P: {
                name: 'P',
                value: 1000000000000000,
                scientific: true
            },
            E: {
                name: 'E',
                value: 1000000000000000000,
                scientific: true
            },
            Z: {
                name: 'Z',
                value: 1000000000000000000000,
                scientific: true
            },
            Y: {
                name: 'Y',
                value: 1000000000000000000000000,
                scientific: true
            }
        },
        BINARY_SHORT_IEC: {
            '': {
                name: '',
                value: 1,
                scientific: true
            },
            Ki: {
                name: 'Ki',
                value: 1024,
                scientific: true
            },
            Mi: {
                name: 'Mi',
                value: Math.pow(1024, 2),
                scientific: true
            },
            Gi: {
                name: 'Gi',
                value: Math.pow(1024, 3),
                scientific: true
            },
            Ti: {
                name: 'Ti',
                value: Math.pow(1024, 4),
                scientific: true
            },
            Pi: {
                name: 'Pi',
                value: Math.pow(1024, 5),
                scientific: true
            },
            Ei: {
                name: 'Ei',
                value: Math.pow(1024, 6),
                scientific: true
            },
            Zi: {
                name: 'Zi',
                value: Math.pow(1024, 7),
                scientific: true
            },
            Yi: {
                name: 'Yi',
                value: Math.pow(1024, 8),
                scientific: true
            }
        },
        BINARY_LONG_SI: {
            '': {
                name: '',
                value: 1,
                scientific: true
            },
            kilo: {
                name: 'kilo',
                value: 1000,
                scientific: true
            },
            mega: {
                name: 'mega',
                value: 1000000,
                scientific: true
            },
            giga: {
                name: 'giga',
                value: 1000000000,
                scientific: true
            },
            tera: {
                name: 'tera',
                value: 1000000000000,
                scientific: true
            },
            peta: {
                name: 'peta',
                value: 1000000000000000,
                scientific: true
            },
            exa: {
                name: 'exa',
                value: 1000000000000000000,
                scientific: true
            },
            zetta: {
                name: 'zetta',
                value: 1000000000000000000000,
                scientific: true
            },
            yotta: {
                name: 'yotta',
                value: 1000000000000000000000000,
                scientific: true
            }
        },
        BINARY_LONG_IEC: {
            '': {
                name: '',
                value: 1,
                scientific: true
            },
            kibi: {
                name: 'kibi',
                value: 1024,
                scientific: true
            },
            mebi: {
                name: 'mebi',
                value: Math.pow(1024, 2),
                scientific: true
            },
            gibi: {
                name: 'gibi',
                value: Math.pow(1024, 3),
                scientific: true
            },
            tebi: {
                name: 'tebi',
                value: Math.pow(1024, 4),
                scientific: true
            },
            pebi: {
                name: 'pebi',
                value: Math.pow(1024, 5),
                scientific: true
            },
            exi: {
                name: 'exi',
                value: Math.pow(1024, 6),
                scientific: true
            },
            zebi: {
                name: 'zebi',
                value: Math.pow(1024, 7),
                scientific: true
            },
            yobi: {
                name: 'yobi',
                value: Math.pow(1024, 8),
                scientific: true
            }
        },
        BTU: {
            '': {
                name: '',
                value: 1,
                scientific: true
            },
            MM: {
                name: 'MM',
                value: 1000000,
                scientific: true
            }
        }
    };
    PREFIXES.SHORTLONG = _extendsDefault.default({
    }, PREFIXES.SHORT, PREFIXES.LONG);
    PREFIXES.BINARY_SHORT = _extendsDefault.default({
    }, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);
    PREFIXES.BINARY_LONG = _extendsDefault.default({
    }, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);
    /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
   * Index  Dimension
   * -----  ---------
   *   0    Length
   *   1    Mass
   *   2    Time
   *   3    Current
   *   4    Temperature
   *   5    Luminous intensity
   *   6    Amount of substance
   *   7    Angle
   *   8    Bit (digital)
   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
   *
   */ var BASE_DIMENSIONS = [
        'MASS',
        'LENGTH',
        'TIME',
        'CURRENT',
        'TEMPERATURE',
        'LUMINOUS_INTENSITY',
        'AMOUNT_OF_SUBSTANCE',
        'ANGLE',
        'BIT'
    ];
    var BASE_UNITS = {
        NONE: {
            dimensions: [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        MASS: {
            dimensions: [
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        LENGTH: {
            dimensions: [
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        TIME: {
            dimensions: [
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        CURRENT: {
            dimensions: [
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        TEMPERATURE: {
            dimensions: [
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0
            ]
        },
        LUMINOUS_INTENSITY: {
            dimensions: [
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0
            ]
        },
        AMOUNT_OF_SUBSTANCE: {
            dimensions: [
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0
            ]
        },
        FORCE: {
            dimensions: [
                1,
                1,
                -2,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        SURFACE: {
            dimensions: [
                0,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        VOLUME: {
            dimensions: [
                0,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        ENERGY: {
            dimensions: [
                1,
                2,
                -2,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        POWER: {
            dimensions: [
                1,
                2,
                -3,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        PRESSURE: {
            dimensions: [
                1,
                -1,
                -2,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        ELECTRIC_CHARGE: {
            dimensions: [
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        ELECTRIC_CAPACITANCE: {
            dimensions: [
                -1,
                -2,
                4,
                2,
                0,
                0,
                0,
                0,
                0
            ]
        },
        ELECTRIC_POTENTIAL: {
            dimensions: [
                1,
                2,
                -3,
                -1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        ELECTRIC_RESISTANCE: {
            dimensions: [
                1,
                2,
                -3,
                -2,
                0,
                0,
                0,
                0,
                0
            ]
        },
        ELECTRIC_INDUCTANCE: {
            dimensions: [
                1,
                2,
                -2,
                -2,
                0,
                0,
                0,
                0,
                0
            ]
        },
        ELECTRIC_CONDUCTANCE: {
            dimensions: [
                -1,
                -2,
                3,
                2,
                0,
                0,
                0,
                0,
                0
            ]
        },
        MAGNETIC_FLUX: {
            dimensions: [
                1,
                2,
                -2,
                -1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        MAGNETIC_FLUX_DENSITY: {
            dimensions: [
                1,
                0,
                -2,
                -1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        FREQUENCY: {
            dimensions: [
                0,
                0,
                -1,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        ANGLE: {
            dimensions: [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0
            ]
        },
        BIT: {
            dimensions: [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    };
    for(var key1 in BASE_UNITS)if (_objectJs.hasOwnProperty(BASE_UNITS, key1)) BASE_UNITS[key1].key = key1;
    var BASE_UNIT_NONE = {
    };
    var UNIT_NONE = {
        name: '',
        base: BASE_UNIT_NONE,
        value: 1,
        offset: 0,
        dimensions: BASE_DIMENSIONS.map((x)=>0
        )
    };
    var UNITS = {
        // length
        meter: {
            name: 'meter',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        inch: {
            name: 'inch',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.0254,
            offset: 0
        },
        foot: {
            name: 'foot',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.3048,
            offset: 0
        },
        yard: {
            name: 'yard',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.9144,
            offset: 0
        },
        mile: {
            name: 'mile',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 1609.344,
            offset: 0
        },
        link: {
            name: 'link',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.201168,
            offset: 0
        },
        rod: {
            name: 'rod',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 5.0292,
            offset: 0
        },
        chain: {
            name: 'chain',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 20.1168,
            offset: 0
        },
        angstrom: {
            name: 'angstrom',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.0000000001,
            offset: 0
        },
        m: {
            name: 'm',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        in: {
            name: 'in',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.0254,
            offset: 0
        },
        ft: {
            name: 'ft',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.3048,
            offset: 0
        },
        yd: {
            name: 'yd',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.9144,
            offset: 0
        },
        mi: {
            name: 'mi',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 1609.344,
            offset: 0
        },
        li: {
            name: 'li',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.201168,
            offset: 0
        },
        rd: {
            name: 'rd',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 5.02921,
            offset: 0
        },
        ch: {
            name: 'ch',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 20.1168,
            offset: 0
        },
        mil: {
            name: 'mil',
            base: BASE_UNITS.LENGTH,
            prefixes: PREFIXES.NONE,
            value: 0.0000254,
            offset: 0
        },
        // 1/1000 inch
        // Surface
        m2: {
            name: 'm2',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.SQUARED,
            value: 1,
            offset: 0
        },
        sqin: {
            name: 'sqin',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.NONE,
            value: 0.00064516,
            offset: 0
        },
        // 645.16 mm2
        sqft: {
            name: 'sqft',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.NONE,
            value: 0.09290304,
            offset: 0
        },
        // 0.09290304 m2
        sqyd: {
            name: 'sqyd',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.NONE,
            value: 0.83612736,
            offset: 0
        },
        // 0.83612736 m2
        sqmi: {
            name: 'sqmi',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.NONE,
            value: 2589988.110336,
            offset: 0
        },
        // 2.589988110336 km2
        sqrd: {
            name: 'sqrd',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.NONE,
            value: 25.29295,
            offset: 0
        },
        // 25.29295 m2
        sqch: {
            name: 'sqch',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.NONE,
            value: 404.6873,
            offset: 0
        },
        // 404.6873 m2
        sqmil: {
            name: 'sqmil',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.NONE,
            value: 0.00000000064516,
            offset: 0
        },
        // 6.4516 * 10^-10 m2
        acre: {
            name: 'acre',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.NONE,
            value: 4046.86,
            offset: 0
        },
        // 4046.86 m2
        hectare: {
            name: 'hectare',
            base: BASE_UNITS.SURFACE,
            prefixes: PREFIXES.NONE,
            value: 10000,
            offset: 0
        },
        // 10000 m2
        // Volume
        m3: {
            name: 'm3',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.CUBIC,
            value: 1,
            offset: 0
        },
        L: {
            name: 'L',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.SHORT,
            value: 0.001,
            offset: 0
        },
        // litre
        l: {
            name: 'l',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.SHORT,
            value: 0.001,
            offset: 0
        },
        // litre
        litre: {
            name: 'litre',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.LONG,
            value: 0.001,
            offset: 0
        },
        cuin: {
            name: 'cuin',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.000016387064,
            offset: 0
        },
        // 1.6387064e-5 m3
        cuft: {
            name: 'cuft',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.028316846592,
            offset: 0
        },
        // 28.316 846 592 L
        cuyd: {
            name: 'cuyd',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.764554857984,
            offset: 0
        },
        // 764.554 857 984 L
        teaspoon: {
            name: 'teaspoon',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.000005,
            offset: 0
        },
        // 5 mL
        tablespoon: {
            name: 'tablespoon',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.000015,
            offset: 0
        },
        // 15 mL
        // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
        drop: {
            name: 'drop',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.00000005,
            offset: 0
        },
        // 0.05 mL = 5e-8 m3
        gtt: {
            name: 'gtt',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.00000005,
            offset: 0
        },
        // 0.05 mL = 5e-8 m3
        // Liquid volume
        minim: {
            name: 'minim',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.00000006161152,
            offset: 0
        },
        // 0.06161152 mL
        fluiddram: {
            name: 'fluiddram',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0000036966911,
            offset: 0
        },
        // 3.696691 mL
        fluidounce: {
            name: 'fluidounce',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.00002957353,
            offset: 0
        },
        // 29.57353 mL
        gill: {
            name: 'gill',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0001182941,
            offset: 0
        },
        // 118.2941 mL
        cc: {
            name: 'cc',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.000001,
            offset: 0
        },
        // 1e-6 L
        cup: {
            name: 'cup',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0002365882,
            offset: 0
        },
        // 236.5882 mL
        pint: {
            name: 'pint',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0004731765,
            offset: 0
        },
        // 473.1765 mL
        quart: {
            name: 'quart',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0009463529,
            offset: 0
        },
        // 946.3529 mL
        gallon: {
            name: 'gallon',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.003785412,
            offset: 0
        },
        // 3.785412 L
        beerbarrel: {
            name: 'beerbarrel',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.1173478,
            offset: 0
        },
        // 117.3478 L
        oilbarrel: {
            name: 'oilbarrel',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.1589873,
            offset: 0
        },
        // 158.9873 L
        hogshead: {
            name: 'hogshead',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.238481,
            offset: 0
        },
        // 238.4810 L
        // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
        fldr: {
            name: 'fldr',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0000036966911,
            offset: 0
        },
        // 3.696691 mL
        floz: {
            name: 'floz',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.00002957353,
            offset: 0
        },
        // 29.57353 mL
        gi: {
            name: 'gi',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0001182941,
            offset: 0
        },
        // 118.2941 mL
        cp: {
            name: 'cp',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0002365882,
            offset: 0
        },
        // 236.5882 mL
        pt: {
            name: 'pt',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0004731765,
            offset: 0
        },
        // 473.1765 mL
        qt: {
            name: 'qt',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.0009463529,
            offset: 0
        },
        // 946.3529 mL
        gal: {
            name: 'gal',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.003785412,
            offset: 0
        },
        // 3.785412 L
        bbl: {
            name: 'bbl',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.1173478,
            offset: 0
        },
        // 117.3478 L
        obl: {
            name: 'obl',
            base: BASE_UNITS.VOLUME,
            prefixes: PREFIXES.NONE,
            value: 0.1589873,
            offset: 0
        },
        // 158.9873 L
        // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
        // Mass
        g: {
            name: 'g',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.SHORT,
            value: 0.001,
            offset: 0
        },
        gram: {
            name: 'gram',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.LONG,
            value: 0.001,
            offset: 0
        },
        ton: {
            name: 'ton',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.SHORT,
            value: 907.18474,
            offset: 0
        },
        t: {
            name: 't',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.SHORT,
            value: 1000,
            offset: 0
        },
        tonne: {
            name: 'tonne',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.LONG,
            value: 1000,
            offset: 0
        },
        grain: {
            name: 'grain',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 0.00006479891,
            offset: 0
        },
        dram: {
            name: 'dram',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 0.0017718451953125,
            offset: 0
        },
        ounce: {
            name: 'ounce',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 0.028349523125,
            offset: 0
        },
        poundmass: {
            name: 'poundmass',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 0.45359237,
            offset: 0
        },
        hundredweight: {
            name: 'hundredweight',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 45.359237,
            offset: 0
        },
        stick: {
            name: 'stick',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 0.115,
            offset: 0
        },
        stone: {
            name: 'stone',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 6.35029318,
            offset: 0
        },
        gr: {
            name: 'gr',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 0.00006479891,
            offset: 0
        },
        dr: {
            name: 'dr',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 0.0017718451953125,
            offset: 0
        },
        oz: {
            name: 'oz',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 0.028349523125,
            offset: 0
        },
        lbm: {
            name: 'lbm',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 0.45359237,
            offset: 0
        },
        cwt: {
            name: 'cwt',
            base: BASE_UNITS.MASS,
            prefixes: PREFIXES.NONE,
            value: 45.359237,
            offset: 0
        },
        // Time
        s: {
            name: 's',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        min: {
            name: 'min',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 60,
            offset: 0
        },
        h: {
            name: 'h',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 3600,
            offset: 0
        },
        second: {
            name: 'second',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        sec: {
            name: 'sec',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        minute: {
            name: 'minute',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 60,
            offset: 0
        },
        hour: {
            name: 'hour',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 3600,
            offset: 0
        },
        day: {
            name: 'day',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 86400,
            offset: 0
        },
        week: {
            name: 'week',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 604800,
            offset: 0
        },
        month: {
            name: 'month',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 2629800,
            // 1/12th of Julian year
            offset: 0
        },
        year: {
            name: 'year',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 31557600,
            // Julian year
            offset: 0
        },
        decade: {
            name: 'decade',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 315576000,
            // Julian decade
            offset: 0
        },
        century: {
            name: 'century',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 3155760000,
            // Julian century
            offset: 0
        },
        millennium: {
            name: 'millennium',
            base: BASE_UNITS.TIME,
            prefixes: PREFIXES.NONE,
            value: 31557600000,
            // Julian millennium
            offset: 0
        },
        // Frequency
        hertz: {
            name: 'Hertz',
            base: BASE_UNITS.FREQUENCY,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0,
            reciprocal: true
        },
        Hz: {
            name: 'Hz',
            base: BASE_UNITS.FREQUENCY,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0,
            reciprocal: true
        },
        // Angle
        rad: {
            name: 'rad',
            base: BASE_UNITS.ANGLE,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        radian: {
            name: 'radian',
            base: BASE_UNITS.ANGLE,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
        deg: {
            name: 'deg',
            base: BASE_UNITS.ANGLE,
            prefixes: PREFIXES.SHORT,
            value: null,
            // will be filled in by calculateAngleValues()
            offset: 0
        },
        degree: {
            name: 'degree',
            base: BASE_UNITS.ANGLE,
            prefixes: PREFIXES.LONG,
            value: null,
            // will be filled in by calculateAngleValues()
            offset: 0
        },
        // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
        grad: {
            name: 'grad',
            base: BASE_UNITS.ANGLE,
            prefixes: PREFIXES.SHORT,
            value: null,
            // will be filled in by calculateAngleValues()
            offset: 0
        },
        gradian: {
            name: 'gradian',
            base: BASE_UNITS.ANGLE,
            prefixes: PREFIXES.LONG,
            value: null,
            // will be filled in by calculateAngleValues()
            offset: 0
        },
        // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
        cycle: {
            name: 'cycle',
            base: BASE_UNITS.ANGLE,
            prefixes: PREFIXES.NONE,
            value: null,
            // will be filled in by calculateAngleValues()
            offset: 0
        },
        // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
        arcsec: {
            name: 'arcsec',
            base: BASE_UNITS.ANGLE,
            prefixes: PREFIXES.NONE,
            value: null,
            // will be filled in by calculateAngleValues()
            offset: 0
        },
        // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
        arcmin: {
            name: 'arcmin',
            base: BASE_UNITS.ANGLE,
            prefixes: PREFIXES.NONE,
            value: null,
            // will be filled in by calculateAngleValues()
            offset: 0
        },
        // Electric current
        A: {
            name: 'A',
            base: BASE_UNITS.CURRENT,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        ampere: {
            name: 'ampere',
            base: BASE_UNITS.CURRENT,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        // Temperature
        // K(C) = °C + 273.15
        // K(F) = (°F + 459.67) / 1.8
        // K(R) = °R / 1.8
        K: {
            name: 'K',
            base: BASE_UNITS.TEMPERATURE,
            prefixes: PREFIXES.NONE,
            value: 1,
            offset: 0
        },
        degC: {
            name: 'degC',
            base: BASE_UNITS.TEMPERATURE,
            prefixes: PREFIXES.NONE,
            value: 1,
            offset: 273.15
        },
        degF: {
            name: 'degF',
            base: BASE_UNITS.TEMPERATURE,
            prefixes: PREFIXES.NONE,
            value: 1 / 1.8,
            offset: 459.67
        },
        degR: {
            name: 'degR',
            base: BASE_UNITS.TEMPERATURE,
            prefixes: PREFIXES.NONE,
            value: 1 / 1.8,
            offset: 0
        },
        kelvin: {
            name: 'kelvin',
            base: BASE_UNITS.TEMPERATURE,
            prefixes: PREFIXES.NONE,
            value: 1,
            offset: 0
        },
        celsius: {
            name: 'celsius',
            base: BASE_UNITS.TEMPERATURE,
            prefixes: PREFIXES.NONE,
            value: 1,
            offset: 273.15
        },
        fahrenheit: {
            name: 'fahrenheit',
            base: BASE_UNITS.TEMPERATURE,
            prefixes: PREFIXES.NONE,
            value: 1 / 1.8,
            offset: 459.67
        },
        rankine: {
            name: 'rankine',
            base: BASE_UNITS.TEMPERATURE,
            prefixes: PREFIXES.NONE,
            value: 1 / 1.8,
            offset: 0
        },
        // amount of substance
        mol: {
            name: 'mol',
            base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        mole: {
            name: 'mole',
            base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        // luminous intensity
        cd: {
            name: 'cd',
            base: BASE_UNITS.LUMINOUS_INTENSITY,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        candela: {
            name: 'candela',
            base: BASE_UNITS.LUMINOUS_INTENSITY,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        // TODO: units STERADIAN
        // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
        // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
        // Force
        N: {
            name: 'N',
            base: BASE_UNITS.FORCE,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        newton: {
            name: 'newton',
            base: BASE_UNITS.FORCE,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        dyn: {
            name: 'dyn',
            base: BASE_UNITS.FORCE,
            prefixes: PREFIXES.SHORT,
            value: 0.00001,
            offset: 0
        },
        dyne: {
            name: 'dyne',
            base: BASE_UNITS.FORCE,
            prefixes: PREFIXES.LONG,
            value: 0.00001,
            offset: 0
        },
        lbf: {
            name: 'lbf',
            base: BASE_UNITS.FORCE,
            prefixes: PREFIXES.NONE,
            value: 4.4482216152605,
            offset: 0
        },
        poundforce: {
            name: 'poundforce',
            base: BASE_UNITS.FORCE,
            prefixes: PREFIXES.NONE,
            value: 4.4482216152605,
            offset: 0
        },
        kip: {
            name: 'kip',
            base: BASE_UNITS.FORCE,
            prefixes: PREFIXES.LONG,
            value: 4448.2216,
            offset: 0
        },
        kilogramforce: {
            name: 'kilogramforce',
            base: BASE_UNITS.FORCE,
            prefixes: PREFIXES.NONE,
            value: 9.80665,
            offset: 0
        },
        // Energy
        J: {
            name: 'J',
            base: BASE_UNITS.ENERGY,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        joule: {
            name: 'joule',
            base: BASE_UNITS.ENERGY,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        erg: {
            name: 'erg',
            base: BASE_UNITS.ENERGY,
            prefixes: PREFIXES.NONE,
            value: 0.0000001,
            offset: 0
        },
        Wh: {
            name: 'Wh',
            base: BASE_UNITS.ENERGY,
            prefixes: PREFIXES.SHORT,
            value: 3600,
            offset: 0
        },
        BTU: {
            name: 'BTU',
            base: BASE_UNITS.ENERGY,
            prefixes: PREFIXES.BTU,
            value: 1055.05585262,
            offset: 0
        },
        eV: {
            name: 'eV',
            base: BASE_UNITS.ENERGY,
            prefixes: PREFIXES.SHORT,
            value: 0.0000000000000000001602176565,
            offset: 0
        },
        electronvolt: {
            name: 'electronvolt',
            base: BASE_UNITS.ENERGY,
            prefixes: PREFIXES.LONG,
            value: 0.0000000000000000001602176565,
            offset: 0
        },
        // Power
        W: {
            name: 'W',
            base: BASE_UNITS.POWER,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        watt: {
            name: 'watt',
            base: BASE_UNITS.POWER,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        hp: {
            name: 'hp',
            base: BASE_UNITS.POWER,
            prefixes: PREFIXES.NONE,
            value: 745.6998715386,
            offset: 0
        },
        // Electrical power units
        VAR: {
            name: 'VAR',
            base: BASE_UNITS.POWER,
            prefixes: PREFIXES.SHORT,
            value: Complex.I,
            offset: 0
        },
        VA: {
            name: 'VA',
            base: BASE_UNITS.POWER,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        // Pressure
        Pa: {
            name: 'Pa',
            base: BASE_UNITS.PRESSURE,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        psi: {
            name: 'psi',
            base: BASE_UNITS.PRESSURE,
            prefixes: PREFIXES.NONE,
            value: 6894.75729276459,
            offset: 0
        },
        atm: {
            name: 'atm',
            base: BASE_UNITS.PRESSURE,
            prefixes: PREFIXES.NONE,
            value: 101325,
            offset: 0
        },
        bar: {
            name: 'bar',
            base: BASE_UNITS.PRESSURE,
            prefixes: PREFIXES.SHORTLONG,
            value: 100000,
            offset: 0
        },
        torr: {
            name: 'torr',
            base: BASE_UNITS.PRESSURE,
            prefixes: PREFIXES.NONE,
            value: 133.322,
            offset: 0
        },
        mmHg: {
            name: 'mmHg',
            base: BASE_UNITS.PRESSURE,
            prefixes: PREFIXES.NONE,
            value: 133.322,
            offset: 0
        },
        mmH2O: {
            name: 'mmH2O',
            base: BASE_UNITS.PRESSURE,
            prefixes: PREFIXES.NONE,
            value: 9.80665,
            offset: 0
        },
        cmH2O: {
            name: 'cmH2O',
            base: BASE_UNITS.PRESSURE,
            prefixes: PREFIXES.NONE,
            value: 98.0665,
            offset: 0
        },
        // Electric charge
        coulomb: {
            name: 'coulomb',
            base: BASE_UNITS.ELECTRIC_CHARGE,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        C: {
            name: 'C',
            base: BASE_UNITS.ELECTRIC_CHARGE,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        // Electric capacitance
        farad: {
            name: 'farad',
            base: BASE_UNITS.ELECTRIC_CAPACITANCE,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        F: {
            name: 'F',
            base: BASE_UNITS.ELECTRIC_CAPACITANCE,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        // Electric potential
        volt: {
            name: 'volt',
            base: BASE_UNITS.ELECTRIC_POTENTIAL,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        V: {
            name: 'V',
            base: BASE_UNITS.ELECTRIC_POTENTIAL,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        // Electric resistance
        ohm: {
            name: 'ohm',
            base: BASE_UNITS.ELECTRIC_RESISTANCE,
            prefixes: PREFIXES.SHORTLONG,
            // Both Mohm and megaohm are acceptable
            value: 1,
            offset: 0
        },
        /*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */ // Electric inductance
        henry: {
            name: 'henry',
            base: BASE_UNITS.ELECTRIC_INDUCTANCE,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        H: {
            name: 'H',
            base: BASE_UNITS.ELECTRIC_INDUCTANCE,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        // Electric conductance
        siemens: {
            name: 'siemens',
            base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        S: {
            name: 'S',
            base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        // Magnetic flux
        weber: {
            name: 'weber',
            base: BASE_UNITS.MAGNETIC_FLUX,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        Wb: {
            name: 'Wb',
            base: BASE_UNITS.MAGNETIC_FLUX,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        // Magnetic flux density
        tesla: {
            name: 'tesla',
            base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
            prefixes: PREFIXES.LONG,
            value: 1,
            offset: 0
        },
        T: {
            name: 'T',
            base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
            prefixes: PREFIXES.SHORT,
            value: 1,
            offset: 0
        },
        // Binary
        b: {
            name: 'b',
            base: BASE_UNITS.BIT,
            prefixes: PREFIXES.BINARY_SHORT,
            value: 1,
            offset: 0
        },
        bits: {
            name: 'bits',
            base: BASE_UNITS.BIT,
            prefixes: PREFIXES.BINARY_LONG,
            value: 1,
            offset: 0
        },
        B: {
            name: 'B',
            base: BASE_UNITS.BIT,
            prefixes: PREFIXES.BINARY_SHORT,
            value: 8,
            offset: 0
        },
        bytes: {
            name: 'bytes',
            base: BASE_UNITS.BIT,
            prefixes: PREFIXES.BINARY_LONG,
            value: 8,
            offset: 0
        }
    }; // aliases (formerly plurals)
    var ALIASES = {
        meters: 'meter',
        inches: 'inch',
        feet: 'foot',
        yards: 'yard',
        miles: 'mile',
        links: 'link',
        rods: 'rod',
        chains: 'chain',
        angstroms: 'angstrom',
        lt: 'l',
        litres: 'litre',
        liter: 'litre',
        liters: 'litre',
        teaspoons: 'teaspoon',
        tablespoons: 'tablespoon',
        minims: 'minim',
        fluiddrams: 'fluiddram',
        fluidounces: 'fluidounce',
        gills: 'gill',
        cups: 'cup',
        pints: 'pint',
        quarts: 'quart',
        gallons: 'gallon',
        beerbarrels: 'beerbarrel',
        oilbarrels: 'oilbarrel',
        hogsheads: 'hogshead',
        gtts: 'gtt',
        grams: 'gram',
        tons: 'ton',
        tonnes: 'tonne',
        grains: 'grain',
        drams: 'dram',
        ounces: 'ounce',
        poundmasses: 'poundmass',
        hundredweights: 'hundredweight',
        sticks: 'stick',
        lb: 'lbm',
        lbs: 'lbm',
        kips: 'kip',
        kgf: 'kilogramforce',
        acres: 'acre',
        hectares: 'hectare',
        sqfeet: 'sqft',
        sqyard: 'sqyd',
        sqmile: 'sqmi',
        sqmiles: 'sqmi',
        mmhg: 'mmHg',
        mmh2o: 'mmH2O',
        cmh2o: 'cmH2O',
        seconds: 'second',
        secs: 'second',
        minutes: 'minute',
        mins: 'minute',
        hours: 'hour',
        hr: 'hour',
        hrs: 'hour',
        days: 'day',
        weeks: 'week',
        months: 'month',
        years: 'year',
        decades: 'decade',
        centuries: 'century',
        millennia: 'millennium',
        hertz: 'hertz',
        radians: 'radian',
        degrees: 'degree',
        gradians: 'gradian',
        cycles: 'cycle',
        arcsecond: 'arcsec',
        arcseconds: 'arcsec',
        arcminute: 'arcmin',
        arcminutes: 'arcmin',
        BTUs: 'BTU',
        watts: 'watt',
        joules: 'joule',
        amperes: 'ampere',
        coulombs: 'coulomb',
        volts: 'volt',
        ohms: 'ohm',
        farads: 'farad',
        webers: 'weber',
        teslas: 'tesla',
        electronvolts: 'electronvolt',
        moles: 'mole',
        bit: 'bits',
        byte: 'bytes'
    };
    /**
   * Calculate the values for the angle units.
   * Value is calculated as number or BigNumber depending on the configuration
   * @param {{number: 'number' | 'BigNumber'}} config
   */ function calculateAngleValues(config) {
        if (config.number === 'BigNumber') {
            var pi = _constantsJs.createBigNumberPi(_BigNumber);
            UNITS.rad.value = new _BigNumber(1);
            UNITS.deg.value = pi.div(180); // 2 * pi / 360
            UNITS.grad.value = pi.div(200); // 2 * pi / 400
            UNITS.cycle.value = pi.times(2); // 2 * pi
            UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600
            UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
        } else {
            // number
            UNITS.rad.value = 1;
            UNITS.deg.value = Math.PI / 180; // 2 * pi / 360
            UNITS.grad.value = Math.PI / 200; // 2 * pi / 400
            UNITS.cycle.value = Math.PI * 2; // 2 * pi
            UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600
            UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
        } // copy to the full names of the angles
        UNITS.radian.value = UNITS.rad.value;
        UNITS.degree.value = UNITS.deg.value;
        UNITS.gradian.value = UNITS.grad.value;
    } // apply the angle values now
    calculateAngleValues(config1);
    if (on) // recalculate the values on change of configuration
    on('config', function(curr, prev) {
        if (curr.number !== prev.number) calculateAngleValues(curr);
    });
    /**
   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
   */ var UNIT_SYSTEMS = {
        si: {
            // Base units
            NONE: {
                unit: UNIT_NONE,
                prefix: PREFIXES.NONE['']
            },
            LENGTH: {
                unit: UNITS.m,
                prefix: PREFIXES.SHORT['']
            },
            MASS: {
                unit: UNITS.g,
                prefix: PREFIXES.SHORT.k
            },
            TIME: {
                unit: UNITS.s,
                prefix: PREFIXES.SHORT['']
            },
            CURRENT: {
                unit: UNITS.A,
                prefix: PREFIXES.SHORT['']
            },
            TEMPERATURE: {
                unit: UNITS.K,
                prefix: PREFIXES.SHORT['']
            },
            LUMINOUS_INTENSITY: {
                unit: UNITS.cd,
                prefix: PREFIXES.SHORT['']
            },
            AMOUNT_OF_SUBSTANCE: {
                unit: UNITS.mol,
                prefix: PREFIXES.SHORT['']
            },
            ANGLE: {
                unit: UNITS.rad,
                prefix: PREFIXES.SHORT['']
            },
            BIT: {
                unit: UNITS.bits,
                prefix: PREFIXES.SHORT['']
            },
            // Derived units
            FORCE: {
                unit: UNITS.N,
                prefix: PREFIXES.SHORT['']
            },
            ENERGY: {
                unit: UNITS.J,
                prefix: PREFIXES.SHORT['']
            },
            POWER: {
                unit: UNITS.W,
                prefix: PREFIXES.SHORT['']
            },
            PRESSURE: {
                unit: UNITS.Pa,
                prefix: PREFIXES.SHORT['']
            },
            ELECTRIC_CHARGE: {
                unit: UNITS.C,
                prefix: PREFIXES.SHORT['']
            },
            ELECTRIC_CAPACITANCE: {
                unit: UNITS.F,
                prefix: PREFIXES.SHORT['']
            },
            ELECTRIC_POTENTIAL: {
                unit: UNITS.V,
                prefix: PREFIXES.SHORT['']
            },
            ELECTRIC_RESISTANCE: {
                unit: UNITS.ohm,
                prefix: PREFIXES.SHORT['']
            },
            ELECTRIC_INDUCTANCE: {
                unit: UNITS.H,
                prefix: PREFIXES.SHORT['']
            },
            ELECTRIC_CONDUCTANCE: {
                unit: UNITS.S,
                prefix: PREFIXES.SHORT['']
            },
            MAGNETIC_FLUX: {
                unit: UNITS.Wb,
                prefix: PREFIXES.SHORT['']
            },
            MAGNETIC_FLUX_DENSITY: {
                unit: UNITS.T,
                prefix: PREFIXES.SHORT['']
            },
            FREQUENCY: {
                unit: UNITS.Hz,
                prefix: PREFIXES.SHORT['']
            }
        }
    }; // Clone to create the other unit systems
    UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
    UNIT_SYSTEMS.cgs.LENGTH = {
        unit: UNITS.m,
        prefix: PREFIXES.SHORT.c
    };
    UNIT_SYSTEMS.cgs.MASS = {
        unit: UNITS.g,
        prefix: PREFIXES.SHORT['']
    };
    UNIT_SYSTEMS.cgs.FORCE = {
        unit: UNITS.dyn,
        prefix: PREFIXES.SHORT['']
    };
    UNIT_SYSTEMS.cgs.ENERGY = {
        unit: UNITS.erg,
        prefix: PREFIXES.NONE['']
    }; // there are wholly 4 unique cgs systems for electricity and magnetism,
    // so let's not worry about it unless somebody complains
    UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
    UNIT_SYSTEMS.us.LENGTH = {
        unit: UNITS.ft,
        prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.MASS = {
        unit: UNITS.lbm,
        prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.TEMPERATURE = {
        unit: UNITS.degF,
        prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.FORCE = {
        unit: UNITS.lbf,
        prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.ENERGY = {
        unit: UNITS.BTU,
        prefix: PREFIXES.BTU['']
    };
    UNIT_SYSTEMS.us.POWER = {
        unit: UNITS.hp,
        prefix: PREFIXES.NONE['']
    };
    UNIT_SYSTEMS.us.PRESSURE = {
        unit: UNITS.psi,
        prefix: PREFIXES.NONE['']
    }; // Add additional unit systems here.
    // Choose a unit system to seed the auto unit system.
    UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system
    var currentUnitSystem = UNIT_SYSTEMS.auto;
    /**
   * Set a unit system for formatting derived units.
   * @param {string} [name] The name of the unit system.
   */ Unit.setUnitSystem = function(name) {
        if (_objectJs.hasOwnProperty(UNIT_SYSTEMS, name)) currentUnitSystem = UNIT_SYSTEMS[name];
        else throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
    };
    /**
   * Return the current unit system.
   * @return {string} The current unit system.
   */ Unit.getUnitSystem = function() {
        for(var _key in UNIT_SYSTEMS)if (_objectJs.hasOwnProperty(UNIT_SYSTEMS, _key)) {
            if (UNIT_SYSTEMS[_key] === currentUnitSystem) return _key;
        }
    };
    /**
   * Converters to convert from number to an other numeric type like BigNumber
   * or Fraction
   */ Unit.typeConverters = {
        BigNumber: function BigNumber(x) {
            return new _BigNumber(x + ''); // stringify to prevent constructor error
        },
        Fraction: function Fraction(x) {
            return new _Fraction(x);
        },
        Complex: function Complex(x) {
            return x;
        },
        number: function number(x) {
            return x;
        }
    };
    /**
   * Retrieve the right convertor function corresponding with the type
   * of provided exampleValue.
   *
   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
   *                        In case of an unknown type,
   * @return {Function}
   */ Unit._getNumberConverter = function(type) {
        if (!Unit.typeConverters[type]) throw new TypeError('Unsupported type "' + type + '"');
        return Unit.typeConverters[type];
    }; // Add dimensions to each built-in unit
    for(var _key2 in UNITS)if (_objectJs.hasOwnProperty(UNITS, _key2)) {
        var unit1 = UNITS[_key2];
        unit1.dimensions = unit1.base.dimensions;
    }
     // Create aliases
    for(var _name2 in ALIASES)if (_objectJs.hasOwnProperty(ALIASES, _name2)) {
        var _unit2 = UNITS[ALIASES[_name2]];
        var alias = {
        };
        for(var _key3 in _unit2)if (_objectJs.hasOwnProperty(_unit2, _key3)) alias[_key3] = _unit2[_key3];
        alias.name = _name2;
        UNITS[_name2] = alias;
    }
    /**
   * Checks if a character is a valid latin letter (upper or lower case).
   * Note that this function can be overridden, for example to allow support of other alphabets.
   * @param {string} c Tested character
   */ Unit.isValidAlpha = function isValidAlpha(c) {
        return /^[a-zA-Z]$/.test(c);
    };
    function assertUnitNameIsValid(name) {
        for(var i = 0; i < name.length; i++){
            c1 = name.charAt(i);
            if (i === 0 && !Unit.isValidAlpha(c1)) throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
            if (i > 0 && !(Unit.isValidAlpha(c1) || isDigit(c1))) throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
        }
    }
    /**
   * Wrapper around createUnitSingle.
   * Example:
   *  createUnit({
   *    foo: { },
   *    bar: {
   *      definition: 'kg/foo',
   *      aliases: ['ba', 'barr', 'bars'],
   *      offset: 200
   *    },
   *    baz: '4 bar'
   *  },
   *  {
   *    override: true
   *  })
   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
   * @param {object} options
   */ Unit.createUnit = function(obj, options) {
        if (typeof obj !== 'object') throw new TypeError("createUnit expects first parameter to be of type 'Object'");
         // Remove all units and aliases we are overriding
        if (options && options.override) for(var _key4 in obj){
            if (_objectJs.hasOwnProperty(obj, _key4)) Unit.deleteUnit(_key4);
            if (obj[_key4].aliases) for(var i = 0; i < obj[_key4].aliases.length; i++)Unit.deleteUnit(obj[_key4].aliases[i]);
        }
         // TODO: traverse multiple times until all units have been added
        var lastUnit;
        for(var _key5 in obj)if (_objectJs.hasOwnProperty(obj, _key5)) lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);
        return lastUnit;
    };
    /**
   * Create a user-defined unit and register it with the Unit type.
   * Example:
   *  createUnitSingle('knot', '0.514444444 m/s')
   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit, Object} definition      Definition of the unit in terms
   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,
   * or an Object. If an Object, may have the following properties:
   *   - definition {string|Unit} The definition of this unit.
   *   - prefixes {string} "none", "short", "long", "binary_short", or "binary_long".
   *     The default is "none".
   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *   - offset {Numeric} An offset to apply when converting from the unit. For
   *     example, the offset for celsius is 273.15 and the offset for farhenheit
   *     is 459.67. Default is 0.
   *   - baseName {string} If the unit's dimension does not match that of any other
   *     base unit, the name of the newly create base unit. Otherwise, this property
   *     has no effect.
   *
   * @param {Object} options   (optional) An object containing any of the following
   * properties:
   *   - override {boolean} Whether this unit should be allowed to override existing
   *     units.
   *
   * @return {Unit}
   */ Unit.createUnitSingle = function(name, obj, options) {
        if (typeof obj === 'undefined' || obj === null) obj = {
        };
        if (typeof name !== 'string') throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
         // Check collisions with existing units
        if (_objectJs.hasOwnProperty(UNITS, name)) throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
         // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.
        assertUnitNameIsValid(name);
        var defUnit = null; // The Unit from which the new unit will be created.
        var aliases = [];
        var offset = 0;
        var definition;
        var prefixes;
        var baseName;
        if (obj && obj.type === 'Unit') defUnit = obj.clone();
        else if (typeof obj === 'string') {
            if (obj !== '') definition = obj;
        } else if (typeof obj === 'object') {
            definition = obj.definition;
            prefixes = obj.prefixes;
            offset = obj.offset;
            baseName = obj.baseName;
            if (obj.aliases) aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
        } else throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
        if (aliases) for(var i = 0; i < aliases.length; i++){
            if (_objectJs.hasOwnProperty(UNITS, aliases[i])) throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
        }
        if (definition && typeof definition === 'string' && !defUnit) try {
            defUnit = Unit.parse(definition, {
                allowNoUnits: true
            });
        } catch (ex) {
            ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
            throw ex;
        }
        else if (definition && definition.type === 'Unit') defUnit = definition.clone();
        aliases = aliases || [];
        offset = offset || 0;
        if (prefixes && prefixes.toUpperCase) prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
        else prefixes = PREFIXES.NONE;
         // If defUnit is null, it is because the user did not
        // specify a defintion. So create a new base dimension.
        var newUnit = {
        };
        if (!defUnit) {
            // Add a new base dimension
            baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
            if (BASE_DIMENSIONS.indexOf(baseName) >= 0) throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
            BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units
            for(var b in BASE_UNITS)if (_objectJs.hasOwnProperty(BASE_UNITS, b)) BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
             // Add the new base unit
            var newBaseUnit = {
                dimensions: []
            };
            for(var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++)newBaseUnit.dimensions[_i6] = 0;
            newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
            newBaseUnit.key = baseName;
            BASE_UNITS[baseName] = newBaseUnit;
            newUnit = {
                name: name,
                value: 1,
                dimensions: BASE_UNITS[baseName].dimensions.slice(0),
                prefixes: prefixes,
                offset: offset,
                base: BASE_UNITS[baseName]
            };
            currentUnitSystem[baseName] = {
                unit: newUnit,
                prefix: PREFIXES.NONE['']
            };
        } else {
            newUnit = {
                name: name,
                value: defUnit.value,
                dimensions: defUnit.dimensions.slice(0),
                prefixes: prefixes,
                offset: offset
            }; // Create a new base if no matching base exists
            var anyMatch = false;
            for(var _i7 in BASE_UNITS)if (_objectJs.hasOwnProperty(BASE_UNITS, _i7)) {
                var match = true;
                for(var j = 0; j < BASE_DIMENSIONS.length; j++)if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 0.000000000001) {
                    match = false;
                    break;
                }
                if (match) {
                    anyMatch = true;
                    newUnit.base = BASE_UNITS[_i7];
                    break;
                }
            }
            if (!anyMatch) {
                baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
                // Add the new base unit
                var _newBaseUnit = {
                    dimensions: defUnit.dimensions.slice(0)
                };
                _newBaseUnit.key = baseName;
                BASE_UNITS[baseName] = _newBaseUnit;
                currentUnitSystem[baseName] = {
                    unit: newUnit,
                    prefix: PREFIXES.NONE['']
                };
                newUnit.base = BASE_UNITS[baseName];
            }
        }
        Unit.UNITS[name] = newUnit;
        for(var _i8 = 0; _i8 < aliases.length; _i8++){
            var aliasName = aliases[_i8];
            var _alias = {
            };
            for(var _key6 in newUnit)if (_objectJs.hasOwnProperty(newUnit, _key6)) _alias[_key6] = newUnit[_key6];
            _alias.name = aliasName;
            Unit.UNITS[aliasName] = _alias;
        } // delete the memoization cache, since adding a new unit to the array
        // invalidates all old results
        delete _findUnit.cache;
        return new Unit(null, name);
    };
    Unit.deleteUnit = function(name) {
        delete Unit.UNITS[name];
    }; // expose arrays with prefixes, dimensions, units, systems
    Unit.PREFIXES = PREFIXES;
    Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
    Unit.BASE_UNITS = BASE_UNITS;
    Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
    Unit.UNITS = UNITS;
    return Unit;
}, {
    isClass: true
});

},{"@babel/runtime/helpers/extends":"gyhTZ","@babel/runtime/helpers/defineProperty":"ls4GC","../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","../../utils/function.js":"b1EsA","../../utils/string.js":"0PPSB","../../utils/object.js":"eRHhH","../../utils/bignumber/constants.js":"gqh5e","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gqh5e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBigNumberE", ()=>createBigNumberE
);
parcelHelpers.export(exports, "createBigNumberPhi", ()=>createBigNumberPhi
);
parcelHelpers.export(exports, "createBigNumberPi", ()=>createBigNumberPi
);
parcelHelpers.export(exports, "createBigNumberTau", ()=>createBigNumberTau
);
var _functionJs = require("../function.js");
var createBigNumberE = _functionJs.memoize(function(BigNumber) {
    return new BigNumber(1).exp();
}, {
    hasher
});
var createBigNumberPhi = _functionJs.memoize(function(BigNumber) {
    return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
}, {
    hasher
});
var createBigNumberPi = _functionJs.memoize(function(BigNumber) {
    return BigNumber.acos(-1);
}, {
    hasher
});
var createBigNumberTau = _functionJs.memoize(function(BigNumber) {
    return createBigNumberPi(BigNumber).times(2);
}, {
    hasher
});
/**
 * Create a hash for a BigNumber constructor function. The created has is
 * the configured precision
 * @param {Array} args         Supposed to contain a single entry with
 *                             a BigNumber constructor
 * @return {number} precision
 * @private
 */ function hasher(args) {
    return args[0].precision;
}

},{"../function.js":"b1EsA","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8dm5m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnitFunction", ()=>createUnitFunction
);
var _factoryJs = require("../../../utils/factory.js");
var _collectionJs = require("../../../utils/collection.js");
var name = 'unit';
var dependencies = [
    'typed',
    'Unit'
]; // This function is named createUnitFunction to prevent a naming conflict with createUnit
var createUnitFunction = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Unit  } = _ref;
    /**
   * Create a unit. Depending on the passed arguments, the function
   * will create and return a new math.Unit object.
   * When a matrix is provided, all elements will be converted to units.
   *
   * Syntax:
   *
   *     math.unit(unit : string)
   *     math.unit(value : number, unit : string)
   *
   * Examples:
   *
   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
   *    const b = math.unit('23 kg')    // returns Unit 23 kg
   *    a.to('m')                       // returns Unit 0.05 m
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
   *
   * @param {* | Array | Matrix} args   A number and unit.
   * @return {Unit | Array | Matrix}    The created unit
   */ return typed(name, {
        Unit: function Unit(x) {
            return x.clone();
        },
        string: function string(x) {
            if (Unit.isValuelessUnit(x)) return new Unit(null, x); // a pure unit
            return Unit.parse(x, {
                allowNoUnits: true
            }); // a unit with value, like '5cm'
        },
        'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
            return new Unit(value, unit);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../../utils/factory.js":"26foW","../../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"17ldI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSparse", ()=>createSparse
);
var _factoryJs = require("../../../utils/factory.js");
var name = 'sparse';
var dependencies = [
    'typed',
    'SparseMatrix'
];
var createSparse = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , SparseMatrix  } = _ref;
    /**
   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   *
   * Syntax:
   *
   *    math.sparse()               // creates an empty sparse matrix.
   *    math.sparse(data)           // creates a sparse matrix with initial data.
   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
   *
   * Examples:
   *
   *    let m = math.sparse([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, matrix
   *
   * @param {Array | Matrix} [data]    A two dimensional array
   *
   * @return {Matrix} The created matrix
   */ return typed(name, {
        '': function _() {
            return new SparseMatrix([]);
        },
        string: function string(datatype) {
            return new SparseMatrix([], datatype);
        },
        'Array | Matrix': function ArrayMatrix(data) {
            return new SparseMatrix(data);
        },
        'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
            return new SparseMatrix(data, datatype);
        }
    });
});

},{"../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"77fC3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCreateUnit", ()=>createCreateUnit
);
var _factoryJs = require("../../../utils/factory.js");
var name = 'createUnit';
var dependencies = [
    'typed',
    'Unit'
];
var createCreateUnit = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Unit  } = _ref;
    /**
   * Create a user-defined unit and register it with the Unit type.
   *
   * Syntax:
   *
   *     math.createUnit({
   *       baseUnit1: {
   *         aliases: [string, ...]
   *         prefixes: object
   *       },
   *       unit2: {
   *         definition: string,
   *         aliases: [string, ...]
   *         prefixes: object,
   *         offset: number
   *       },
   *       unit3: string    // Shortcut
   *     })
   *
   *     // Another shortcut:
   *     math.createUnit(string, unit : string, [object])
   *
   * Examples:
   *
   *     math.createUnit('foo')
   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
   *     math.createUnit('mph', '1 mile/hour')
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
   *
   * See also:
   *
   *     unit
   *
   * @return {Unit} The new unit
   */ return typed(name, {
        // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
        'Object, Object': function ObjectObject(obj, options) {
            return Unit.createUnit(obj, options);
        },
        // Same as above but without the options.
        Object: function Object(obj) {
            return Unit.createUnit(obj, {
            });
        },
        // Shortcut method for creating one unit.
        'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
            var obj = {
            };
            obj[name] = def;
            return Unit.createUnit(obj, options);
        },
        // Same as above but without the options.
        'string, Unit | string | Object': function stringUnitStringObject(name, def) {
            var obj = {
            };
            obj[name] = def;
            return Unit.createUnit(obj, {
            });
        },
        // Without a definition, creates a base unit.
        string: function string(name) {
            var obj = {
            };
            obj[name] = {
            };
            return Unit.createUnit(obj, {
            });
        }
    });
});

},{"../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"W9qj7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAcos", ()=>createAcos
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'acos';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createAcos = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex  } = _ref;
    /**
   * Calculate the inverse cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5)           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)) // returns number 1.5
   *
   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
   */ return typed(name, {
        number: function number(x) {
            if (x >= -1 && x <= 1 || config.predictable) return Math.acos(x);
            else return new Complex(x, 0).acos();
        },
        Complex: function Complex(x) {
            return x.acos();
        },
        BigNumber: function BigNumber(x) {
            return x.acos();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jXN6M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAcosh", ()=>createAcosh
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'acosh';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createAcosh = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex  } = _ref;
    /**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5)       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
   */ return typed(name, {
        number: function number(x) {
            if (x >= 1 || config.predictable) return _indexJs.acoshNumber(x);
            if (x <= -1) return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
            return new Complex(x, 0).acosh();
        },
        Complex: function Complex(x) {
            return x.acosh();
        },
        BigNumber: function BigNumber(x) {
            return x.acosh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fNprP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAcot", ()=>createAcot
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'acot';
var dependencies = [
    'typed',
    'BigNumber'
];
var createAcot = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5)           // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)) // returns number 1.5
   *
   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cotangent of x
   */ return typed(name, {
        number: _indexJs.acotNumber,
        Complex: function Complex(x) {
            return x.acot();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).atan();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fvWKn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAcoth", ()=>createAcoth
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'acoth';
var dependencies = [
    'typed',
    'config',
    'Complex',
    'BigNumber'
];
var createAcoth = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the hyperbolic arccotangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5)       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
   */ return typed(name, {
        number: function number(x) {
            if (x >= 1 || x <= -1 || config.predictable) return _indexJs.acothNumber(x);
            return new Complex(x, 0).acoth();
        },
        Complex: function Complex(x) {
            return x.acoth();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).atanh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3H5pC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAcsc", ()=>createAcsc
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'acsc';
var dependencies = [
    'typed',
    'config',
    'Complex',
    'BigNumber'
];
var createAcsc = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(0.5)           // returns number 0.5235987755982989
   *    math.acsc(math.csc(1.5)) // returns number ~1.5
   *
   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cosecant of x
   */ return typed(name, {
        number: function number(x) {
            if (x <= -1 || x >= 1 || config.predictable) return _indexJs.acscNumber(x);
            return new Complex(x, 0).acsc();
        },
        Complex: function Complex(x) {
            return x.acsc();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).asin();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fTwVR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAcsch", ()=>createAcsch
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'acsch';
var dependencies = [
    'typed',
    'BigNumber'
];
var createAcsch = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the hyperbolic arccosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5)       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
   */ return typed(name, {
        number: _indexJs.acschNumber,
        Complex: function Complex(x) {
            return x.acsch();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).asinh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4Ijcv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAsec", ()=>createAsec
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'asec';
var dependencies = [
    'typed',
    'config',
    'Complex',
    'BigNumber'
];
var createAsec = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(0.5)           // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)) // returns 1.5
   *
   *    math.asec(2)             // returns 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} The arc secant of x
   */ return typed(name, {
        number: function number(x) {
            if (x <= -1 || x >= 1 || config.predictable) return _indexJs.asecNumber(x);
            return new Complex(x, 0).asec();
        },
        Complex: function Complex(x) {
            return x.asec();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).acos();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8D1aU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAsech", ()=>createAsech
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'asech';
var dependencies = [
    'typed',
    'config',
    'Complex',
    'BigNumber'
];
var createAsech = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5)       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
   */ return typed(name, {
        number: function number(x) {
            if (x <= 1 && x >= -1 || config.predictable) {
                var xInv = 1 / x;
                if (xInv > 0 || config.predictable) return _indexJs.asechNumber(x);
                var ret = Math.sqrt(xInv * xInv - 1);
                return new Complex(Math.log(ret - xInv), Math.PI);
            }
            return new Complex(x, 0).asech();
        },
        Complex: function Complex(x) {
            return x.asech();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x).acosh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"d35f2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAsin", ()=>createAsin
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'asin';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createAsin = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex  } = _ref;
    /**
   * Calculate the inverse sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5)           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)) // returns number ~1.5
   *
   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
   */ return typed(name, {
        number: function number(x) {
            if (x >= -1 && x <= 1 || config.predictable) return Math.asin(x);
            else return new Complex(x, 0).asin();
        },
        Complex: function Complex(x) {
            return x.asin();
        },
        BigNumber: function BigNumber(x) {
            return x.asin();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since asin(0) = 0
            return _collectionJs.deepMap(x, this, true);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"43BbO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAsinh", ()=>createAsinh
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'asinh';
var dependencies = [
    'typed'
];
var createAsinh = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5)       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
   */ return typed('asinh', {
        number: _indexJs.asinhNumber,
        Complex: function Complex(x) {
            return x.asinh();
        },
        BigNumber: function BigNumber(x) {
            return x.asinh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since asinh(0) = 0
            return _collectionJs.deepMap(x, this, true);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6YuIJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAtan", ()=>createAtan
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'atan';
var dependencies = [
    'typed'
];
var createAtan = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the inverse tangent of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5)           // returns number 0.4636476090008061
   *    math.atan(math.tan(1.5)) // returns number 1.5
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
   */ return typed('atan', {
        number: function number(x) {
            return Math.atan(x);
        },
        Complex: function Complex(x) {
            return x.atan();
        },
        BigNumber: function BigNumber(x) {
            return x.atan();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since atan(0) = 0
            return _collectionJs.deepMap(x, this, true);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"faaq7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAtan2", ()=>createAtan2
);
var _factoryJs = require("../../utils/factory.js");
var _algorithm02Js = require("../../type/matrix/utils/algorithm02.js");
var _algorithm03Js = require("../../type/matrix/utils/algorithm03.js");
var _algorithm09Js = require("../../type/matrix/utils/algorithm09.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm12Js = require("../../type/matrix/utils/algorithm12.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'atan2';
var dependencies = [
    'typed',
    'matrix',
    'equalScalar',
    'BigNumber',
    'DenseMatrix'
];
var createAtan2 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , equalScalar , BigNumber , DenseMatrix  } = _ref;
    var algorithm02 = _algorithm02Js.createAlgorithm02({
        typed,
        equalScalar
    });
    var algorithm03 = _algorithm03Js.createAlgorithm03({
        typed
    });
    var algorithm09 = _algorithm09Js.createAlgorithm09({
        typed,
        equalScalar
    });
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm12 = _algorithm12Js.createAlgorithm12({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi       // returns number 0.25
   *
   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
   *    const x = math.cos(angle)
   *    const y = math.sin(angle)
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */ return typed(name, {
        'number, number': Math.atan2,
        // Complex numbers doesn't seem to have a reasonable implementation of
        // atan2(). Even Matlab removed the support, after they only calculated
        // the atan only on base of the real part of the numbers and ignored the imaginary.
        'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
            return BigNumber.atan2(y, x);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm09(x, y, this, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            // mind the order of y and x!
            return algorithm02(y, x, this, true);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm03(x, y, this, false);
        },
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, this);
        },
        'Array, Array': function ArrayArray(x, y) {
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            return this(x, matrix(y));
        },
        'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
            return algorithm11(x, y, this, false);
        },
        'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
            return algorithm14(x, y, this, false);
        },
        'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
            // mind the order of y and x
            return algorithm12(y, x, this, true);
        },
        'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
            // mind the order of y and x
            return algorithm14(y, x, this, true);
        },
        'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
            return algorithm14(matrix(x), y, this, false).valueOf();
        },
        'number | BigNumber, Array': function numberBigNumberArray(x, y) {
            return algorithm14(matrix(y), x, this, true).valueOf();
        }
    });
});

},{"../../utils/factory.js":"26foW","../../type/matrix/utils/algorithm02.js":"avLDa","../../type/matrix/utils/algorithm03.js":"fE9Hp","../../type/matrix/utils/algorithm09.js":"ffaMS","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm12.js":"cI0lC","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cVH3g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAtanh", ()=>createAtanh
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'atanh';
var dependencies = [
    'typed',
    'config',
    'Complex'
];
var createAtanh = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , Complex  } = _ref;
    /**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5)       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
   */ return typed(name, {
        number: function number(x) {
            if (x <= 1 && x >= -1 || config.predictable) return _indexJs.atanhNumber(x);
            return new Complex(x, 0).atanh();
        },
        Complex: function Complex(x) {
            return x.atanh();
        },
        BigNumber: function BigNumber(x) {
            return x.atanh();
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since atanh(0) = 0
            return _collectionJs.deepMap(x, this, true);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fgjfr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCos", ()=>createCos
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'cos';
var dependencies = [
    'typed'
];
var createCos = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2)                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'))  // returns number -1
   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
   */ return typed(name, {
        number: Math.cos,
        Complex: function Complex(x) {
            return x.cos();
        },
        BigNumber: function BigNumber(x) {
            return x.cos();
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function cos is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7ZwQq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCosh", ()=>createCosh
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _numberJs = require("../../utils/number.js");
var name = 'cosh';
var dependencies = [
    'typed'
];
var createCosh = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5)       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
   */ return typed(name, {
        number: _numberJs.cosh,
        Complex: function Complex(x) {
            return x.cosh();
        },
        BigNumber: function BigNumber(x) {
            return x.cosh();
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function cosh is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../utils/number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"rpmVA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCot", ()=>createCot
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'cot';
var dependencies = [
    'typed',
    'BigNumber'
];
var createCot = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2)      // returns number -0.45765755436028577
   *    1 / math.tan(2)  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */ return typed(name, {
        number: _indexJs.cotNumber,
        Complex: function Complex(x) {
            return x.cot();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x.tan());
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function cot is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ld2AD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCoth", ()=>createCoth
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'coth';
var dependencies = [
    'typed',
    'BigNumber'
];
var createCoth = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2)         // returns 1.0373147207275482
   *    1 / math.tanh(2)     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
   */ return typed(name, {
        number: _indexJs.cothNumber,
        Complex: function Complex(x) {
            return x.coth();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x.tanh());
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function coth is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lw18M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCsc", ()=>createCsc
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'csc';
var dependencies = [
    'typed',
    'BigNumber'
];
var createCsc = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2)      // returns number 1.099750170294617
   *    1 / math.sin(2)  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cosecant of x
   */ return typed(name, {
        number: _indexJs.cscNumber,
        Complex: function Complex(x) {
            return x.csc();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x.sin());
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function csc is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4gAZ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCsch", ()=>createCsch
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'csch';
var dependencies = [
    'typed',
    'BigNumber'
];
var createCsch = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5)       // returns 1.9190347513349437
   *    1 / math.sinh(0.5)   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
   */ return typed(name, {
        number: _indexJs.cschNumber,
        Complex: function Complex(x) {
            return x.csch();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x.sinh());
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function csch is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ibbwz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSec", ()=>createSec
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'sec';
var dependencies = [
    'typed',
    'BigNumber'
];
var createSec = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2)      // returns number -2.4029979617223822
   *    1 / math.cos(2)  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Secant of x
   */ return typed(name, {
        number: _indexJs.secNumber,
        Complex: function Complex(x) {
            return x.sec();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x.cos());
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function sec is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5e9BT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSech", ()=>createSech
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'sech';
var dependencies = [
    'typed',
    'BigNumber'
];
var createSech = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , BigNumber: _BigNumber  } = _ref;
    /**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5)       // returns 0.886818883970074
   *    1 / math.cosh(0.5)   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
   */ return typed(name, {
        number: _indexJs.sechNumber,
        Complex: function Complex(x) {
            return x.sech();
        },
        BigNumber: function BigNumber(x) {
            return new _BigNumber(1).div(x.cosh());
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function sech is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            return _collectionJs.deepMap(x, this);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"I4M0M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSin", ()=>createSin
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'sin';
var dependencies = [
    'typed'
];
var createSin = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2)                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'))   // returns number 1
   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
   */ return typed(name, {
        number: Math.sin,
        Complex: function Complex(x) {
            return x.sin();
        },
        BigNumber: function BigNumber(x) {
            return x.sin();
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function sin is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since sin(0) = 0
            return _collectionJs.deepMap(x, this, true);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2tHGz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSinh", ()=>createSinh
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'sinh';
var dependencies = [
    'typed'
];
var createSinh = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5)       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
   */ return typed(name, {
        number: _indexJs.sinhNumber,
        Complex: function Complex(x) {
            return x.sinh();
        },
        BigNumber: function BigNumber(x) {
            return x.sinh();
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function sinh is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since sinh(0) = 0
            return _collectionJs.deepMap(x, this, true);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eouY4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTan", ()=>createTan
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var name = 'tan';
var dependencies = [
    'typed'
];
var createTan = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5)                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4)            // returns number 1
   *    math.tan(math.unit(45, 'deg'))   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
   */ return typed(name, {
        number: Math.tan,
        Complex: function Complex(x) {
            return x.tan();
        },
        BigNumber: function BigNumber(x) {
            return x.tan();
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function tan is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since tan(0) = 0
            return _collectionJs.deepMap(x, this, true);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"72ci0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTanh", ()=>createTanh
);
var _factoryJs = require("../../utils/factory.js");
var _collectionJs = require("../../utils/collection.js");
var _numberJs = require("../../utils/number.js");
var name = 'tanh';
var dependencies = [
    'typed'
];
var createTanh = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5)                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
   *    1 / math.coth(0.5)               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
   */ return typed('tanh', {
        number: _numberJs.tanh,
        Complex: function Complex(x) {
            return x.tanh();
        },
        BigNumber: function BigNumber(x) {
            return x.tanh();
        },
        Unit: function Unit(x) {
            if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) throw new TypeError('Unit in function tanh is no angle');
            return this(x.value);
        },
        'Array | Matrix': function ArrayMatrix(x) {
            // deep map collection, skip zeros since tanh(0) = 0
            return _collectionJs.deepMap(x, this, true);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/collection.js":"4hyl2","../../utils/number.js":"l1AB8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2kJi5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetCartesian", ()=>createSetCartesian
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setCartesian';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index',
    'DenseMatrix'
];
var createSetCartesian = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , subset , compareNatural , Index , DenseMatrix  } = _ref;
    /**
   * Create the cartesian product of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays
   * and the values will be sorted in ascending order before the operation.
   *
   * Syntax:
   *
   *    math.setCartesian(set1, set2)
   *
   * Examples:
   *
   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
   *    math.setCartesian([4, 3], [2, 1])        // returns [[3, 1], [3, 2], [4, 1], [4, 2]]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference, setPowerset
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The cartesian product of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
            var result = [];
            if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {
                // if any of them is empty, return empty
                var b1 = _arrayJs.flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
                var b2 = _arrayJs.flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
                result = [];
                for(var i = 0; i < b1.length; i++)for(var j = 0; j < b2.length; j++)result.push([
                    b1[i],
                    b2[j]
                ]);
            } // return an array, if both inputs were arrays
            if (Array.isArray(a1) && Array.isArray(a2)) return result;
             // return a matrix otherwise
            return new DenseMatrix(result);
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kgG5R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetDifference", ()=>createSetDifference
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setDifference';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index',
    'DenseMatrix'
];
var createSetDifference = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , subset , compareNatural , Index , DenseMatrix  } = _ref;
    /**
   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
   *
   * See also:
   *
   *    setUnion, setIntersect, setSymDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The difference of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
            var result;
            if (subset(size(a1), new Index(0)) === 0) // empty-anything=empty
            result = [];
            else if (subset(size(a2), new Index(0)) === 0) // anything-empty=anything
            return _arrayJs.flatten(a1.toArray());
            else {
                var b1 = _arrayJs.identify(_arrayJs.flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
                var b2 = _arrayJs.identify(_arrayJs.flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
                result = [];
                var inb2;
                for(var i = 0; i < b1.length; i++){
                    inb2 = false;
                    for(var j = 0; j < b2.length; j++)if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                        // the identifier is always a decimal int
                        inb2 = true;
                        break;
                    }
                    if (!inb2) result.push(b1[i]);
                }
            } // return an array, if both inputs were arrays
            if (Array.isArray(a1) && Array.isArray(a2)) return _arrayJs.generalize(result);
             // return a matrix otherwise
            return new DenseMatrix(_arrayJs.generalize(result));
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"49jjK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetDistinct", ()=>createSetDistinct
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setDistinct';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index',
    'DenseMatrix'
];
var createSetDistinct = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , subset , compareNatural , Index , DenseMatrix  } = _ref;
    /**
   * Collect the distinct elements of a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setDistinct(set)
   *
   * Examples:
   *
   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
   *
   * See also:
   *
   *    setMultiplicity
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
   */ return typed(name, {
        'Array | Matrix': function ArrayMatrix(a) {
            var result;
            if (subset(size(a), new Index(0)) === 0) // if empty, return empty
            result = [];
            else {
                var b = _arrayJs.flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
                result = [];
                result.push(b[0]);
                for(var i = 1; i < b.length; i++)if (compareNatural(b[i], b[i - 1]) !== 0) result.push(b[i]);
            } // return an array, if the input was an array
            if (Array.isArray(a)) return result;
             // return a matrix otherwise
            return new DenseMatrix(result);
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gj5Er":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetIntersect", ()=>createSetIntersect
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setIntersect';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index',
    'DenseMatrix'
];
var createSetIntersect = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , subset , compareNatural , Index , DenseMatrix  } = _ref;
    /**
   * Create the intersection of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIntersect(set1, set2)
   *
   * Examples:
   *
   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
   *
   * See also:
   *
   *    setUnion, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The intersection of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
            var result;
            if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) // of any of them is empty, return empty
            result = [];
            else {
                var b1 = _arrayJs.identify(_arrayJs.flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
                var b2 = _arrayJs.identify(_arrayJs.flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
                result = [];
                for(var i = 0; i < b1.length; i++){
                    for(var j = 0; j < b2.length; j++)if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                        // the identifier is always a decimal int
                        result.push(b1[i]);
                        break;
                    }
                }
            } // return an array, if both inputs were arrays
            if (Array.isArray(a1) && Array.isArray(a2)) return _arrayJs.generalize(result);
             // return a matrix otherwise
            return new DenseMatrix(_arrayJs.generalize(result));
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a1WQ3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetIsSubset", ()=>createSetIsSubset
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setIsSubset';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index'
];
var createSetIsSubset = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , subset , compareNatural , Index  } = _ref;
    /**
   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIsSubset(set1, set2)
   *
   * Examples:
   *
   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {boolean}            true | false
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
            if (subset(size(a1), new Index(0)) === 0) // empty is a subset of anything
            return true;
            else if (subset(size(a2), new Index(0)) === 0) // anything is not a subset of empty
            return false;
            var b1 = _arrayJs.identify(_arrayJs.flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
            var b2 = _arrayJs.identify(_arrayJs.flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
            var inb2;
            for(var i = 0; i < b1.length; i++){
                inb2 = false;
                for(var j = 0; j < b2.length; j++)if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
                    // the identifier is always a decimal int
                    inb2 = true;
                    break;
                }
                if (inb2 === false) return false;
            }
            return true;
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3jylC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetMultiplicity", ()=>createSetMultiplicity
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setMultiplicity';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index'
];
var createSetMultiplicity = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , subset , compareNatural , Index  } = _ref;
    /**
   * Count the multiplicity of an element in a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setMultiplicity(element, set)
   *
   * Examples:
   *
   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
   *
   * See also:
   *
   *    setDistinct, setSize
   *
   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
   * @param {Array | Matrix}     a  A multiset
   * @return {number}            The number of how many times the multiset contains the element
   */ return typed(name, {
        'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {
            if (subset(size(a), new Index(0)) === 0) // if empty, return 0
            return 0;
            var b = _arrayJs.flatten(Array.isArray(a) ? a : a.toArray());
            var count = 0;
            for(var i = 0; i < b.length; i++)if (compareNatural(b[i], e) === 0) count++;
            return count;
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5soEf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetPowerset", ()=>createSetPowerset
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setPowerset';
var dependencies = [
    'typed',
    'size',
    'subset',
    'compareNatural',
    'Index'
];
var createSetPowerset = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , subset , compareNatural , Index  } = _ref;
    function _subset(array, bitarray) {
        var result = [];
        for(var i = 0; i < bitarray.length; i++){
            if (bitarray[i] === '1') {
                result.push(array[i]);
            }
        }
        return result;
    } // sort subsests by length
    function _sort(array) {
        var temp = [];
        for(var i = array.length - 1; i > 0; i--){
            for(var j = 0; j < i; j++){
                if (array[j].length > array[j + 1].length) {
                    temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
        return array;
    }
    /**
   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setPowerset(set)
   *
   * Examples:
   *
   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
   *
   * See also:
   *
   *    setCartesian
   *
   * @param {Array | Matrix}    a  A (multi)set
   * @return {Array}    The powerset of the (multi)set
   */ return typed(name, {
        'Array | Matrix': function ArrayMatrix(a) {
            if (subset(size(a), new Index(0)) === 0) // if empty, return empty
            return [];
            var b = _arrayJs.flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
            var result = [];
            var number = 0;
            while(number.toString(2).length <= b.length){
                result.push(_subset(b, number.toString(2).split('').reverse()));
                number++;
            } // can not return a matrix, because of the different size of the subarrays
            return _sort(result);
        }
    }); // create subset
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kVINx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetSize", ()=>createSetSize
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setSize';
var dependencies = [
    'typed',
    'compareNatural'
];
var createSetSize = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , compareNatural  } = _ref;
    /**
   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setSize(set)
   *    math.setSize(set, unique)
   *
   * Examples:
   *
   *    math.setSize([1, 2, 2, 4])          // returns 4
   *    math.setSize([1, 2, 2, 4], true)    // returns 3
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {number}            The number of elements of the (multi)set
   */ return typed(name, {
        'Array | Matrix': function ArrayMatrix(a) {
            return Array.isArray(a) ? _arrayJs.flatten(a).length : _arrayJs.flatten(a.toArray()).length;
        },
        'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {
            if (unique === false || a.length === 0) return Array.isArray(a) ? _arrayJs.flatten(a).length : _arrayJs.flatten(a.toArray()).length;
            else {
                var b = _arrayJs.flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
                var count = 1;
                for(var i = 1; i < b.length; i++)if (compareNatural(b[i], b[i - 1]) !== 0) count++;
                return count;
            }
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"huaoY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetSymDifference", ()=>createSetSymDifference
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setSymDifference';
var dependencies = [
    'typed',
    'size',
    'concat',
    'subset',
    'setDifference',
    'Index'
];
var createSetSymDifference = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , concat , subset , setDifference , Index  } = _ref;
    /**
   * Create the symmetric difference of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setSymDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
            if (subset(size(a1), new Index(0)) === 0) // if any of them is empty, return the other one
            return _arrayJs.flatten(a2);
            else if (subset(size(a2), new Index(0)) === 0) return _arrayJs.flatten(a1);
            var b1 = _arrayJs.flatten(a1);
            var b2 = _arrayJs.flatten(a2);
            return concat(setDifference(b1, b2), setDifference(b2, b1));
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k0LzK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetUnion", ()=>createSetUnion
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'setUnion';
var dependencies = [
    'typed',
    'size',
    'concat',
    'subset',
    'setIntersect',
    'setSymDifference',
    'Index'
];
var createSetUnion = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , size , concat , subset , setIntersect , setSymDifference , Index  } = _ref;
    /**
   * Create the union of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setUnion(set1, set2)
   *
   * Examples:
   *
   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
   *
   * See also:
   *
   *    setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The union of two (multi)sets
   */ return typed(name, {
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
            if (subset(size(a1), new Index(0)) === 0) // if any of them is empty, return the other one
            return _arrayJs.flatten(a2);
            else if (subset(size(a2), new Index(0)) === 0) return _arrayJs.flatten(a1);
            var b1 = _arrayJs.flatten(a1);
            var b2 = _arrayJs.flatten(a2);
            return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"QYL1g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAdd", ()=>createAdd
);
var _factoryJs = require("../../utils/factory.js");
var _objectJs = require("../../utils/object.js");
var _algorithm01Js = require("../../type/matrix/utils/algorithm01.js");
var _algorithm04Js = require("../../type/matrix/utils/algorithm04.js");
var _algorithm10Js = require("../../type/matrix/utils/algorithm10.js");
var _algorithm13Js = require("../../type/matrix/utils/algorithm13.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'add';
var dependencies = [
    'typed',
    'matrix',
    'addScalar',
    'equalScalar',
    'DenseMatrix',
    'SparseMatrix'
];
var createAdd = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , addScalar , equalScalar , DenseMatrix , SparseMatrix  } = _ref;
    var algorithm01 = _algorithm01Js.createAlgorithm01({
        typed
    });
    var algorithm04 = _algorithm04Js.createAlgorithm04({
        typed,
        equalScalar
    });
    var algorithm10 = _algorithm10Js.createAlgorithm10({
        typed,
        DenseMatrix
    });
    var algorithm13 = _algorithm13Js.createAlgorithm13({
        typed
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Add two or more values, `x + y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.add(x, y)
   *    math.add(x, y, z, ...)
   *
   * Examples:
   *
   *    math.add(2, 3)               // returns number 5
   *    math.add(2, 3, 4)            // returns number 9
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(-4, 1)
   *    math.add(a, b)               // returns Complex -2 + 4i
   *
   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   *    const c = math.unit('5 cm')
   *    const d = math.unit('2.1 mm')
   *    math.add(c, d)               // returns Unit 52.1 mm
   *
   *    math.add("2.3", "4")         // returns number 6.3
   *
   * See also:
   *
   *    subtract, sum
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
   */ return typed(name, _objectJs.extend({
        // we extend the signatures of addScalar with signatures dealing with matrices
        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
            return algorithm13(x, y, addScalar);
        },
        'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
            return algorithm01(x, y, addScalar, false);
        },
        'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
            return algorithm01(y, x, addScalar, true);
        },
        'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
            return algorithm04(x, y, addScalar);
        },
        'Array, Array': function ArrayArray(x, y) {
            // use matrix implementation
            return this(matrix(x), matrix(y)).valueOf();
        },
        'Array, Matrix': function ArrayMatrix(x, y) {
            // use matrix implementation
            return this(matrix(x), y);
        },
        'Matrix, Array': function MatrixArray(x, y) {
            // use matrix implementation
            return this(x, matrix(y));
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, addScalar, false);
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm10(x, y, addScalar, false);
        },
        'any, DenseMatrix': function anyDenseMatrix(x, y) {
            return algorithm14(y, x, addScalar, true);
        },
        'any, SparseMatrix': function anySparseMatrix(x, y) {
            return algorithm10(y, x, addScalar, true);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, addScalar, false).valueOf();
        },
        'any, Array': function anyArray(x, y) {
            // use matrix implementation
            return algorithm14(matrix(y), x, addScalar, true).valueOf();
        },
        'any, any': addScalar,
        'any, any, ...any': function anyAnyAny(x, y, rest) {
            var result = this(x, y);
            for(var i = 0; i < rest.length; i++)result = this(result, rest[i]);
            return result;
        }
    }, addScalar.signatures));
});

},{"../../utils/factory.js":"26foW","../../utils/object.js":"eRHhH","../../type/matrix/utils/algorithm01.js":"8dKyd","../../type/matrix/utils/algorithm04.js":"lmihc","../../type/matrix/utils/algorithm10.js":"jcqxM","../../type/matrix/utils/algorithm13.js":"fiTNq","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hEIPg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHypot", ()=>createHypot
);
var _factoryJs = require("../../utils/factory.js");
var _arrayJs = require("../../utils/array.js");
var name = 'hypot';
var dependencies = [
    'typed',
    'abs',
    'addScalar',
    'divideScalar',
    'multiplyScalar',
    'sqrt',
    'smaller',
    'isPositive'
];
var createHypot = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , abs , addScalar , divideScalar , multiplyScalar , sqrt , smaller , isPositive  } = _ref;
    /**
   * Calculate the hypotenusa for an Array with values
   * @param {Array.<number | BigNumber>} args
   * @return {number | BigNumber} Returns the result
   * @private
   */ function _hypot(args) {
        // code based on `hypot` from es6-shim:
        // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
        var result = 0;
        var largest = 0;
        for(var i = 0; i < args.length; i++){
            var value = abs(args[i]);
            if (smaller(largest, value)) {
                result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));
                result = addScalar(result, 1);
                largest = value;
            } else {
                result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);
            }
        }
        return multiplyScalar(largest, sqrt(result));
    }
    /**
   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
   *
   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
   *
   * For matrix input, the hypotenusa is calculated for all values in the matrix.
   *
   * Syntax:
   *
   *     math.hypot(a, b, ...)
   *     math.hypot([a, b, c, ...])
   *
   * Examples:
   *
   *     math.hypot(3, 4)      // 5
   *     math.hypot(3, 4, 5)   // 7.0710678118654755
   *     math.hypot([3, 4, 5]) // 7.0710678118654755
   *     math.hypot(-2)        // 2
   *
   * See also:
   *
   *     abs, norm
   *
   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
   *                                                          Matrix and Array input is flattened and returns a
   *                                                          single number for the whole matrix.
   * @return {number | BigNumber} Returns the hypothenusa of the input values.
   */ return typed(name, {
        '... number | BigNumber': _hypot,
        Array: function Array(x) {
            return this.apply(this, _arrayJs.flatten(x));
        },
        Matrix: function Matrix(x) {
            return this.apply(this, _arrayJs.flatten(x.toArray()));
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/array.js":"3R6c8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gkWne":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createNorm", ()=>createNorm
);
var _factoryJs = require("../../utils/factory.js");
var name = 'norm';
var dependencies = [
    'typed',
    'abs',
    'add',
    'pow',
    'conj',
    'sqrt',
    'multiply',
    'equalScalar',
    'larger',
    'smaller',
    'matrix',
    'ctranspose',
    'eigs'
];
var createNorm = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , abs , add , pow , conj , sqrt , multiply , equalScalar , larger , smaller , matrix , ctranspose , eigs  } = _ref;
    /**
   * Calculate the plus infinity norm for a vector
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */ function _vectorNormPlusInfinity(x) {
        // norm(x, Infinity) = max(abs(x))
        var pinf = 0; // skip zeros since abs(0) === 0
        x.forEach(function(value) {
            var v = abs(value);
            if (larger(v, pinf)) {
                pinf = v;
            }
        }, true);
        return pinf;
    }
    /**
   * Calculate the minus infinity norm for a vector
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */ function _vectorNormMinusInfinity(x) {
        // norm(x, -Infinity) = min(abs(x))
        var ninf; // skip zeros since abs(0) === 0
        x.forEach(function(value) {
            var v = abs(value);
            if (!ninf || smaller(v, ninf)) {
                ninf = v;
            }
        }, true);
        return ninf || 0;
    }
    /**
   * Calculate the norm for a vector
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */ function _vectorNorm(x, p) {
        // check p
        if (p === Number.POSITIVE_INFINITY || p === 'inf') {
            return _vectorNormPlusInfinity(x);
        }
        if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
            return _vectorNormMinusInfinity(x);
        }
        if (p === 'fro') {
            return _norm(x, 2);
        }
        if (typeof p === 'number' && !isNaN(p)) {
            // check p != 0
            if (!equalScalar(p, 0)) {
                // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
                var n = 0; // skip zeros since abs(0) === 0
                x.forEach(function(value) {
                    n = add(pow(abs(value), p), n);
                }, true);
                return pow(n, 1 / p);
            }
            return Number.POSITIVE_INFINITY;
        } // invalid parameter value
        throw new Error('Unsupported parameter value');
    }
    /**
   * Calculate the Frobenius norm for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */ function _matrixNormFrobenius(x) {
        // norm(x) = sqrt(sum(diag(x'x)))
        var fro = 0;
        x.forEach(function(value, index) {
            fro = add(fro, multiply(value, conj(value)));
        });
        return abs(sqrt(fro));
    }
    /**
   * Calculate the norm L1 for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */ function _matrixNormOne(x) {
        // norm(x) = the largest column sum
        var c = []; // result
        var maxc = 0; // skip zeros since abs(0) == 0
        x.forEach(function(value, index) {
            var j = index[1];
            var cj = add(c[j] || 0, abs(value));
            if (larger(cj, maxc)) {
                maxc = cj;
            }
            c[j] = cj;
        }, true);
        return maxc;
    }
    /**
   * Calculate the norm L2 for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */ function _matrixNormTwo(x) {
        // norm(x) = sqrt( max eigenvalue of A*.A)
        var sizeX = x.size();
        if (sizeX[0] !== sizeX[1]) {
            throw new RangeError('Invalid matrix dimensions');
        }
        var tx = ctranspose(x);
        var squaredX = multiply(tx, x);
        var eigenVals = eigs(squaredX).values.toArray();
        var rho = eigenVals[eigenVals.length - 1];
        return abs(sqrt(rho));
    }
    /**
   * Calculate the infinity norm for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */ function _matrixNormInfinity(x) {
        // norm(x) = the largest row sum
        var r = []; // result
        var maxr = 0; // skip zeros since abs(0) == 0
        x.forEach(function(value, index) {
            var i = index[0];
            var ri = add(r[i] || 0, abs(value));
            if (larger(ri, maxr)) {
                maxr = ri;
            }
            r[i] = ri;
        }, true);
        return maxr;
    }
    /**
   * Calculate the norm for a 2D Matrix (M*N)
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */ function _matrixNorm(x, p) {
        // check p
        if (p === 1) {
            return _matrixNormOne(x);
        }
        if (p === Number.POSITIVE_INFINITY || p === 'inf') {
            return _matrixNormInfinity(x);
        }
        if (p === 'fro') {
            return _matrixNormFrobenius(x);
        }
        if (p === 2) {
            return _matrixNormTwo(x);
        } // invalid parameter value
        throw new Error('Unsupported parameter value ' + p);
    }
    /**
   * Calculate the norm for an array
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */ function _norm(x, p) {
        // size
        var sizeX = x.size(); // check if it is a vector
        if (sizeX.length === 1) {
            return _vectorNorm(x, p);
        } // MxN matrix
        if (sizeX.length === 2) {
            if (sizeX[0] && sizeX[1]) {
                return _matrixNorm(x, p);
            } else {
                throw new RangeError('Invalid matrix dimensions');
            }
        }
    }
    /**
   * Calculate the norm of a number, vector or matrix.
   *
   * The second parameter p is optional. If not provided, it defaults to 2.
   *
   * Syntax:
   *
   *    math.norm(x)
   *    math.norm(x, p)
   *
   * Examples:
   *
   *    math.abs(-3.5)                         // returns 3.5
   *    math.norm(-3.5)                        // returns 3.5
   *
   *    math.norm(math.complex(3, -4))         // returns 5
   *
   *    math.norm([1, 2, -3], Infinity)        // returns 3
   *    math.norm([1, 2, -3], -Infinity)       // returns 1
   *
   *    math.norm([3, 4], 2)                   // returns 5
   *
   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
   *
   * See also:
   *
   *    abs, hypot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the norm
   * @param  {number | BigNumber | string} [p=2]
   *            Vector space.
   *            Supported numbers include Infinity and -Infinity.
   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
   * @return {number | BigNumber} the p-norm
   */ return typed(name, {
        number: Math.abs,
        Complex: function Complex(x) {
            return x.abs();
        },
        BigNumber: function BigNumber(x) {
            // norm(x) = abs(x)
            return x.abs();
        },
        boolean: function boolean(x) {
            // norm(x) = abs(x)
            return Math.abs(x);
        },
        Array: function Array(x) {
            return _norm(matrix(x), 2);
        },
        Matrix: function Matrix(x) {
            return _norm(x, 2);
        },
        'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {
            // ignore second parameter, TODO: remove the option of second parameter for these types
            return this(x);
        },
        'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
            return _norm(matrix(x), p);
        },
        'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
            return _norm(x, p);
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5wvqE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDot", ()=>createDot
);
var _factoryJs = require("../../utils/factory.js");
var _isJs = require("../../utils/is.js");
var name = 'dot';
var dependencies = [
    'typed',
    'addScalar',
    'multiplyScalar',
    'conj',
    'size'
];
var createDot = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , addScalar , multiplyScalar , conj , size  } = _ref;
    function _validateDim(x, y) {
        var xSize = _size(x);
        var ySize = _size(y);
        var xLen, yLen;
        if (xSize.length === 1) {
            xLen = xSize[0];
        } else if (xSize.length === 2 && xSize[1] === 1) {
            xLen = xSize[0];
        } else {
            throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');
        }
        if (ySize.length === 1) {
            yLen = ySize[0];
        } else if (ySize.length === 2 && ySize[1] === 1) {
            yLen = ySize[0];
        } else {
            throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');
        }
        if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');
        if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
        return xLen;
    }
    function _denseDot(a, b) {
        var N = _validateDim(a, b);
        var adata = _isJs.isMatrix(a) ? a._data : a;
        var adt = _isJs.isMatrix(a) ? a._datatype : undefined;
        var bdata = _isJs.isMatrix(b) ? b._data : b;
        var bdt = _isJs.isMatrix(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)
        var aIsColumn = _size(a).length === 2;
        var bIsColumn = _size(b).length === 2;
        var add = addScalar;
        var mul = multiplyScalar; // process data types
        if (adt && bdt && adt === bdt && typeof adt === 'string') {
            var dt = adt; // find signatures that matches (dt, dt)
            add = typed.find(addScalar, [
                dt,
                dt
            ]);
            mul = typed.find(multiplyScalar, [
                dt,
                dt
            ]);
        } // both vectors 1-dimensional
        if (!aIsColumn && !bIsColumn) {
            var c = mul(conj(adata[0]), bdata[0]);
            for(var i = 1; i < N; i++){
                c = add(c, mul(conj(adata[i]), bdata[i]));
            }
            return c;
        } // a is 1-dim, b is column
        if (!aIsColumn && bIsColumn) {
            var _c = mul(conj(adata[0]), bdata[0][0]);
            for(var _i = 1; _i < N; _i++){
                _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));
            }
            return _c;
        } // a is column, b is 1-dim
        if (aIsColumn && !bIsColumn) {
            var _c2 = mul(conj(adata[0][0]), bdata[0]);
            for(var _i2 = 1; _i2 < N; _i2++){
                _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));
            }
            return _c2;
        } // both vectors are column
        if (aIsColumn && bIsColumn) {
            var _c3 = mul(conj(adata[0][0]), bdata[0][0]);
            for(var _i3 = 1; _i3 < N; _i3++){
                _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));
            }
            return _c3;
        }
    }
    function _sparseDot(x, y) {
        _validateDim(x, y);
        var xindex = x._index;
        var xvalues = x._values;
        var yindex = y._index;
        var yvalues = y._values; // TODO optimize add & mul using datatype
        var c = 0;
        var add = addScalar;
        var mul = multiplyScalar;
        var i = 0;
        var j = 0;
        while(i < xindex.length && j < yindex.length){
            var I = xindex[i];
            var J = yindex[j];
            if (I < J) {
                i++;
                continue;
            }
            if (I > J) {
                j++;
                continue;
            }
            if (I === J) {
                c = add(c, mul(xvalues[i], yvalues[j]));
                i++;
                j++;
            }
        }
        return c;
    } // TODO remove this once #1771 is fixed
    function _size(x) {
        return _isJs.isMatrix(x) ? x.size() : size(x);
    }
    /**
   * Calculate the dot product of two vectors. The dot product of
   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:
   *
   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn
   *
   * Syntax:
   *
   *    math.dot(x, y)
   *
   * Examples:
   *
   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
   *
   * See also:
   *
   *    multiply, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {number}               Returns the dot product of `x` and `y`
   */ return typed(name, {
        'Array | DenseMatrix, Array | DenseMatrix': _denseDot,
        'SparseMatrix, SparseMatrix': _sparseDot
    });
});

},{"../../utils/factory.js":"26foW","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"diTNv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTrace", ()=>createTrace
);
var _objectJs = require("../../utils/object.js");
var _stringJs = require("../../utils/string.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'trace';
var dependencies = [
    'typed',
    'matrix',
    'add'
];
var createTrace = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , add  } = _ref;
    function _denseTrace(m) {
        // matrix size & data
        var size = m._size;
        var data = m._data; // process dimensions
        switch(size.length){
            case 1:
                // vector
                if (size[0] === 1) {
                    // return data[0]
                    return _objectJs.clone(data[0]);
                }
                throw new RangeError('Matrix must be square (size: ' + _stringJs.format(size) + ')');
            case 2:
                {
                    // two dimensional
                    var rows = size[0];
                    var cols = size[1];
                    if (rows === cols) {
                        // calulate sum
                        var sum = 0; // loop diagonal
                        for(var i = 0; i < rows; i++){
                            sum = add(sum, data[i][i]);
                        } // return trace
                        return sum;
                    } else {
                        throw new RangeError('Matrix must be square (size: ' + _stringJs.format(size) + ')');
                    }
                }
            default:
                // multi dimensional
                throw new RangeError('Matrix must be two dimensional (size: ' + _stringJs.format(size) + ')');
        }
    }
    function _sparseTrace(m) {
        // matrix arrays
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr;
        var size = m._size; // check dimensions
        var rows = size[0];
        var columns = size[1]; // matrix must be square
        if (rows === columns) {
            // calulate sum
            var sum = 0; // check we have data (avoid looping columns)
            if (values.length > 0) {
                // loop columns
                for(var j = 0; j < columns; j++){
                    // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
                    var k0 = ptr[j];
                    var k1 = ptr[j + 1]; // loop k within [k0, k1[
                    for(var k = k0; k < k1; k++){
                        // row index
                        var i = index[k]; // check row
                        if (i === j) {
                            // accumulate value
                            sum = add(sum, values[k]); // exit loop
                            break;
                        }
                        if (i > j) {
                            break;
                        }
                    }
                }
            } // return trace
            return sum;
        }
        throw new RangeError('Matrix must be square (size: ' + _stringJs.format(size) + ')');
    }
    /**
   * Calculate the trace of a matrix: the sum of the elements on the main
   * diagonal of a square matrix.
   *
   * Syntax:
   *
   *    math.trace(x)
   *
   * Examples:
   *
   *    math.trace([[1, 2], [3, 4]]) // returns 5
   *
   *    const A = [
   *      [1, 2, 3],
   *      [-1, 2, 3],
   *      [2, 0, 3]
   *    ]
   *    math.trace(A) // returns 6
   *
   * See also:
   *
   *    diag
   *
   * @param {Array | Matrix} x  A matrix
   *
   * @return {number} The trace of `x`
   */ return typed('trace', {
        Array: function _arrayTrace(x) {
            // use dense matrix implementation
            return _denseTrace(matrix(x));
        },
        SparseMatrix: _sparseTrace,
        DenseMatrix: _denseTrace,
        any: _objectJs.clone
    });
});

},{"../../utils/object.js":"eRHhH","../../utils/string.js":"0PPSB","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ilaJA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIndex", ()=>createIndex
);
var _factoryJs = require("../../../utils/factory.js");
var _isJs = require("../../../utils/is.js");
var name = 'index';
var dependencies = [
    'typed',
    'Index'
];
var createIndex = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Index  } = _ref;
    /**
   * Create an index. An Index can store ranges having start, step, and end
   * for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Syntax:
   *
   *     math.index(range1, range2, ...)
   *
   * Where each range can be any of:
   *
   * - A number
   * - A string for getting/setting an object property
   * - An instance of `Range`
   * - A one-dimensional Array or a Matrix with numbers
   *
   * Indexes must be zero-based, integer numbers.
   *
   * Examples:
   *
   *    const b = [1, 2, 3, 4, 5]
   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
   *
   *    const a = math.matrix([[1, 2], [3, 4]])
   *    a.subset(math.index(0, 1))             // returns 2
   *
   * See also:
   *
   *    bignumber, boolean, complex, matrix, number, string, unit
   *
   * @param {...*} ranges   Zero or more ranges or numbers.
   * @return {Index}        Returns the created index
   */ return typed(name, {
        '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
            var ranges = args.map(function(arg) {
                if (_isJs.isBigNumber(arg)) return arg.toNumber(); // convert BigNumber to Number
                else if (Array.isArray(arg) || _isJs.isMatrix(arg)) return arg.map(function(elem) {
                    // convert BigNumber to Number
                    return _isJs.isBigNumber(elem) ? elem.toNumber() : elem;
                });
                else return arg;
            });
            var res = new Index();
            Index.apply(res, ranges);
            return res;
        }
    });
});

},{"../../../utils/factory.js":"26foW","../../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7wMVr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createNode", ()=>createNode
);
var _isJs = require("../../utils/is.js");
var _keywordsJs = require("../keywords.js");
var _objectJs = require("../../utils/object.js");
var _factoryJs = require("../../utils/factory.js");
var _mapJs = require("../../utils/map.js");
var name = 'Node';
var dependencies = [
    'mathWithTransform'
];
var createNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { mathWithTransform  } = _ref;
    /**
   * Node
   */ function Node() {
        if (!(this instanceof Node)) throw new SyntaxError('Constructor must be called with the new operator');
    }
    /**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */ Node.prototype.evaluate = function(scope) {
        return this.compile().evaluate(scope);
    };
    Node.prototype.type = 'Node';
    Node.prototype.isNode = true;
    Node.prototype.comment = '';
    /**
   * Compile the node into an optimized, evauatable JavaScript function
   * @return {{evaluate: function([Object])}} object
   *                Returns an object with a function 'evaluate',
   *                which can be invoked as expr.evaluate([scope: Object]),
   *                where scope is an optional object with
   *                variables.
   */ Node.prototype.compile = function() {
        var expr = this._compile(mathWithTransform, {
        });
        var args = {
        };
        var context = null;
        function evaluate(scope) {
            var s = _mapJs.createMap(scope);
            _validateScope(s);
            return expr(s, args, context);
        }
        return {
            evaluate
        };
    };
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ Node.prototype._compile = function(math, argNames) {
        throw new Error('Method _compile should be implemented by type ' + this.type);
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ Node.prototype.forEach = function(callback) {
        // must be implemented by each of the Node implementations
        throw new Error('Cannot run forEach on a Node interface');
    };
    /**
   * Create a new Node having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */ Node.prototype.map = function(callback) {
        // must be implemented by each of the Node implementations
        throw new Error('Cannot run map on a Node interface');
    };
    /**
   * Validate whether an object is a Node, for use with map
   * @param {Node} node
   * @returns {Node} Returns the input if it's a node, else throws an Error
   * @protected
   */ Node.prototype._ifNode = function(node) {
        if (!_isJs.isNode(node)) throw new TypeError('Callback function must return a Node');
        return node;
    };
    /**
   * Recursively traverse all nodes in a node tree. Executes given callback for
   * this node and each of its child nodes.
   * @param {function(node: Node, path: string, parent: Node)} callback
   *          A callback called for every node in the node tree.
   */ Node.prototype.traverse = function(callback1) {
        // execute callback for itself
        // eslint-disable-next-line
        callback1(this, null, null); // recursively traverse over all childs of a node
        function _traverse(node, callback) {
            node.forEach(function(child, path, parent) {
                callback(child, path, parent);
                _traverse(child, callback);
            });
        }
        _traverse(this, callback1);
    };
    /**
   * Recursively transform a node tree via a transform function.
   *
   * For example, to replace all nodes of type SymbolNode having name 'x' with a
   * ConstantNode with value 2:
   *
   *     const res = Node.transform(function (node, path, parent) {
   *       if (node && node.isSymbolNode) && (node.name === 'x')) {
   *         return new ConstantNode(2)
   *       }
   *       else {
   *         return node
   *       }
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *          A mapping function accepting a node, and returning
   *          a replacement for the node or the original node.
   *          Signature: callback(node: Node, index: string, parent: Node) : Node
   * @return {Node} Returns the original node or its replacement
   */ Node.prototype.transform = function(callback) {
        function _transform(child, path, parent) {
            var replacement = callback(child, path, parent);
            if (replacement !== child) // stop iterating when the node is replaced
            return replacement;
            return child.map(_transform);
        }
        return _transform(this, null, null);
    };
    /**
   * Find any node in the node tree matching given filter function. For example, to
   * find all nodes of type SymbolNode having name 'x':
   *
   *     const results = Node.filter(function (node) {
   *       return (node && node.isSymbolNode) && (node.name === 'x')
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *            A test function returning true when a node matches, and false
   *            otherwise. Function signature:
   *            callback(node: Node, index: string, parent: Node) : boolean
   * @return {Node[]} nodes       An array with nodes matching given filter criteria
   */ Node.prototype.filter = function(callback) {
        var nodes = [];
        this.traverse(function(node, path, parent) {
            if (callback(node, path, parent)) nodes.push(node);
        });
        return nodes;
    };
    /**
   * Create a shallow clone of this node
   * @return {Node}
   */ Node.prototype.clone = function() {
        // must be implemented by each of the Node implementations
        throw new Error('Cannot clone a Node interface');
    };
    /**
   * Create a deep clone of this node
   * @return {Node}
   */ Node.prototype.cloneDeep = function() {
        return this.map(function(node) {
            return node.cloneDeep();
        });
    };
    /**
   * Deep compare this node with another node.
   * @param {Node} other
   * @return {boolean} Returns true when both nodes are of the same type and
   *                   contain the same values (as do their childs)
   */ Node.prototype.equals = function(other) {
        return other ? _objectJs.deepStrictEqual(this, other) : false;
    };
    /**
   * Get string representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */ Node.prototype.toString = function(options) {
        var customString = this._getCustomString(options);
        if (typeof customString !== 'undefined') return customString;
        return this._toString(options);
    };
    /**
   * Get a JSON representation of the node
   * Both .toJSON() and the static .fromJSON(json) should be implemented by all
   * implementations of Node
   * @returns {Object}
   */ Node.prototype.toJSON = function() {
        throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
    };
    /**
   * Get HTML representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)" or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */ Node.prototype.toHTML = function(options) {
        var customString = this._getCustomString(options);
        if (typeof customString !== 'undefined') return customString;
        return this.toHTML(options);
    };
    /**
   * Internal function to generate the string output.
   * This has to be implemented by every Node
   *
   * @throws {Error}
   */ Node.prototype._toString = function() {
        // must be implemented by each of the Node implementations
        throw new Error('_toString not implemented for ' + this.type);
    };
    /**
   * Get LaTeX representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */ Node.prototype.toTex = function(options) {
        var customString = this._getCustomString(options);
        if (typeof customString !== 'undefined') return customString;
        return this._toTex(options);
    };
    /**
   * Internal function to generate the LaTeX output.
   * This has to be implemented by every Node
   *
   * @param {Object} [options]
   * @throws {Error}
   */ Node.prototype._toTex = function(options) {
        // must be implemented by each of the Node implementations
        throw new Error('_toTex not implemented for ' + this.type);
    };
    /**
   * Helper used by `to...` functions.
   */ Node.prototype._getCustomString = function(options) {
        if (options && typeof options === 'object') switch(typeof options.handler){
            case 'object':
            case 'undefined':
                return;
            case 'function':
                return options.handler(this, options);
            default:
                throw new TypeError('Object or function expected as callback');
        }
    };
    /**
   * Get identifier.
   * @return {string}
   */ Node.prototype.getIdentifier = function() {
        return this.type;
    };
    /**
   * Get the content of the current Node.
   * @return {Node} node
   **/ Node.prototype.getContent = function() {
        return this;
    };
    /**
   * Validate the symbol names of a scope.
   * Throws an error when the scope contains an illegal symbol.
   * @param {Object} scope
   */ function _validateScope(scope) {
        for (var symbol of [
            ..._keywordsJs.keywords
        ]){
            if (scope.has(symbol)) throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
        }
    }
    return Node;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../keywords.js":"eC9NF","../../utils/object.js":"eRHhH","../../utils/factory.js":"26foW","../../utils/map.js":"1C0lk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eC9NF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "keywords", ()=>keywords
);
var keywords = new Set([
    'end'
]);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kdfAY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAccessorNode", ()=>createAccessorNode
);
var _isJs = require("../../utils/is.js");
var _customsJs = require("../../utils/customs.js");
var _factoryJs = require("../../utils/factory.js");
var _accessJs = require("./utils/access.js");
var name = 'AccessorNode';
var dependencies = [
    'subset',
    'Node'
];
var createAccessorNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { subset , Node  } = _ref;
    var access = _accessJs.accessFactory({
        subset
    });
    /**
   * @constructor AccessorNode
   * @extends {Node}
   * Access an object property or get a matrix subset
   *
   * @param {Node} object                 The object from which to retrieve
   *                                      a property or subset.
   * @param {IndexNode} index             IndexNode containing ranges
   */ function AccessorNode(object, index) {
        if (!(this instanceof AccessorNode)) throw new SyntaxError('Constructor must be called with the new operator');
        if (!_isJs.isNode(object)) throw new TypeError('Node expected for parameter "object"');
        if (!_isJs.isIndexNode(index)) throw new TypeError('IndexNode expected for parameter "index"');
        this.object = object || null;
        this.index = index; // readonly property name
        Object.defineProperty(this, 'name', {
            get: (function() {
                if (this.index) return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
                else return this.object.name || '';
            }).bind(this),
            set: function set() {
                throw new Error('Cannot assign a new name, name is read-only');
            }
        });
    }
    AccessorNode.prototype = new Node();
    AccessorNode.prototype.type = 'AccessorNode';
    AccessorNode.prototype.isAccessorNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ AccessorNode.prototype._compile = function(math, argNames) {
        var evalObject = this.object._compile(math, argNames);
        var evalIndex = this.index._compile(math, argNames);
        if (this.index.isObjectProperty()) {
            var prop = this.index.getObjectProperty();
            return function evalAccessorNode(scope, args, context) {
                // get a property from an object evaluated using the scope.
                return _customsJs.getSafeProperty(evalObject(scope, args, context), prop);
            };
        } else return function evalAccessorNode(scope, args, context) {
            var object = evalObject(scope, args, context);
            var index = evalIndex(scope, args, object); // we pass object here instead of context
            return access(object, index);
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ AccessorNode.prototype.forEach = function(callback) {
        callback(this.object, 'object', this);
        callback(this.index, 'index', this);
    };
    /**
   * Create a new AccessorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AccessorNode} Returns a transformed copy of the node
   */ AccessorNode.prototype.map = function(callback) {
        return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {AccessorNode}
   */ AccessorNode.prototype.clone = function() {
        return new AccessorNode(this.object, this.index);
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */ AccessorNode.prototype._toString = function(options) {
        var object = this.object.toString(options);
        if (needParenthesis(this.object)) object = '(' + object + ')';
        return object + this.index.toString(options);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */ AccessorNode.prototype.toHTML = function(options) {
        var object = this.object.toHTML(options);
        if (needParenthesis(this.object)) object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        return object + this.index.toHTML(options);
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */ AccessorNode.prototype._toTex = function(options) {
        var object = this.object.toTex(options);
        if (needParenthesis(this.object)) object = '\\left(\' + object + \'\\right)';
        return object + this.index.toTex(options);
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ AccessorNode.prototype.toJSON = function() {
        return {
            mathjs: 'AccessorNode',
            object: this.object,
            index: this.index
        };
    };
    /**
   * Instantiate an AccessorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
   *                       where mathjs is optional
   * @returns {AccessorNode}
   */ AccessorNode.fromJSON = function(json) {
        return new AccessorNode(json.object, json.index);
    };
    /**
   * Are parenthesis needed?
   * @private
   */ function needParenthesis(node) {
        // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
        return !(_isJs.isAccessorNode(node) || _isJs.isArrayNode(node) || _isJs.isConstantNode(node) || _isJs.isFunctionNode(node) || _isJs.isObjectNode(node) || _isJs.isParenthesisNode(node) || _isJs.isSymbolNode(node));
    }
    return AccessorNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/customs.js":"8gSIx","../../utils/factory.js":"26foW","./utils/access.js":"gA3pK","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gA3pK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "accessFactory", ()=>accessFactory
);
var _errorTransformJs = require("../../transform/utils/errorTransform.js");
var _customsJs = require("../../../utils/customs.js");
function accessFactory(_ref) {
    var { subset  } = _ref;
    /**
   * Retrieve part of an object:
   *
   * - Retrieve a property from an object
   * - Retrieve a part of a string
   * - Retrieve a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @return {Object | Array | Matrix | string} Returns the subset
   */ return function access(object, index) {
        try {
            if (Array.isArray(object)) return subset(object, index);
            else if (object && typeof object.subset === 'function') // Matrix
            return object.subset(index);
            else if (typeof object === 'string') // TODO: move getStringSubset into a separate util file, use that
            return subset(object, index);
            else if (typeof object === 'object') {
                if (!index.isObjectProperty()) throw new TypeError('Cannot apply a numeric index as object property');
                return _customsJs.getSafeProperty(object, index.getObjectProperty());
            } else throw new TypeError('Cannot apply index: unsupported type of object');
        } catch (err) {
            throw _errorTransformJs.errorTransform(err);
        }
    };
}

},{"../../transform/utils/errorTransform.js":"gl6m9","../../../utils/customs.js":"8gSIx","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gl6m9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Transform zero-based indices to one-based indices in errors
 * @param {Error} err
 * @returns {Error | IndexError} Returns the transformed error
 */ parcelHelpers.export(exports, "errorTransform", ()=>errorTransform
);
var _indexErrorJs = require("../../../error/IndexError.js");
function errorTransform(err) {
    if (err && err.isIndexError) return new _indexErrorJs.IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
    return err;
}

},{"../../../error/IndexError.js":"bCMLn","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6bZ78":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createArrayNode", ()=>createArrayNode
);
var _isJs = require("../../utils/is.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'ArrayNode';
var dependencies = [
    'Node'
];
var createArrayNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Node  } = _ref;
    /**
   * @constructor ArrayNode
   * @extends {Node}
   * Holds an 1-dimensional array with items
   * @param {Node[]} [items]   1 dimensional array with items
   */ function ArrayNode(items) {
        if (!(this instanceof ArrayNode)) throw new SyntaxError('Constructor must be called with the new operator');
        this.items = items || []; // validate input
        if (!Array.isArray(this.items) || !this.items.every(_isJs.isNode)) throw new TypeError('Array containing Nodes expected');
    }
    ArrayNode.prototype = new Node();
    ArrayNode.prototype.type = 'ArrayNode';
    ArrayNode.prototype.isArrayNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ ArrayNode.prototype._compile = function(math, argNames) {
        var evalItems = _arrayJs.map(this.items, function(item) {
            return item._compile(math, argNames);
        });
        var asMatrix = math.config.matrix !== 'Array';
        if (asMatrix) {
            var matrix = math.matrix;
            return function evalArrayNode(scope, args, context) {
                return matrix(_arrayJs.map(evalItems, function(evalItem) {
                    return evalItem(scope, args, context);
                }));
            };
        } else return function evalArrayNode(scope, args, context) {
            return _arrayJs.map(evalItems, function(evalItem) {
                return evalItem(scope, args, context);
            });
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ ArrayNode.prototype.forEach = function(callback) {
        for(var i = 0; i < this.items.length; i++){
            var node = this.items[i];
            callback(node, 'items[' + i + ']', this);
        }
    };
    /**
   * Create a new ArrayNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ArrayNode} Returns a transformed copy of the node
   */ ArrayNode.prototype.map = function(callback) {
        var items = [];
        for(var i = 0; i < this.items.length; i++)items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
        return new ArrayNode(items);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {ArrayNode}
   */ ArrayNode.prototype.clone = function() {
        return new ArrayNode(this.items.slice(0));
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ ArrayNode.prototype._toString = function(options) {
        var items = this.items.map(function(node) {
            return node.toString(options);
        });
        return '[' + items.join(', ') + ']';
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ ArrayNode.prototype.toJSON = function() {
        return {
            mathjs: 'ArrayNode',
            items: this.items
        };
    };
    /**
   * Instantiate an ArrayNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ArrayNode", items: [...]}`,
   *                       where mathjs is optional
   * @returns {ArrayNode}
   */ ArrayNode.fromJSON = function(json) {
        return new ArrayNode(json.items);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ ArrayNode.prototype.toHTML = function(options) {
        var items = this.items.map(function(node) {
            return node.toHTML(options);
        });
        return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ ArrayNode.prototype._toTex = function(options) {
        function itemsToTex(items, nested) {
            var mixedItems = items.some(_isJs.isArrayNode) && !items.every(_isJs.isArrayNode);
            var itemsFormRow = nested || mixedItems;
            var itemSep = itemsFormRow ? '&' : '\\\\';
            var itemsTex = items.map(function(node) {
                if (node.items) return itemsToTex(node.items, !nested);
                else return node.toTex(options);
            }).join(itemSep);
            return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\begin{bmatrix}' + itemsTex + '\\end{bmatrix}' : itemsTex;
        }
        return itemsToTex(this.items, false);
    };
    return ArrayNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kDb5k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAssignmentNode", ()=>createAssignmentNode
);
var _isJs = require("../../utils/is.js");
var _customsJs = require("../../utils/customs.js");
var _factoryJs = require("../../utils/factory.js");
var _accessJs = require("./utils/access.js");
var _assignJs = require("./utils/assign.js");
var _operatorsJs = require("../operators.js");
var name1 = 'AssignmentNode';
var dependencies = [
    'subset',
    '?matrix',
    'Node'
];
var createAssignmentNode = /* #__PURE__ */ _factoryJs.factory(name1, dependencies, (_ref)=>{
    var { subset , matrix , Node  } = _ref;
    var access = _accessJs.accessFactory({
        subset
    });
    var assign = _assignJs.assignFactory({
        subset,
        matrix
    });
    /**
   * @constructor AssignmentNode
   * @extends {Node}
   *
   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
   * replace a subset of a matrix like `A[2,2]=42`.
   *
   * Syntax:
   *
   *     new AssignmentNode(symbol, value)
   *     new AssignmentNode(object, index, value)
   *
   * Usage:
   *
   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
   *
   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
   * @param {IndexNode} [index=null]            Index, property name or matrix
   *                                            index. Optional. If not provided
   *                                            and `object` is a SymbolNode,
   *                                            the property is assigned to the
   *                                            global scope.
   * @param {Node} value                        The value to be assigned
   */ function AssignmentNode(object, index, value) {
        if (!(this instanceof AssignmentNode)) throw new SyntaxError('Constructor must be called with the new operator');
        this.object = object;
        this.index = value ? index : null;
        this.value = value || index; // validate input
        if (!_isJs.isSymbolNode(object) && !_isJs.isAccessorNode(object)) throw new TypeError('SymbolNode or AccessorNode expected as "object"');
        if (_isJs.isSymbolNode(object) && object.name === 'end') throw new Error('Cannot assign to symbol "end"');
        if (this.index && !_isJs.isIndexNode(this.index)) // index is optional
        throw new TypeError('IndexNode expected as "index"');
        if (!_isJs.isNode(this.value)) throw new TypeError('Node expected as "value"');
         // readonly property name
        Object.defineProperty(this, 'name', {
            get: (function() {
                if (this.index) return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
                else return this.object.name || '';
            }).bind(this),
            set: function set() {
                throw new Error('Cannot assign a new name, name is read-only');
            }
        });
    }
    AssignmentNode.prototype = new Node();
    AssignmentNode.prototype.type = 'AssignmentNode';
    AssignmentNode.prototype.isAssignmentNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ AssignmentNode.prototype._compile = function(math, argNames) {
        var evalObject = this.object._compile(math, argNames);
        var evalIndex = this.index ? this.index._compile(math, argNames) : null;
        var evalValue = this.value._compile(math, argNames);
        var name = this.object.name;
        if (!this.index) {
            // apply a variable to the scope, for example `a=2`
            if (!_isJs.isSymbolNode(this.object)) throw new TypeError('SymbolNode expected as object');
            return function evalAssignmentNode(scope, args, context) {
                var value = evalValue(scope, args, context);
                scope.set(name, value);
                return value;
            };
        } else if (this.index.isObjectProperty()) {
            // apply an object property for example `a.b=2`
            var prop = this.index.getObjectProperty();
            return function evalAssignmentNode(scope, args, context) {
                var object = evalObject(scope, args, context);
                var value = evalValue(scope, args, context);
                _customsJs.setSafeProperty(object, prop, value);
                return value;
            };
        } else if (_isJs.isSymbolNode(this.object)) // update a matrix subset, for example `a[2]=3`
        return function evalAssignmentNode(scope, args, context) {
            var childObject = evalObject(scope, args, context);
            var value = evalValue(scope, args, context);
            var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context
            scope.set(name, assign(childObject, index, value));
            return value;
        };
        else {
            // isAccessorNode(node.object) === true
            // update a matrix subset, for example `a.b[2]=3`
            // we will not use the compile function of the AccessorNode, but compile it
            // ourselves here as we need the parent object of the AccessorNode:
            // wee need to apply the updated object to parent object
            var evalParentObject = this.object.object._compile(math, argNames);
            if (this.object.index.isObjectProperty()) {
                var parentProp = this.object.index.getObjectProperty();
                return function evalAssignmentNode(scope, args, context) {
                    var parent = evalParentObject(scope, args, context);
                    var childObject = _customsJs.getSafeProperty(parent, parentProp);
                    var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context
                    var value = evalValue(scope, args, context);
                    _customsJs.setSafeProperty(parent, parentProp, assign(childObject, index, value));
                    return value;
                };
            } else {
                // if some parameters use the 'end' parameter, we need to calculate the size
                var evalParentIndex = this.object.index._compile(math, argNames);
                return function evalAssignmentNode(scope, args, context) {
                    var parent = evalParentObject(scope, args, context);
                    var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context
                    var childObject = access(parent, parentIndex);
                    var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context
                    var value = evalValue(scope, args, context);
                    assign(parent, parentIndex, assign(childObject, index, value));
                    return value;
                };
            }
        }
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ AssignmentNode.prototype.forEach = function(callback) {
        callback(this.object, 'object', this);
        if (this.index) callback(this.index, 'index', this);
        callback(this.value, 'value', this);
    };
    /**
   * Create a new AssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AssignmentNode} Returns a transformed copy of the node
   */ AssignmentNode.prototype.map = function(callback) {
        var object = this._ifNode(callback(this.object, 'object', this));
        var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;
        var value = this._ifNode(callback(this.value, 'value', this));
        return new AssignmentNode(object, index, value);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {AssignmentNode}
   */ AssignmentNode.prototype.clone = function() {
        return new AssignmentNode(this.object, this.index, this.value);
    };
    /*
   * Is parenthesis needed?
   * @param {node} node
   * @param {string} [parenthesis='keep']
   * @private
   */ function needParenthesis(node, parenthesis) {
        if (!parenthesis) parenthesis = 'keep';
        var precedence = _operatorsJs.getPrecedence(node, parenthesis);
        var exprPrecedence = _operatorsJs.getPrecedence(node.value, parenthesis);
        return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
    }
    /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */ AssignmentNode.prototype._toString = function(options) {
        var object = this.object.toString(options);
        var index = this.index ? this.index.toString(options) : '';
        var value = this.value.toString(options);
        if (needParenthesis(this, options && options.parenthesis)) value = '(' + value + ')';
        return object + index + ' = ' + value;
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ AssignmentNode.prototype.toJSON = function() {
        return {
            mathjs: 'AssignmentNode',
            object: this.object,
            index: this.index,
            value: this.value
        };
    };
    /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
   *                       where mathjs is optional
   * @returns {AssignmentNode}
   */ AssignmentNode.fromJSON = function(json) {
        return new AssignmentNode(json.object, json.index, json.value);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */ AssignmentNode.prototype.toHTML = function(options) {
        var object = this.object.toHTML(options);
        var index = this.index ? this.index.toHTML(options) : '';
        var value = this.value.toHTML(options);
        if (needParenthesis(this, options && options.parenthesis)) value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
        return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */ AssignmentNode.prototype._toTex = function(options) {
        var object = this.object.toTex(options);
        var index = this.index ? this.index.toTex(options) : '';
        var value = this.value.toTex(options);
        if (needParenthesis(this, options && options.parenthesis)) value = "\\left(".concat(value, "\\right)");
        return object + index + ':=' + value;
    };
    return AssignmentNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/customs.js":"8gSIx","../../utils/factory.js":"26foW","./utils/access.js":"gA3pK","./utils/assign.js":"3Rdkz","../operators.js":"fKLyc","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3Rdkz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assignFactory", ()=>assignFactory
);
var _errorTransformJs = require("../../transform/utils/errorTransform.js");
var _customsJs = require("../../../utils/customs.js");
function assignFactory(_ref) {
    var { subset , matrix  } = _ref;
    /**
   * Replace part of an object:
   *
   * - Assign a property to an object
   * - Replace a part of a string
   * - Replace a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @param {*} value
   * @return {Object | Array | Matrix | string} Returns the original object
   *                                            except in case of a string
   */ // TODO: change assign to return the value instead of the object
    return function assign(object, index, value) {
        try {
            if (Array.isArray(object)) // we use matrix.subset here instead of the function subset because we must not clone the contents
            return matrix(object).subset(index, value).valueOf();
            else if (object && typeof object.subset === 'function') // Matrix
            return object.subset(index, value);
            else if (typeof object === 'string') // TODO: move setStringSubset into a separate util file, use that
            return subset(object, index, value);
            else if (typeof object === 'object') {
                if (!index.isObjectProperty()) throw TypeError('Cannot apply a numeric index as object property');
                _customsJs.setSafeProperty(object, index.getObjectProperty(), value);
                return object;
            } else throw new TypeError('Cannot apply index: unsupported type of object');
        } catch (err) {
            throw _errorTransformJs.errorTransform(err);
        }
    };
}

},{"../../transform/utils/errorTransform.js":"gl6m9","../../../utils/customs.js":"8gSIx","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fKLyc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "properties", ()=>properties
);
/**
 * Get the precedence of a Node.
 * Higher number for higher precedence, starting with 0.
 * Returns null if the precedence is undefined.
 *
 * @param {Node} _node
 * @param {string} parenthesis
 * @return {number | null}
 */ parcelHelpers.export(exports, "getPrecedence", ()=>getPrecedence
);
/**
 * Get the associativity of an operator (left or right).
 * Returns a string containing 'left' or 'right' or null if
 * the associativity is not defined.
 *
 * @param {Node} _node
 * @param {string} parenthesis
 * @return {string|null}
 * @throws {Error}
 */ parcelHelpers.export(exports, "getAssociativity", ()=>getAssociativity
);
/**
 * Check if an operator is associative with another operator.
 * Returns either true or false or null if not defined.
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 * @param {string} parenthesis
 * @return {boolean | null}
 */ parcelHelpers.export(exports, "isAssociativeWith", ()=>isAssociativeWith
);
// list of identifiers of nodes in order of their precedence
// also contains information about left/right associativity
// and which other operator the operator is associative with
// Example:
// addition is associative with addition and subtraction, because:
// (a+b)+c=a+(b+c)
// (a+b)-c=a+(b-c)
//
// postfix operators are left associative, prefix operators
// are right associative
//
// It's also possible to set the following properties:
// latexParens: if set to false, this node doesn't need to be enclosed
//              in parentheses when using LaTeX
// latexLeftParens: if set to false, this !OperatorNode's!
//                  left argument doesn't need to be enclosed
//                  in parentheses
// latexRightParens: the same for the right argument
var _objectJs = require("../utils/object.js");
var properties = [
    {
        // assignment
        AssignmentNode: {
        },
        FunctionAssignmentNode: {
        }
    },
    {
        // conditional expression
        ConditionalNode: {
            latexLeftParens: false,
            latexRightParens: false,
            latexParens: false // conditionals don't need parentheses in LaTeX because
        }
    },
    {
        // logical or
        'OperatorNode:or': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // logical xor
        'OperatorNode:xor': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // logical and
        'OperatorNode:and': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // bitwise or
        'OperatorNode:bitOr': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // bitwise xor
        'OperatorNode:bitXor': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // bitwise and
        'OperatorNode:bitAnd': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // relational operators
        'OperatorNode:equal': {
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:unequal': {
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:smaller': {
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:larger': {
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:smallerEq': {
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:largerEq': {
            associativity: 'left',
            associativeWith: []
        },
        RelationalNode: {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // bitshift operators
        'OperatorNode:leftShift': {
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:rightArithShift': {
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:rightLogShift': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // unit conversion
        'OperatorNode:to': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // range
        RangeNode: {
        }
    },
    {
        // addition, subtraction
        'OperatorNode:add': {
            associativity: 'left',
            associativeWith: [
                'OperatorNode:add',
                'OperatorNode:subtract'
            ]
        },
        'OperatorNode:subtract': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // multiply, divide, modulus
        'OperatorNode:multiply': {
            associativity: 'left',
            associativeWith: [
                'OperatorNode:multiply',
                'OperatorNode:divide',
                'Operator:dotMultiply',
                'Operator:dotDivide'
            ]
        },
        'OperatorNode:divide': {
            associativity: 'left',
            associativeWith: [],
            latexLeftParens: false,
            latexRightParens: false,
            latexParens: false // fractions don't require parentheses because
        },
        'OperatorNode:dotMultiply': {
            associativity: 'left',
            associativeWith: [
                'OperatorNode:multiply',
                'OperatorNode:divide',
                'OperatorNode:dotMultiply',
                'OperatorNode:doDivide'
            ]
        },
        'OperatorNode:dotDivide': {
            associativity: 'left',
            associativeWith: []
        },
        'OperatorNode:mod': {
            associativity: 'left',
            associativeWith: []
        }
    },
    {
        // unary prefix operators
        'OperatorNode:unaryPlus': {
            associativity: 'right'
        },
        'OperatorNode:unaryMinus': {
            associativity: 'right'
        },
        'OperatorNode:bitNot': {
            associativity: 'right'
        },
        'OperatorNode:not': {
            associativity: 'right'
        }
    },
    {
        // exponentiation
        'OperatorNode:pow': {
            associativity: 'right',
            associativeWith: [],
            latexRightParens: false // the exponent doesn't need parentheses in
        },
        'OperatorNode:dotPow': {
            associativity: 'right',
            associativeWith: []
        }
    },
    {
        // factorial
        'OperatorNode:factorial': {
            associativity: 'left'
        }
    },
    {
        // matrix transpose
        'OperatorNode:transpose': {
            associativity: 'left'
        }
    }
];
function getPrecedence(_node, parenthesis) {
    var node = _node;
    if (parenthesis !== 'keep') // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
    var identifier = node.getIdentifier();
    for(var i = 0; i < properties.length; i++){
        if (identifier in properties[i]) return i;
    }
    return null;
}
function getAssociativity(_node, parenthesis) {
    var node = _node;
    if (parenthesis !== 'keep') // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
    var identifier = node.getIdentifier();
    var index = getPrecedence(node, parenthesis);
    if (index === null) // node isn't in the list
    return null;
    var property = properties[index][identifier];
    if (_objectJs.hasOwnProperty(property, 'associativity')) {
        if (property.associativity === 'left') return 'left';
        if (property.associativity === 'right') return 'right';
         // associativity is invalid
        throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
    } // associativity is undefined
    return null;
}
function isAssociativeWith(nodeA, nodeB, parenthesis) {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
    var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
    var identifierA = a.getIdentifier();
    var identifierB = b.getIdentifier();
    var index = getPrecedence(a, parenthesis);
    if (index === null) // node isn't in the list
    return null;
    var property = properties[index][identifierA];
    if (_objectJs.hasOwnProperty(property, 'associativeWith') && property.associativeWith instanceof Array) {
        for(var i = 0; i < property.associativeWith.length; i++){
            if (property.associativeWith[i] === identifierB) return true;
        }
        return false;
    } // associativeWith is not defined
    return null;
}

},{"../utils/object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2bzLR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBlockNode", ()=>createBlockNode
);
var _isJs = require("../../utils/is.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'BlockNode';
var dependencies = [
    'ResultSet',
    'Node'
];
var createBlockNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { ResultSet , Node  } = _ref;
    /**
   * @constructor BlockNode
   * @extends {Node}
   * Holds a set with blocks
   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
   *            An array with blocks, where a block is constructed as an Object
   *            with properties block, which is a Node, and visible, which is
   *            a boolean. The property visible is optional and is true by default
   */ function BlockNode(blocks) {
        if (!(this instanceof BlockNode)) throw new SyntaxError('Constructor must be called with the new operator');
         // validate input, copy blocks
        if (!Array.isArray(blocks)) throw new Error('Array expected');
        this.blocks = blocks.map(function(block) {
            var node = block && block.node;
            var visible = block && block.visible !== undefined ? block.visible : true;
            if (!_isJs.isNode(node)) throw new TypeError('Property "node" must be a Node');
            if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
            return {
                node: node,
                visible: visible
            };
        });
    }
    BlockNode.prototype = new Node();
    BlockNode.prototype.type = 'BlockNode';
    BlockNode.prototype.isBlockNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ BlockNode.prototype._compile = function(math, argNames) {
        var evalBlocks = _arrayJs.map(this.blocks, function(block) {
            return {
                evaluate: block.node._compile(math, argNames),
                visible: block.visible
            };
        });
        return function evalBlockNodes(scope, args, context) {
            var results = [];
            _arrayJs.forEach(evalBlocks, function evalBlockNode(block) {
                var result = block.evaluate(scope, args, context);
                if (block.visible) results.push(result);
            });
            return new ResultSet(results);
        };
    };
    /**
   * Execute a callback for each of the child blocks of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ BlockNode.prototype.forEach = function(callback) {
        for(var i = 0; i < this.blocks.length; i++)callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
    };
    /**
   * Create a new BlockNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {BlockNode} Returns a transformed copy of the node
   */ BlockNode.prototype.map = function(callback) {
        var blocks = [];
        for(var i = 0; i < this.blocks.length; i++){
            var block = this.blocks[i];
            var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
            blocks[i] = {
                node: node,
                visible: block.visible
            };
        }
        return new BlockNode(blocks);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {BlockNode}
   */ BlockNode.prototype.clone = function() {
        var blocks = this.blocks.map(function(block) {
            return {
                node: block.node,
                visible: block.visible
            };
        });
        return new BlockNode(blocks);
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ BlockNode.prototype._toString = function(options) {
        return this.blocks.map(function(param) {
            return param.node.toString(options) + (param.visible ? '' : ';');
        }).join('\n');
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ BlockNode.prototype.toJSON = function() {
        return {
            mathjs: 'BlockNode',
            blocks: this.blocks
        };
    };
    /**
   * Instantiate an BlockNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
   *                       where mathjs is optional
   * @returns {BlockNode}
   */ BlockNode.fromJSON = function(json) {
        return new BlockNode(json.blocks);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ BlockNode.prototype.toHTML = function(options) {
        return this.blocks.map(function(param) {
            return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
        }).join('<span class="math-separator"><br /></span>');
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ BlockNode.prototype._toTex = function(options) {
        return this.blocks.map(function(param) {
            return param.node.toTex(options) + (param.visible ? '' : ';');
        }).join('\\;\\;\n');
    };
    return BlockNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lpUKx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConditionalNode", ()=>createConditionalNode
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var _operatorsJs = require("../operators.js");
var name = 'ConditionalNode';
var dependencies = [
    'Node'
];
var createConditionalNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Node  } = _ref;
    /**
   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
   *
   * @param {Node} condition   Condition, must result in a boolean
   * @param {Node} trueExpr    Expression evaluated when condition is true
   * @param {Node} falseExpr   Expression evaluated when condition is true
   *
   * @constructor ConditionalNode
   * @extends {Node}
   */ function ConditionalNode(condition, trueExpr, falseExpr) {
        if (!(this instanceof ConditionalNode)) throw new SyntaxError('Constructor must be called with the new operator');
        if (!_isJs.isNode(condition)) throw new TypeError('Parameter condition must be a Node');
        if (!_isJs.isNode(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
        if (!_isJs.isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
        this.condition = condition;
        this.trueExpr = trueExpr;
        this.falseExpr = falseExpr;
    }
    ConditionalNode.prototype = new Node();
    ConditionalNode.prototype.type = 'ConditionalNode';
    ConditionalNode.prototype.isConditionalNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ ConditionalNode.prototype._compile = function(math, argNames) {
        var evalCondition = this.condition._compile(math, argNames);
        var evalTrueExpr = this.trueExpr._compile(math, argNames);
        var evalFalseExpr = this.falseExpr._compile(math, argNames);
        return function evalConditionalNode(scope, args, context) {
            return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ ConditionalNode.prototype.forEach = function(callback) {
        callback(this.condition, 'condition', this);
        callback(this.trueExpr, 'trueExpr', this);
        callback(this.falseExpr, 'falseExpr', this);
    };
    /**
   * Create a new ConditionalNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ConditionalNode} Returns a transformed copy of the node
   */ ConditionalNode.prototype.map = function(callback) {
        return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {ConditionalNode}
   */ ConditionalNode.prototype.clone = function() {
        return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */ ConditionalNode.prototype._toString = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = _operatorsJs.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
        // or have lower or equal precedence
        // NOTE: enclosing all OperatorNodes in parentheses is a decision
        // purely based on aesthetics and readability
        var condition = this.condition.toString(options);
        var conditionPrecedence = _operatorsJs.getPrecedence(this.condition, parenthesis);
        if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) condition = '(' + condition + ')';
        var trueExpr = this.trueExpr.toString(options);
        var truePrecedence = _operatorsJs.getPrecedence(this.trueExpr, parenthesis);
        if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) trueExpr = '(' + trueExpr + ')';
        var falseExpr = this.falseExpr.toString(options);
        var falsePrecedence = _operatorsJs.getPrecedence(this.falseExpr, parenthesis);
        if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) falseExpr = '(' + falseExpr + ')';
        return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ ConditionalNode.prototype.toJSON = function() {
        return {
            mathjs: 'ConditionalNode',
            condition: this.condition,
            trueExpr: this.trueExpr,
            falseExpr: this.falseExpr
        };
    };
    /**
   * Instantiate an ConditionalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {ConditionalNode}
   */ ConditionalNode.fromJSON = function(json) {
        return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */ ConditionalNode.prototype.toHTML = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = _operatorsJs.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
        // or have lower or equal precedence
        // NOTE: enclosing all OperatorNodes in parentheses is a decision
        // purely based on aesthetics and readability
        var condition = this.condition.toHTML(options);
        var conditionPrecedence = _operatorsJs.getPrecedence(this.condition, parenthesis);
        if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        var trueExpr = this.trueExpr.toHTML(options);
        var truePrecedence = _operatorsJs.getPrecedence(this.trueExpr, parenthesis);
        if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        var falseExpr = this.falseExpr.toHTML(options);
        var falsePrecedence = _operatorsJs.getPrecedence(this.falseExpr, parenthesis);
        if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ ConditionalNode.prototype._toTex = function(options) {
        return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
    };
    /**
   * Test whether a condition is met
   * @param {*} condition
   * @returns {boolean} true if condition is true or non-zero, else false
   */ function testCondition(condition) {
        if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') return !!condition;
        if (condition) {
            if (_isJs.isBigNumber(condition)) return !condition.isZero();
            if (_isJs.isComplex(condition)) return !!(condition.re || condition.im);
            if (_isJs.isUnit(condition)) return !!condition.value;
        }
        if (condition === null || condition === undefined) return false;
        throw new TypeError('Unsupported type of condition "' + _isJs.typeOf(condition) + '"');
    }
    return ConditionalNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","../operators.js":"fKLyc","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7hu3g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConstantNode", ()=>createConstantNode
);
var _stringJs = require("../../utils/string.js");
var _isJs = require("../../utils/is.js");
var _latexJs = require("../../utils/latex.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'ConstantNode';
var dependencies = [
    'Node'
];
var createConstantNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Node  } = _ref;
    /**
   * A ConstantNode holds a constant value like a number or string.
   *
   * Usage:
   *
   *     new ConstantNode(2.3)
   *     new ConstantNode('hello')
   *
   * @param {*} value    Value can be any type (number, BigNumber, string, ...)
   * @constructor ConstantNode
   * @extends {Node}
   */ function ConstantNode(value) {
        if (!(this instanceof ConstantNode)) throw new SyntaxError('Constructor must be called with the new operator');
        this.value = value;
    }
    ConstantNode.prototype = new Node();
    ConstantNode.prototype.type = 'ConstantNode';
    ConstantNode.prototype.isConstantNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ ConstantNode.prototype._compile = function(math, argNames) {
        var value = this.value;
        return function evalConstantNode() {
            return value;
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ ConstantNode.prototype.forEach = function(callback) {
    };
    /**
   * Create a new ConstantNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ConstantNode} Returns a clone of the node
   */ ConstantNode.prototype.map = function(callback) {
        return this.clone();
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {ConstantNode}
   */ ConstantNode.prototype.clone = function() {
        return new ConstantNode(this.value);
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */ ConstantNode.prototype._toString = function(options) {
        return _stringJs.format(this.value, options);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */ ConstantNode.prototype.toHTML = function(options) {
        var value = this._toString(options);
        switch(_isJs.typeOf(this.value)){
            case 'number':
            case 'BigNumber':
            case 'Fraction':
                return '<span class="math-number">' + value + '</span>';
            case 'string':
                return '<span class="math-string">' + value + '</span>';
            case 'boolean':
                return '<span class="math-boolean">' + value + '</span>';
            case 'null':
                return '<span class="math-null-symbol">' + value + '</span>';
            case 'undefined':
                return '<span class="math-undefined">' + value + '</span>';
            default:
                return '<span class="math-symbol">' + value + '</span>';
        }
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ ConstantNode.prototype.toJSON = function() {
        return {
            mathjs: 'ConstantNode',
            value: this.value
        };
    };
    /**
   * Instantiate a ConstantNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", value: 2.3}`,
   *                       where mathjs is optional
   * @returns {ConstantNode}
   */ ConstantNode.fromJSON = function(json) {
        return new ConstantNode(json.value);
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ ConstantNode.prototype._toTex = function(options) {
        var value = this._toString(options);
        switch(_isJs.typeOf(this.value)){
            case 'string':
                return '\\mathtt{' + _latexJs.escapeLatex(value) + '}';
            case 'number':
            case 'BigNumber':
                if (!isFinite(this.value)) return this.value.valueOf() < 0 ? '-\\infty' : '\\infty';
                var index = value.toLowerCase().indexOf('e');
                if (index !== -1) return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
                return value;
            case 'Fraction':
                return this.value.toLatex();
            default:
                return value;
        }
    };
    return ConstantNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/string.js":"0PPSB","../../utils/is.js":"iwdlF","../../utils/latex.js":"bN3rW","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bN3rW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "latexSymbols", ()=>latexSymbols
);
parcelHelpers.export(exports, "latexOperators", ()=>latexOperators
);
parcelHelpers.export(exports, "latexFunctions", ()=>latexFunctions
);
parcelHelpers.export(exports, "defaultTemplate", ()=>defaultTemplate
);
parcelHelpers.export(exports, "escapeLatex", ()=>escapeLatex
) // @param {string} name
;
// @param {boolean} isUnit
parcelHelpers.export(exports, "toSymbol", ()=>toSymbol
);
/* eslint no-template-curly-in-string: "off" */ var _escapeLatex = require("escape-latex");
var _escapeLatexDefault = parcelHelpers.interopDefault(_escapeLatex);
var _objectJs = require("./object.js");
var latexSymbols = {
    // GREEK LETTERS
    Alpha: 'A',
    alpha: '\\alpha',
    Beta: 'B',
    beta: '\\beta',
    Gamma: '\\Gamma',
    gamma: '\\gamma',
    Delta: '\\Delta',
    delta: '\\delta',
    Epsilon: 'E',
    epsilon: '\\epsilon',
    varepsilon: '\\varepsilon',
    Zeta: 'Z',
    zeta: '\\zeta',
    Eta: 'H',
    eta: '\\eta',
    Theta: '\\Theta',
    theta: '\\theta',
    vartheta: '\\vartheta',
    Iota: 'I',
    iota: '\\iota',
    Kappa: 'K',
    kappa: '\\kappa',
    varkappa: '\\varkappa',
    Lambda: '\\Lambda',
    lambda: '\\lambda',
    Mu: 'M',
    mu: '\\mu',
    Nu: 'N',
    nu: '\\nu',
    Xi: '\\Xi',
    xi: '\\xi',
    Omicron: 'O',
    omicron: 'o',
    Pi: '\\Pi',
    pi: '\\pi',
    varpi: '\\varpi',
    Rho: 'P',
    rho: '\\rho',
    varrho: '\\varrho',
    Sigma: '\\Sigma',
    sigma: '\\sigma',
    varsigma: '\\varsigma',
    Tau: 'T',
    tau: '\\tau',
    Upsilon: '\\Upsilon',
    upsilon: '\\upsilon',
    Phi: '\\Phi',
    phi: '\\phi',
    varphi: '\\varphi',
    Chi: 'X',
    chi: '\\chi',
    Psi: '\\Psi',
    psi: '\\psi',
    Omega: '\\Omega',
    omega: '\\omega',
    // logic
    true: '\\mathrm{True}',
    false: '\\mathrm{False}',
    // other
    i: 'i',
    // TODO use \i ??
    inf: '\\infty',
    Inf: '\\infty',
    infinity: '\\infty',
    Infinity: '\\infty',
    oo: '\\infty',
    lim: '\\lim',
    undefined: '\\mathbf{?}'
};
var latexOperators = {
    transpose: '^\\top',
    ctranspose: '^H',
    factorial: '!',
    pow: '^',
    dotPow: '.^\\wedge',
    // TODO find ideal solution
    unaryPlus: '+',
    unaryMinus: '-',
    bitNot: '\\~',
    // TODO find ideal solution
    not: '\\neg',
    multiply: '\\cdot',
    divide: '\\frac',
    // TODO how to handle that properly?
    dotMultiply: '.\\cdot',
    // TODO find ideal solution
    dotDivide: '.:',
    // TODO find ideal solution
    mod: '\\mod',
    add: '+',
    subtract: '-',
    to: '\\rightarrow',
    leftShift: '<<',
    rightArithShift: '>>',
    rightLogShift: '>>>',
    equal: '=',
    unequal: '\\neq',
    smaller: '<',
    larger: '>',
    smallerEq: '\\leq',
    largerEq: '\\geq',
    bitAnd: '\\&',
    bitXor: '\\underline{|}',
    bitOr: '|',
    and: '\\wedge',
    xor: '\\veebar',
    or: '\\vee'
};
var latexFunctions = {
    // arithmetic
    abs: {
        1: '\\left|${args[0]}\\right|'
    },
    add: {
        2: "\\left(${args[0]}".concat(latexOperators.add, "${args[1]}\\right)")
    },
    cbrt: {
        1: '\\sqrt[3]{${args[0]}}'
    },
    ceil: {
        1: '\\left\\lceil${args[0]}\\right\\rceil'
    },
    cube: {
        1: '\\left(${args[0]}\\right)^3'
    },
    divide: {
        2: '\\frac{${args[0]}}{${args[1]}}'
    },
    dotDivide: {
        2: "\\left(${args[0]}".concat(latexOperators.dotDivide, "${args[1]}\\right)")
    },
    dotMultiply: {
        2: "\\left(${args[0]}".concat(latexOperators.dotMultiply, "${args[1]}\\right)")
    },
    dotPow: {
        2: "\\left(${args[0]}".concat(latexOperators.dotPow, "${args[1]}\\right)")
    },
    exp: {
        1: '\\exp\\left(${args[0]}\\right)'
    },
    expm1: "\\left(e".concat(latexOperators.pow, "{${args[0]}}-1\\right)"),
    fix: {
        1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
    },
    floor: {
        1: '\\left\\lfloor${args[0]}\\right\\rfloor'
    },
    gcd: '\\gcd\\left(${args}\\right)',
    hypot: '\\hypot\\left(${args}\\right)',
    log: {
        1: '\\ln\\left(${args[0]}\\right)',
        2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
    },
    log10: {
        1: '\\log_{10}\\left(${args[0]}\\right)'
    },
    log1p: {
        1: '\\ln\\left(${args[0]}+1\\right)',
        2: '\\log_{${args[1]}}\\left(${args[0]}+1\\right)'
    },
    log2: '\\log_{2}\\left(${args[0]}\\right)',
    mod: {
        2: "\\left(${args[0]}".concat(latexOperators.mod, "${args[1]}\\right)")
    },
    multiply: {
        2: "\\left(${args[0]}".concat(latexOperators.multiply, "${args[1]}\\right)")
    },
    norm: {
        1: '\\left\\|${args[0]}\\right\\|',
        2: undefined // use default template
    },
    nthRoot: {
        2: '\\sqrt[${args[1]}]{${args[0]}}'
    },
    nthRoots: {
        2: '\\{y : $y^{args[1]} = {${args[0]}}\\}'
    },
    pow: {
        2: "\\left(${args[0]}\\right)".concat(latexOperators.pow, "{${args[1]}}")
    },
    round: {
        1: '\\left\\lfloor${args[0]}\\right\\rceil',
        2: undefined // use default template
    },
    sign: {
        1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
    },
    sqrt: {
        1: '\\sqrt{${args[0]}}'
    },
    square: {
        1: '\\left(${args[0]}\\right)^2'
    },
    subtract: {
        2: "\\left(${args[0]}".concat(latexOperators.subtract, "${args[1]}\\right)")
    },
    unaryMinus: {
        1: "".concat(latexOperators.unaryMinus, "\\left(${args[0]}\\right)")
    },
    unaryPlus: {
        1: "".concat(latexOperators.unaryPlus, "\\left(${args[0]}\\right)")
    },
    // bitwise
    bitAnd: {
        2: "\\left(${args[0]}".concat(latexOperators.bitAnd, "${args[1]}\\right)")
    },
    bitNot: {
        1: latexOperators.bitNot + '\\left(${args[0]}\\right)'
    },
    bitOr: {
        2: "\\left(${args[0]}".concat(latexOperators.bitOr, "${args[1]}\\right)")
    },
    bitXor: {
        2: "\\left(${args[0]}".concat(latexOperators.bitXor, "${args[1]}\\right)")
    },
    leftShift: {
        2: "\\left(${args[0]}".concat(latexOperators.leftShift, "${args[1]}\\right)")
    },
    rightArithShift: {
        2: "\\left(${args[0]}".concat(latexOperators.rightArithShift, "${args[1]}\\right)")
    },
    rightLogShift: {
        2: "\\left(${args[0]}".concat(latexOperators.rightLogShift, "${args[1]}\\right)")
    },
    // combinatorics
    bellNumbers: {
        1: '\\mathrm{B}_{${args[0]}}'
    },
    catalan: {
        1: '\\mathrm{C}_{${args[0]}}'
    },
    stirlingS2: {
        2: '\\mathrm{S}\\left(${args}\\right)'
    },
    // complex
    arg: {
        1: '\\arg\\left(${args[0]}\\right)'
    },
    conj: {
        1: '\\left(${args[0]}\\right)^*'
    },
    im: {
        1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'
    },
    re: {
        1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'
    },
    // logical
    and: {
        2: "\\left(${args[0]}".concat(latexOperators.and, "${args[1]}\\right)")
    },
    not: {
        1: latexOperators.not + '\\left(${args[0]}\\right)'
    },
    or: {
        2: "\\left(${args[0]}".concat(latexOperators.or, "${args[1]}\\right)")
    },
    xor: {
        2: "\\left(${args[0]}".concat(latexOperators.xor, "${args[1]}\\right)")
    },
    // matrix
    cross: {
        2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
    },
    ctranspose: {
        1: "\\left(${args[0]}\\right)".concat(latexOperators.ctranspose)
    },
    det: {
        1: '\\det\\left(${args[0]}\\right)'
    },
    dot: {
        2: '\\left(${args[0]}\\cdot${args[1]}\\right)'
    },
    expm: {
        1: '\\exp\\left(${args[0]}\\right)'
    },
    inv: {
        1: '\\left(${args[0]}\\right)^{-1}'
    },
    sqrtm: {
        1: "{${args[0]}}".concat(latexOperators.pow, "{\\frac{1}{2}}")
    },
    trace: {
        1: '\\mathrm{tr}\\left(${args[0]}\\right)'
    },
    transpose: {
        1: "\\left(${args[0]}\\right)".concat(latexOperators.transpose)
    },
    // probability
    combinations: {
        2: '\\binom{${args[0]}}{${args[1]}}'
    },
    combinationsWithRep: {
        2: '\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)'
    },
    factorial: {
        1: "\\left(${args[0]}\\right)".concat(latexOperators.factorial)
    },
    gamma: {
        1: '\\Gamma\\left(${args[0]}\\right)'
    },
    // relational
    equal: {
        2: "\\left(${args[0]}".concat(latexOperators.equal, "${args[1]}\\right)")
    },
    larger: {
        2: "\\left(${args[0]}".concat(latexOperators.larger, "${args[1]}\\right)")
    },
    largerEq: {
        2: "\\left(${args[0]}".concat(latexOperators.largerEq, "${args[1]}\\right)")
    },
    smaller: {
        2: "\\left(${args[0]}".concat(latexOperators.smaller, "${args[1]}\\right)")
    },
    smallerEq: {
        2: "\\left(${args[0]}".concat(latexOperators.smallerEq, "${args[1]}\\right)")
    },
    unequal: {
        2: "\\left(${args[0]}".concat(latexOperators.unequal, "${args[1]}\\right)")
    },
    // special
    erf: {
        1: 'erf\\left(${args[0]}\\right)'
    },
    // statistics
    max: '\\max\\left(${args}\\right)',
    min: '\\min\\left(${args}\\right)',
    variance: '\\mathrm{Var}\\left(${args}\\right)',
    // trigonometry
    acos: {
        1: '\\cos^{-1}\\left(${args[0]}\\right)'
    },
    acosh: {
        1: '\\cosh^{-1}\\left(${args[0]}\\right)'
    },
    acot: {
        1: '\\cot^{-1}\\left(${args[0]}\\right)'
    },
    acoth: {
        1: '\\coth^{-1}\\left(${args[0]}\\right)'
    },
    acsc: {
        1: '\\csc^{-1}\\left(${args[0]}\\right)'
    },
    acsch: {
        1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'
    },
    asec: {
        1: '\\sec^{-1}\\left(${args[0]}\\right)'
    },
    asech: {
        1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'
    },
    asin: {
        1: '\\sin^{-1}\\left(${args[0]}\\right)'
    },
    asinh: {
        1: '\\sinh^{-1}\\left(${args[0]}\\right)'
    },
    atan: {
        1: '\\tan^{-1}\\left(${args[0]}\\right)'
    },
    atan2: {
        2: '\\mathrm{atan2}\\left(${args}\\right)'
    },
    atanh: {
        1: '\\tanh^{-1}\\left(${args[0]}\\right)'
    },
    cos: {
        1: '\\cos\\left(${args[0]}\\right)'
    },
    cosh: {
        1: '\\cosh\\left(${args[0]}\\right)'
    },
    cot: {
        1: '\\cot\\left(${args[0]}\\right)'
    },
    coth: {
        1: '\\coth\\left(${args[0]}\\right)'
    },
    csc: {
        1: '\\csc\\left(${args[0]}\\right)'
    },
    csch: {
        1: '\\mathrm{csch}\\left(${args[0]}\\right)'
    },
    sec: {
        1: '\\sec\\left(${args[0]}\\right)'
    },
    sech: {
        1: '\\mathrm{sech}\\left(${args[0]}\\right)'
    },
    sin: {
        1: '\\sin\\left(${args[0]}\\right)'
    },
    sinh: {
        1: '\\sinh\\left(${args[0]}\\right)'
    },
    tan: {
        1: '\\tan\\left(${args[0]}\\right)'
    },
    tanh: {
        1: '\\tanh\\left(${args[0]}\\right)'
    },
    // unit
    to: {
        2: "\\left(${args[0]}".concat(latexOperators.to, "${args[1]}\\right)")
    },
    // utils
    numeric: function numeric(node, options) {
        // Not sure if this is strictly right but should work correctly for the vast majority of use cases.
        return node.args[0].toTex();
    },
    // type
    number: {
        0: '0',
        1: '\\left(${args[0]}\\right)',
        2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
    },
    string: {
        0: '\\mathtt{""}',
        1: '\\mathrm{string}\\left(${args[0]}\\right)'
    },
    bignumber: {
        0: '0',
        1: '\\left(${args[0]}\\right)'
    },
    complex: {
        0: '0',
        1: '\\left(${args[0]}\\right)',
        2: "\\left(\\left(${args[0]}\\right)+".concat(latexSymbols.i, "\\cdot\\left(${args[1]}\\right)\\right)")
    },
    matrix: {
        0: '\\begin{bmatrix}\\end{bmatrix}',
        1: '\\left(${args[0]}\\right)',
        2: '\\left(${args[0]}\\right)'
    },
    sparse: {
        0: '\\begin{bsparse}\\end{bsparse}',
        1: '\\left(${args[0]}\\right)'
    },
    unit: {
        1: '\\left(${args[0]}\\right)',
        2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
    }
};
var defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
var latexUnits = {
    deg: '^\\circ'
};
function escapeLatex(string) {
    return _escapeLatexDefault.default(string, {
        preserveFormatting: true
    });
}
function toSymbol(name, isUnit) {
    isUnit = typeof isUnit === 'undefined' ? false : isUnit;
    if (isUnit) {
        if (_objectJs.hasOwnProperty(latexUnits, name)) return latexUnits[name];
        return '\\mathrm{' + escapeLatex(name) + '}';
    }
    if (_objectJs.hasOwnProperty(latexSymbols, name)) return latexSymbols[name];
    return escapeLatex(name);
}

},{"escape-latex":"ipZc1","./object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ipZc1":[function(require,module,exports) {
"use strict";
// Map the characters to escape to their escaped values. The list is derived
// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters
var _extends = Object.assign || function(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
    }
    return target;
};
var defaultEscapes1 = {
    "{": "\\{",
    "}": "\\}",
    "\\": "\\textbackslash{}",
    "#": "\\#",
    $: "\\$",
    "%": "\\%",
    "&": "\\&",
    "^": "\\textasciicircum{}",
    _: "\\_",
    "~": "\\textasciitilde{}"
};
var formatEscapes1 = {
    "\u2013": "\\--",
    "\u2014": "\\---",
    " ": "~",
    "\t": "\\qquad{}",
    "\r\n": "\\newline{}",
    "\n": "\\newline{}"
};
var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
    return _extends({
    }, defaultEscapes, formatEscapes);
};
/**
 * Escape a string to be used in LaTeX documents.
 * @param {string} str the string to be escaped.
 * @param {boolean} params.preserveFormatting whether formatting escapes should
 *  be performed (default: false).
 * @param {function} params.escapeMapFn the function to modify the escape maps.
 * @return {string} the escaped string, ready to be used in LaTeX.
 */ module.exports = function(str) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    }, _ref$preserveFormatti = _ref.preserveFormatting, preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti, _ref$escapeMapFn = _ref.escapeMapFn, escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;
    var runningStr = String(str);
    var result = "";
    var escapes = escapeMapFn(_extends({
    }, defaultEscapes1), preserveFormatting ? _extends({
    }, formatEscapes1) : {
    });
    var escapeKeys = Object.keys(escapes); // as it is reused later on
    // Algorithm: Go through the string character by character, if it matches
    // with one of the special characters then we'll replace it with the escaped
    // version.
    var _loop = function _loop() {
        var specialCharFound = false;
        escapeKeys.forEach(function(key, index) {
            if (specialCharFound) return;
            if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
                result += escapes[escapeKeys[index]];
                runningStr = runningStr.slice(key.length, runningStr.length);
                specialCharFound = true;
            }
        });
        if (!specialCharFound) {
            result += runningStr.slice(0, 1);
            runningStr = runningStr.slice(1, runningStr.length);
        }
    };
    while(runningStr)_loop();
    return result;
};

},{}],"5F4b2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFunctionAssignmentNode", ()=>createFunctionAssignmentNode
);
var _isJs = require("../../utils/is.js");
var _keywordsJs = require("../keywords.js");
var _stringJs = require("../../utils/string.js");
var _arrayJs = require("../../utils/array.js");
var _latexJs = require("../../utils/latex.js");
var _operatorsJs = require("../operators.js");
var _factoryJs = require("../../utils/factory.js");
var name1 = 'FunctionAssignmentNode';
var dependencies = [
    'typed',
    'Node'
];
var createFunctionAssignmentNode = /* #__PURE__ */ _factoryJs.factory(name1, dependencies, (_ref)=>{
    var { typed , Node  } = _ref;
    /**
   * @constructor FunctionAssignmentNode
   * @extends {Node}
   * Function assignment
   *
   * @param {string} name           Function name
   * @param {string[] | Array.<{name: string, type: string}>} params
   *                                Array with function parameter names, or an
   *                                array with objects containing the name
   *                                and type of the parameter
   * @param {Node} expr             The function expression
   */ function FunctionAssignmentNode(name, params, expr) {
        if (!(this instanceof FunctionAssignmentNode)) throw new SyntaxError('Constructor must be called with the new operator');
         // validate input
        if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
        if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
        if (!_isJs.isNode(expr)) throw new TypeError('Node expected for parameter "expr"');
        if (_keywordsJs.keywords.has(name)) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
        this.name = name;
        this.params = params.map(function(param) {
            return param && param.name || param;
        });
        this.types = params.map(function(param) {
            return param && param.type || 'any';
        });
        this.expr = expr;
    }
    FunctionAssignmentNode.prototype = new Node();
    FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
    FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ FunctionAssignmentNode.prototype._compile = function(math, argNames) {
        var childArgNames = Object.create(argNames);
        _arrayJs.forEach(this.params, function(param) {
            childArgNames[param] = true;
        }); // compile the function expression with the child args
        var evalExpr = this.expr._compile(math, childArgNames);
        var name = this.name;
        var params = this.params;
        var signature = _arrayJs.join(this.types, ',');
        var syntax = name + '(' + _arrayJs.join(this.params, ', ') + ')';
        return function evalFunctionAssignmentNode(scope, args, context) {
            var signatures = {
            };
            signatures[signature] = function() {
                var childArgs = Object.create(args);
                for(var i = 0; i < params.length; i++)childArgs[params[i]] = arguments[i];
                return evalExpr(scope, childArgs, context);
            };
            var fn = typed(name, signatures);
            fn.syntax = syntax;
            scope.set(name, fn);
            return fn;
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ FunctionAssignmentNode.prototype.forEach = function(callback) {
        callback(this.expr, 'expr', this);
    };
    /**
   * Create a new FunctionAssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
   */ FunctionAssignmentNode.prototype.map = function(callback) {
        var expr = this._ifNode(callback(this.expr, 'expr', this));
        return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionAssignmentNode}
   */ FunctionAssignmentNode.prototype.clone = function() {
        return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
    };
    /**
   * Is parenthesis needed?
   * @param {Node} node
   * @param {Object} parenthesis
   * @private
   */ function needParenthesis(node, parenthesis) {
        var precedence = _operatorsJs.getPrecedence(node, parenthesis);
        var exprPrecedence = _operatorsJs.getPrecedence(node.expr, parenthesis);
        return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
    }
    /**
   * get string representation
   * @param {Object} options
   * @return {string} str
   */ FunctionAssignmentNode.prototype._toString = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var expr = this.expr.toString(options);
        if (needParenthesis(this, parenthesis)) expr = '(' + expr + ')';
        return this.name + '(' + this.params.join(', ') + ') = ' + expr;
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ FunctionAssignmentNode.prototype.toJSON = function() {
        var types = this.types;
        return {
            mathjs: 'FunctionAssignmentNode',
            name: this.name,
            params: this.params.map(function(param, index) {
                return {
                    name: param,
                    type: types[index]
                };
            }),
            expr: this.expr
        };
    };
    /**
   * Instantiate an FunctionAssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionAssignmentNode}
   */ FunctionAssignmentNode.fromJSON = function(json) {
        return new FunctionAssignmentNode(json.name, json.params, json.expr);
    };
    /**
   * get HTML representation
   * @param {Object} options
   * @return {string} str
   */ FunctionAssignmentNode.prototype.toHTML = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var params = [];
        for(var i = 0; i < this.params.length; i++)params.push('<span class="math-symbol math-parameter">' + _stringJs.escape(this.params[i]) + '</span>');
        var expr = this.expr.toHTML(options);
        if (needParenthesis(this, parenthesis)) expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        return '<span class="math-function">' + _stringJs.escape(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
    };
    /**
   * get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ FunctionAssignmentNode.prototype._toTex = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var expr = this.expr.toTex(options);
        if (needParenthesis(this, parenthesis)) expr = "\\left(".concat(expr, "\\right)");
        return '\\mathrm{' + this.name + '}\\left(' + this.params.map(_latexJs.toSymbol).join(',') + '\\right):=' + expr;
    };
    return FunctionAssignmentNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../keywords.js":"eC9NF","../../utils/string.js":"0PPSB","../../utils/array.js":"3R6c8","../../utils/latex.js":"bN3rW","../operators.js":"fKLyc","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"h4Sc3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIndexNode", ()=>createIndexNode
);
var _isJs = require("../../utils/is.js");
var _arrayJs = require("../../utils/array.js");
var _stringJs = require("../../utils/string.js");
var _factoryJs = require("../../utils/factory.js");
var _customsJs = require("../../utils/customs.js");
var name = 'IndexNode';
var dependencies = [
    'Range',
    'Node',
    'size'
];
var createIndexNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Range , Node , size  } = _ref;
    /**
   * @constructor IndexNode
   * @extends Node
   *
   * Describes a subset of a matrix or an object property.
   * Cannot be used on its own, needs to be used within an AccessorNode or
   * AssignmentNode.
   *
   * @param {Node[]} dimensions
   * @param {boolean} [dotNotation=false]  Optional property describing whether
   *                                       this index was written using dot
   *                                       notation like `a.b`, or using bracket
   *                                       notation like `a["b"]` (default).
   *                                       Used to stringify an IndexNode.
   */ function IndexNode(dimensions, dotNotation) {
        if (!(this instanceof IndexNode)) throw new SyntaxError('Constructor must be called with the new operator');
        this.dimensions = dimensions;
        this.dotNotation = dotNotation || false; // validate input
        if (!Array.isArray(dimensions) || !dimensions.every(_isJs.isNode)) throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
        if (this.dotNotation && !this.isObjectProperty()) throw new Error('dotNotation only applicable for object properties');
    }
    IndexNode.prototype = new Node();
    IndexNode.prototype.type = 'IndexNode';
    IndexNode.prototype.isIndexNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ IndexNode.prototype._compile = function(math, argNames) {
        // TODO: implement support for bignumber (currently bignumbers are silently
        //       reduced to numbers when changing the value to zero-based)
        // TODO: Optimization: when the range values are ConstantNodes,
        //       we can beforehand resolve the zero-based value
        // optimization for a simple object property
        var evalDimensions = _arrayJs.map(this.dimensions, function(range, i) {
            if (_isJs.isRangeNode(range)) {
                if (range.needsEnd()) {
                    // create a range containing end (like '4:end')
                    var childArgNames = Object.create(argNames);
                    childArgNames.end = true;
                    var evalStart = range.start._compile(math, childArgNames);
                    var evalEnd = range.end._compile(math, childArgNames);
                    var evalStep = range.step ? range.step._compile(math, childArgNames) : function() {
                        return 1;
                    };
                    return function evalDimension(scope, args, context) {
                        var s = size(context).valueOf();
                        var childArgs = Object.create(args);
                        childArgs.end = s[i];
                        return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));
                    };
                } else {
                    // create range
                    var _evalStart = range.start._compile(math, argNames);
                    var _evalEnd = range.end._compile(math, argNames);
                    var _evalStep = range.step ? range.step._compile(math, argNames) : function() {
                        return 1;
                    };
                    return function evalDimension(scope, args, context) {
                        return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));
                    };
                }
            } else if (_isJs.isSymbolNode(range) && range.name === 'end') {
                // SymbolNode 'end'
                var _childArgNames = Object.create(argNames);
                _childArgNames.end = true;
                var evalRange = range._compile(math, _childArgNames);
                return function evalDimension(scope, args, context) {
                    var s = size(context).valueOf();
                    var childArgs = Object.create(args);
                    childArgs.end = s[i];
                    return evalRange(scope, childArgs, context);
                };
            } else {
                // ConstantNode
                var _evalRange = range._compile(math, argNames);
                return function evalDimension(scope, args, context) {
                    return _evalRange(scope, args, context);
                };
            }
        });
        var index = _customsJs.getSafeProperty(math, 'index');
        return function evalIndexNode(scope, args, context) {
            var dimensions = _arrayJs.map(evalDimensions, function(evalDimension) {
                return evalDimension(scope, args, context);
            });
            return index(...dimensions);
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ IndexNode.prototype.forEach = function(callback) {
        for(var i = 0; i < this.dimensions.length; i++)callback(this.dimensions[i], 'dimensions[' + i + ']', this);
    };
    /**
   * Create a new IndexNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {IndexNode} Returns a transformed copy of the node
   */ IndexNode.prototype.map = function(callback) {
        var dimensions = [];
        for(var i = 0; i < this.dimensions.length; i++)dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
        return new IndexNode(dimensions, this.dotNotation);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {IndexNode}
   */ IndexNode.prototype.clone = function() {
        return new IndexNode(this.dimensions.slice(0), this.dotNotation);
    };
    /**
   * Test whether this IndexNode contains a single property name
   * @return {boolean}
   */ IndexNode.prototype.isObjectProperty = function() {
        return this.dimensions.length === 1 && _isJs.isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
    };
    /**
   * Returns the property name if IndexNode contains a property.
   * If not, returns null.
   * @return {string | null}
   */ IndexNode.prototype.getObjectProperty = function() {
        return this.isObjectProperty() ? this.dimensions[0].value : null;
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */ IndexNode.prototype._toString = function(options) {
        // format the parameters like "[1, 0:5]"
        return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ IndexNode.prototype.toJSON = function() {
        return {
            mathjs: 'IndexNode',
            dimensions: this.dimensions,
            dotNotation: this.dotNotation
        };
    };
    /**
   * Instantiate an IndexNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
   *                       where mathjs is optional
   * @returns {IndexNode}
   */ IndexNode.fromJSON = function(json) {
        return new IndexNode(json.dimensions, json.dotNotation);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */ IndexNode.prototype.toHTML = function(options) {
        // format the parameters like "[1, 0:5]"
        var dimensions = [];
        for(var i = 0; i < this.dimensions.length; i++)dimensions[i] = this.dimensions[i].toHTML();
        if (this.dotNotation) return "<span class=\"math-operator math-accessor-operator\">.</span><span class=\"math-symbol math-property\">" + _stringJs.escape(this.getObjectProperty()) + '</span>';
        else return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ IndexNode.prototype._toTex = function(options) {
        var dimensions = this.dimensions.map(function(range) {
            return range.toTex(options);
        });
        return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
    }; // helper function to create a Range from start, step and end
    function createRange(start, end, step) {
        return new Range(_isJs.isBigNumber(start) ? start.toNumber() : start, _isJs.isBigNumber(end) ? end.toNumber() : end, _isJs.isBigNumber(step) ? step.toNumber() : step);
    }
    return IndexNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/array.js":"3R6c8","../../utils/string.js":"0PPSB","../../utils/factory.js":"26foW","../../utils/customs.js":"8gSIx","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cBA8e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createObjectNode", ()=>createObjectNode
);
var _isJs = require("../../utils/is.js");
var _stringJs = require("../../utils/string.js");
var _customsJs = require("../../utils/customs.js");
var _objectJs = require("../../utils/object.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'ObjectNode';
var dependencies = [
    'Node'
];
var createObjectNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Node  } = _ref;
    /**
   * @constructor ObjectNode
   * @extends {Node}
   * Holds an object with keys/values
   * @param {Object.<string, Node>} [properties]   object with key/value pairs
   */ function ObjectNode(properties) {
        if (!(this instanceof ObjectNode)) throw new SyntaxError('Constructor must be called with the new operator');
        this.properties = properties || {
        }; // validate input
        if (properties) {
            if (!(typeof properties === 'object') || !Object.keys(properties).every(function(key) {
                return _isJs.isNode(properties[key]);
            })) throw new TypeError('Object containing Nodes expected');
        }
    }
    ObjectNode.prototype = new Node();
    ObjectNode.prototype.type = 'ObjectNode';
    ObjectNode.prototype.isObjectNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ ObjectNode.prototype._compile = function(math, argNames) {
        var evalEntries = {
        };
        for(var key in this.properties)if (_objectJs.hasOwnProperty(this.properties, key)) {
            // we stringify/parse the key here to resolve unicode characters,
            // so you cannot create a key like {"co\\u006Estructor": null}
            var stringifiedKey = _stringJs.stringify(key);
            var parsedKey = JSON.parse(stringifiedKey);
            if (!_customsJs.isSafeProperty(this.properties, parsedKey)) throw new Error('No access to property "' + parsedKey + '"');
            evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
        }
        return function evalObjectNode(scope, args, context) {
            var obj = {
            };
            for(var _key in evalEntries)if (_objectJs.hasOwnProperty(evalEntries, _key)) obj[_key] = evalEntries[_key](scope, args, context);
            return obj;
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ ObjectNode.prototype.forEach = function(callback) {
        for(var key in this.properties)if (_objectJs.hasOwnProperty(this.properties, key)) callback(this.properties[key], 'properties[' + _stringJs.stringify(key) + ']', this);
    };
    /**
   * Create a new ObjectNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ObjectNode} Returns a transformed copy of the node
   */ ObjectNode.prototype.map = function(callback) {
        var properties = {
        };
        for(var key in this.properties)if (_objectJs.hasOwnProperty(this.properties, key)) properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + _stringJs.stringify(key) + ']', this));
        return new ObjectNode(properties);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {ObjectNode}
   */ ObjectNode.prototype.clone = function() {
        var properties = {
        };
        for(var key in this.properties)if (_objectJs.hasOwnProperty(this.properties, key)) properties[key] = this.properties[key];
        return new ObjectNode(properties);
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ ObjectNode.prototype._toString = function(options) {
        var entries = [];
        for(var key in this.properties)if (_objectJs.hasOwnProperty(this.properties, key)) entries.push(_stringJs.stringify(key) + ': ' + this.properties[key].toString(options));
        return '{' + entries.join(', ') + '}';
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ ObjectNode.prototype.toJSON = function() {
        return {
            mathjs: 'ObjectNode',
            properties: this.properties
        };
    };
    /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
   *                       where mathjs is optional
   * @returns {ObjectNode}
   */ ObjectNode.fromJSON = function(json) {
        return new ObjectNode(json.properties);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ ObjectNode.prototype.toHTML = function(options) {
        var entries = [];
        for(var key in this.properties)if (_objectJs.hasOwnProperty(this.properties, key)) entries.push('<span class="math-symbol math-property">' + _stringJs.escape(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
        return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ ObjectNode.prototype._toTex = function(options) {
        var entries = [];
        for(var key in this.properties)if (_objectJs.hasOwnProperty(this.properties, key)) entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
        return "\\left\\{\\begin{array}{ll}".concat(entries.join('\n'), "\\end{array}\\right\\}");
    };
    return ObjectNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/string.js":"0PPSB","../../utils/customs.js":"8gSIx","../../utils/object.js":"eRHhH","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2Q3Bl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createOperatorNode", ()=>createOperatorNode
);
var _isJs = require("../../utils/is.js");
var _arrayJs = require("../../utils/array.js");
var _stringJs = require("../../utils/string.js");
var _customsJs = require("../../utils/customs.js");
var _operatorsJs = require("../operators.js");
var _latexJs = require("../../utils/latex.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'OperatorNode';
var dependencies = [
    'Node'
];
var createOperatorNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Node  } = _ref;
    /**
   * @constructor OperatorNode
   * @extends {Node}
   * An operator with two arguments, like 2+3
   *
   * @param {string} op           Operator name, for example '+'
   * @param {string} fn           Function name, for example 'add'
   * @param {Node[]} args         Operator arguments
   * @param {boolean} [implicit]  Is this an implicit multiplication?
   * @param {boolean} [isPercentage] Is this an percentage Operation?
   */ function OperatorNode(op, fn, args, implicit, isPercentage) {
        if (!(this instanceof OperatorNode)) throw new SyntaxError('Constructor must be called with the new operator');
         // validate input
        if (typeof op !== 'string') throw new TypeError('string expected for parameter "op"');
        if (typeof fn !== 'string') throw new TypeError('string expected for parameter "fn"');
        if (!Array.isArray(args) || !args.every(_isJs.isNode)) throw new TypeError('Array containing Nodes expected for parameter "args"');
        this.implicit = implicit === true;
        this.isPercentage = isPercentage === true;
        this.op = op;
        this.fn = fn;
        this.args = args || [];
    }
    OperatorNode.prototype = new Node();
    OperatorNode.prototype.type = 'OperatorNode';
    OperatorNode.prototype.isOperatorNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ OperatorNode.prototype._compile = function(math, argNames) {
        // validate fn
        if (typeof this.fn !== 'string' || !_customsJs.isSafeMethod(math, this.fn)) {
            if (!math[this.fn]) throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
            else throw new Error('No access to function "' + this.fn + '"');
        }
        var fn = _customsJs.getSafeProperty(math, this.fn);
        var evalArgs = _arrayJs.map(this.args, function(arg) {
            return arg._compile(math, argNames);
        });
        if (evalArgs.length === 1) {
            var evalArg0 = evalArgs[0];
            return function evalOperatorNode(scope, args, context) {
                return fn(evalArg0(scope, args, context));
            };
        } else if (evalArgs.length === 2) {
            var _evalArg = evalArgs[0];
            var evalArg1 = evalArgs[1];
            return function evalOperatorNode(scope, args, context) {
                return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
            };
        } else return function evalOperatorNode(scope, args, context) {
            return fn.apply(null, _arrayJs.map(evalArgs, function(evalArg) {
                return evalArg(scope, args, context);
            }));
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ OperatorNode.prototype.forEach = function(callback) {
        for(var i = 0; i < this.args.length; i++)callback(this.args[i], 'args[' + i + ']', this);
    };
    /**
   * Create a new OperatorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */ OperatorNode.prototype.map = function(callback) {
        var args = [];
        for(var i = 0; i < this.args.length; i++)args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
        return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {OperatorNode}
   */ OperatorNode.prototype.clone = function() {
        return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);
    };
    /**
   * Check whether this is an unary OperatorNode:
   * has exactly one argument, like `-a`.
   * @return {boolean} Returns true when an unary operator node, false otherwise.
   */ OperatorNode.prototype.isUnary = function() {
        return this.args.length === 1;
    };
    /**
   * Check whether this is a binary OperatorNode:
   * has exactly two arguments, like `a + b`.
   * @return {boolean} Returns true when a binary operator node, false otherwise.
   */ OperatorNode.prototype.isBinary = function() {
        return this.args.length === 2;
    };
    /**
   * Calculate which parentheses are necessary. Gets an OperatorNode
   * (which is the root of the tree) and an Array of Nodes
   * (this.args) and returns an array where 'true' means that an argument
   * has to be enclosed in parentheses whereas 'false' means the opposite.
   *
   * @param {OperatorNode} root
   * @param {string} parenthesis
   * @param {Node[]} args
   * @param {boolean} latex
   * @return {boolean[]}
   * @private
   */ function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
        // precedence of the root OperatorNode
        var precedence = _operatorsJs.getPrecedence(root, parenthesis);
        var associativity = _operatorsJs.getAssociativity(root, parenthesis);
        if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') return args.map(function(arg) {
            switch(arg.getContent().type){
                // Nodes that don't need extra parentheses
                case 'ArrayNode':
                case 'ConstantNode':
                case 'SymbolNode':
                case 'ParenthesisNode':
                    return false;
                default:
                    return true;
            }
        });
        var result;
        switch(args.length){
            case 0:
                result = [];
                break;
            case 1:
                // precedence of the operand
                var operandPrecedence = _operatorsJs.getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed
                if (latex && operandPrecedence !== null) {
                    var operandIdentifier;
                    var rootIdentifier;
                    if (parenthesis === 'keep') {
                        operandIdentifier = args[0].getIdentifier();
                        rootIdentifier = root.getIdentifier();
                    } else {
                        // Ignore Parenthesis Nodes when not in 'keep' mode
                        operandIdentifier = args[0].getContent().getIdentifier();
                        rootIdentifier = root.getContent().getIdentifier();
                    }
                    if (_operatorsJs.properties[precedence][rootIdentifier].latexLeftParens === false) {
                        result = [
                            false
                        ];
                        break;
                    }
                    if (_operatorsJs.properties[operandPrecedence][operandIdentifier].latexParens === false) {
                        result = [
                            false
                        ];
                        break;
                    }
                }
                if (operandPrecedence === null) {
                    // if the operand has no defined precedence, no parens are needed
                    result = [
                        false
                    ];
                    break;
                }
                if (operandPrecedence <= precedence) {
                    // if the operands precedence is lower, parens are needed
                    result = [
                        true
                    ];
                    break;
                } // otherwise, no parens needed
                result = [
                    false
                ];
                break;
            case 2:
                var lhsParens; // left hand side needs parenthesis?
                // precedence of the left hand side
                var lhsPrecedence = _operatorsJs.getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side
                var assocWithLhs = _operatorsJs.isAssociativeWith(root, args[0], parenthesis);
                if (lhsPrecedence === null) // if the left hand side has no defined precedence, no parens are needed
                // FunctionNode for example
                lhsParens = false;
                else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) // In case of equal precedence, if the root node is left associative
                // parens are **never** necessary for the left hand side.
                // If it is right associative however, parens are necessary
                // if the root node isn't associative with the left hand side
                lhsParens = true;
                else if (lhsPrecedence < precedence) lhsParens = true;
                else lhsParens = false;
                var rhsParens; // right hand side needs parenthesis?
                // precedence of the right hand side
                var rhsPrecedence = _operatorsJs.getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?
                var assocWithRhs = _operatorsJs.isAssociativeWith(root, args[1], parenthesis);
                if (rhsPrecedence === null) // if the right hand side has no defined precedence, no parens are needed
                // FunctionNode for example
                rhsParens = false;
                else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) // In case of equal precedence, if the root node is right associative
                // parens are **never** necessary for the right hand side.
                // If it is left associative however, parens are necessary
                // if the root node isn't associative with the right hand side
                rhsParens = true;
                else if (rhsPrecedence < precedence) rhsParens = true;
                else rhsParens = false;
                 // handle special cases for LaTeX, where some of the parentheses aren't needed
                if (latex) {
                    var _rootIdentifier;
                    var lhsIdentifier;
                    var rhsIdentifier;
                    if (parenthesis === 'keep') {
                        _rootIdentifier = root.getIdentifier();
                        lhsIdentifier = root.args[0].getIdentifier();
                        rhsIdentifier = root.args[1].getIdentifier();
                    } else {
                        // Ignore ParenthesisNodes when not in 'keep' mode
                        _rootIdentifier = root.getContent().getIdentifier();
                        lhsIdentifier = root.args[0].getContent().getIdentifier();
                        rhsIdentifier = root.args[1].getContent().getIdentifier();
                    }
                    if (lhsPrecedence !== null) {
                        if (_operatorsJs.properties[precedence][_rootIdentifier].latexLeftParens === false) lhsParens = false;
                        if (_operatorsJs.properties[lhsPrecedence][lhsIdentifier].latexParens === false) lhsParens = false;
                    }
                    if (rhsPrecedence !== null) {
                        if (_operatorsJs.properties[precedence][_rootIdentifier].latexRightParens === false) rhsParens = false;
                        if (_operatorsJs.properties[rhsPrecedence][rhsIdentifier].latexParens === false) rhsParens = false;
                    }
                }
                result = [
                    lhsParens,
                    rhsParens
                ];
                break;
            default:
                if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') result = args.map(function(arg) {
                    var argPrecedence = _operatorsJs.getPrecedence(arg, parenthesis);
                    var assocWithArg = _operatorsJs.isAssociativeWith(root, arg, parenthesis);
                    var argAssociativity = _operatorsJs.getAssociativity(arg, parenthesis);
                    if (argPrecedence === null) // if the argument has no defined precedence, no parens are needed
                    return false;
                    else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) return true;
                    else if (argPrecedence < precedence) return true;
                    return false;
                });
                break;
        } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
        // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
        // printed.
        if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') result = args.map(function(arg, index) {
            var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';
            if (result[index] || isParenthesisNode) // put in parenthesis?
            return true;
            return false;
        });
        return result;
    }
    /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */ OperatorNode.prototype._toString = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var implicit = options && options.implicit ? options.implicit : 'hide';
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);
        if (args.length === 1) {
            // unary operators
            var assoc = _operatorsJs.getAssociativity(this, parenthesis);
            var operand = args[0].toString(options);
            if (parens[0]) operand = '(' + operand + ')';
             // for example for "not", we want a space between operand and argument
            var opIsNamed = /[a-zA-Z]+/.test(this.op);
            if (assoc === 'right') // prefix operator
            return this.op + (opIsNamed ? ' ' : '') + operand;
            else if (assoc === 'left') // postfix
            return operand + (opIsNamed ? ' ' : '') + this.op;
             // fall back to postfix
            return operand + this.op;
        } else if (args.length === 2) {
            var lhs = args[0].toString(options); // left hand side
            var rhs = args[1].toString(options); // right hand side
            if (parens[0]) // left hand side in parenthesis?
            lhs = '(' + lhs + ')';
            if (parens[1]) // right hand side in parenthesis?
            rhs = '(' + rhs + ')';
            if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') return lhs + ' ' + rhs;
            return lhs + ' ' + this.op + ' ' + rhs;
        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
            var stringifiedArgs = args.map(function(arg, index) {
                arg = arg.toString(options);
                if (parens[index]) // put in parenthesis?
                arg = '(' + arg + ')';
                return arg;
            });
            if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') return stringifiedArgs.join(' ');
            return stringifiedArgs.join(' ' + this.op + ' ');
        } else // fallback to formatting as a function call
        return this.fn + '(' + this.args.join(', ') + ')';
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ OperatorNode.prototype.toJSON = function() {
        return {
            mathjs: 'OperatorNode',
            op: this.op,
            fn: this.fn,
            args: this.args,
            implicit: this.implicit,
            isPercentage: this.isPercentage
        };
    };
    /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false, "isPercentage":false}`,
   *                       where mathjs is optional
   * @returns {OperatorNode}
   */ OperatorNode.fromJSON = function(json) {
        return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);
    };
    /**
   * Get HTML representation.
   * @param {Object} options
   * @return {string} str
   */ OperatorNode.prototype.toHTML = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var implicit = options && options.implicit ? options.implicit : 'hide';
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);
        if (args.length === 1) {
            // unary operators
            var assoc = _operatorsJs.getAssociativity(this, parenthesis);
            var operand = args[0].toHTML(options);
            if (parens[0]) operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            if (assoc === 'right') // prefix operator
            return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + _stringJs.escape(this.op) + '</span>' + operand;
            else // postfix when assoc === 'left' or undefined
            return operand + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + _stringJs.escape(this.op) + '</span>';
        } else if (args.length === 2) {
            // binary operatoes
            var lhs = args[0].toHTML(options); // left hand side
            var rhs = args[1].toHTML(options); // right hand side
            if (parens[0]) // left hand side in parenthesis?
            lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            if (parens[1]) // right hand side in parenthesis?
            rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
            return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + _stringJs.escape(this.op) + '</span>' + rhs;
        } else {
            var stringifiedArgs = args.map(function(arg, index) {
                arg = arg.toHTML(options);
                if (parens[index]) // put in parenthesis?
                arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
                return arg;
            });
            if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
                if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
                return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + _stringJs.escape(this.op) + '</span>');
            } else // fallback to formatting as a function call
            return '<span class="math-function">' + _stringJs.escape(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
        }
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ OperatorNode.prototype._toTex = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var implicit = options && options.implicit ? options.implicit : 'hide';
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
        var op = _latexJs.latexOperators[this.fn];
        op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op
        if (args.length === 1) {
            // unary operators
            var assoc = _operatorsJs.getAssociativity(this, parenthesis);
            var operand = args[0].toTex(options);
            if (parens[0]) operand = "\\left(".concat(operand, "\\right)");
            if (assoc === 'right') // prefix operator
            return op + operand;
            else if (assoc === 'left') // postfix operator
            return operand + op;
             // fall back to postfix
            return operand + op;
        } else if (args.length === 2) {
            // binary operators
            var lhs = args[0]; // left hand side
            var lhsTex = lhs.toTex(options);
            if (parens[0]) lhsTex = "\\left(".concat(lhsTex, "\\right)");
            var rhs = args[1]; // right hand side
            var rhsTex = rhs.toTex(options);
            if (parens[1]) rhsTex = "\\left(".concat(rhsTex, "\\right)");
             // handle some exceptions (due to the way LaTeX works)
            var lhsIdentifier;
            if (parenthesis === 'keep') lhsIdentifier = lhs.getIdentifier();
            else // Ignore ParenthesisNodes if in 'keep' mode
            lhsIdentifier = lhs.getContent().getIdentifier();
            switch(this.getIdentifier()){
                case 'OperatorNode:divide':
                    // op contains '\\frac' at this point
                    return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
                case 'OperatorNode:pow':
                    lhsTex = '{' + lhsTex + '}';
                    rhsTex = '{' + rhsTex + '}';
                    switch(lhsIdentifier){
                        case 'ConditionalNode':
                        case 'OperatorNode:divide':
                            lhsTex = "\\left(".concat(lhsTex, "\\right)");
                    }
                    break;
                case 'OperatorNode:multiply':
                    if (this.implicit && implicit === 'hide') return lhsTex + '~' + rhsTex;
            }
            return lhsTex + op + rhsTex;
        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
            var texifiedArgs = args.map(function(arg, index) {
                arg = arg.toTex(options);
                if (parens[index]) arg = "\\left(".concat(arg, "\\right)");
                return arg;
            });
            if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) return texifiedArgs.join('~');
            return texifiedArgs.join(op);
        } else // fall back to formatting as a function call
        // as this is a fallback, it doesn't use
        // fancy function names
        return '\\mathrm{' + this.fn + '}\\left(' + args.map(function(arg) {
            return arg.toTex(options);
        }).join(',') + '\\right)';
    };
    /**
   * Get identifier.
   * @return {string}
   */ OperatorNode.prototype.getIdentifier = function() {
        return this.type + ':' + this.fn;
    };
    return OperatorNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/array.js":"3R6c8","../../utils/string.js":"0PPSB","../../utils/customs.js":"8gSIx","../operators.js":"fKLyc","../../utils/latex.js":"bN3rW","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1KsUO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createParenthesisNode", ()=>createParenthesisNode
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'ParenthesisNode';
var dependencies = [
    'Node'
];
var createParenthesisNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Node  } = _ref;
    /**
   * @constructor ParenthesisNode
   * @extends {Node}
   * A parenthesis node describes manual parenthesis from the user input
   * @param {Node} content
   * @extends {Node}
   */ function ParenthesisNode(content) {
        if (!(this instanceof ParenthesisNode)) throw new SyntaxError('Constructor must be called with the new operator');
         // validate input
        if (!_isJs.isNode(content)) throw new TypeError('Node expected for parameter "content"');
        this.content = content;
    }
    ParenthesisNode.prototype = new Node();
    ParenthesisNode.prototype.type = 'ParenthesisNode';
    ParenthesisNode.prototype.isParenthesisNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ ParenthesisNode.prototype._compile = function(math, argNames) {
        return this.content._compile(math, argNames);
    };
    /**
   * Get the content of the current Node.
   * @return {Node} content
   * @override
   **/ ParenthesisNode.prototype.getContent = function() {
        return this.content.getContent();
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ ParenthesisNode.prototype.forEach = function(callback) {
        callback(this.content, 'content', this);
    };
    /**
   * Create a new ParenthesisNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ParenthesisNode} Returns a clone of the node
   */ ParenthesisNode.prototype.map = function(callback) {
        var content = callback(this.content, 'content', this);
        return new ParenthesisNode(content);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {ParenthesisNode}
   */ ParenthesisNode.prototype.clone = function() {
        return new ParenthesisNode(this.content);
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ ParenthesisNode.prototype._toString = function(options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') return '(' + this.content.toString(options) + ')';
        return this.content.toString(options);
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ ParenthesisNode.prototype.toJSON = function() {
        return {
            mathjs: 'ParenthesisNode',
            content: this.content
        };
    };
    /**
   * Instantiate an ParenthesisNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
   *                       where mathjs is optional
   * @returns {ParenthesisNode}
   */ ParenthesisNode.fromJSON = function(json) {
        return new ParenthesisNode(json.content);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ ParenthesisNode.prototype.toHTML = function(options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        return this.content.toHTML(options);
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ ParenthesisNode.prototype._toTex = function(options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') return "\\left(".concat(this.content.toTex(options), "\\right)");
        return this.content.toTex(options);
    };
    return ParenthesisNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ek5RU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRangeNode", ()=>createRangeNode
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var _operatorsJs = require("../operators.js");
var name = 'RangeNode';
var dependencies = [
    'Node'
];
var createRangeNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Node  } = _ref;
    /**
   * @constructor RangeNode
   * @extends {Node}
   * create a range
   * @param {Node} start  included lower-bound
   * @param {Node} end    included upper-bound
   * @param {Node} [step] optional step
   */ function RangeNode(start, end, step) {
        if (!(this instanceof RangeNode)) throw new SyntaxError('Constructor must be called with the new operator');
         // validate inputs
        if (!_isJs.isNode(start)) throw new TypeError('Node expected');
        if (!_isJs.isNode(end)) throw new TypeError('Node expected');
        if (step && !_isJs.isNode(step)) throw new TypeError('Node expected');
        if (arguments.length > 3) throw new Error('Too many arguments');
        this.start = start; // included lower-bound
        this.end = end; // included upper-bound
        this.step = step || null; // optional step
    }
    RangeNode.prototype = new Node();
    RangeNode.prototype.type = 'RangeNode';
    RangeNode.prototype.isRangeNode = true;
    /**
   * Check whether the RangeNode needs the `end` symbol to be defined.
   * This end is the size of the Matrix in current dimension.
   * @return {boolean}
   */ RangeNode.prototype.needsEnd = function() {
        // find all `end` symbols in this RangeNode
        var endSymbols = this.filter(function(node) {
            return _isJs.isSymbolNode(node) && node.name === 'end';
        });
        return endSymbols.length > 0;
    };
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ RangeNode.prototype._compile = function(math, argNames) {
        var range = math.range;
        var evalStart = this.start._compile(math, argNames);
        var evalEnd = this.end._compile(math, argNames);
        if (this.step) {
            var evalStep = this.step._compile(math, argNames);
            return function evalRangeNode(scope, args, context) {
                return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
            };
        } else return function evalRangeNode(scope, args, context) {
            return range(evalStart(scope, args, context), evalEnd(scope, args, context));
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ RangeNode.prototype.forEach = function(callback) {
        callback(this.start, 'start', this);
        callback(this.end, 'end', this);
        if (this.step) callback(this.step, 'step', this);
    };
    /**
   * Create a new RangeNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RangeNode} Returns a transformed copy of the node
   */ RangeNode.prototype.map = function(callback) {
        return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {RangeNode}
   */ RangeNode.prototype.clone = function() {
        return new RangeNode(this.start, this.end, this.step && this.step);
    };
    /**
   * Calculate the necessary parentheses
   * @param {Node} node
   * @param {string} parenthesis
   * @return {Object} parentheses
   * @private
   */ function calculateNecessaryParentheses(node, parenthesis) {
        var precedence = _operatorsJs.getPrecedence(node, parenthesis);
        var parens = {
        };
        var startPrecedence = _operatorsJs.getPrecedence(node.start, parenthesis);
        parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';
        if (node.step) {
            var stepPrecedence = _operatorsJs.getPrecedence(node.step, parenthesis);
            parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
        }
        var endPrecedence = _operatorsJs.getPrecedence(node.end, parenthesis);
        parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
        return parens;
    }
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */ RangeNode.prototype._toString = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop
        var str;
        var start = this.start.toString(options);
        if (parens.start) start = '(' + start + ')';
        str = start;
        if (this.step) {
            var step = this.step.toString(options);
            if (parens.step) step = '(' + step + ')';
            str += ':' + step;
        }
        var end = this.end.toString(options);
        if (parens.end) end = '(' + end + ')';
        str += ':' + end;
        return str;
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ RangeNode.prototype.toJSON = function() {
        return {
            mathjs: 'RangeNode',
            start: this.start,
            end: this.end,
            step: this.step
        };
    };
    /**
   * Instantiate an RangeNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
   *                       where mathjs is optional
   * @returns {RangeNode}
   */ RangeNode.fromJSON = function(json) {
        return new RangeNode(json.start, json.end, json.step);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */ RangeNode.prototype.toHTML = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop
        var str;
        var start = this.start.toHTML(options);
        if (parens.start) start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        str = start;
        if (this.step) {
            var step = this.step.toHTML(options);
            if (parens.step) step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
            str += '<span class="math-operator math-range-operator">:</span>' + step;
        }
        var end = this.end.toHTML(options);
        if (parens.end) end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        str += '<span class="math-operator math-range-operator">:</span>' + end;
        return str;
    };
    /**
   * Get LaTeX representation
   * @params {Object} options
   * @return {string} str
   */ RangeNode.prototype._toTex = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var parens = calculateNecessaryParentheses(this, parenthesis);
        var str = this.start.toTex(options);
        if (parens.start) str = "\\left(".concat(str, "\\right)");
        if (this.step) {
            var step = this.step.toTex(options);
            if (parens.step) step = "\\left(".concat(step, "\\right)");
            str += ':' + step;
        }
        var end = this.end.toTex(options);
        if (parens.end) end = "\\left(".concat(end, "\\right)");
        str += ':' + end;
        return str;
    };
    return RangeNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","../operators.js":"fKLyc","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iqb5x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRelationalNode", ()=>createRelationalNode
);
var _operatorsJs = require("../operators.js");
var _stringJs = require("../../utils/string.js");
var _customsJs = require("../../utils/customs.js");
var _latexJs = require("../../utils/latex.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'RelationalNode';
var dependencies = [
    'Node'
];
var createRelationalNode = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Node  } = _ref;
    /**
   * A node representing a chained conditional expression, such as 'x > y > z'
   *
   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters
   * @param {Node[]} params   The parameters that will be compared
   *
   * @constructor RelationalNode
   * @extends {Node}
   */ function RelationalNode(conditionals, params) {
        if (!(this instanceof RelationalNode)) throw new SyntaxError('Constructor must be called with the new operator');
        if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
        if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
        if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
        this.conditionals = conditionals;
        this.params = params;
    }
    RelationalNode.prototype = new Node();
    RelationalNode.prototype.type = 'RelationalNode';
    RelationalNode.prototype.isRelationalNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ RelationalNode.prototype._compile = function(math, argNames) {
        var self = this;
        var compiled = this.params.map((p)=>p._compile(math, argNames)
        );
        return function evalRelationalNode(scope, args, context) {
            var evalLhs;
            var evalRhs = compiled[0](scope, args, context);
            for(var i = 0; i < self.conditionals.length; i++){
                evalLhs = evalRhs;
                evalRhs = compiled[i + 1](scope, args, context);
                var condFn = _customsJs.getSafeProperty(math, self.conditionals[i]);
                if (!condFn(evalLhs, evalRhs)) return false;
            }
            return true;
        };
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ RelationalNode.prototype.forEach = function(callback) {
        this.params.forEach((n, i)=>callback(n, 'params[' + i + ']', this)
        , this);
    };
    /**
   * Create a new RelationalNode having its childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RelationalNode} Returns a transformed copy of the node
   */ RelationalNode.prototype.map = function(callback) {
        return new RelationalNode(this.conditionals.slice(), this.params.map((n, i)=>this._ifNode(callback(n, 'params[' + i + ']', this))
        , this));
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {RelationalNode}
   */ RelationalNode.prototype.clone = function() {
        return new RelationalNode(this.conditionals, this.params);
    };
    /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */ RelationalNode.prototype._toString = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = _operatorsJs.getPrecedence(this, parenthesis);
        var paramStrings = this.params.map(function(p, index) {
            var paramPrecedence = _operatorsJs.getPrecedence(p, parenthesis);
            return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
        });
        var operatorMap = {
            equal: '==',
            unequal: '!=',
            smaller: '<',
            larger: '>',
            smallerEq: '<=',
            largerEq: '>='
        };
        var ret = paramStrings[0];
        for(var i = 0; i < this.conditionals.length; i++)ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];
        return ret;
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ RelationalNode.prototype.toJSON = function() {
        return {
            mathjs: 'RelationalNode',
            conditionals: this.conditionals,
            params: this.params
        };
    };
    /**
   * Instantiate a RelationalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RelationalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {RelationalNode}
   */ RelationalNode.fromJSON = function(json) {
        return new RelationalNode(json.conditionals, json.params);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */ RelationalNode.prototype.toHTML = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = _operatorsJs.getPrecedence(this, parenthesis);
        var paramStrings = this.params.map(function(p, index) {
            var paramPrecedence = _operatorsJs.getPrecedence(p, parenthesis);
            return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
        });
        var operatorMap = {
            equal: '==',
            unequal: '!=',
            smaller: '<',
            larger: '>',
            smallerEq: '<=',
            largerEq: '>='
        };
        var ret = paramStrings[0];
        for(var i = 0; i < this.conditionals.length; i++)ret += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + _stringJs.escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
        return ret;
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ RelationalNode.prototype._toTex = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
        var precedence = _operatorsJs.getPrecedence(this, parenthesis);
        var paramStrings = this.params.map(function(p, index) {
            var paramPrecedence = _operatorsJs.getPrecedence(p, parenthesis);
            return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
        });
        var ret = paramStrings[0];
        for(var i = 0; i < this.conditionals.length; i++)ret += _latexJs.latexOperators[this.conditionals[i]] + paramStrings[i + 1];
        return ret;
    };
    return RelationalNode;
}, {
    isClass: true,
    isNode: true
});

},{"../operators.js":"fKLyc","../../utils/string.js":"0PPSB","../../utils/customs.js":"8gSIx","../../utils/latex.js":"bN3rW","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"66Yi2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSymbolNode", ()=>createSymbolNode
);
var _stringJs = require("../../utils/string.js");
var _customsJs = require("../../utils/customs.js");
var _factoryJs = require("../../utils/factory.js");
var _latexJs = require("../../utils/latex.js");
var name1 = 'SymbolNode';
var dependencies = [
    'math',
    '?Unit',
    'Node'
];
var createSymbolNode = /* #__PURE__ */ _factoryJs.factory(name1, dependencies, (_ref)=>{
    var { math: math1 , Unit , Node  } = _ref;
    /**
   * Check whether some name is a valueless unit like "inch".
   * @param {string} name
   * @return {boolean}
   */ function isValuelessUnit(name) {
        return Unit ? Unit.isValuelessUnit(name) : false;
    }
    /**
   * @constructor SymbolNode
   * @extends {Node}
   * A symbol node can hold and resolve a symbol
   * @param {string} name
   * @extends {Node}
   */ function SymbolNode(name) {
        if (!(this instanceof SymbolNode)) throw new SyntaxError('Constructor must be called with the new operator');
         // validate input
        if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
        this.name = name;
    }
    SymbolNode.prototype = new Node();
    SymbolNode.prototype.type = 'SymbolNode';
    SymbolNode.prototype.isSymbolNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ SymbolNode.prototype._compile = function(math, argNames) {
        var name = this.name;
        if (argNames[name] === true) // this is a FunctionAssignment argument
        // (like an x when inside the expression of a function assignment `f(x) = ...`)
        return function(scope, args, context) {
            return args[name];
        };
        else if (name in math) return function(scope, args, context) {
            return scope.has(name) ? scope.get(name) : _customsJs.getSafeProperty(math, name);
        };
        else {
            var isUnit = isValuelessUnit(name);
            return function(scope, args, context) {
                return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);
            };
        }
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ SymbolNode.prototype.forEach = function(callback) {
    };
    /**
   * Create a new SymbolNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {SymbolNode} Returns a clone of the node
   */ SymbolNode.prototype.map = function(callback) {
        return this.clone();
    };
    /**
   * Throws an error 'Undefined symbol {name}'
   * @param {string} name
   */ SymbolNode.onUndefinedSymbol = function(name) {
        throw new Error('Undefined symbol ' + name);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {SymbolNode}
   */ SymbolNode.prototype.clone = function() {
        return new SymbolNode(this.name);
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ SymbolNode.prototype._toString = function(options) {
        return this.name;
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ SymbolNode.prototype.toHTML = function(options) {
        var name = _stringJs.escape(this.name);
        if (name === 'true' || name === 'false') return '<span class="math-symbol math-boolean">' + name + '</span>';
        else if (name === 'i') return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
        else if (name === 'Infinity') return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
        else if (name === 'NaN') return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
        else if (name === 'null') return '<span class="math-symbol math-null-symbol">' + name + '</span>';
        else if (name === 'undefined') return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
        return '<span class="math-symbol">' + name + '</span>';
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ SymbolNode.prototype.toJSON = function() {
        return {
            mathjs: 'SymbolNode',
            name: this.name
        };
    };
    /**
   * Instantiate a SymbolNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", name: "x"}`,
   *                       where mathjs is optional
   * @returns {SymbolNode}
   */ SymbolNode.fromJSON = function(json) {
        return new SymbolNode(json.name);
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */ SymbolNode.prototype._toTex = function(options) {
        var isUnit = false;
        if (typeof math1[this.name] === 'undefined' && isValuelessUnit(this.name)) isUnit = true;
        var symbol = _latexJs.toSymbol(this.name, isUnit);
        if (symbol[0] === '\\') // no space needed if the symbol starts with '\'
        return symbol;
         // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol
        return ' ' + symbol;
    };
    return SymbolNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/string.js":"0PPSB","../../utils/customs.js":"8gSIx","../../utils/factory.js":"26foW","../../utils/latex.js":"bN3rW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2UmZq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFunctionNode", ()=>createFunctionNode
);
var _isJs = require("../../utils/is.js");
var _stringJs = require("../../utils/string.js");
var _objectJs = require("../../utils/object.js");
var _customsJs = require("../../utils/customs.js");
var _scopeJs = require("../../utils/scope.js");
var _factoryJs = require("../../utils/factory.js");
var _latexJs = require("../../utils/latex.js");
var name1 = 'FunctionNode';
var dependencies = [
    'math',
    'Node',
    'SymbolNode'
];
var createFunctionNode = /* #__PURE__ */ _factoryJs.factory(name1, dependencies, (_ref)=>{
    var { math: math1 , Node , SymbolNode  } = _ref;
    /**
   * @constructor FunctionNode
   * @extends {./Node}
   * invoke a list with arguments on a node
   * @param {./Node | string} fn Node resolving with a function on which to invoke
   *                             the arguments, typically a SymboNode or AccessorNode
   * @param {./Node[]} args
   */ function FunctionNode(fn, args) {
        if (!(this instanceof FunctionNode)) throw new SyntaxError('Constructor must be called with the new operator');
        if (typeof fn === 'string') fn = new SymbolNode(fn);
         // validate input
        if (!_isJs.isNode(fn)) throw new TypeError('Node expected as parameter "fn"');
        if (!Array.isArray(args) || !args.every(_isJs.isNode)) throw new TypeError('Array containing Nodes expected for parameter "args"');
        this.fn = fn;
        this.args = args || []; // readonly property name
        Object.defineProperty(this, 'name', {
            get: (function() {
                return this.fn.name || '';
            }).bind(this),
            set: function set() {
                throw new Error('Cannot assign a new name, name is read-only');
            }
        });
    }
    FunctionNode.prototype = new Node();
    FunctionNode.prototype.type = 'FunctionNode';
    FunctionNode.prototype.isFunctionNode = true;
    /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */ FunctionNode.prototype._compile = function(math, argNames) {
        if (!(this instanceof FunctionNode)) throw new TypeError('No valid FunctionNode');
         // compile arguments
        var evalArgs = this.args.map((arg)=>arg._compile(math, argNames)
        );
        if (_isJs.isSymbolNode(this.fn)) {
            // we can statically determine whether the function has an rawArgs property
            var _name = this.fn.name;
            var fn1 = _name in math ? _customsJs.getSafeProperty(math, _name) : undefined;
            var isRaw = typeof fn1 === 'function' && fn1.rawArgs === true;
            var resolveFn = (scope)=>{
                if (scope.has(_name)) return scope.get(_name);
                if (_name in math) return _customsJs.getSafeProperty(math, _name);
                return FunctionNode.onUndefinedFunction(_name);
            };
            if (isRaw) {
                // pass unevaluated parameters (nodes) to the function
                // "raw" evaluation
                var rawArgs = this.args;
                return function evalFunctionNode(scope, args, context) {
                    var fn = resolveFn(scope);
                    return fn(rawArgs, math, _scopeJs.createSubScope(scope, args), scope);
                };
            } else // "regular" evaluation
            switch(evalArgs.length){
                case 0:
                    return function evalFunctionNode(scope, args, context) {
                        var fn = resolveFn(scope);
                        return fn();
                    };
                case 1:
                    return function evalFunctionNode(scope, args, context) {
                        var fn = resolveFn(scope);
                        var evalArg0 = evalArgs[0];
                        return fn(evalArg0(scope, args, context));
                    };
                case 2:
                    return function evalFunctionNode(scope, args, context) {
                        var fn = resolveFn(scope);
                        var evalArg0 = evalArgs[0];
                        var evalArg1 = evalArgs[1];
                        return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));
                    };
                default:
                    return function evalFunctionNode(scope, args, context) {
                        var fn = resolveFn(scope);
                        var values = evalArgs.map((evalArg)=>evalArg(scope, args, context)
                        );
                        return fn(...values);
                    };
            }
        } else if (_isJs.isAccessorNode(this.fn) && _isJs.isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {
            // execute the function with the right context: the object of the AccessorNode
            var evalObject = this.fn.object._compile(math, argNames);
            var prop = this.fn.index.getObjectProperty();
            var _rawArgs = this.args;
            return function evalFunctionNode(scope, args, context) {
                var object = evalObject(scope, args, context);
                _customsJs.validateSafeMethod(object, prop);
                var isRaw = object[prop] && object[prop].rawArgs;
                if (isRaw) return object[prop](_rawArgs, math, _scopeJs.createSubScope(scope, args), scope); // "raw" evaluation
                else {
                    // "regular" evaluation
                    var values = evalArgs.map((evalArg)=>evalArg(scope, args, context)
                    );
                    return object[prop].apply(object, values);
                }
            };
        } else {
            // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
            // we have to dynamically determine whether the function has a rawArgs property
            var evalFn = this.fn._compile(math, argNames);
            var _rawArgs2 = this.args;
            return function evalFunctionNode(scope, args, context) {
                var fn = evalFn(scope, args, context);
                var isRaw = fn && fn.rawArgs;
                if (isRaw) return fn(_rawArgs2, math, _scopeJs.createSubScope(scope, args), scope); // "raw" evaluation
                else {
                    // "regular" evaluation
                    var values = evalArgs.map((evalArg)=>evalArg(scope, args, context)
                    );
                    return fn.apply(fn, values);
                }
            };
        }
    };
    /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */ FunctionNode.prototype.forEach = function(callback) {
        callback(this.fn, 'fn', this);
        for(var i = 0; i < this.args.length; i++)callback(this.args[i], 'args[' + i + ']', this);
    };
    /**
   * Create a new FunctionNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionNode} Returns a transformed copy of the node
   */ FunctionNode.prototype.map = function(callback) {
        var fn = this._ifNode(callback(this.fn, 'fn', this));
        var args = [];
        for(var i = 0; i < this.args.length; i++)args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
        return new FunctionNode(fn, args);
    };
    /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionNode}
   */ FunctionNode.prototype.clone = function() {
        return new FunctionNode(this.fn, this.args.slice(0));
    };
    /**
   * Throws an error 'Undefined function {name}'
   * @param {string} name
   */ FunctionNode.onUndefinedFunction = function(name) {
        throw new Error('Undefined function ' + name);
    }; // backup Node's toString function
    // @private
    var nodeToString = FunctionNode.prototype.toString;
    /**
   * Get string representation. (wrapper function)
   * This overrides parts of Node's toString function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toString
   * function.
   *
   * @param {Object} options
   * @return {string} str
   * @override
   */ FunctionNode.prototype.toString = function(options) {
        var customString;
        var name = this.fn.toString(options);
        if (options && typeof options.handler === 'object' && _objectJs.hasOwnProperty(options.handler, name)) // callback is a map of callback functions
        customString = options.handler[name](this, options);
        if (typeof customString !== 'undefined') return customString;
         // fall back to Node's toString
        return nodeToString.call(this, options);
    };
    /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */ FunctionNode.prototype._toString = function(options) {
        var args = this.args.map(function(arg) {
            return arg.toString(options);
        });
        var fn = _isJs.isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like "add(2, 4.2)"
        return fn + '(' + args.join(', ') + ')';
    };
    /**
   * Get a JSON representation of the node
   * @returns {Object}
   */ FunctionNode.prototype.toJSON = function() {
        return {
            mathjs: 'FunctionNode',
            fn: this.fn,
            args: this.args
        };
    };
    /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionNode}
   */ FunctionNode.fromJSON = function(json) {
        return new FunctionNode(json.fn, json.args);
    };
    /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */ FunctionNode.prototype.toHTML = function(options) {
        var args = this.args.map(function(arg) {
            return arg.toHTML(options);
        }); // format the arguments like "add(2, 4.2)"
        return '<span class="math-function">' + _stringJs.escape(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    };
    /*
   * Expand a LaTeX template
   *
   * @param {string} template
   * @param {Node} node
   * @param {Object} options
   * @private
   **/ function expandTemplate(template, node, options) {
        var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$
        // while submatching identifier and 2 (in the second case)
        var regex = /\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi;
        var inputPos = 0; // position in the input string
        var match;
        while((match = regex.exec(template)) !== null){
            // go through all matches
            // add everything in front of the match to the LaTeX string
            latex += template.substring(inputPos, match.index);
            inputPos = match.index;
            if (match[0] === '$$') {
                // escaped dollar sign
                latex += '$';
                inputPos++;
            } else {
                // template parameter
                inputPos += match[0].length;
                var property = node[match[1]];
                if (!property) throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
                if (match[2] === undefined) // no square brackets
                switch(typeof property){
                    case 'string':
                        latex += property;
                        break;
                    case 'object':
                        if (_isJs.isNode(property)) latex += property.toTex(options);
                        else if (Array.isArray(property)) // make array of Nodes into comma separated list
                        latex += property.map(function(arg, index) {
                            if (_isJs.isNode(arg)) return arg.toTex(options);
                            throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                        }).join(',');
                        else throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
                        break;
                    default:
                        throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
                }
                else {
                    // with square brackets
                    if (_isJs.isNode(property[match[2]] && property[match[2]])) latex += property[match[2]].toTex(options);
                    else throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
                }
            }
        }
        latex += template.slice(inputPos); // append rest of the template
        return latex;
    } // backup Node's toTex function
    // @private
    var nodeToTex = FunctionNode.prototype.toTex;
    /**
   * Get LaTeX representation. (wrapper function)
   * This overrides parts of Node's toTex function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toTex
   * function.
   *
   * @param {Object} options
   * @return {string}
   */ FunctionNode.prototype.toTex = function(options) {
        var customTex;
        if (options && typeof options.handler === 'object' && _objectJs.hasOwnProperty(options.handler, this.name)) // callback is a map of callback functions
        customTex = options.handler[this.name](this, options);
        if (typeof customTex !== 'undefined') return customTex;
         // fall back to Node's toTex
        return nodeToTex.call(this, options);
    };
    /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */ FunctionNode.prototype._toTex = function(options) {
        var args = this.args.map(function(arg) {
            // get LaTeX of the arguments
            return arg.toTex(options);
        });
        var latexConverter;
        if (_latexJs.latexFunctions[this.name]) latexConverter = _latexJs.latexFunctions[this.name];
         // toTex property on the function itself
        if (math1[this.name] && (typeof math1[this.name].toTex === 'function' || typeof math1[this.name].toTex === 'object' || typeof math1[this.name].toTex === 'string')) // .toTex is a callback function
        latexConverter = math1[this.name].toTex;
        var customToTex;
        switch(typeof latexConverter){
            case 'function':
                // a callback function
                customToTex = latexConverter(this, options);
                break;
            case 'string':
                // a template string
                customToTex = expandTemplate(latexConverter, this, options);
                break;
            case 'object':
                // an object with different "converters" for different numbers of arguments
                switch(typeof latexConverter[args.length]){
                    case 'function':
                        customToTex = latexConverter[args.length](this, options);
                        break;
                    case 'string':
                        customToTex = expandTemplate(latexConverter[args.length], this, options);
                        break;
                }
        }
        if (typeof customToTex !== 'undefined') return customToTex;
        return expandTemplate(_latexJs.defaultTemplate, this, options);
    };
    /**
   * Get identifier.
   * @return {string}
   */ FunctionNode.prototype.getIdentifier = function() {
        return this.type + ':' + this.name;
    };
    return FunctionNode;
}, {
    isClass: true,
    isNode: true
});

},{"../../utils/is.js":"iwdlF","../../utils/string.js":"0PPSB","../../utils/object.js":"eRHhH","../../utils/customs.js":"8gSIx","../../utils/scope.js":"9dmpT","../../utils/factory.js":"26foW","../../utils/latex.js":"bN3rW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9dmpT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a new scope which can access the parent scope,
 * but does not affect it when written. This is suitable for variable definitions
 * within a block node, or function definition.
 *
 * If parent scope has a createSubScope method, it delegates to that. Otherwise,
 * creates an empty map, and copies the parent scope to it, adding in
 * the remaining `args`.
 *
 * @param {Map} parentScope
 * @param  {...any} args
 * @returns {Map}
 */ parcelHelpers.export(exports, "createSubScope", ()=>createSubScope
);
var _mapJs = require("./map.js");
function createSubScope(parentScope) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    if (typeof parentScope.createSubScope === 'function') return _mapJs.assign(parentScope.createSubScope(), ...args);
    return _mapJs.assign(_mapJs.createEmptyMap(), parentScope, ...args);
}

},{"./map.js":"1C0lk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"817dF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createParse", ()=>createParse
);
var _extends = require("@babel/runtime/helpers/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _factoryJs = require("../utils/factory.js");
var _isJs = require("../utils/is.js");
var _collectionJs = require("../utils/collection.js");
var _objectJs = require("../utils/object.js");
var name1 = 'parse';
var dependencies = [
    'typed',
    'numeric',
    'config',
    'AccessorNode',
    'ArrayNode',
    'AssignmentNode',
    'BlockNode',
    'ConditionalNode',
    'ConstantNode',
    'FunctionAssignmentNode',
    'FunctionNode',
    'IndexNode',
    'ObjectNode',
    'OperatorNode',
    'ParenthesisNode',
    'RangeNode',
    'RelationalNode',
    'SymbolNode'
];
var createParse = /* #__PURE__ */ _factoryJs.factory(name1, dependencies, (_ref)=>{
    var { typed , numeric , config , AccessorNode , ArrayNode , AssignmentNode , BlockNode , ConditionalNode , ConstantNode , FunctionAssignmentNode , FunctionNode , IndexNode , ObjectNode , OperatorNode , ParenthesisNode , RangeNode , RelationalNode , SymbolNode  } = _ref;
    /**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.evaluate().
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.parse(expr)
   *     math.parse(expr, options)
   *     math.parse([expr1, expr2, expr3, ...])
   *     math.parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     const node1 = math.parse('sqrt(3^2 + 4^2)')
   *     node1.compile().evaluate() // 5
   *
   *     let scope = {a:3, b:4}
   *     const node2 = math.parse('a * b') // 12
   *     const code2 = node2.compile()
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].compile().evaluate() // 12
   *
   * See also:
   *
   *     evaluate, compile
   *
   * @param {string | string[] | Matrix} expr          Expression to be parsed
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */ var parse = typed(name1, {
        string: function string(expression) {
            return parseStart(expression, {
            });
        },
        'Array | Matrix': function ArrayMatrix(expressions) {
            return parseMultiple(expressions, {
            });
        },
        'string, Object': function stringObject(expression, options) {
            var extraNodes = options.nodes !== undefined ? options.nodes : {
            };
            return parseStart(expression, extraNodes);
        },
        'Array | Matrix, Object': parseMultiple
    });
    function parseMultiple(expressions) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        };
        var extraNodes = options.nodes !== undefined ? options.nodes : {
        }; // parse an array or matrix with expressions
        return _collectionJs.deepMap(expressions, function(elem) {
            if (typeof elem !== 'string') throw new TypeError('String expected');
            return parseStart(elem, extraNodes);
        });
    } // token types enumeration
    var TOKENTYPE = {
        NULL: 0,
        DELIMITER: 1,
        NUMBER: 2,
        SYMBOL: 3,
        UNKNOWN: 4
    }; // map with all delimiters
    var DELIMITERS = {
        ',': true,
        '(': true,
        ')': true,
        '[': true,
        ']': true,
        '{': true,
        '}': true,
        '"': true,
        '\'': true,
        ';': true,
        '+': true,
        '-': true,
        '*': true,
        '.*': true,
        '/': true,
        './': true,
        '%': true,
        '^': true,
        '.^': true,
        '~': true,
        '!': true,
        '&': true,
        '|': true,
        '^|': true,
        '=': true,
        ':': true,
        '?': true,
        '==': true,
        '!=': true,
        '<': true,
        '>': true,
        '<=': true,
        '>=': true,
        '<<': true,
        '>>': true,
        '>>>': true
    }; // map with all named delimiters
    var NAMED_DELIMITERS = {
        mod: true,
        to: true,
        in: true,
        and: true,
        xor: true,
        or: true,
        not: true
    };
    var CONSTANTS = {
        true: true,
        false: false,
        null: null,
        undefined: undefined
    };
    var NUMERIC_CONSTANTS = [
        'NaN',
        'Infinity'
    ];
    function initialState() {
        return {
            extraNodes: {
            },
            // current extra nodes, must be careful not to mutate
            expression: '',
            // current expression
            comment: '',
            // last parsed comment
            index: 0,
            // current index in expr
            token: '',
            // current token
            tokenType: TOKENTYPE.NULL,
            // type of the token
            nestingLevel: 0,
            // level of nesting inside parameters, used to ignore newline characters
            conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here
        };
    }
    /**
   * View upto `length` characters of the expression starting at the current character.
   *
   * @param {Object} state
   * @param {number} [length=1] Number of characters to view
   * @returns {string}
   * @private
   */ function currentString(state, length) {
        return state.expression.substr(state.index, length);
    }
    /**
   * View the current character. Returns '' if end of expression is reached.
   *
   * @param {Object} state
   * @returns {string}
   * @private
   */ function currentCharacter(state) {
        return currentString(state, 1);
    }
    /**
   * Get the next character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */ function next(state) {
        state.index++;
    }
    /**
   * Preview the previous character from the expression.
   * @return {string} cNext
   * @private
   */ function prevCharacter(state) {
        return state.expression.charAt(state.index - 1);
    }
    /**
   * Preview the next character from the expression.
   * @return {string} cNext
   * @private
   */ function nextCharacter(state) {
        return state.expression.charAt(state.index + 1);
    }
    /**
   * Get next token in the current string expr.
   * The token and token type are available as token and tokenType
   * @private
   */ function getToken(state) {
        state.tokenType = TOKENTYPE.NULL;
        state.token = '';
        state.comment = ''; // skip over whitespaces
        // space, tab, and newline when inside parameters
        while(parse.isWhitespace(currentCharacter(state), state.nestingLevel))next(state);
         // skip comment
        if (currentCharacter(state) === '#') while(currentCharacter(state) !== '\n' && currentCharacter(state) !== ''){
            state.comment += currentCharacter(state);
            next(state);
        }
         // check for end of expression
        if (currentCharacter(state) === '') {
            // token is still empty
            state.tokenType = TOKENTYPE.DELIMITER;
            return;
        } // check for new line character
        if (currentCharacter(state) === '\n' && !state.nestingLevel) {
            state.tokenType = TOKENTYPE.DELIMITER;
            state.token = currentCharacter(state);
            next(state);
            return;
        }
        var c1 = currentCharacter(state);
        var c2 = currentString(state, 2);
        var c3 = currentString(state, 3);
        if (c3.length === 3 && DELIMITERS[c3]) {
            state.tokenType = TOKENTYPE.DELIMITER;
            state.token = c3;
            next(state);
            next(state);
            next(state);
            return;
        } // check for delimiters consisting of 2 characters
        if (c2.length === 2 && DELIMITERS[c2]) {
            state.tokenType = TOKENTYPE.DELIMITER;
            state.token = c2;
            next(state);
            next(state);
            return;
        } // check for delimiters consisting of 1 character
        if (DELIMITERS[c1]) {
            state.tokenType = TOKENTYPE.DELIMITER;
            state.token = c1;
            next(state);
            return;
        } // check for a number
        if (parse.isDigitDot(c1)) {
            state.tokenType = TOKENTYPE.NUMBER; // check for binary, octal, or hex
            var _c = currentString(state, 2);
            if (_c === '0b' || _c === '0o' || _c === '0x') {
                state.token += currentCharacter(state);
                next(state);
                state.token += currentCharacter(state);
                next(state);
                while(parse.isHexDigit(currentCharacter(state))){
                    state.token += currentCharacter(state);
                    next(state);
                }
                if (currentCharacter(state) === '.') {
                    // this number has a radix point
                    state.token += '.';
                    next(state); // get the digits after the radix
                    while(parse.isHexDigit(currentCharacter(state))){
                        state.token += currentCharacter(state);
                        next(state);
                    }
                } else if (currentCharacter(state) === 'i') {
                    // this number has a word size suffix
                    state.token += 'i';
                    next(state); // get the word size
                    while(parse.isDigit(currentCharacter(state))){
                        state.token += currentCharacter(state);
                        next(state);
                    }
                }
                return;
            } // get number, can have a single dot
            if (currentCharacter(state) === '.') {
                state.token += currentCharacter(state);
                next(state);
                if (!parse.isDigit(currentCharacter(state))) {
                    // this is no number, it is just a dot (can be dot notation)
                    state.tokenType = TOKENTYPE.DELIMITER;
                    return;
                }
            } else {
                while(parse.isDigit(currentCharacter(state))){
                    state.token += currentCharacter(state);
                    next(state);
                }
                if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
                    state.token += currentCharacter(state);
                    next(state);
                }
            }
            while(parse.isDigit(currentCharacter(state))){
                state.token += currentCharacter(state);
                next(state);
            } // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"
            if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
                if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
                    state.token += currentCharacter(state);
                    next(state);
                    if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
                        state.token += currentCharacter(state);
                        next(state);
                    } // Scientific notation MUST be followed by an exponent
                    if (!parse.isDigit(currentCharacter(state))) throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
                    while(parse.isDigit(currentCharacter(state))){
                        state.token += currentCharacter(state);
                        next(state);
                    }
                    if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
                } else if (nextCharacter(state) === '.') {
                    next(state);
                    throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
                }
            }
            return;
        } // check for variables, functions, named operators
        if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
            while(parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))){
                state.token += currentCharacter(state);
                next(state);
            }
            if (_objectJs.hasOwnProperty(NAMED_DELIMITERS, state.token)) state.tokenType = TOKENTYPE.DELIMITER;
            else state.tokenType = TOKENTYPE.SYMBOL;
            return;
        } // something unknown is found, wrong characters -> a syntax error
        state.tokenType = TOKENTYPE.UNKNOWN;
        while(currentCharacter(state) !== ''){
            state.token += currentCharacter(state);
            next(state);
        }
        throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
    }
    /**
   * Get next token and skip newline tokens
   */ function getTokenSkipNewline(state) {
        do getToken(state);
        while (state.token === '\n') // eslint-disable-line no-unmodified-loop-condition
    }
    /**
   * Open parameters.
   * New line characters will be ignored until closeParams(state) is called
   */ function openParams(state) {
        state.nestingLevel++;
    }
    /**
   * Close parameters.
   * New line characters will no longer be ignored
   */ function closeParams(state) {
        state.nestingLevel--;
    }
    /**
   * Checks whether the current character `c` is a valid alpha character:
   *
   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
   * - An underscore                        Ascii: _
   * - A dollar sign                        Ascii: $
   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
   * - A greek letter                       Unicode: \u0370 - \u03FF
   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
   *
   * The previous and next characters are needed to determine whether
   * this character is part of a unicode surrogate pair.
   *
   * @param {string} c      Current character in the expression
   * @param {string} cPrev  Previous character
   * @param {string} cNext  Next character
   * @return {boolean}
   */ parse.isAlpha = function isAlpha(c, cPrev, cNext) {
        return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
    };
    /**
   * Test whether a character is a valid latin, greek, or letter-like character
   * @param {string} c
   * @return {boolean}
   */ parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
        return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
    };
    /**
   * Test whether two given 16 bit characters form a surrogate pair of a
   * unicode math symbol.
   *
   * https://unicode-table.com/en/
   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
   *
   * Note: In ES6 will be unicode aware:
   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes
   * https://mathiasbynens.be/notes/es6-unicode-regex
   *
   * @param {string} high
   * @param {string} low
   * @return {boolean}
   */ parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
        return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
    };
    /**
   * Check whether given character c is a white space character: space, tab, or enter
   * @param {string} c
   * @param {number} nestingLevel
   * @return {boolean}
   */ parse.isWhitespace = function isWhitespace(c, nestingLevel) {
        // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
        return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
    };
    /**
   * Test whether the character c is a decimal mark (dot).
   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
   * @param {string} c
   * @param {string} cNext
   * @return {boolean}
   */ parse.isDecimalMark = function isDecimalMark(c, cNext) {
        return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
    };
    /**
   * checks if the given char c is a digit or dot
   * @param {string} c   a string with one character
   * @return {boolean}
   */ parse.isDigitDot = function isDigitDot(c) {
        return c >= '0' && c <= '9' || c === '.';
    };
    /**
   * checks if the given char c is a digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */ parse.isDigit = function isDigit(c) {
        return c >= '0' && c <= '9';
    };
    /**
   * checks if the given char c is a hex digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */ parse.isHexDigit = function isHexDigit(c) {
        return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
    };
    /**
   * Start of the parse levels below, in order of precedence
   * @return {Node} node
   * @private
   */ function parseStart(expression, extraNodes) {
        var state = initialState();
        _extendsDefault.default(state, {
            expression,
            extraNodes
        });
        getToken(state);
        var node = parseBlock(state); // check for garbage at the end of the expression
        // an expression ends with a empty character '' and tokenType DELIMITER
        if (state.token !== '') {
            if (state.tokenType === TOKENTYPE.DELIMITER) // user entered a not existing operator like "//"
            // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
            throw createError(state, 'Unexpected operator ' + state.token);
            else throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
        }
        return node;
    }
    /**
   * Parse a block with expressions. Expressions can be separated by a newline
   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
   * of the preceding line is returned.
   * @return {Node} node
   * @private
   */ function parseBlock(state) {
        var node;
        var blocks = [];
        var visible;
        if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
            node = parseAssignment(state);
            node.comment = state.comment;
        } // TODO: simplify this loop
        while(state.token === '\n' || state.token === ';'){
            // eslint-disable-line no-unmodified-loop-condition
            if (blocks.length === 0 && node) {
                visible = state.token !== ';';
                blocks.push({
                    node: node,
                    visible: visible
                });
            }
            getToken(state);
            if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
                node = parseAssignment(state);
                node.comment = state.comment;
                visible = state.token !== ';';
                blocks.push({
                    node: node,
                    visible: visible
                });
            }
        }
        if (blocks.length > 0) return new BlockNode(blocks);
        else {
            if (!node) {
                node = new ConstantNode(undefined);
                node.comment = state.comment;
            }
            return node;
        }
    }
    /**
   * Assignment of a function or variable,
   * - can be a variable like 'a=2.3'
   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
   * - defining a function like 'f(x) = x^2'
   * @return {Node} node
   * @private
   */ function parseAssignment(state) {
        var name, args, value, valid;
        var node = parseConditional(state);
        if (state.token === '=') {
            if (_isJs.isSymbolNode(node)) {
                // parse a variable assignment like 'a = 2/3'
                name = node.name;
                getTokenSkipNewline(state);
                value = parseAssignment(state);
                return new AssignmentNode(new SymbolNode(name), value);
            } else if (_isJs.isAccessorNode(node)) {
                // parse a matrix subset assignment like 'A[1,2] = 4'
                getTokenSkipNewline(state);
                value = parseAssignment(state);
                return new AssignmentNode(node.object, node.index, value);
            } else if (_isJs.isFunctionNode(node) && _isJs.isSymbolNode(node.fn)) {
                // parse function assignment like 'f(x) = x^2'
                valid = true;
                args = [];
                name = node.name;
                node.args.forEach(function(arg, index) {
                    if (_isJs.isSymbolNode(arg)) args[index] = arg.name;
                    else valid = false;
                });
                if (valid) {
                    getTokenSkipNewline(state);
                    value = parseAssignment(state);
                    return new FunctionAssignmentNode(name, args, value);
                }
            }
            throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
        }
        return node;
    }
    /**
   * conditional operation
   *
   *     condition ? truePart : falsePart
   *
   * Note: conditional operator is right-associative
   *
   * @return {Node} node
   * @private
   */ function parseConditional(state) {
        var node = parseLogicalOr(state);
        while(state.token === '?'){
            // eslint-disable-line no-unmodified-loop-condition
            // set a conditional level, the range operator will be ignored as long
            // as conditionalLevel === state.nestingLevel.
            var prev = state.conditionalLevel;
            state.conditionalLevel = state.nestingLevel;
            getTokenSkipNewline(state);
            var condition = node;
            var trueExpr = parseAssignment(state);
            if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
            state.conditionalLevel = null;
            getTokenSkipNewline(state);
            var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity
            node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level
            state.conditionalLevel = prev;
        }
        return node;
    }
    /**
   * logical or, 'x or y'
   * @return {Node} node
   * @private
   */ function parseLogicalOr(state) {
        var node = parseLogicalXor(state);
        while(state.token === 'or'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('or', 'or', [
                node,
                parseLogicalXor(state)
            ]);
        }
        return node;
    }
    /**
   * logical exclusive or, 'x xor y'
   * @return {Node} node
   * @private
   */ function parseLogicalXor(state) {
        var node = parseLogicalAnd(state);
        while(state.token === 'xor'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('xor', 'xor', [
                node,
                parseLogicalAnd(state)
            ]);
        }
        return node;
    }
    /**
   * logical and, 'x and y'
   * @return {Node} node
   * @private
   */ function parseLogicalAnd(state) {
        var node = parseBitwiseOr(state);
        while(state.token === 'and'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('and', 'and', [
                node,
                parseBitwiseOr(state)
            ]);
        }
        return node;
    }
    /**
   * bitwise or, 'x | y'
   * @return {Node} node
   * @private
   */ function parseBitwiseOr(state) {
        var node = parseBitwiseXor(state);
        while(state.token === '|'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('|', 'bitOr', [
                node,
                parseBitwiseXor(state)
            ]);
        }
        return node;
    }
    /**
   * bitwise exclusive or (xor), 'x ^| y'
   * @return {Node} node
   * @private
   */ function parseBitwiseXor(state) {
        var node = parseBitwiseAnd(state);
        while(state.token === '^|'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('^|', 'bitXor', [
                node,
                parseBitwiseAnd(state)
            ]);
        }
        return node;
    }
    /**
   * bitwise and, 'x & y'
   * @return {Node} node
   * @private
   */ function parseBitwiseAnd(state) {
        var node = parseRelational(state);
        while(state.token === '&'){
            // eslint-disable-line no-unmodified-loop-condition
            getTokenSkipNewline(state);
            node = new OperatorNode('&', 'bitAnd', [
                node,
                parseRelational(state)
            ]);
        }
        return node;
    }
    /**
   * Parse a chained conditional, like 'a > b >= c'
   * @return {Node} node
   */ function parseRelational(state) {
        var params = [
            parseShift(state)
        ];
        var conditionals = [];
        var operators = {
            '==': 'equal',
            '!=': 'unequal',
            '<': 'smaller',
            '>': 'larger',
            '<=': 'smallerEq',
            '>=': 'largerEq'
        };
        while(_objectJs.hasOwnProperty(operators, state.token)){
            // eslint-disable-line no-unmodified-loop-condition
            var cond = {
                name: state.token,
                fn: operators[state.token]
            };
            conditionals.push(cond);
            getTokenSkipNewline(state);
            params.push(parseShift(state));
        }
        if (params.length === 1) return params[0];
        else if (params.length === 2) return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);
        else return new RelationalNode(conditionals.map((c)=>c.fn
        ), params);
    }
    /**
   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
   * @return {Node} node
   * @private
   */ function parseShift(state) {
        var node, name, fn, params;
        node = parseConversion(state);
        var operators = {
            '<<': 'leftShift',
            '>>': 'rightArithShift',
            '>>>': 'rightLogShift'
        };
        while(_objectJs.hasOwnProperty(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            params = [
                node,
                parseConversion(state)
            ];
            node = new OperatorNode(name, fn, params);
        }
        return node;
    }
    /**
   * conversion operators 'to' and 'in'
   * @return {Node} node
   * @private
   */ function parseConversion(state) {
        var node, name, fn, params;
        node = parseRange(state);
        var operators = {
            to: 'to',
            in: 'to' // alias of 'to'
        };
        while(_objectJs.hasOwnProperty(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            if (name === 'in' && state.token === '') // end of expression -> this is the unit 'in' ('inch')
            node = new OperatorNode('*', 'multiply', [
                node,
                new SymbolNode('in')
            ], true);
            else {
                // operator 'a to b' or 'a in b'
                params = [
                    node,
                    parseRange(state)
                ];
                node = new OperatorNode(name, fn, params);
            }
        }
        return node;
    }
    /**
   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
   * @return {Node} node
   * @private
   */ function parseRange(state) {
        var node;
        var params = [];
        if (state.token === ':') // implicit start=1 (one-based)
        node = new ConstantNode(1);
        else // explicit start
        node = parseAddSubtract(state);
        if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
            // we ignore the range operator when a conditional operator is being processed on the same level
            params.push(node); // parse step and end
            while(state.token === ':' && params.length < 3){
                // eslint-disable-line no-unmodified-loop-condition
                getTokenSkipNewline(state);
                if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') // implicit end
                params.push(new SymbolNode('end'));
                else // explicit end
                params.push(parseAddSubtract(state));
            }
            if (params.length === 3) // params = [start, step, end]
            node = new RangeNode(params[0], params[2], params[1]); // start, end, step
            else // length === 2
            // params = [start, end]
            node = new RangeNode(params[0], params[1]); // start, end
        }
        return node;
    }
    /**
   * add or subtract
   * @return {Node} node
   * @private
   */ function parseAddSubtract(state) {
        var node, name, fn, params;
        node = parseMultiplyDivide(state);
        var operators = {
            '+': 'add',
            '-': 'subtract'
        };
        while(_objectJs.hasOwnProperty(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            var rightNode = parseMultiplyDivide(state);
            if (rightNode.isPercentage) params = [
                node,
                new OperatorNode('*', 'multiply', [
                    node,
                    rightNode
                ])
            ];
            else params = [
                node,
                rightNode
            ];
            node = new OperatorNode(name, fn, params);
        }
        return node;
    }
    /**
   * multiply, divide, modulus
   * @return {Node} node
   * @private
   */ function parseMultiplyDivide(state) {
        var node, last, name, fn;
        node = parseImplicitMultiplication(state);
        last = node;
        var operators = {
            '*': 'multiply',
            '.*': 'dotMultiply',
            '/': 'divide',
            './': 'dotDivide'
        };
        while(true){
            if (_objectJs.hasOwnProperty(operators, state.token)) {
                // explicit operators
                name = state.token;
                fn = operators[name];
                getTokenSkipNewline(state);
                last = parseImplicitMultiplication(state);
                node = new OperatorNode(name, fn, [
                    node,
                    last
                ]);
            } else break;
        }
        return node;
    }
    /**
   * implicit multiplication
   * @return {Node} node
   * @private
   */ function parseImplicitMultiplication(state) {
        var node, last;
        node = parseRule2(state);
        last = node;
        while(true){
            if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && _isJs.isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !_isJs.isConstantNode(last) && (!_isJs.isOperatorNode(last) || last.op === '!') || state.token === '(') {
                // parse implicit multiplication
                //
                // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
                // number:      implicit multiplication like '(2+3)2'
                // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
                last = parseRule2(state);
                node = new OperatorNode('*', 'multiply', [
                    node,
                    last
                ], true);
            } else break;
        }
        return node;
    }
    /**
   * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
   * Explicit division gets higher precedence than implicit multiplication
   * when the division matches this pattern: [number] / [number] [symbol]
   * @return {Node} node
   * @private
   */ function parseRule2(state) {
        var node = parsePercentage(state);
        var last = node;
        var tokenStates = [];
        while(true){
            // Match the "number /" part of the pattern "number / number symbol"
            if (state.token === '/' && _isJs.isConstantNode(last)) {
                // Look ahead to see if the next token is a number
                tokenStates.push(_extendsDefault.default({
                }, state));
                getTokenSkipNewline(state); // Match the "number / number" part of the pattern
                if (state.tokenType === TOKENTYPE.NUMBER) {
                    // Look ahead again
                    tokenStates.push(_extendsDefault.default({
                    }, state));
                    getTokenSkipNewline(state); // Match the "symbol" part of the pattern, or a left parenthesis
                    if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
                        // We've matched the pattern "number / number symbol".
                        // Rewind once and build the "number / number" node; the symbol will be consumed later
                        _extendsDefault.default(state, tokenStates.pop());
                        tokenStates.pop();
                        last = parsePercentage(state);
                        node = new OperatorNode('/', 'divide', [
                            node,
                            last
                        ]);
                    } else {
                        // Not a match, so rewind
                        tokenStates.pop();
                        _extendsDefault.default(state, tokenStates.pop());
                        break;
                    }
                } else {
                    // Not a match, so rewind
                    _extendsDefault.default(state, tokenStates.pop());
                    break;
                }
            } else break;
        }
        return node;
    }
    /**
   * percentage or mod
   * @return {Node} node
   * @private
   */ function parsePercentage(state) {
        var node, name, fn, params;
        node = parseUnary(state);
        var operators = {
            '%': 'mod',
            mod: 'mod'
        };
        while(_objectJs.hasOwnProperty(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getTokenSkipNewline(state);
            if (name === '%' && state.tokenType === TOKENTYPE.DELIMITER && state.token !== '(') // If the expression contains only %, then treat that as /100
            node = new OperatorNode('/', 'divide', [
                node,
                new ConstantNode(100)
            ], false, true);
            else {
                params = [
                    node,
                    parseUnary(state)
                ];
                node = new OperatorNode(name, fn, params);
            }
        }
        return node;
    }
    /**
   * Unary plus and minus, and logical and bitwise not
   * @return {Node} node
   * @private
   */ function parseUnary(state) {
        var name, params, fn;
        var operators = {
            '-': 'unaryMinus',
            '+': 'unaryPlus',
            '~': 'bitNot',
            not: 'not'
        };
        if (_objectJs.hasOwnProperty(operators, state.token)) {
            fn = operators[state.token];
            name = state.token;
            getTokenSkipNewline(state);
            params = [
                parseUnary(state)
            ];
            return new OperatorNode(name, fn, params);
        }
        return parsePow(state);
    }
    /**
   * power
   * Note: power operator is right associative
   * @return {Node} node
   * @private
   */ function parsePow(state) {
        var node, name, fn, params;
        node = parseLeftHandOperators(state);
        if (state.token === '^' || state.token === '.^') {
            name = state.token;
            fn = name === '^' ? 'pow' : 'dotPow';
            getTokenSkipNewline(state);
            params = [
                node,
                parseUnary(state)
            ]; // Go back to unary, we can have '2^-3'
            node = new OperatorNode(name, fn, params);
        }
        return node;
    }
    /**
   * Left hand operators: factorial x!, ctranspose x'
   * @return {Node} node
   * @private
   */ function parseLeftHandOperators(state) {
        var node, name, fn, params;
        node = parseCustomNodes(state);
        var operators = {
            '!': 'factorial',
            '\'': 'ctranspose'
        };
        while(_objectJs.hasOwnProperty(operators, state.token)){
            name = state.token;
            fn = operators[name];
            getToken(state);
            params = [
                node
            ];
            node = new OperatorNode(name, fn, params);
            node = parseAccessors(state, node);
        }
        return node;
    }
    /**
   * Parse a custom node handler. A node handler can be used to process
   * nodes in a custom way, for example for handling a plot.
   *
   * A handler must be passed as second argument of the parse function.
   * - must extend math.Node
   * - must contain a function _compile(defs: Object) : string
   * - must contain a function find(filter: Object) : Node[]
   * - must contain a function toString() : string
   * - the constructor is called with a single argument containing all parameters
   *
   * For example:
   *
   *     nodes = {
   *       'plot': PlotHandler
   *     }
   *
   * The constructor of the handler is called as:
   *
   *     node = new PlotHandler(params)
   *
   * The handler will be invoked when evaluating an expression like:
   *
   *     node = math.parse('plot(sin(x), x)', nodes)
   *
   * @return {Node} node
   * @private
   */ function parseCustomNodes(state) {
        var params = [];
        if (state.tokenType === TOKENTYPE.SYMBOL && _objectJs.hasOwnProperty(state.extraNodes, state.token)) {
            var CustomNode = state.extraNodes[state.token];
            getToken(state); // parse parameters
            if (state.token === '(') {
                params = [];
                openParams(state);
                getToken(state);
                if (state.token !== ')') {
                    params.push(parseAssignment(state)); // parse a list with parameters
                    while(state.token === ','){
                        // eslint-disable-line no-unmodified-loop-condition
                        getToken(state);
                        params.push(parseAssignment(state));
                    }
                }
                if (state.token !== ')') throw createSyntaxError(state, 'Parenthesis ) expected');
                closeParams(state);
                getToken(state);
            } // create a new custom node
            // noinspection JSValidateTypes
            return new CustomNode(params);
        }
        return parseSymbol(state);
    }
    /**
   * parse symbols: functions, variables, constants, units
   * @return {Node} node
   * @private
   */ function parseSymbol(state) {
        var node, name;
        if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
            name = state.token;
            getToken(state);
            if (_objectJs.hasOwnProperty(CONSTANTS, name)) // true, false, null, ...
            node = new ConstantNode(CONSTANTS[name]);
            else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) // NaN, Infinity
            node = new ConstantNode(numeric(name, 'number'));
            else node = new SymbolNode(name);
             // parse function parameters and matrix index
            node = parseAccessors(state, node);
            return node;
        }
        return parseDoubleQuotesString(state);
    }
    /**
   * parse accessors:
   * - function invocation in round brackets (...), for example sqrt(2)
   * - index enclosed in square brackets [...], for example A[2,3]
   * - dot notation for properties, like foo.bar
   * @param {Object} state
   * @param {Node} node    Node on which to apply the parameters. If there
   *                       are no parameters in the expression, the node
   *                       itself is returned
   * @param {string[]} [types]  Filter the types of notations
   *                            can be ['(', '[', '.']
   * @return {Node} node
   * @private
   */ function parseAccessors(state, node, types) {
        var params;
        while((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)){
            // eslint-disable-line no-unmodified-loop-condition
            params = [];
            if (state.token === '(') {
                if (_isJs.isSymbolNode(node) || _isJs.isAccessorNode(node)) {
                    // function invocation like fn(2, 3) or obj.fn(2, 3)
                    openParams(state);
                    getToken(state);
                    if (state.token !== ')') {
                        params.push(parseAssignment(state)); // parse a list with parameters
                        while(state.token === ','){
                            // eslint-disable-line no-unmodified-loop-condition
                            getToken(state);
                            params.push(parseAssignment(state));
                        }
                    }
                    if (state.token !== ')') throw createSyntaxError(state, 'Parenthesis ) expected');
                    closeParams(state);
                    getToken(state);
                    node = new FunctionNode(node, params);
                } else // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
                // don't parse it here but let it be handled by parseImplicitMultiplication
                // with correct precedence
                return node;
            } else if (state.token === '[') {
                // index notation like variable[2, 3]
                openParams(state);
                getToken(state);
                if (state.token !== ']') {
                    params.push(parseAssignment(state)); // parse a list with parameters
                    while(state.token === ','){
                        // eslint-disable-line no-unmodified-loop-condition
                        getToken(state);
                        params.push(parseAssignment(state));
                    }
                }
                if (state.token !== ']') throw createSyntaxError(state, 'Parenthesis ] expected');
                closeParams(state);
                getToken(state);
                node = new AccessorNode(node, new IndexNode(params));
            } else {
                // dot notation like variable.prop
                getToken(state);
                if (state.tokenType !== TOKENTYPE.SYMBOL) throw createSyntaxError(state, 'Property name expected after dot');
                params.push(new ConstantNode(state.token));
                getToken(state);
                var dotNotation = true;
                node = new AccessorNode(node, new IndexNode(params, dotNotation));
            }
        }
        return node;
    }
    /**
   * Parse a double quotes string.
   * @return {Node} node
   * @private
   */ function parseDoubleQuotesString(state) {
        var node, str;
        if (state.token === '"') {
            str = parseDoubleQuotesStringToken(state); // create constant
            node = new ConstantNode(str); // parse index parameters
            node = parseAccessors(state, node);
            return node;
        }
        return parseSingleQuotesString(state);
    }
    /**
   * Parse a string surrounded by double quotes "..."
   * @return {string}
   */ function parseDoubleQuotesStringToken(state) {
        var str = '';
        while(currentCharacter(state) !== '' && currentCharacter(state) !== '"'){
            if (currentCharacter(state) === '\\') {
                // escape character, immediately process the next
                // character to prevent stopping at a next '\"'
                str += currentCharacter(state);
                next(state);
            }
            str += currentCharacter(state);
            next(state);
        }
        getToken(state);
        if (state.token !== '"') throw createSyntaxError(state, 'End of string " expected');
        getToken(state);
        return JSON.parse('"' + str + '"'); // unescape escaped characters
    }
    /**
   * Parse a single quotes string.
   * @return {Node} node
   * @private
   */ function parseSingleQuotesString(state) {
        var node, str;
        if (state.token === '\'') {
            str = parseSingleQuotesStringToken(state); // create constant
            node = new ConstantNode(str); // parse index parameters
            node = parseAccessors(state, node);
            return node;
        }
        return parseMatrix(state);
    }
    /**
   * Parse a string surrounded by single quotes '...'
   * @return {string}
   */ function parseSingleQuotesStringToken(state) {
        var str = '';
        while(currentCharacter(state) !== '' && currentCharacter(state) !== '\''){
            if (currentCharacter(state) === '\\') {
                // escape character, immediately process the next
                // character to prevent stopping at a next '\''
                str += currentCharacter(state);
                next(state);
            }
            str += currentCharacter(state);
            next(state);
        }
        getToken(state);
        if (state.token !== '\'') throw createSyntaxError(state, 'End of string \' expected');
        getToken(state);
        return JSON.parse('"' + str + '"'); // unescape escaped characters
    }
    /**
   * parse the matrix
   * @return {Node} node
   * @private
   */ function parseMatrix(state) {
        var array, params, rows, cols;
        if (state.token === '[') {
            // matrix [...]
            openParams(state);
            getToken(state);
            if (state.token !== ']') {
                // this is a non-empty matrix
                var row = parseRow(state);
                if (state.token === ';') {
                    // 2 dimensional array
                    rows = 1;
                    params = [
                        row
                    ]; // the rows of the matrix are separated by dot-comma's
                    while(state.token === ';'){
                        // eslint-disable-line no-unmodified-loop-condition
                        getToken(state);
                        params[rows] = parseRow(state);
                        rows++;
                    }
                    if (state.token !== ']') throw createSyntaxError(state, 'End of matrix ] expected');
                    closeParams(state);
                    getToken(state); // check if the number of columns matches in all rows
                    cols = params[0].items.length;
                    for(var r = 1; r < rows; r++){
                        if (params[r].items.length !== cols) throw createError(state, "Column dimensions mismatch (" + params[r].items.length + ' !== ' + cols + ')');
                    }
                    array = new ArrayNode(params);
                } else {
                    // 1 dimensional vector
                    if (state.token !== ']') throw createSyntaxError(state, 'End of matrix ] expected');
                    closeParams(state);
                    getToken(state);
                    array = row;
                }
            } else {
                // this is an empty matrix "[ ]"
                closeParams(state);
                getToken(state);
                array = new ArrayNode([]);
            }
            return parseAccessors(state, array);
        }
        return parseObject(state);
    }
    /**
   * Parse a single comma-separated row from a matrix, like 'a, b, c'
   * @return {ArrayNode} node
   */ function parseRow(state) {
        var params = [
            parseAssignment(state)
        ];
        var len = 1;
        while(state.token === ','){
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state); // parse expression
            params[len] = parseAssignment(state);
            len++;
        }
        return new ArrayNode(params);
    }
    /**
   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
   * @return {Node} node
   * @private
   */ function parseObject(state) {
        if (state.token === '{') {
            openParams(state);
            var key;
            var properties = {
            };
            do {
                getToken(state);
                if (state.token !== '}') {
                    // parse key
                    if (state.token === '"') key = parseDoubleQuotesStringToken(state);
                    else if (state.token === '\'') key = parseSingleQuotesStringToken(state);
                    else if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
                        key = state.token;
                        getToken(state);
                    } else throw createSyntaxError(state, 'Symbol or string expected as object key');
                     // parse key/value separator
                    if (state.token !== ':') throw createSyntaxError(state, 'Colon : expected after object key');
                    getToken(state); // parse key
                    properties[key] = parseAssignment(state);
                }
            }while (state.token === ',') // eslint-disable-line no-unmodified-loop-condition
            if (state.token !== '}') throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
            closeParams(state);
            getToken(state);
            var node = new ObjectNode(properties); // parse index parameters
            node = parseAccessors(state, node);
            return node;
        }
        return parseNumber(state);
    }
    /**
   * parse a number
   * @return {Node} node
   * @private
   */ function parseNumber(state) {
        var numberStr;
        if (state.tokenType === TOKENTYPE.NUMBER) {
            // this is a number
            numberStr = state.token;
            getToken(state);
            return new ConstantNode(numeric(numberStr, config.number));
        }
        return parseParentheses(state);
    }
    /**
   * parentheses
   * @return {Node} node
   * @private
   */ function parseParentheses(state) {
        var node; // check if it is a parenthesized expression
        if (state.token === '(') {
            // parentheses (...)
            openParams(state);
            getToken(state);
            node = parseAssignment(state); // start again
            if (state.token !== ')') throw createSyntaxError(state, 'Parenthesis ) expected');
            closeParams(state);
            getToken(state);
            node = new ParenthesisNode(node);
            node = parseAccessors(state, node);
            return node;
        }
        return parseEnd(state);
    }
    /**
   * Evaluated when the expression is not yet ended but expected to end
   * @return {Node} res
   * @private
   */ function parseEnd(state) {
        if (state.token === '') // syntax error or unexpected end of expression
        throw createSyntaxError(state, 'Unexpected end of expression');
        else throw createSyntaxError(state, 'Value expected');
    }
    /**
   * Shortcut for getting the current row value (one based)
   * Returns the line of the currently handled expression
   * @private
   */ /* TODO: implement keeping track on the row number
  function row () {
    return null
  }
  */ /**
   * Shortcut for getting the current col value (one based)
   * Returns the column (position) where the last state.token starts
   * @private
   */ function col(state) {
        return state.index - state.token.length + 1;
    }
    /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {SyntaxError} instantiated error
   * @private
   */ function createSyntaxError(state, message) {
        var c = col(state);
        var error = new SyntaxError(message + ' (char ' + c + ')');
        error.char = c;
        return error;
    }
    /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {Error} instantiated error
   * @private
   */ function createError(state, message) {
        var c = col(state);
        var error = new SyntaxError(message + ' (char ' + c + ')');
        error.char = c;
        return error;
    }
    return parse;
});

},{"@babel/runtime/helpers/extends":"gyhTZ","../utils/factory.js":"26foW","../utils/is.js":"iwdlF","../utils/collection.js":"4hyl2","../utils/object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"48MvR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCompile", ()=>createCompile
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'compile';
var dependencies = [
    'typed',
    'parse'
];
var createCompile = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , parse  } = _ref;
    /**
   * Parse and compile an expression.
   * Returns a an object with a function `evaluate([scope])` to evaluate the
   * compiled expression.
   *
   * Syntax:
   *
   *     math.compile(expr)                       // returns one node
   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
   *
   * Examples:
   *
   *     const code1 = math.compile('sqrt(3^2 + 4^2)')
   *     code1.evaluate() // 5
   *
   *     let scope = {a: 3, b: 4}
   *     const code2 = math.compile('a * b') // 12
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].evaluate() // 12
   *
   * See also:
   *
   *    parse, evaluate
   *
   * @param {string | string[] | Array | Matrix} expr
   *            The expression to be compiled
   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code
   *            An object with the compiled expression
   * @throws {Error}
   */ return typed(name, {
        string: function string(expr) {
            return parse(expr).compile();
        },
        'Array | Matrix': function ArrayMatrix(expr) {
            return _collectionJs.deepMap(expr, function(entry) {
                return parse(entry).compile();
            });
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4FnWj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createEvaluate", ()=>createEvaluate
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _mapJs = require("../../utils/map.js");
var name = 'evaluate';
var dependencies = [
    'typed',
    'parse'
];
var createEvaluate = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , parse  } = _ref;
    /**
   * Evaluate an expression.
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.evaluate(expr)
   *     math.evaluate(expr, scope)
   *     math.evaluate([expr1, expr2, expr3, ...])
   *     math.evaluate([expr1, expr2, expr3, ...], scope)
   *
   * Example:
   *
   *     math.evaluate('(2+3)/4')                // 1.25
   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5
   *     math.evaluate('sqrt(-4)')               // 2i
   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
   *
   *     let scope = {a:3, b:4}
   *     math.evaluate('a * b', scope)           // 12
   *
   * See also:
   *
   *    parse, compile
   *
   * @param {string | string[] | Matrix} expr   The expression to be evaluated
   * @param {Object} [scope]                    Scope to read/write variables
   * @return {*} The result of the expression
   * @throws {Error}
   */ return typed(name, {
        string: function string(expr) {
            var scope = _mapJs.createEmptyMap();
            return parse(expr).compile().evaluate(scope);
        },
        'string, Map | Object': function stringMapObject(expr, scope) {
            return parse(expr).compile().evaluate(scope);
        },
        'Array | Matrix': function ArrayMatrix(expr) {
            var scope = _mapJs.createEmptyMap();
            return _collectionJs.deepMap(expr, function(entry) {
                return parse(entry).compile().evaluate(scope);
            });
        },
        'Array | Matrix, Map | Object': function ArrayMatrixMapObject(expr, scope) {
            return _collectionJs.deepMap(expr, function(entry) {
                return parse(entry).compile().evaluate(scope);
            });
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","../../utils/map.js":"1C0lk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"anXcn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createParserClass", ()=>createParserClass
);
var _factoryJs = require("../utils/factory.js");
var _mapJs = require("../utils/map.js");
var name1 = 'Parser';
var dependencies = [
    'evaluate'
];
var createParserClass = /* #__PURE__ */ _factoryJs.factory(name1, dependencies, (_ref)=>{
    var { evaluate  } = _ref;
    /**
   * @constructor Parser
   * Parser contains methods to evaluate or parse expressions, and has a number
   * of convenience methods to get, set, and remove variables from memory. Parser
   * keeps a scope containing variables in memory, which is used for all
   * evaluations.
   *
   * Methods:
   *    const result = parser.evaluate(expr)  // evaluate an expression
   *    const value = parser.get(name)        // retrieve a variable from the parser
   *    const values = parser.getAll()        // retrieve all defined variables
   *    parser.set(name, value)               // set a variable in the parser
   *    parser.remove(name)                   // clear a variable from the
   *                                          // parsers scope
   *    parser.clear()                        // clear the parsers scope
   *
   * Example usage:
   *    const parser = new Parser()
   *    // Note: there is a convenience method which can be used instead:
   *    // const parser = new math.parser()
   *
   *    // evaluate expressions
   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5
   *    parser.evaluate('sqrt(-4)')               // 2i
   *    parser.evaluate('2 inch in cm')           // 5.08 cm
   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476
   *
   *    // define variables and functions
   *    parser.evaluate('x = 7 / 2')              // 3.5
   *    parser.evaluate('x + 3')                  // 6.5
   *    parser.evaluate('f(x, y) = x^y')          // f(x, y)
   *    parser.evaluate('f(2, 3)')                // 8
   *
   *    // get and set variables and functions
   *    const x = parser.get('x')                 // 7
   *    const f = parser.get('f')                 // function
   *    const g = f(3, 2)                         // 9
   *    parser.set('h', 500)
   *    const i = parser.evaluate('h / 2')        // 250
   *    parser.set('hello', function (name) {
   *        return 'hello, ' + name + '!'
   *    })
   *    parser.evaluate('hello("user")')          // "hello, user!"
   *
   *    // clear defined functions and variables
   *    parser.clear()
   *
   */ function Parser() {
        if (!(this instanceof Parser)) throw new SyntaxError('Constructor must be called with the new operator');
        Object.defineProperty(this, 'scope', {
            value: _mapJs.createEmptyMap(),
            writable: false
        });
    }
    /**
   * Attach type information
   */ Parser.prototype.type = 'Parser';
    Parser.prototype.isParser = true;
    /**
   * Parse and evaluate the given expression
   * @param {string | string[]} expr   A string containing an expression,
   *                                   for example "2+3", or a list with expressions
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */ Parser.prototype.evaluate = function(expr) {
        // TODO: validate arguments
        return evaluate(expr, this.scope);
    };
    /**
   * Get a variable (a function or variable) by name from the parsers scope.
   * Returns undefined when not found
   * @param {string} name
   * @return {* | undefined} value
   */ Parser.prototype.get = function(name) {
        // TODO: validate arguments
        if (this.scope.has(name)) return this.scope.get(name);
    };
    /**
   * Get a map with all defined variables
   * @return {Object} values
   */ Parser.prototype.getAll = function() {
        return _mapJs.toObject(this.scope);
    };
    /**
   * Get a map with all defined variables
   * @return {Map} values
   */ Parser.prototype.getAllAsMap = function() {
        return this.scope;
    };
    /**
   * Set a symbol (a function or variable) by name from the parsers scope.
   * @param {string} name
   * @param {* | undefined} value
   */ Parser.prototype.set = function(name, value) {
        this.scope.set(name, value);
        return value;
    };
    /**
   * Remove a variable from the parsers scope
   * @param {string} name
   */ Parser.prototype.remove = function(name) {
        this.scope.delete(name);
    };
    /**
   * Clear the scope with variables and functions
   */ Parser.prototype.clear = function() {
        this.scope.clear();
    };
    return Parser;
}, {
    isClass: true
});

},{"../utils/factory.js":"26foW","../utils/map.js":"1C0lk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jFy33":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createParser", ()=>createParser
);
var _factoryJs = require("../../utils/factory.js");
var name = 'parser';
var dependencies = [
    'typed',
    'Parser'
];
var createParser = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Parser  } = _ref;
    /**
   * Create a parser. The function creates a new `math.Parser` object.
   *
   * Syntax:
   *
   *    math.parser()
   *
   * Examples:
   *
   *     const parser = new math.parser()
   *
   *     // evaluate expressions
   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5
   *     const b = parser.evaluate('sqrt(-4)')        // 2i
   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm
   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476
   *
   *     // define variables and functions
   *     parser.evaluate('x = 7 / 2')             // 3.5
   *     parser.evaluate('x + 3')                 // 6.5
   *     parser.evaluate('f(x, y) = x^y')         // f(x, y)
   *     parser.evaluate('f(2, 3)')               // 8
   *
   *     // get and set variables and functions
   *     const x = parser.get('x')                // 7
   *     const f = parser.get('f')                // function
   *     const g = f(3, 2)                        // 9
   *     parser.set('h', 500)
   *     const i = parser.evaluate('h / 2')       // 250
   *     parser.set('hello', function (name) {
   *       return 'hello, ' + name + '!'
   *     })
   *     parser.evaluate('hello("user")')         // "hello, user!"
   *
   *     // clear defined functions and variables
   *     parser.clear()
   *
   * See also:
   *
   *    evaluate, compile, parse
   *
   * @return {Parser} Parser
   */ return typed(name, {
        '': function _() {
            return new Parser();
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bnAwC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLup", ()=>createLup
);
var _objectJs = require("../../../utils/object.js");
var _factoryJs = require("../../../utils/factory.js");
var name = 'lup';
var dependencies = [
    'typed',
    'matrix',
    'abs',
    'addScalar',
    'divideScalar',
    'multiplyScalar',
    'subtract',
    'larger',
    'equalScalar',
    'unaryMinus',
    'DenseMatrix',
    'SparseMatrix',
    'Spa'
];
var createLup = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , abs , addScalar , divideScalar , multiplyScalar , subtract , larger , equalScalar , unaryMinus , DenseMatrix , SparseMatrix , Spa  } = _ref;
    function _denseLUP(m) {
        // rows & columns
        var rows = m._size[0];
        var columns = m._size[1]; // minimum rows and columns
        var n = Math.min(rows, columns); // matrix array, clone original data
        var data = _objectJs.clone(m._data); // l matrix arrays
        var ldata = [];
        var lsize = [
            rows,
            n
        ]; // u matrix arrays
        var udata = [];
        var usize = [
            n,
            columns
        ]; // vars
        var i, j, k; // permutation vector
        var p = [];
        for(i = 0; i < rows; i++){
            p[i] = i;
        } // loop columns
        for(j = 0; j < columns; j++){
            // skip first column in upper triangular matrix
            if (j > 0) {
                // loop rows
                for(i = 0; i < rows; i++){
                    // min i,j
                    var min = Math.min(i, j); // v[i, j]
                    var s = 0; // loop up to min
                    for(k = 0; k < min; k++){
                        // s = l[i, k] - data[k, j]
                        s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
                    }
                    data[i][j] = subtract(data[i][j], s);
                }
            } // row with larger value in cvector, row >= j
            var pi = j;
            var pabsv = 0;
            var vjj = 0; // loop rows
            for(i = j; i < rows; i++){
                // data @ i, j
                var v = data[i][j]; // absolute value
                var absv = abs(v); // value is greater than pivote value
                if (larger(absv, pabsv)) {
                    // store row
                    pi = i; // update max value
                    pabsv = absv; // value @ [j, j]
                    vjj = v;
                }
            } // swap rows (j <-> pi)
            if (j !== pi) {
                var _pi;
                // swap values j <-> pi in p
                p[j] = (_pi = p[pi], p[pi] = p[j], _pi); // swap j <-> pi in data
                DenseMatrix._swapRows(j, pi, data);
            } // check column is in lower triangular matrix
            if (j < rows) {
                // loop rows (lower triangular matrix)
                for(i = j + 1; i < rows; i++){
                    // value @ i, j
                    var vij = data[i][j];
                    if (!equalScalar(vij, 0)) {
                        // update data
                        data[i][j] = divideScalar(data[i][j], vjj);
                    }
                }
            }
        } // loop columns
        for(j = 0; j < columns; j++){
            // loop rows
            for(i = 0; i < rows; i++){
                // initialize row in arrays
                if (j === 0) {
                    // check row exists in upper triangular matrix
                    if (i < columns) {
                        // U
                        udata[i] = [];
                    } // L
                    ldata[i] = [];
                } // check we are in the upper triangular matrix
                if (i < j) {
                    // check row exists in upper triangular matrix
                    if (i < columns) {
                        // U
                        udata[i][j] = data[i][j];
                    } // check column exists in lower triangular matrix
                    if (j < rows) {
                        // L
                        ldata[i][j] = 0;
                    }
                    continue;
                } // diagonal value
                if (i === j) {
                    // check row exists in upper triangular matrix
                    if (i < columns) {
                        // U
                        udata[i][j] = data[i][j];
                    } // check column exists in lower triangular matrix
                    if (j < rows) {
                        // L
                        ldata[i][j] = 1;
                    }
                    continue;
                } // check row exists in upper triangular matrix
                if (i < columns) {
                    // U
                    udata[i][j] = 0;
                } // check column exists in lower triangular matrix
                if (j < rows) {
                    // L
                    ldata[i][j] = data[i][j];
                }
            }
        } // l matrix
        var l = new DenseMatrix({
            data: ldata,
            size: lsize
        }); // u matrix
        var u = new DenseMatrix({
            data: udata,
            size: usize
        }); // p vector
        var pv = [];
        for(i = 0, n = p.length; i < n; i++){
            pv[p[i]] = i;
        } // return matrices
        return {
            L: l,
            U: u,
            p: pv,
            toString: function toString() {
                return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
            }
        };
    }
    function _sparseLUP(m) {
        // rows & columns
        var rows = m._size[0];
        var columns = m._size[1]; // minimum rows and columns
        var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr; // l matrix arrays
        var lvalues = [];
        var lindex = [];
        var lptr = [];
        var lsize = [
            rows,
            n
        ]; // u matrix arrays
        var uvalues = [];
        var uindex = [];
        var uptr = [];
        var usize = [
            n,
            columns
        ]; // vars
        var i1, j, k2; // permutation vectors, (current index -> original index) and (original index -> current index)
        var pvCo = [];
        var pvOc = [];
        for(i1 = 0; i1 < rows; i1++){
            pvCo[i1] = i1;
            pvOc[i1] = i1;
        } // swap indices in permutation vectors (condition x < y)!
        var swapIndeces = function swapIndeces(x, y) {
            // find pv indeces getting data from x and y
            var kx = pvOc[x];
            var ky = pvOc[y]; // update permutation vector current -> original
            pvCo[kx] = y;
            pvCo[ky] = x; // update permutation vector original -> current
            pvOc[x] = ky;
            pvOc[y] = kx;
        }; // loop columns
        var _loop = function _loop() {
            // sparse accumulator
            var spa = new Spa(); // check lower triangular matrix has a value @ column j
            if (j < rows) {
                // update ptr
                lptr.push(lvalues.length); // first value in j column for lower triangular matrix
                lvalues.push(1);
                lindex.push(j);
            } // update ptr
            uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
            var k0 = ptr[j];
            var k1 = ptr[j + 1]; // copy column j into sparse accumulator
            for(k2 = k0; k2 < k1; k2++){
                // row
                i1 = index[k2]; // copy column values into sparse accumulator (use permutation vector)
                spa.set(pvCo[i1], values[k2]);
            } // skip first column in upper triangular matrix
            if (j > 0) {
                // loop rows in column j (above diagonal)
                spa.forEach(0, j - 1, function(k, vkj) {
                    // loop rows in column k (L)
                    SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function(i, vik) {
                        // check row is below k
                        if (i > k) {
                            // update spa value
                            spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
                        }
                    });
                });
            } // row with larger value in spa, row >= j
            var pi = j;
            var vjj = spa.get(j);
            var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)
            spa.forEach(j + 1, rows - 1, function(x, v) {
                // absolute value
                var absv = abs(v); // value is greater than pivote value
                if (larger(absv, pabsv)) {
                    // store row
                    pi = x; // update max value
                    pabsv = absv; // value @ [j, j]
                    vjj = v;
                }
            }); // swap rows (j <-> pi)
            if (j !== pi) {
                // swap values j <-> pi in L
                SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U
                SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa
                spa.swap(j, pi); // update permutation vector (swap values @ j, pi)
                swapIndeces(j, pi);
            } // loop values in spa (order by row)
            spa.forEach(0, rows - 1, function(x, v) {
                // check we are above diagonal
                if (x <= j) {
                    // update upper triangular matrix
                    uvalues.push(v);
                    uindex.push(x);
                } else {
                    // update value
                    v = divideScalar(v, vjj); // check value is non zero
                    if (!equalScalar(v, 0)) {
                        // update lower triangular matrix
                        lvalues.push(v);
                        lindex.push(x);
                    }
                }
            });
        };
        for(j = 0; j < columns; j++){
            _loop();
        } // update ptrs
        uptr.push(uvalues.length);
        lptr.push(lvalues.length); // return matrices
        return {
            L: new SparseMatrix({
                values: lvalues,
                index: lindex,
                ptr: lptr,
                size: lsize
            }),
            U: new SparseMatrix({
                values: uvalues,
                index: uindex,
                ptr: uptr,
                size: usize
            }),
            p: pvCo,
            toString: function toString() {
                return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
            }
        };
    }
    /**
   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
   * row permutation vector `p` where `A[p,:] = L * U`
   *
   * Syntax:
   *
   *    math.lup(A)
   *
   * Example:
   *
   *    const m = [[2, 1], [1, 4]]
   *    const r = math.lup(m)
   *    // r = {
   *    //   L: [[1, 0], [0.5, 1]],
   *    //   U: [[2, 1], [0, 3.5]],
   *    //   P: [0, 1]
   *    // }
   *
   * See also:
   *
   *    slu, lsolve, lusolve, usolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
   *
   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
   */ return typed(name, {
        DenseMatrix: function DenseMatrix(m) {
            return _denseLUP(m);
        },
        SparseMatrix: function SparseMatrix(m) {
            return _sparseLUP(m);
        },
        Array: function Array(a) {
            // create dense matrix from array
            var m = matrix(a); // lup, use matrix implementation
            var r = _denseLUP(m); // result
            return {
                L: r.L.valueOf(),
                U: r.U.valueOf(),
                p: r.p
            };
        }
    });
});

},{"../../../utils/object.js":"eRHhH","../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4oOxX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createQr", ()=>createQr
);
var _extends = require("@babel/runtime/helpers/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _factoryJs = require("../../../utils/factory.js");
var name = 'qr';
var dependencies = [
    'typed',
    'matrix',
    'zeros',
    'identity',
    'isZero',
    'equal',
    'sign',
    'sqrt',
    'conj',
    'unaryMinus',
    'addScalar',
    'divideScalar',
    'multiplyScalar',
    'subtract',
    'complex'
];
var createQr = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , zeros , identity , isZero , equal , sign , sqrt , conj , unaryMinus , addScalar , divideScalar , multiplyScalar , subtract , complex  } = _ref;
    function _denseQRimpl(m) {
        // rows & columns (m x n)
        var rows = m._size[0]; // m
        var cols = m._size[1]; // n
        var Q = identity([
            rows
        ], 'dense');
        var Qdata = Q._data;
        var R = m.clone();
        var Rdata = R._data; // vars
        var i, j, k;
        var w = zeros([
            rows
        ], '');
        for(k = 0; k < Math.min(cols, rows); ++k){
            /*
       * **k-th Household matrix**
       *
       * The matrix I - 2*v*transpose(v)
       * x     = first column of A
       * x1    = first element of x
       * alpha = x1 / |x1| * |x|
       * e1    = tranpose([1, 0, 0, ...])
       * u     = x - alpha * e1
       * v     = u / |u|
       *
       * Household matrix = I - 2 * v * tranpose(v)
       *
       *  * Initially Q = I and R = A.
       *  * Household matrix is a reflection in a plane normal to v which
       *    will zero out all but the top right element in R.
       *  * Appplying reflection to both Q and R will not change product.
       *  * Repeat this process on the (1,1) minor to get R as an upper
       *    triangular matrix.
       *  * Reflections leave the magnitude of the columns of Q unchanged
       *    so Q remains othoganal.
       *
       */ var pivot = Rdata[k][k];
            var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));
            var conjSgn = conj(sgn);
            var alphaSquared = 0;
            for(i = k; i < rows; i++){
                alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
            }
            var alpha = multiplyScalar(sgn, sqrt(alphaSquared));
            if (!isZero(alpha)) {
                // first element in vector u
                var u1 = subtract(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)
                w[k] = 1;
                for(i = k + 1; i < rows; i++){
                    w[i] = divideScalar(Rdata[i][k], u1);
                } // tau = - conj(u1 / alpha)
                var tau = unaryMinus(conj(divideScalar(u1, alpha)));
                var s = void 0;
                /*
         * tau and w have been choosen so that
         *
         * 2 * v * tranpose(v) = tau * w * tranpose(w)
         */ /*
         * -- calculate R = R - tau * w * tranpose(w) * R --
         * Only do calculation with rows k to (rows-1)
         * Additionally columns 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */ for(j = k; j < cols; j++){
                    s = 0; // calculate jth element of [tranpose(w) * R]
                    for(i = k; i < rows; i++){
                        s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
                    } // calculate the jth element of [tau * transpose(w) * R]
                    s = multiplyScalar(s, tau);
                    for(i = k; i < rows; i++){
                        Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
                    }
                }
                /*
         * -- calculate Q = Q - tau * Q * w * transpose(w) --
         * Q is a square matrix (rows x rows)
         * Only do calculation with columns k to (rows-1)
         * Additionally rows 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */ for(i = 0; i < rows; i++){
                    s = 0; // calculate ith element of [Q * w]
                    for(j = k; j < rows; j++){
                        s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
                    } // calculate the ith element of [tau * Q * w]
                    s = multiplyScalar(s, tau);
                    for(j = k; j < rows; ++j){
                        Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
                    }
                }
            }
        } // return matrices
        return {
            Q: Q,
            R: R,
            toString: function toString() {
                return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
            }
        };
    }
    function _denseQR(m) {
        var ret = _denseQRimpl(m);
        var Rdata = ret.R._data;
        if (m._data.length > 0) {
            var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;
            for(var i = 0; i < Rdata.length; ++i){
                for(var j = 0; j < i && j < (Rdata[0] || []).length; ++j){
                    Rdata[i][j] = zero;
                }
            }
        }
        return ret;
    }
    function _sparseQR(m) {
        throw new Error('qr not implemented for sparse matrices yet');
    }
    /**
   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
   * two matrices (`Q`, `R`) where `Q` is an
   * orthogonal matrix and `R` is an upper triangular matrix.
   *
   * Syntax:
   *
   *    math.qr(A)
   *
   * Example:
   *
   *    const m = [
   *      [1, -1,  4],
   *      [1,  4, -2],
   *      [1,  4,  2],
   *      [1,  -1, 0]
   *    ]
   *    const result = math.qr(m)
   *    // r = {
   *    //   Q: [
   *    //     [0.5, -0.5,   0.5],
   *    //     [0.5,  0.5,  -0.5],
   *    //     [0.5,  0.5,   0.5],
   *    //     [0.5, -0.5,  -0.5],
   *    //   ],
   *    //   R: [
   *    //     [2, 3,  2],
   *    //     [0, 5, -2],
   *    //     [0, 0,  4],
   *    //     [0, 0,  0]
   *    //   ]
   *    // }
   *
   * See also:
   *
   *    lup, lusolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array
   * for which to get the QR decomposition.
   *
   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
   * matrix and R: the upper triangular matrix
   */ return _extendsDefault.default(typed(name, {
        DenseMatrix: function DenseMatrix(m) {
            return _denseQR(m);
        },
        SparseMatrix: function SparseMatrix(m) {
            return _sparseQR(m);
        },
        Array: function Array(a) {
            // create dense matrix from array
            var m = matrix(a); // lup, use matrix implementation
            var r = _denseQR(m); // result
            return {
                Q: r.Q.valueOf(),
                R: r.R.valueOf()
            };
        }
    }), {
        _denseQRimpl
    });
});

},{"@babel/runtime/helpers/extends":"gyhTZ","../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"QPajv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSlu", ()=>createSlu
);
var _numberJs = require("../../../utils/number.js");
var _factoryJs = require("../../../utils/factory.js");
var _csSqrJs = require("../sparse/csSqr.js");
var _csLuJs = require("../sparse/csLu.js");
var name = 'slu';
var dependencies = [
    'typed',
    'abs',
    'add',
    'multiply',
    'transpose',
    'divideScalar',
    'subtract',
    'larger',
    'largerEq',
    'SparseMatrix'
];
var createSlu = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , abs , add , multiply , transpose , divideScalar , subtract , larger , largerEq , SparseMatrix  } = _ref;
    var csSqr = _csSqrJs.createCsSqr({
        add,
        multiply,
        transpose
    });
    var csLu = _csLuJs.createCsLu({
        abs,
        divideScalar,
        multiply,
        subtract,
        larger,
        largerEq,
        SparseMatrix
    });
    /**
   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
   *
   * `P * A * Q = L * U`
   *
   * Syntax:
   *
   *    math.slu(A, order, threshold)
   *
   * Examples:
   *
   *    const A = math.sparse([[4,3], [6, 3]])
   *    math.slu(A, 1, 0.001)
   *    // returns:
   *    // {
   *    //   L: [[1, 0], [1.5, 1]]
   *    //   U: [[4, 3], [0, -1.5]]
   *    //   p: [0, 1]
   *    //   q: [0, 1]
   *    // }
   *
   * See also:
   *
   *    lup, lsolve, usolve, lusolve
   *
   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
   * @param {Number}       order          The Symbolic Ordering and Analysis order:
   *                                       0 - Natural ordering, no permutation vector q is returned
   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
   *                                           A dense row is a row with more than 10*sqr(columns) entries.
   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
   */ return typed(name, {
        'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
            // verify order
            if (!_numberJs.isInteger(order) || order < 0 || order > 3) throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
             // verify threshold
            if (threshold < 0 || threshold > 1) throw new Error('Partial pivoting threshold must be a number from 0 to 1');
             // perform symbolic ordering and analysis
            var s = csSqr(order, a, false); // perform lu decomposition
            var f = csLu(a, s, threshold); // return decomposition
            return {
                L: f.L,
                U: f.U,
                p: f.pinv,
                q: s.q,
                toString: function toString() {
                    return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
                }
            };
        }
    });
});

},{"../../../utils/number.js":"l1AB8","../../../utils/factory.js":"26foW","../sparse/csSqr.js":"2TRQ4","../sparse/csLu.js":"9dlJT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2TRQ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCsSqr", ()=>createCsSqr
);
var _csPermuteJs = require("./csPermute.js");
var _csPostJs = require("./csPost.js");
var _csEtreeJs = require("./csEtree.js");
var _csAmdJs = require("./csAmd.js");
var _csCountsJs = require("./csCounts.js");
var _factoryJs = require("../../../utils/factory.js");
var name = 'csSqr';
var dependencies = [
    'add',
    'multiply',
    'transpose'
];
var createCsSqr = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { add , multiply , transpose  } = _ref;
    var csAmd = _csAmdJs.createCsAmd({
        add,
        multiply,
        transpose
    });
    var csCounts = _csCountsJs.createCsCounts({
        transpose
    });
    /**
   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
   */ function _vcount(a, s) {
        // a arrays
        var aptr = a._ptr;
        var aindex = a._index;
        var asize = a._size; // rows & columns
        var m = asize[0];
        var n = asize[1]; // initialize s arrays
        s.pinv = []; // (m + n)
        s.leftmost = []; // (m)
        // vars
        var parent = s.parent;
        var pinv = s.pinv;
        var leftmost = s.leftmost; // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries
        var w = []; // (m + 3 * n)
        var next = 0;
        var head = m;
        var tail = m + n;
        var nque = m + 2 * n; // vars
        var i, k, p, p0, p1; // initialize w
        for(k = 0; k < n; k++){
            // queue k is empty
            w[head + k] = -1;
            w[tail + k] = -1;
            w[nque + k] = 0;
        } // initialize row arrays
        for(i = 0; i < m; i++){
            leftmost[i] = -1;
        } // loop columns backwards
        for(k = n - 1; k >= 0; k--){
            // values & index for column k
            for(p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++){
                // leftmost[i] = min(find(A(i,:)))
                leftmost[aindex[p]] = k;
            }
        } // scan rows in reverse order
        for(i = m - 1; i >= 0; i--){
            // row i is not yet ordered
            pinv[i] = -1;
            k = leftmost[i]; // check row i is empty
            if (k === -1) {
                continue;
            } // first row in queue k
            if ((w[nque + k]++) === 0) {
                w[tail + k] = i;
            } // put i at head of queue k
            w[next + i] = w[head + k];
            w[head + k] = i;
        }
        s.lnz = 0;
        s.m2 = m; // find row permutation and nnz(V)
        for(k = 0; k < n; k++){
            // remove row i from queue k
            i = w[head + k]; // count V(k,k) as nonzero
            s.lnz++; // add a fictitious row
            if (i < 0) {
                i = s.m2++;
            } // associate row i with V(:,k)
            pinv[i] = k; // skip if V(k+1:m,k) is empty
            if (--nque[k] <= 0) {
                continue;
            } // nque[k] is nnz (V(k+1:m,k))
            s.lnz += w[nque + k]; // move all rows to parent of k
            var pa = parent[k];
            if (pa !== -1) {
                if (w[nque + pa] === 0) {
                    w[tail + pa] = w[tail + k];
                }
                w[next + w[tail + k]] = w[head + pa];
                w[head + pa] = w[next + i];
                w[nque + pa] += w[nque + k];
            }
        }
        for(i = 0; i < m; i++){
            if (pinv[i] < 0) {
                pinv[i] = k++;
            }
        }
        return true;
    }
    /**
   * Symbolic ordering and analysis for QR and LU decompositions.
   *
   * @param {Number}  order           The ordering strategy (see csAmd for more details)
   * @param {Matrix}  a               The A matrix
   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
   *                                  symbolic ordering and analysis for LU decomposition (false)
   *
   * @return {Object}                 The Symbolic ordering and analysis for matrix A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */ return function csSqr(order, a, qr) {
        // a arrays
        var aptr = a._ptr;
        var asize = a._size; // columns
        var n = asize[1]; // vars
        var k; // symbolic analysis result
        var s = {
        }; // fill-reducing ordering
        s.q = csAmd(order, a); // validate results
        if (order && !s.q) return null;
         // QR symbolic analysis
        if (qr) {
            // apply permutations if needed
            var c = order ? _csPermuteJs.csPermute(a, null, s.q, 0) : a; // etree of C'*C, where C=A(:,q)
            s.parent = _csEtreeJs.csEtree(c, 1); // post order elimination tree
            var post = _csPostJs.csPost(s.parent, n); // col counts chol(C'*C)
            s.cp = csCounts(c, s.parent, post, 1); // check we have everything needed to calculate number of nonzero elements
            if (c && s.parent && s.cp && _vcount(c, s)) // calculate number of nonzero elements
            for(s.unz = 0, k = 0; k < n; k++)s.unz += s.cp[k];
        } else {
            // for LU factorization only, guess nnz(L) and nnz(U)
            s.unz = 4 * aptr[n] + n;
            s.lnz = s.unz;
        } // return result S
        return s;
    };
});

},{"./csPermute.js":"cG0fj","./csPost.js":"3yspz","./csEtree.js":"9hb6F","./csAmd.js":"iAfRp","./csCounts.js":"9qD3A","../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cG0fj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Permutes a sparse matrix C = P * A * Q
 *
 * @param {SparseMatrix}  a         The Matrix A
 * @param {Array}   pinv            The row permutation vector
 * @param {Array}   q               The column permutation vector
 * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
 *
 * @return {Matrix}                 C = P * A * Q, null on error
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csPermute", ()=>csPermute
);
function csPermute(a, pinv, q, values) {
    // a arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // rows & columns
    var m = asize[0];
    var n = asize[1]; // c arrays
    var cvalues = values && a._values ? [] : null;
    var cindex = []; // (aptr[n])
    var cptr = []; // (n + 1)
    // initialize vars
    var nz = 0; // loop columns
    for(var k = 0; k < n; k++){
        // column k of C is column q[k] of A
        cptr[k] = nz; // apply column permutation
        var j = q ? q[k] : k; // loop values in column j of A
        for(var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++){
            // row i of A is row pinv[i] of C
            var r = pinv ? pinv[aindex[t]] : aindex[t]; // index
            cindex[nz] = r; // check we need to populate values
            if (cvalues) cvalues[nz] = avalues[t];
             // increment number of nonzero elements
            nz++;
        }
    } // finalize the last column of C
    cptr[n] = nz; // return C matrix
    return a.createSparseMatrix({
        values: cvalues,
        index: cindex,
        ptr: cptr,
        size: [
            m,
            n
        ],
        datatype: adt
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3yspz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Post order a tree of forest
 *
 * @param {Array}   parent          The tree or forest
 * @param {Number}  n               Number of columns
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csPost", ()=>csPost
);
var _csTdfsJs = require("./csTdfs.js");
function csPost(parent, n) {
    // check inputs
    if (!parent) return null;
     // vars
    var k = 0;
    var j; // allocate result
    var post = []; // (n)
    // workspace, head: first n entries, next: next n entries, stack: last n entries
    var w = []; // (3 * n)
    var head = 0;
    var next = n;
    var stack = 2 * n; // initialize workspace
    for(j = 0; j < n; j++)// empty linked lists
    w[head + j] = -1;
     // traverse nodes in reverse order
    for(j = n - 1; j >= 0; j--){
        // check j is a root
        if (parent[j] === -1) continue;
         // add j to list of its parent
        w[next + j] = w[head + parent[j]];
        w[head + parent[j]] = j;
    } // loop nodes
    for(j = 0; j < n; j++){
        // skip j if it is not a root
        if (parent[j] !== -1) continue;
         // depth-first search
        k = _csTdfsJs.csTdfs(j, k, w, head, next, post, stack);
    }
    return post;
}

},{"./csTdfs.js":"hH3oT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hH3oT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Depth-first search and postorder of a tree rooted at node j
 *
 * @param {Number}  j               The tree node
 * @param {Number}  k
 * @param {Array}   w               The workspace array
 * @param {Number}  head            The index offset within the workspace for the head array
 * @param {Number}  next            The index offset within the workspace for the next array
 * @param {Array}   post            The post ordering array
 * @param {Number}  stack           The index offset within the workspace for the stack array
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csTdfs", ()=>csTdfs
);
function csTdfs(j, k, w, head, next, post, stack) {
    // variables
    var top = 0; // place j on the stack
    w[stack] = j; // while (stack is not empty)
    while(top >= 0){
        // p = top of stack
        var p = w[stack + top]; // i = youngest child of p
        var i = w[head + p];
        if (i === -1) {
            // p has no unordered children left
            top--; // node p is the kth postordered node
            post[k++] = p;
        } else {
            // remove i from children of p
            w[head + p] = w[next + i]; // increment top
            ++top; // start dfs on child node i
            w[stack + top] = i;
        }
    }
    return k;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9hb6F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Computes the elimination tree of Matrix A (using triu(A)) or the
 * elimination tree of A'A without forming A'A.
 *
 * @param {Matrix}  a               The A Matrix
 * @param {boolean} ata             A value of true the function computes the etree of A'A
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csEtree", ()=>csEtree
);
function csEtree(a, ata) {
    // check inputs
    if (!a) return null;
     // a arrays
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size; // rows & columns
    var m = asize[0];
    var n = asize[1]; // allocate result
    var parent = []; // (n)
    // allocate workspace
    var w = []; // (n + (ata ? m : 0))
    var ancestor = 0; // first n entries in w
    var prev = n; // last m entries (ata = true)
    var i, inext; // check we are calculating A'A
    if (ata) // initialize workspace
    for(i = 0; i < m; i++)w[prev + i] = -1;
     // loop columns
    for(var k = 0; k < n; k++){
        // node k has no parent yet
        parent[k] = -1; // nor does k have an ancestor
        w[ancestor + k] = -1; // values in column k
        for(var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++){
            // row
            var r = aindex[p]; // node
            i = ata ? w[prev + r] : r; // traverse from i to k
            for(; i !== -1 && i < k; i = inext){
                // inext = ancestor of i
                inext = w[ancestor + i]; // path compression
                w[ancestor + i] = k; // check no anc., parent is k
                if (inext === -1) parent[i] = k;
            }
            if (ata) w[prev + r] = k;
        }
    }
    return parent;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iAfRp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCsAmd", ()=>createCsAmd
);
var _factoryJs = require("../../../utils/factory.js");
var _csFkeepJs = require("./csFkeep.js");
var _csFlipJs = require("./csFlip.js");
var _csTdfsJs = require("./csTdfs.js");
var name = 'csAmd';
var dependencies = [
    'add',
    'multiply',
    'transpose'
];
var createCsAmd = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { add , multiply , transpose  } = _ref;
    /**
   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
   *
   * Order: 0
   *   A natural ordering P=null matrix is returned.
   *
   * Order: 1
   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
   *   P = M + M'
   *
   * Order: 2
   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
   *   P = M' * M
   *
   * Order: 3
   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
   *   P = M' * M
   */ function _createTargetMatrix(order, a, m, n, dense) {
        // compute A'
        var at = transpose(a); // check order = 1, matrix must be square
        if (order === 1 && n === m) {
            // C = A + A'
            return add(a, at);
        } // check order = 2, drop dense columns from M'
        if (order === 2) {
            // transpose arrays
            var tindex = at._index;
            var tptr = at._ptr; // new column index
            var p2 = 0; // loop A' columns (rows)
            for(var j = 0; j < m; j++){
                // column j of AT starts here
                var p = tptr[j]; // new column j starts here
                tptr[j] = p2; // skip dense col j
                if (tptr[j + 1] - p > dense) {
                    continue;
                } // map rows in column j of A
                for(var p1 = tptr[j + 1]; p < p1; p++){
                    tindex[p2++] = tindex[p];
                }
            } // finalize AT
            tptr[m] = p2; // recreate A from new transpose matrix
            a = transpose(at); // use A' * A
            return multiply(at, a);
        } // use A' * A, square or rectangular matrix
        return multiply(at, a);
    }
    /**
   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
   *
   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
   */ function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
        // Initialize quotient graph
        for(var k = 0; k < n; k++){
            W[len + k] = cptr[k + 1] - cptr[k];
        }
        W[len + n] = 0; // initialize workspace
        for(var i = 0; i <= n; i++){
            // degree list i is empty
            W[head + i] = -1;
            last[i] = -1;
            W[next + i] = -1; // hash list i is empty
            W[hhead + i] = -1; // node i is just one node
            W[nv + i] = 1; // node i is alive
            W[w + i] = 1; // Ek of node i is empty
            W[elen + i] = 0; // degree of node i
            W[degree + i] = W[len + i];
        } // clear w
        var mark = _wclear(0, 0, W, w, n); // n is a dead element
        W[elen + n] = -2; // n is a root of assembly tree
        cptr[n] = -1; // n is a dead element
        W[w + n] = 0; // return mark
        return mark;
    }
    /**
   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
   * output permutation p.
   */ function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
        // result
        var nel = 0; // loop columns
        for(var i = 0; i < n; i++){
            // degree @ i
            var d = W[degree + i]; // check node i is empty
            if (d === 0) {
                // element i is dead
                W[elen + i] = -2;
                nel++; // i is a root of assembly tree
                cptr[i] = -1;
                W[w + i] = 0;
            } else if (d > dense) {
                // absorb i into element n
                W[nv + i] = 0; // node i is dead
                W[elen + i] = -1;
                nel++;
                cptr[i] = _csFlipJs.csFlip(n);
                W[nv + n]++;
            } else {
                var h = W[head + d];
                if (h !== -1) {
                    last[h] = i;
                } // put node i in degree list d
                W[next + i] = W[head + d];
                W[head + d] = i;
            }
        }
        return nel;
    }
    function _wclear(mark, lemax, W, w, n) {
        if (mark < 2 || mark + lemax < 0) {
            for(var k = 0; k < n; k++){
                if (W[w + k] !== 0) {
                    W[w + k] = 1;
                }
            }
            mark = 2;
        } // at this point, W [0..n-1] < mark holds
        return mark;
    }
    function _diag(i, j) {
        return i !== j;
    }
    /**
   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
   * than A. It is a gready method that selects the sparsest pivot row and column during the course
   * of a right looking sparse Cholesky factorization.
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   *
   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
   * @param {Matrix} m        Sparse Matrix
   */ return function csAmd(order, a) {
        // check input parameters
        if (!a || order <= 0 || order > 3) return null;
         // a matrix arrays
        var asize = a._size; // rows and columns
        var m = asize[0];
        var n = asize[1]; // initialize vars
        var lemax = 0; // dense threshold
        var dense = Math.max(16, 10 * Math.sqrt(n));
        dense = Math.min(n - 2, dense); // create target matrix C
        var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries
        _csFkeepJs.csFkeep(cm, _diag, null); // C matrix arrays
        var cindex = cm._index;
        var cptr = cm._ptr; // number of nonzero elements in C
        var cnz = cptr[n]; // allocate result (n+1)
        var P = []; // create workspace (8 * (n + 1))
        var W = [];
        var len = 0; // first n + 1 entries
        var nv = n + 1; // next n + 1 entries
        var next = 2 * (n + 1); // next n + 1 entries
        var head = 3 * (n + 1); // next n + 1 entries
        var elen = 4 * (n + 1); // next n + 1 entries
        var degree = 5 * (n + 1); // next n + 1 entries
        var w = 6 * (n + 1); // next n + 1 entries
        var hhead = 7 * (n + 1); // last n + 1 entries
        // use P as workspace for last
        var last = P; // initialize quotient graph
        var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists
        var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node
        var mindeg = 0; // vars
        var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do
        while(nel < n){
            // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
            // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
            // many nodes have been eliminated.
            for(k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++);
            if (W[next + k] !== -1) last[W[next + k]] = -1;
             // remove k from degree list
            W[head + mindeg] = W[next + k]; // elenk = |Ek|
            var elenk = W[elen + k]; // # of nodes k represents
            var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated
            nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
            // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
            // degree lists. All elements e in Ek are absorved into element k.
            var dk = 0; // flag k as in Lk
            W[nv + k] = -nvk;
            var p = cptr[k]; // do in place if W[elen + k] === 0
            var pk1 = elenk === 0 ? p : cnz;
            var pk2 = pk1;
            for(k1 = 1; k1 <= elenk + 1; k1++){
                if (k1 > elenk) {
                    // search the nodes in k
                    e = k; // list of nodes starts at cindex[pj]
                    pj = p; // length of list of nodes in k
                    ln = W[len + k] - elenk;
                } else {
                    // search the nodes in e
                    e = cindex[p++];
                    pj = cptr[e]; // length of list of nodes in e
                    ln = W[len + e];
                }
                for(k2 = 1; k2 <= ln; k2++){
                    i = cindex[pj++]; // check  node i dead, or seen
                    if ((nvi = W[nv + i]) <= 0) continue;
                     // W[degree + Lk] += size of node i
                    dk += nvi; // negate W[nv + i] to denote i in Lk
                    W[nv + i] = -nvi; // place i in Lk
                    cindex[pk2++] = i;
                    if (W[next + i] !== -1) last[W[next + i]] = last[i];
                     // check we need to remove i from degree list
                    if (last[i] !== -1) W[next + last[i]] = W[next + i];
                    else W[head + W[degree + i]] = W[next + i];
                }
                if (e !== k) {
                    // absorb e into k
                    cptr[e] = _csFlipJs.csFlip(k); // e is now a dead element
                    W[w + e] = 0;
                }
            } // cindex[cnz...nzmax] is free
            if (elenk !== 0) cnz = pk2;
             // external degree of k - |Lk\i|
            W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]
            cptr[k] = pk1;
            W[len + k] = pk2 - pk1; // k is now an element
            W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
            // scan, no entry in the w array is greater than or equal to mark.
            // clear w if necessary
            mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\Lk|
            for(pk = pk1; pk < pk2; pk++){
                i = cindex[pk]; // check if W[elen + i] empty, skip it
                if ((eln = W[elen + i]) <= 0) continue;
                 // W[nv + i] was negated
                nvi = -W[nv + i];
                var wnvi = mark - nvi; // scan Ei
                for(p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++){
                    e = cindex[p];
                    if (W[w + e] >= mark) // decrement |Le\Lk|
                    W[w + e] -= nvi;
                    else if (W[w + e] !== 0) // ensure e is a live element, 1st time e seen in scan 1
                    W[w + e] = W[degree + e] + wnvi;
                }
            } // degree update
            // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
            // function h(i) for all nodes in Lk.
            // scan2: degree update
            for(pk = pk1; pk < pk2; pk++){
                // consider node i in Lk
                i = cindex[pk];
                p1 = cptr[i];
                p2 = p1 + W[elen + i] - 1;
                pn = p1; // scan Ei
                for(h = 0, d = 0, p = p1; p <= p2; p++){
                    e = cindex[p]; // check e is an unabsorbed element
                    if (W[w + e] !== 0) {
                        // dext = |Le\Lk|
                        var dext = W[w + e] - mark;
                        if (dext > 0) {
                            // sum up the set differences
                            d += dext; // keep e in Ei
                            cindex[pn++] = e; // compute the hash of node i
                            h += e;
                        } else {
                            // aggressive absorb. e->k
                            cptr[e] = _csFlipJs.csFlip(k); // e is a dead element
                            W[w + e] = 0;
                        }
                    }
                } // W[elen + i] = |Ei|
                W[elen + i] = pn - p1 + 1;
                var p3 = pn;
                var p4 = p1 + W[len + i]; // prune edges in Ai
                for(p = p2 + 1; p < p4; p++){
                    j = cindex[p]; // check node j dead or in Lk
                    var nvj = W[nv + j];
                    if (nvj <= 0) continue;
                     // degree(i) += |j|
                    d += nvj; // place j in node list of i
                    cindex[pn++] = j; // compute hash for node i
                    h += j;
                } // check for mass elimination
                if (d === 0) {
                    // absorb i into k
                    cptr[i] = _csFlipJs.csFlip(k);
                    nvi = -W[nv + i]; // |Lk| -= |i|
                    dk -= nvi; // |k| += W[nv + i]
                    nvk += nvi;
                    nel += nvi;
                    W[nv + i] = 0; // node i is dead
                    W[elen + i] = -1;
                } else {
                    // update degree(i)
                    W[degree + i] = Math.min(W[degree + i], d); // move first node to end
                    cindex[pn] = cindex[p3]; // move 1st el. to end of Ei
                    cindex[p3] = cindex[p1]; // add k as 1st element in of Ei
                    cindex[p1] = k; // new len of adj. list of node i
                    W[len + i] = pn - p1 + 1; // finalize hash of i
                    h = (h < 0 ? -h : h) % n; // place i in hash bucket
                    W[next + i] = W[hhead + h];
                    W[hhead + h] = i; // save hash of i in last[i]
                    last[i] = h;
                }
            } // finalize |Lk|
            W[degree + k] = dk;
            lemax = Math.max(lemax, dk); // clear w
            mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
            // If two nodes have identical adjacency lists, their hash functions wil be identical.
            for(pk = pk1; pk < pk2; pk++){
                i = cindex[pk]; // check i is dead, skip it
                if (W[nv + i] >= 0) continue;
                 // scan hash bucket of node i
                h = last[i];
                i = W[hhead + h]; // hash bucket will be empty
                W[hhead + h] = -1;
                for(; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++){
                    ln = W[len + i];
                    eln = W[elen + i];
                    for(p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++)W[w + cindex[p]] = mark;
                    var jlast = i; // compare i with all j
                    for(j = W[next + i]; j !== -1;){
                        var ok = W[len + j] === ln && W[elen + j] === eln;
                        for(p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++)// compare i and j
                        if (W[w + cindex[p]] !== mark) ok = 0;
                         // check i and j are identical
                        if (ok) {
                            // absorb j into i
                            cptr[j] = _csFlipJs.csFlip(i);
                            W[nv + i] += W[nv + j];
                            W[nv + j] = 0; // node j is dead
                            W[elen + j] = -1; // delete j from hash bucket
                            j = W[next + j];
                            W[next + jlast] = j;
                        } else {
                            // j and i are different
                            jlast = j;
                            j = W[next + j];
                        }
                    }
                }
            } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
            // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.
            for(p = pk1, pk = pk1; pk < pk2; pk++){
                i = cindex[pk]; // check  i is dead, skip it
                if ((nvi = -W[nv + i]) <= 0) continue;
                 // restore W[nv + i]
                W[nv + i] = nvi; // compute external degree(i)
                d = W[degree + i] + dk - nvi;
                d = Math.min(d, n - nel - nvi);
                if (W[head + d] !== -1) last[W[head + d]] = i;
                 // put i back in degree list
                W[next + i] = W[head + d];
                last[i] = -1;
                W[head + d] = i; // find new minimum degree
                mindeg = Math.min(mindeg, d);
                W[degree + i] = d; // place i in Lk
                cindex[p++] = i;
            } // # nodes absorbed into k
            W[nv + k] = nvk; // length of adj list of element k
            if ((W[len + k] = p - pk1) === 0) {
                // k is a root of the tree
                cptr[k] = -1; // k is now a dead element
                W[w + k] = 0;
            }
            if (elenk !== 0) // free unused space in Lk
            cnz = p;
        } // Postordering. The elimination is complete, but no permutation has been computed. All that is left
        // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
        // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
        // is computed. The tree is restored by unflipping all of ptr.
        // fix assembly tree
        for(i = 0; i < n; i++)cptr[i] = _csFlipJs.csFlip(cptr[i]);
        for(j = 0; j <= n; j++)W[head + j] = -1;
         // place unordered nodes in lists
        for(j = n; j >= 0; j--){
            // skip if j is an element
            if (W[nv + j] > 0) continue;
             // place j in list of its parent
            W[next + j] = W[head + cptr[j]];
            W[head + cptr[j]] = j;
        } // place elements in lists
        for(e = n; e >= 0; e--){
            // skip unless e is an element
            if (W[nv + e] <= 0) continue;
            if (cptr[e] !== -1) {
                // place e in list of its parent
                W[next + e] = W[head + cptr[e]];
                W[head + cptr[e]] = e;
            }
        } // postorder the assembly tree
        for(k = 0, i = 0; i <= n; i++)if (cptr[i] === -1) k = _csTdfsJs.csTdfs(i, k, W, head, next, P, w);
         // remove last item in array
        P.splice(P.length - 1, 1); // return P
        return P;
    };
});

},{"../../../utils/factory.js":"26foW","./csFkeep.js":"bMbJh","./csFlip.js":"7l1Ht","./csTdfs.js":"hH3oT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bMbJh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
 *
 * @param {Matrix}   a              The sparse matrix
 * @param {function} callback       The callback function, function will be invoked with the following args:
 *                                    - The entry row
 *                                    - The entry column
 *                                    - The entry value
 *                                    - The state parameter
 * @param {any}      other          The state
 *
 * @return                          The number of nonzero elements in the matrix
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csFkeep", ()=>csFkeep
);
function csFkeep(a, callback, other) {
    // a arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size; // columns
    var n = asize[1]; // nonzero items
    var nz = 0; // loop columns
    for(var j = 0; j < n; j++){
        // get current location of col j
        var p = aptr[j]; // record new location of col j
        aptr[j] = nz;
        for(; p < aptr[j + 1]; p++)// check we need to keep this item
        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
            // keep A(i,j)
            aindex[nz] = aindex[p]; // check we need to process values (pattern only)
            if (avalues) avalues[nz] = avalues[p];
             // increment nonzero items
            nz++;
        }
    } // finalize A
    aptr[n] = nz; // trim arrays
    aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)
    if (avalues) avalues.splice(nz, avalues.length - nz);
     // return number of nonzero items
    return nz;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7l1Ht":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This function "flips" its input about the integer -1.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csFlip", ()=>csFlip
);
function csFlip(i) {
    // flip the value
    return -i - 2;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9qD3A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCsCounts", ()=>createCsCounts
);
var _factoryJs = require("../../../utils/factory.js");
var _csLeafJs = require("./csLeaf.js");
var name = 'csCounts';
var dependencies = [
    'transpose'
];
var createCsCounts = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { transpose  } = _ref;
    /**
   * Computes the column counts using the upper triangular part of A.
   * It transposes A internally, none of the input parameters are modified.
   *
   * @param {Matrix} a           The sparse matrix A
   *
   * @param {Matrix} ata         Count the columns of A'A instead
   *
   * @return                     An array of size n of the column counts or null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */ return function(a, parent, post, ata) {
        // check inputs
        if (!a || !parent || !post) return null;
         // a matrix arrays
        var asize = a._size; // rows and columns
        var m = asize[0];
        var n = asize[1]; // variables
        var i, j, k, J, p, p0, p1; // workspace size
        var s = 4 * n + (ata ? n + m + 1 : 0); // allocate workspace
        var w = []; // (s)
        var ancestor = 0; // first n entries
        var maxfirst = n; // next n entries
        var prevleaf = 2 * n; // next n entries
        var first = 3 * n; // next n entries
        var head = 4 * n; // next n + 1 entries (used when ata is true)
        var next = 5 * n + 1; // last entries in workspace
        // clear workspace w[0..s-1]
        for(k = 0; k < s; k++)w[k] = -1;
         // allocate result
        var colcount = []; // (n)
        // AT = A'
        var at = transpose(a); // at arrays
        var tindex = at._index;
        var tptr = at._ptr; // find w[first + j]
        for(k = 0; k < n; k++){
            j = post[k]; // colcount[j]=1 if j is a leaf
            colcount[j] = w[first + j] === -1 ? 1 : 0;
            for(; j !== -1 && w[first + j] === -1; j = parent[j])w[first + j] = k;
        } // initialize ata if needed
        if (ata) {
            // invert post
            for(k = 0; k < n; k++)w[post[k]] = k;
             // loop rows (columns in AT)
            for(i = 0; i < m; i++){
                // values in column i of AT
                for(k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++)k = Math.min(k, w[tindex[p]]);
                 // place row i in linked list k
                w[next + i] = w[head + k];
                w[head + k] = i;
            }
        } // each node in its own set
        for(i = 0; i < n; i++)w[ancestor + i] = i;
        for(k = 0; k < n; k++){
            // j is the kth node in postordered etree
            j = post[k]; // check j is not a root
            if (parent[j] !== -1) colcount[parent[j]]--;
             // J=j for LL'=A case
            for(J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1)for(p = tptr[J]; p < tptr[J + 1]; p++){
                i = tindex[p];
                var r = _csLeafJs.csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor); // check A(i,j) is in skeleton
                if (r.jleaf >= 1) colcount[j]++;
                 // check account for overlap in q
                if (r.jleaf === 2) colcount[r.q]--;
            }
            if (parent[j] !== -1) w[ancestor + j] = parent[j];
        } // sum up colcount's of each child
        for(j = 0; j < n; j++)if (parent[j] !== -1) colcount[parent[j]] += colcount[j];
        return colcount;
    };
});

},{"../../../utils/factory.js":"26foW","./csLeaf.js":"2JRpS","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2JRpS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This function determines if j is a leaf of the ith row subtree.
 * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
 *
 * @param {Number}  i               The ith row subtree
 * @param {Number}  j               The node to test
 * @param {Array}   w               The workspace array
 * @param {Number}  first           The index offset within the workspace for the first array
 * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
 * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
 * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
 *
 * @return {Object}
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csLeaf", ()=>csLeaf
);
function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
    var s, sparent; // our result
    var jleaf = 0;
    var q; // check j is a leaf
    if (i <= j || w[first + j] <= w[maxfirst + i]) return -1;
     // update max first[j] seen so far
    w[maxfirst + i] = w[first + j]; // jprev = previous leaf of ith subtree
    var jprev = w[prevleaf + i];
    w[prevleaf + i] = j; // check j is first or subsequent leaf
    if (jprev === -1) {
        // 1st leaf, q = root of ith subtree
        jleaf = 1;
        q = i;
    } else {
        // update jleaf
        jleaf = 2; // q = least common ancester (jprev,j)
        for(q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]);
        for(s = jprev; s !== q; s = sparent){
            // path compression
            sparent = w[ancestor + s];
            w[ancestor + s] = q;
        }
    }
    return {
        jleaf: jleaf,
        q: q
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9dlJT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCsLu", ()=>createCsLu
);
var _factoryJs = require("../../../utils/factory.js");
var _csSpsolveJs = require("./csSpsolve.js");
var name = 'csLu';
var dependencies = [
    'abs',
    'divideScalar',
    'multiply',
    'subtract',
    'larger',
    'largerEq',
    'SparseMatrix'
];
var createCsLu = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { abs , divideScalar , multiply , subtract , larger , largerEq , SparseMatrix  } = _ref;
    var csSpsolve = _csSpsolveJs.createCsSpsolve({
        divideScalar,
        multiply,
        subtract
    });
    /**
   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
   * L * U = A(p, q), where p is the inverse of pinv.
   *
   * @param {Matrix}  m               The A Matrix to factorize
   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
   *                                  column ordering q
   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Number}                 The numeric LU factorization of A or null
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */ return function csLu(m, s, tol) {
        // validate input
        if (!m) return null;
         // m arrays
        var size = m._size; // columns
        var n = size[1]; // symbolic analysis result
        var q;
        var lnz = 100;
        var unz = 100; // update symbolic analysis parameters
        if (s) {
            q = s.q;
            lnz = s.lnz || lnz;
            unz = s.unz || unz;
        } // L arrays
        var lvalues = []; // (lnz)
        var lindex = []; // (lnz)
        var lptr = []; // (n + 1)
        // L
        var L = new SparseMatrix({
            values: lvalues,
            index: lindex,
            ptr: lptr,
            size: [
                n,
                n
            ]
        }); // U arrays
        var uvalues = []; // (unz)
        var uindex = []; // (unz)
        var uptr = []; // (n + 1)
        // U
        var U = new SparseMatrix({
            values: uvalues,
            index: uindex,
            ptr: uptr,
            size: [
                n,
                n
            ]
        }); // inverse of permutation vector
        var pinv = []; // (n)
        // vars
        var i, p; // allocate arrays
        var x = []; // (n)
        var xi = []; // (2 * n)
        // initialize variables
        for(i = 0; i < n; i++){
            // clear workspace
            x[i] = 0; // no rows pivotal yet
            pinv[i] = -1; // no cols of L yet
            lptr[i + 1] = 0;
        } // reset number of nonzero elements in L and U
        lnz = 0;
        unz = 0; // compute L(:,k) and U(:,k)
        for(var k = 0; k < n; k++){
            // update ptr
            lptr[k] = lnz;
            uptr[k] = unz; // apply column permutations if needed
            var col = q ? q[k] : k; // solve triangular system, x = L\A(:,col)
            var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot
            var ipiv = -1;
            var a = -1; // loop xi[] from top -> n
            for(p = top; p < n; p++){
                // x[i] is nonzero
                i = xi[p]; // check row i is not yet pivotal
                if (pinv[i] < 0) {
                    // absolute value of x[i]
                    var xabs = abs(x[i]); // check absoulte value is greater than pivot value
                    if (larger(xabs, a)) {
                        // largest pivot candidate so far
                        a = xabs;
                        ipiv = i;
                    }
                } else {
                    // x(i) is the entry U(pinv[i],k)
                    uindex[unz] = pinv[i];
                    uvalues[unz++] = x[i];
                }
            } // validate we found a valid pivot
            if (ipiv === -1 || a <= 0) return null;
             // update actual pivot column, give preference to diagonal value
            if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) ipiv = col;
             // the chosen pivot
            var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)
            uindex[unz] = k;
            uvalues[unz++] = pivot; // ipiv is the kth pivot row
            pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1
            lindex[lnz] = ipiv;
            lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot
            for(p = top; p < n; p++){
                // row
                i = xi[p]; // check x(i) is an entry in L(:,k)
                if (pinv[i] < 0) {
                    // save unpermuted row in L
                    lindex[lnz] = i; // scale pivot column
                    lvalues[lnz++] = divideScalar(x[i], pivot);
                } // x[0..n-1] = 0 for next k
                x[i] = 0;
            }
        } // update ptr
        lptr[n] = lnz;
        uptr[n] = unz; // fix row indices of L for final pinv
        for(p = 0; p < lnz; p++)lindex[p] = pinv[lindex[p]];
         // trim arrays
        lvalues.splice(lnz, lvalues.length - lnz);
        lindex.splice(lnz, lindex.length - lnz);
        uvalues.splice(unz, uvalues.length - unz);
        uindex.splice(unz, uindex.length - unz); // return LU factor
        return {
            L: L,
            U: U,
            pinv: pinv
        };
    };
});

},{"../../../utils/factory.js":"26foW","./csSpsolve.js":"3WuBy","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3WuBy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCsSpsolve", ()=>createCsSpsolve
);
var _csReachJs = require("./csReach.js");
var _factoryJs = require("../../../utils/factory.js");
var name = 'csSpsolve';
var dependencies = [
    'divideScalar',
    'multiply',
    'subtract'
];
var createCsSpsolve = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { divideScalar , multiply , subtract  } = _ref;
    /**
   * The function csSpsolve() computes the solution to G * x = bk, where bk is the
   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
   * is upper triangular with the diagonal entry as the last entry in each column.
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   x               The soluton to the linear system G * x = b
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   * @param {boolean} lo              The lower (true) upper triangular (false) flag
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */ return function csSpsolve(g, b, k, xi, x, pinv, lo) {
        // g arrays
        var gvalues = g._values;
        var gindex = g._index;
        var gptr = g._ptr;
        var gsize = g._size; // columns
        var n = gsize[1]; // b arrays
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr; // vars
        var p, p0, p1, q; // xi[top..n-1] = csReach(B(:,k))
        var top = _csReachJs.csReach(g, b, k, xi, pinv); // clear x
        for(p = top; p < n; p++)x[xi[p]] = 0;
         // scatter b
        for(p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++)x[bindex[p]] = bvalues[p];
         // loop columns
        for(var px = top; px < n; px++){
            // x array index for px
            var j = xi[px]; // apply permutation vector (U x = b), j maps to column J of G
            var J = pinv ? pinv[j] : j; // check column J is empty
            if (J < 0) continue;
             // column value indeces in G, p0 <= p < p1
            p0 = gptr[J];
            p1 = gptr[J + 1]; // x(j) /= G(j,j)
            x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]); // first entry L(j,j)
            p = lo ? p0 + 1 : p0;
            q = lo ? p1 : p1 - 1; // loop
            for(; p < q; p++){
                // row
                var i = gindex[p]; // x(i) -= G(i,j) * x(j)
                x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
            }
        } // return top of stack
        return top;
    };
});

},{"./csReach.js":"5p8IR","../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5p8IR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
 * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
 * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
 *
 * @param {Matrix}  g               The G matrix
 * @param {Matrix}  b               The B matrix
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector
 *
 * @return {Number}                 The index for the nonzero pattern
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csReach", ()=>csReach
);
var _csMarkedJs = require("./csMarked.js");
var _csMarkJs = require("./csMark.js");
var _csDfsJs = require("./csDfs.js");
function csReach(g, b, k, xi, pinv) {
    // g arrays
    var gptr = g._ptr;
    var gsize = g._size; // b arrays
    var bindex = b._index;
    var bptr = b._ptr; // columns
    var n = gsize[1]; // vars
    var p, p0, p1; // initialize top
    var top = n; // loop column indeces in B
    for(p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++){
        // node i
        var i = bindex[p]; // check node i is marked
        if (!_csMarkedJs.csMarked(gptr, i)) // start a dfs at unmarked node i
        top = _csDfsJs.csDfs(i, g, top, xi, pinv);
    } // loop columns from top -> n - 1
    for(p = top; p < n; p++)// restore G
    _csMarkJs.csMark(gptr, xi[p]);
    return top;
}

},{"./csMarked.js":"3MJ7R","./csMark.js":"fSeIh","./csDfs.js":"6qtus","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3MJ7R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Checks if the node at w[j] is marked
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csMarked", ()=>csMarked
);
function csMarked(w, j) {
    // check node is marked
    return w[j] < 0;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fSeIh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Marks the node at w[j]
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csMark", ()=>csMark
);
var _csFlipJs = require("./csFlip.js");
function csMark(w, j) {
    // mark w[j]
    w[j] = _csFlipJs.csFlip(w[j]);
}

},{"./csFlip.js":"7l1Ht","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6qtus":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
 * at nodes in B (see csReach()).
 *
 * @param {Number}  j               The starting node for the DFS algorithm
 * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
 * @param {Number}  top             Start index in stack xi[top..n-1]
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
 *
 * @return {Number}                 New value of top
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csDfs", ()=>csDfs
);
var _csMarkedJs = require("./csMarked.js");
var _csMarkJs = require("./csMark.js");
var _csUnflipJs = require("./csUnflip.js");
function csDfs(j, g, top, xi, pinv) {
    // g arrays
    var index = g._index;
    var ptr = g._ptr;
    var size = g._size; // columns
    var n = size[1]; // vars
    var i, p, p2; // initialize head
    var head = 0; // initialize the recursion stack
    xi[0] = j; // loop
    while(head >= 0){
        // get j from the top of the recursion stack
        j = xi[head]; // apply permutation vector
        var jnew = pinv ? pinv[j] : j; // check node j is marked
        if (!_csMarkedJs.csMarked(ptr, j)) {
            // mark node j as visited
            _csMarkJs.csMark(ptr, j); // update stack (last n entries in xi)
            xi[n + head] = jnew < 0 ? 0 : _csUnflipJs.csUnflip(ptr[jnew]);
        } // node j done if no unvisited neighbors
        var done = 1; // examine all neighbors of j, stack (last n entries in xi)
        for(p = xi[n + head], p2 = jnew < 0 ? 0 : _csUnflipJs.csUnflip(ptr[jnew + 1]); p < p2; p++){
            // consider neighbor node i
            i = index[p]; // check we have visited node i, skip it
            if (_csMarkedJs.csMarked(ptr, i)) continue;
             // pause depth-first search of node j, update stack (last n entries in xi)
            xi[n + head] = p; // start dfs at node i
            xi[++head] = i; // node j is not done
            done = 0; // break, to start dfs(i)
            break;
        } // check depth-first search at node j is done
        if (done) {
            // remove j from the recursion stack
            head--; // and place in the output stack
            xi[--top] = j;
        }
    }
    return top;
}

},{"./csMarked.js":"3MJ7R","./csMark.js":"fSeIh","./csUnflip.js":"dSNes","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dSNes":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Flips the value if it is negative of returns the same value otherwise.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */ parcelHelpers.export(exports, "csUnflip", ()=>csUnflip
);
var _csFlipJs = require("./csFlip.js");
function csUnflip(i) {
    // flip the value if it is negative
    return i < 0 ? _csFlipJs.csFlip(i) : i;
}

},{"./csFlip.js":"7l1Ht","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Omew":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLusolve", ()=>createLusolve
);
var _isJs = require("../../../utils/is.js");
var _factoryJs = require("../../../utils/factory.js");
var _solveValidationJs = require("./utils/solveValidation.js");
var _csIpvecJs = require("../sparse/csIpvec.js");
var name = 'lusolve';
var dependencies = [
    'typed',
    'matrix',
    'lup',
    'slu',
    'usolve',
    'lsolve',
    'DenseMatrix'
];
var createLusolve = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , lup , slu , usolve , lsolve , DenseMatrix  } = _ref;
    var solveValidation = _solveValidationJs.createSolveValidation({
        DenseMatrix
    });
    function _toMatrix(a) {
        if (_isJs.isMatrix(a)) {
            return a;
        }
        if (_isJs.isArray(a)) {
            return matrix(a);
        }
        throw new TypeError('Invalid Matrix LU decomposition');
    }
    function _lusolve(l, u, p, q, b) {
        // verify decomposition
        l = _toMatrix(l);
        u = _toMatrix(u); // apply row permutations if needed (b is a DenseMatrix)
        if (p) {
            b = solveValidation(l, b, true);
            b._data = _csIpvecJs.csIpvec(p, b._data);
        } // use forward substitution to resolve L * y = b
        var y = lsolve(l, b); // use backward substitution to resolve U * x = y
        var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)
        if (q) {
            x._data = _csIpvecJs.csIpvec(q, x._data);
        }
        return x;
    }
    /**
   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
   *
   * Syntax:
   *
   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
   *
   * Examples:
   *
   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
   *
   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
   *
   *    const f = math.lup(m)
   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = math.lusolve(a, b)  // [[2], [5]]
   *
   * See also:
   *
   *    lup, slu, lsolve, usolve
   *
   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
   * @param {Matrix | Array} b               Column Vector
   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
   *
   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
   */ return typed(name, {
        'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
            a = matrix(a);
            var d = lup(a);
            var x = _lusolve(d.L, d.U, d.p, null, b);
            return x.valueOf();
        },
        'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
            var d = lup(a);
            return _lusolve(d.L, d.U, d.p, null, b);
        },
        'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
            var d = lup(a);
            return _lusolve(d.L, d.U, d.p, null, b);
        },
        'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
            var d = slu(a, order, threshold);
            return _lusolve(d.L, d.U, d.p, d.q, b);
        },
        'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
            return _lusolve(d.L, d.U, d.p, d.q, b);
        }
    });
});

},{"../../../utils/is.js":"iwdlF","../../../utils/factory.js":"26foW","./utils/solveValidation.js":"69cYB","../sparse/csIpvec.js":"1TPW9","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1TPW9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
 *
 * @param {Array} p           The permutation vector of length n. null value denotes identity
 * @param {Array} b           The input vector
 *
 * @return {Array}            The output vector x = P'b
 */ parcelHelpers.export(exports, "csIpvec", ()=>csIpvec
);
function csIpvec(p, b) {
    // vars
    var k;
    var n = b.length;
    var x = []; // check permutation vector was provided, p = null denotes identity
    if (p) // loop vector
    for(k = 0; k < n; k++)// apply permutation
    x[p[k]] = b[k];
    else // loop vector
    for(k = 0; k < n; k++)// x[i] = b[i]
    x[k] = b[k];
    return x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8XMFI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHelpClass", ()=>createHelpClass
);
var _isJs = require("../utils/is.js");
var _objectJs = require("../utils/object.js");
var _stringJs = require("../utils/string.js");
var _factoryJs = require("../utils/factory.js");
var name = 'Help';
var dependencies = [
    'parse'
];
var createHelpClass = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { parse  } = _ref;
    /**
   * Documentation object
   * @param {Object} doc  Object containing properties:
   *                      {string} name
   *                      {string} category
   *                      {string} description
   *                      {string[]} syntax
   *                      {string[]} examples
   *                      {string[]} seealso
   * @constructor
   */ function Help(doc) {
        if (!(this instanceof Help)) throw new SyntaxError('Constructor must be called with the new operator');
        if (!doc) throw new Error('Argument "doc" missing');
        this.doc = doc;
    }
    /**
   * Attach type information
   */ Help.prototype.type = 'Help';
    Help.prototype.isHelp = true;
    /**
   * Generate a string representation of the Help object
   * @return {string} Returns a string
   * @private
   */ Help.prototype.toString = function() {
        var doc = this.doc || {
        };
        var desc = '\n';
        if (doc.name) desc += 'Name: ' + doc.name + '\n\n';
        if (doc.category) desc += 'Category: ' + doc.category + '\n\n';
        if (doc.description) desc += 'Description:\n    ' + doc.description + '\n\n';
        if (doc.syntax) desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
        if (doc.examples) {
            desc += 'Examples:\n';
            var scope = {
            };
            for(var i = 0; i < doc.examples.length; i++){
                var expr = doc.examples[i];
                desc += '    ' + expr + '\n';
                var res = void 0;
                try {
                    // note: res can be undefined when `expr` is an empty string
                    res = parse(expr).compile().evaluate(scope);
                } catch (e) {
                    res = e;
                }
                if (res !== undefined && !_isJs.isHelp(res)) desc += '        ' + _stringJs.format(res, {
                    precision: 14
                }) + '\n';
            }
            desc += '\n';
        }
        if (doc.seealso && doc.seealso.length) desc += 'See also: ' + doc.seealso.join(', ') + '\n';
        return desc;
    };
    /**
   * Export the help object to JSON
   */ Help.prototype.toJSON = function() {
        var obj = _objectJs.clone(this.doc);
        obj.mathjs = 'Help';
        return obj;
    };
    /**
   * Instantiate a Help object from a JSON object
   * @param {Object} json
   * @returns {Help} Returns a new Help object
   */ Help.fromJSON = function(json) {
        var doc = {
        };
        Object.keys(json).filter((prop)=>prop !== 'mathjs'
        ).forEach((prop)=>{
            doc[prop] = json[prop];
        });
        return new Help(doc);
    };
    /**
   * Returns a string representation of the Help object
   */ Help.prototype.valueOf = Help.prototype.toString;
    return Help;
}, {
    isClass: true
});

},{"../utils/is.js":"iwdlF","../utils/object.js":"eRHhH","../utils/string.js":"0PPSB","../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5tJEq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createChainClass", ()=>createChainClass
);
var _isJs = require("../../utils/is.js");
var _stringJs = require("../../utils/string.js");
var _objectJs = require("../../utils/object.js");
var _factoryJs = require("../../utils/factory.js");
var name1 = 'Chain';
var dependencies = [
    '?on',
    'math'
];
var createChainClass = /* #__PURE__ */ _factoryJs.factory(name1, dependencies, (_ref)=>{
    var { on , math  } = _ref;
    /**
   * @constructor Chain
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing chain.done(), which will return
   * the final value.
   *
   * The Chain has a number of special functions:
   * - done()             Finalize the chained operation and return the
   *                      chain's value.
   * - valueOf()          The same as done()
   * - toString()         Returns a string representation of the chain's value.
   *
   * @param {*} [value]
   */ function Chain(value) {
        if (!(this instanceof Chain)) throw new SyntaxError('Constructor must be called with the new operator');
        if (_isJs.isChain(value)) this.value = value.value;
        else this.value = value;
    }
    /**
   * Attach type information
   */ Chain.prototype.type = 'Chain';
    Chain.prototype.isChain = true;
    /**
   * Close the chain. Returns the final value.
   * Does the same as method valueOf()
   * @returns {*} value
   */ Chain.prototype.done = function() {
        return this.value;
    };
    /**
   * Close the chain. Returns the final value.
   * Does the same as method done()
   * @returns {*} value
   */ Chain.prototype.valueOf = function() {
        return this.value;
    };
    /**
   * Get a string representation of the value in the chain
   * @returns {string}
   */ Chain.prototype.toString = function() {
        return _stringJs.format(this.value);
    };
    /**
   * Get a JSON representation of the chain
   * @returns {Object}
   */ Chain.prototype.toJSON = function() {
        return {
            mathjs: 'Chain',
            value: this.value
        };
    };
    /**
   * Instantiate a Chain from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "Chain", value: ...}`,
   *                       where mathjs is optional
   * @returns {Chain}
   */ Chain.fromJSON = function(json) {
        return new Chain(json.value);
    };
    /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {Function} fn      The function to be proxied
   *                           If fn is no function, it is silently ignored.
   * @private
   */ function createProxy(name, fn) {
        if (typeof fn === 'function') Chain.prototype[name] = chainify(fn);
    }
    /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {function} resolver   The function resolving with the
   *                              function to be proxied
   * @private
   */ function createLazyProxy(name, resolver) {
        _objectJs.lazy(Chain.prototype, name, function outerResolver() {
            var fn = resolver();
            if (typeof fn === 'function') return chainify(fn);
            return undefined; // if not a function, ignore
        });
    }
    /**
   * Make a function chainable
   * @param {function} fn
   * @return {Function} chain function
   * @private
   */ function chainify(fn) {
        return function() {
            var args = [
                this.value
            ]; // `this` will be the context of a Chain instance
            for(var i = 0; i < arguments.length; i++)args[i + 1] = arguments[i];
            return new Chain(fn.apply(fn, args));
        };
    }
    /**
   * Create a proxy for a single method, or an object with multiple methods.
   * Example usage:
   *
   *   Chain.createProxy('add', function add (x, y) {...})
   *   Chain.createProxy({
   *     add:      function add (x, y) {...},
   *     subtract: function subtract (x, y) {...}
   *   }
   *
   * @param {string | Object} arg0   A name (string), or an object with
   *                                 functions
   * @param {*} [arg1]               A function, when arg0 is a name
   */ Chain.createProxy = function(arg0, arg1) {
        if (typeof arg0 === 'string') // createProxy(name, value)
        createProxy(arg0, arg1);
        else {
            var _loop = function _loop(_name) {
                if (_objectJs.hasOwnProperty(arg0, _name) && excludedNames[_name] === undefined) createLazyProxy(_name, ()=>arg0[_name]
                );
            };
            // createProxy(values)
            for(var _name1 in arg0)_loop(_name1);
        }
    };
    var excludedNames = {
        expression: true,
        docs: true,
        type: true,
        classes: true,
        json: true,
        error: true,
        isChain: true // conflicts with the property isChain of a Chain instance
    }; // create proxy for everything that is in math.js
    Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.
    if (on) on('import', function(name, resolver, path) {
        if (!path) // an imported function (not a data type or something special)
        createLazyProxy(name, resolver);
    });
    return Chain;
}, {
    isClass: true
});

},{"../../utils/is.js":"iwdlF","../../utils/string.js":"0PPSB","../../utils/object.js":"eRHhH","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e0zO7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHelp", ()=>createHelp
);
var _factoryJs = require("../../utils/factory.js");
var _customsJs = require("../../utils/customs.js");
var _embeddedDocsJs = require("../embeddedDocs/embeddedDocs.js");
var _objectJs = require("../../utils/object.js");
var name = 'help';
var dependencies = [
    'typed',
    'mathWithTransform',
    'Help'
];
var createHelp = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , mathWithTransform , Help  } = _ref;
    /**
   * Retrieve help on a function or data type.
   * Help files are retrieved from the embedded documentation in math.docs.
   *
   * Syntax:
   *
   *    math.help(search)
   *
   * Examples:
   *
   *    console.log(math.help('sin').toString())
   *    console.log(math.help(math.add).toString())
   *    console.log(math.help(math.add).toJSON())
   *
   * @param {Function | string | Object} search   A function or function name
   *                                              for which to get help
   * @return {Help} A help object
   */ return typed(name, {
        any: function any(search) {
            var prop;
            var searchName = search;
            if (typeof search !== 'string') {
                for(prop in mathWithTransform)// search in functions and constants
                if (_objectJs.hasOwnProperty(mathWithTransform, prop) && search === mathWithTransform[prop]) {
                    searchName = prop;
                    break;
                }
            /* TODO: implement help for data types
         if (!text) {
         // search data type
         for (prop in math.type) {
         if (hasOwnProperty(math, prop)) {
         if (search === math.type[prop]) {
         text = prop
         break
         }
         }
         }
         }
         */ }
            var doc = _customsJs.getSafeProperty(_embeddedDocsJs.embeddedDocs, searchName);
            if (!doc) {
                var searchText = typeof searchName === 'function' ? searchName.name : searchName;
                throw new Error('No documentation found on "' + searchText + '"');
            }
            return new Help(doc);
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/customs.js":"8gSIx","../embeddedDocs/embeddedDocs.js":"7hv6I","../../utils/object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7hv6I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "embeddedDocs", ()=>embeddedDocs
);
var _bignumberJs = require("./construction/bignumber.js");
var _typeOfJs = require("./function/utils/typeOf.js");
var _isZeroJs = require("./function/utils/isZero.js");
var _isPrimeJs = require("./function/utils/isPrime.js");
var _isPositiveJs = require("./function/utils/isPositive.js");
var _isNumericJs = require("./function/utils/isNumeric.js");
var _hasNumericValueJs = require("./function/utils/hasNumericValue.js");
var _isNegativeJs = require("./function/utils/isNegative.js");
var _isIntegerJs = require("./function/utils/isInteger.js");
var _isNaNJs = require("./function/utils/isNaN.js");
var _formatJs = require("./function/utils/format.js");
var _binJs = require("./function/utils/bin.js");
var _octJs = require("./function/utils/oct.js");
var _hexJs = require("./function/utils/hex.js");
var _cloneJs = require("./function/utils/clone.js");
var _toJs = require("./function/units/to.js");
var _tanhJs = require("./function/trigonometry/tanh.js");
var _tanJs = require("./function/trigonometry/tan.js");
var _sinhJs = require("./function/trigonometry/sinh.js");
var _sechJs = require("./function/trigonometry/sech.js");
var _secJs = require("./function/trigonometry/sec.js");
var _cschJs = require("./function/trigonometry/csch.js");
var _cscJs = require("./function/trigonometry/csc.js");
var _cothJs = require("./function/trigonometry/coth.js");
var _cotJs = require("./function/trigonometry/cot.js");
var _coshJs = require("./function/trigonometry/cosh.js");
var _cosJs = require("./function/trigonometry/cos.js");
var _atan2Js = require("./function/trigonometry/atan2.js");
var _atanhJs = require("./function/trigonometry/atanh.js");
var _atanJs = require("./function/trigonometry/atan.js");
var _asinhJs = require("./function/trigonometry/asinh.js");
var _asinJs = require("./function/trigonometry/asin.js");
var _asechJs = require("./function/trigonometry/asech.js");
var _asecJs = require("./function/trigonometry/asec.js");
var _acschJs = require("./function/trigonometry/acsch.js");
var _acscJs = require("./function/trigonometry/acsc.js");
var _acothJs = require("./function/trigonometry/acoth.js");
var _acotJs = require("./function/trigonometry/acot.js");
var _acoshJs = require("./function/trigonometry/acosh.js");
var _acosJs = require("./function/trigonometry/acos.js");
var _sumJs = require("./function/statistics/sum.js");
var _stdJs = require("./function/statistics/std.js");
var _quantileSeqJs = require("./function/statistics/quantileSeq.js");
var _prodJs = require("./function/statistics/prod.js");
var _modeJs = require("./function/statistics/mode.js");
var _minJs = require("./function/statistics/min.js");
var _medianJs = require("./function/statistics/median.js");
var _meanJs = require("./function/statistics/mean.js");
var _maxJs = require("./function/statistics/max.js");
var _madJs = require("./function/statistics/mad.js");
var _erfJs = require("./function/special/erf.js");
var _setUnionJs = require("./function/set/setUnion.js");
var _setSymDifferenceJs = require("./function/set/setSymDifference.js");
var _setSizeJs = require("./function/set/setSize.js");
var _setPowersetJs = require("./function/set/setPowerset.js");
var _setMultiplicityJs = require("./function/set/setMultiplicity.js");
var _setIsSubsetJs = require("./function/set/setIsSubset.js");
var _setIntersectJs = require("./function/set/setIntersect.js");
var _setDistinctJs = require("./function/set/setDistinct.js");
var _setDifferenceJs = require("./function/set/setDifference.js");
var _setCartesianJs = require("./function/set/setCartesian.js");
var _unequalJs = require("./function/relational/unequal.js");
var _smallerEqJs = require("./function/relational/smallerEq.js");
var _smallerJs = require("./function/relational/smaller.js");
var _largerEqJs = require("./function/relational/largerEq.js");
var _largerJs = require("./function/relational/larger.js");
var _equalTextJs = require("./function/relational/equalText.js");
var _equalJs = require("./function/relational/equal.js");
var _deepEqualJs = require("./function/relational/deepEqual.js");
var _compareTextJs = require("./function/relational/compareText.js");
var _compareNaturalJs = require("./function/relational/compareNatural.js");
var _compareJs = require("./function/relational/compare.js");
var _randomIntJs = require("./function/probability/randomInt.js");
var _randomJs = require("./function/probability/random.js");
var _pickRandomJs = require("./function/probability/pickRandom.js");
var _permutationsJs = require("./function/probability/permutations.js");
var _multinomialJs = require("./function/probability/multinomial.js");
var _kldivergenceJs = require("./function/probability/kldivergence.js");
var _gammaJs = require("./function/probability/gamma.js");
var _factorialJs = require("./function/probability/factorial.js");
var _combinationsJs = require("./function/probability/combinations.js");
var _combinationsWithRepJs = require("./function/probability/combinationsWithRep.js");
var _zerosJs = require("./function/matrix/zeros.js");
var _transposeJs = require("./function/matrix/transpose.js");
var _traceJs = require("./function/matrix/trace.js");
var _subsetJs = require("./function/matrix/subset.js");
var _squeezeJs = require("./function/matrix/squeeze.js");
var _sortJs = require("./function/matrix/sort.js");
var _sizeJs = require("./function/matrix/size.js");
var _diffJs = require("./function/matrix/diff.js");
var _reshapeJs = require("./function/matrix/reshape.js");
var _resizeJs = require("./function/matrix/resize.js");
var _rangeJs = require("./function/matrix/range.js");
var _partitionSelectJs = require("./function/matrix/partitionSelect.js");
var _onesJs = require("./function/matrix/ones.js");
var _mapJs = require("./function/matrix/map.js");
var _kronJs = require("./function/matrix/kron.js");
var _invJs = require("./function/matrix/inv.js");
var _forEachJs = require("./function/matrix/forEach.js");
var _flattenJs = require("./function/matrix/flatten.js");
var _filterJs = require("./function/matrix/filter.js");
var _identityJs = require("./function/matrix/identity.js");
var _getMatrixDataTypeJs = require("./function/matrix/getMatrixDataType.js");
var _dotJs = require("./function/matrix/dot.js");
var _diagJs = require("./function/matrix/diag.js");
var _detJs = require("./function/matrix/det.js");
var _ctransposeJs = require("./function/matrix/ctranspose.js");
var _crossJs = require("./function/matrix/cross.js");
var _concatJs = require("./function/matrix/concat.js");
var _countJs = require("./function/matrix/count.js");
var _xorJs = require("./function/logical/xor.js");
var _orJs = require("./function/logical/or.js");
var _notJs = require("./function/logical/not.js");
var _andJs = require("./function/logical/and.js");
var _intersectJs = require("./function/geometry/intersect.js");
var _distanceJs = require("./function/geometry/distance.js");
var _helpJs = require("./function/expression/help.js");
var _evaluateJs = require("./function/expression/evaluate.js");
var _imJs = require("./function/complex/im.js");
var _reJs = require("./function/complex/re.js");
var _conjJs = require("./function/complex/conj.js");
var _argJs = require("./function/complex/arg.js");
var _typedJs = require("./core/typed.js");
var _importJs = require("./core/import.js");
var _configJs = require("./core/config.js");
var _stirlingS2Js = require("./function/combinatorics/stirlingS2.js");
var _compositionJs = require("./function/combinatorics/composition.js");
var _catalanJs = require("./function/combinatorics/catalan.js");
var _bellNumbersJs = require("./function/combinatorics/bellNumbers.js");
var _rightLogShiftJs = require("./function/bitwise/rightLogShift.js");
var _rightArithShiftJs = require("./function/bitwise/rightArithShift.js");
var _leftShiftJs = require("./function/bitwise/leftShift.js");
var _bitXorJs = require("./function/bitwise/bitXor.js");
var _bitOrJs = require("./function/bitwise/bitOr.js");
var _bitNotJs = require("./function/bitwise/bitNot.js");
var _bitAndJs = require("./function/bitwise/bitAnd.js");
var _xgcdJs = require("./function/arithmetic/xgcd.js");
var _unaryPlusJs = require("./function/arithmetic/unaryPlus.js");
var _unaryMinusJs = require("./function/arithmetic/unaryMinus.js");
var _squareJs = require("./function/arithmetic/square.js");
var _sqrtmJs = require("./function/arithmetic/sqrtm.js");
var _sqrtJs = require("./function/arithmetic/sqrt.js");
var _signJs = require("./function/arithmetic/sign.js");
var _roundJs = require("./function/arithmetic/round.js");
var _powJs = require("./function/arithmetic/pow.js");
var _nthRootsJs = require("./function/arithmetic/nthRoots.js");
var _nthRootJs = require("./function/arithmetic/nthRoot.js");
var _normJs = require("./function/arithmetic/norm.js");
var _multiplyJs = require("./function/arithmetic/multiply.js");
var _modJs = require("./function/arithmetic/mod.js");
var _log10Js = require("./function/arithmetic/log10.js");
var _log1PJs = require("./function/arithmetic/log1p.js");
var _log2Js = require("./function/arithmetic/log2.js");
var _logJs = require("./function/arithmetic/log.js");
var _lcmJs = require("./function/arithmetic/lcm.js");
var _hypotJs = require("./function/arithmetic/hypot.js");
var _gcdJs = require("./function/arithmetic/gcd.js");
var _floorJs = require("./function/arithmetic/floor.js");
var _fixJs = require("./function/arithmetic/fix.js");
var _expm1Js = require("./function/arithmetic/expm1.js");
var _expmJs = require("./function/arithmetic/expm.js");
var _eigsJs = require("./function/matrix/eigs.js");
var _expJs = require("./function/arithmetic/exp.js");
var _dotMultiplyJs = require("./function/arithmetic/dotMultiply.js");
var _dotDivideJs = require("./function/arithmetic/dotDivide.js");
var _divideJs = require("./function/arithmetic/divide.js");
var _cubeJs = require("./function/arithmetic/cube.js");
var _ceilJs = require("./function/arithmetic/ceil.js");
var _cbrtJs = require("./function/arithmetic/cbrt.js");
var _addJs = require("./function/arithmetic/add.js");
var _absJs = require("./function/arithmetic/abs.js");
var _qrJs = require("./function/algebra/qr.js");
var _usolveJs = require("./function/algebra/usolve.js");
var _usolveAllJs = require("./function/algebra/usolveAll.js");
var _sluJs = require("./function/algebra/slu.js");
var _rationalizeJs = require("./function/algebra/rationalize.js");
var _simplifyJs = require("./function/algebra/simplify.js");
var _lupJs = require("./function/algebra/lup.js");
var _lsolveJs = require("./function/algebra/lsolve.js");
var _lsolveAllJs = require("./function/algebra/lsolveAll.js");
var _derivativeJs = require("./function/algebra/derivative.js");
var _versionJs = require("./constants/version.js");
var _trueJs = require("./constants/true.js");
var _tauJs = require("./constants/tau.js");
var _sqrt2Js = require("./constants/SQRT2.js");
var _sqrt12Js = require("./constants/SQRT1_2.js");
var _phiJs = require("./constants/phi.js");
var _piJs = require("./constants/pi.js");
var _nullJs = require("./constants/null.js");
var _naNJs = require("./constants/NaN.js");
var _log10EJs = require("./constants/LOG10E.js");
var _log2EJs = require("./constants/LOG2E.js");
var _ln10Js = require("./constants/LN10.js");
var _ln2Js = require("./constants/LN2.js");
var _infinityJs = require("./constants/Infinity.js");
var _iJs = require("./constants/i.js");
var _falseJs = require("./constants/false.js");
var _eJs = require("./constants/e.js");
var _unitJs = require("./construction/unit.js");
var _stringJs = require("./construction/string.js");
var _splitUnitJs = require("./construction/splitUnit.js");
var _sparseJs = require("./construction/sparse.js");
var _numberJs = require("./construction/number.js");
var _matrixJs = require("./construction/matrix.js");
var _matrixFromFunctionJs = require("./function/matrix/matrixFromFunction.js");
var _matrixFromRowsJs = require("./function/matrix/matrixFromRows.js");
var _matrixFromColumnsJs = require("./function/matrix/matrixFromColumns.js");
var _indexJs = require("./construction/index.js");
var _fractionJs = require("./construction/fraction.js");
var _createUnitJs = require("./construction/createUnit.js");
var _complexJs = require("./construction/complex.js");
var _booleanJs = require("./construction/boolean.js");
var _dotPowJs = require("./function/arithmetic/dotPow.js");
var _lusolveJs = require("./function/algebra/lusolve.js");
var _subtractJs = require("./function/arithmetic/subtract.js");
var _varianceJs = require("./function/statistics/variance.js");
var _sinJs = require("./function/trigonometry/sin.js");
var _numericJs = require("./function/utils/numeric.js");
var _columnJs = require("./function/matrix/column.js");
var _rowJs = require("./function/matrix/row.js");
var _rotationMatrixJs = require("./function/matrix/rotationMatrix.js");
var _rotateJs = require("./function/matrix/rotate.js");
var embeddedDocs = {
    // construction functions
    bignumber: _bignumberJs.bignumberDocs,
    boolean: _booleanJs.booleanDocs,
    complex: _complexJs.complexDocs,
    createUnit: _createUnitJs.createUnitDocs,
    fraction: _fractionJs.fractionDocs,
    index: _indexJs.indexDocs,
    matrix: _matrixJs.matrixDocs,
    number: _numberJs.numberDocs,
    sparse: _sparseJs.sparseDocs,
    splitUnit: _splitUnitJs.splitUnitDocs,
    string: _stringJs.stringDocs,
    unit: _unitJs.unitDocs,
    // constants
    e: _eJs.eDocs,
    E: _eJs.eDocs,
    false: _falseJs.falseDocs,
    i: _iJs.iDocs,
    Infinity: _infinityJs.InfinityDocs,
    LN2: _ln2Js.LN2Docs,
    LN10: _ln10Js.LN10Docs,
    LOG2E: _log2EJs.LOG2EDocs,
    LOG10E: _log10EJs.LOG10EDocs,
    NaN: _naNJs.NaNDocs,
    null: _nullJs.nullDocs,
    pi: _piJs.piDocs,
    PI: _piJs.piDocs,
    phi: _phiJs.phiDocs,
    SQRT1_2: _sqrt12Js.SQRT12Docs,
    SQRT2: _sqrt2Js.SQRT2Docs,
    tau: _tauJs.tauDocs,
    true: _trueJs.trueDocs,
    version: _versionJs.versionDocs,
    // physical constants
    // TODO: more detailed docs for physical constants
    speedOfLight: {
        description: 'Speed of light in vacuum',
        examples: [
            'speedOfLight'
        ]
    },
    gravitationConstant: {
        description: 'Newtonian constant of gravitation',
        examples: [
            'gravitationConstant'
        ]
    },
    planckConstant: {
        description: 'Planck constant',
        examples: [
            'planckConstant'
        ]
    },
    reducedPlanckConstant: {
        description: 'Reduced Planck constant',
        examples: [
            'reducedPlanckConstant'
        ]
    },
    magneticConstant: {
        description: 'Magnetic constant (vacuum permeability)',
        examples: [
            'magneticConstant'
        ]
    },
    electricConstant: {
        description: 'Electric constant (vacuum permeability)',
        examples: [
            'electricConstant'
        ]
    },
    vacuumImpedance: {
        description: 'Characteristic impedance of vacuum',
        examples: [
            'vacuumImpedance'
        ]
    },
    coulomb: {
        description: 'Coulomb\'s constant',
        examples: [
            'coulomb'
        ]
    },
    elementaryCharge: {
        description: 'Elementary charge',
        examples: [
            'elementaryCharge'
        ]
    },
    bohrMagneton: {
        description: 'Borh magneton',
        examples: [
            'bohrMagneton'
        ]
    },
    conductanceQuantum: {
        description: 'Conductance quantum',
        examples: [
            'conductanceQuantum'
        ]
    },
    inverseConductanceQuantum: {
        description: 'Inverse conductance quantum',
        examples: [
            'inverseConductanceQuantum'
        ]
    },
    // josephson: {description: 'Josephson constant', examples: ['josephson']},
    magneticFluxQuantum: {
        description: 'Magnetic flux quantum',
        examples: [
            'magneticFluxQuantum'
        ]
    },
    nuclearMagneton: {
        description: 'Nuclear magneton',
        examples: [
            'nuclearMagneton'
        ]
    },
    klitzing: {
        description: 'Von Klitzing constant',
        examples: [
            'klitzing'
        ]
    },
    bohrRadius: {
        description: 'Borh radius',
        examples: [
            'bohrRadius'
        ]
    },
    classicalElectronRadius: {
        description: 'Classical electron radius',
        examples: [
            'classicalElectronRadius'
        ]
    },
    electronMass: {
        description: 'Electron mass',
        examples: [
            'electronMass'
        ]
    },
    fermiCoupling: {
        description: 'Fermi coupling constant',
        examples: [
            'fermiCoupling'
        ]
    },
    fineStructure: {
        description: 'Fine-structure constant',
        examples: [
            'fineStructure'
        ]
    },
    hartreeEnergy: {
        description: 'Hartree energy',
        examples: [
            'hartreeEnergy'
        ]
    },
    protonMass: {
        description: 'Proton mass',
        examples: [
            'protonMass'
        ]
    },
    deuteronMass: {
        description: 'Deuteron Mass',
        examples: [
            'deuteronMass'
        ]
    },
    neutronMass: {
        description: 'Neutron mass',
        examples: [
            'neutronMass'
        ]
    },
    quantumOfCirculation: {
        description: 'Quantum of circulation',
        examples: [
            'quantumOfCirculation'
        ]
    },
    rydberg: {
        description: 'Rydberg constant',
        examples: [
            'rydberg'
        ]
    },
    thomsonCrossSection: {
        description: 'Thomson cross section',
        examples: [
            'thomsonCrossSection'
        ]
    },
    weakMixingAngle: {
        description: 'Weak mixing angle',
        examples: [
            'weakMixingAngle'
        ]
    },
    efimovFactor: {
        description: 'Efimov factor',
        examples: [
            'efimovFactor'
        ]
    },
    atomicMass: {
        description: 'Atomic mass constant',
        examples: [
            'atomicMass'
        ]
    },
    avogadro: {
        description: 'Avogadro\'s number',
        examples: [
            'avogadro'
        ]
    },
    boltzmann: {
        description: 'Boltzmann constant',
        examples: [
            'boltzmann'
        ]
    },
    faraday: {
        description: 'Faraday constant',
        examples: [
            'faraday'
        ]
    },
    firstRadiation: {
        description: 'First radiation constant',
        examples: [
            'firstRadiation'
        ]
    },
    loschmidt: {
        description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
        examples: [
            'loschmidt'
        ]
    },
    gasConstant: {
        description: 'Gas constant',
        examples: [
            'gasConstant'
        ]
    },
    molarPlanckConstant: {
        description: 'Molar Planck constant',
        examples: [
            'molarPlanckConstant'
        ]
    },
    molarVolume: {
        description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
        examples: [
            'molarVolume'
        ]
    },
    sackurTetrode: {
        description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
        examples: [
            'sackurTetrode'
        ]
    },
    secondRadiation: {
        description: 'Second radiation constant',
        examples: [
            'secondRadiation'
        ]
    },
    stefanBoltzmann: {
        description: 'Stefan-Boltzmann constant',
        examples: [
            'stefanBoltzmann'
        ]
    },
    wienDisplacement: {
        description: 'Wien displacement law constant',
        examples: [
            'wienDisplacement'
        ]
    },
    // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
    molarMass: {
        description: 'Molar mass constant',
        examples: [
            'molarMass'
        ]
    },
    molarMassC12: {
        description: 'Molar mass constant of carbon-12',
        examples: [
            'molarMassC12'
        ]
    },
    gravity: {
        description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
        examples: [
            'gravity'
        ]
    },
    planckLength: {
        description: 'Planck length',
        examples: [
            'planckLength'
        ]
    },
    planckMass: {
        description: 'Planck mass',
        examples: [
            'planckMass'
        ]
    },
    planckTime: {
        description: 'Planck time',
        examples: [
            'planckTime'
        ]
    },
    planckCharge: {
        description: 'Planck charge',
        examples: [
            'planckCharge'
        ]
    },
    planckTemperature: {
        description: 'Planck temperature',
        examples: [
            'planckTemperature'
        ]
    },
    // functions - algebra
    derivative: _derivativeJs.derivativeDocs,
    lsolve: _lsolveJs.lsolveDocs,
    lsolveAll: _lsolveAllJs.lsolveAllDocs,
    lup: _lupJs.lupDocs,
    lusolve: _lusolveJs.lusolveDocs,
    simplify: _simplifyJs.simplifyDocs,
    rationalize: _rationalizeJs.rationalizeDocs,
    slu: _sluJs.sluDocs,
    usolve: _usolveJs.usolveDocs,
    usolveAll: _usolveAllJs.usolveAllDocs,
    qr: _qrJs.qrDocs,
    // functions - arithmetic
    abs: _absJs.absDocs,
    add: _addJs.addDocs,
    cbrt: _cbrtJs.cbrtDocs,
    ceil: _ceilJs.ceilDocs,
    cube: _cubeJs.cubeDocs,
    divide: _divideJs.divideDocs,
    dotDivide: _dotDivideJs.dotDivideDocs,
    dotMultiply: _dotMultiplyJs.dotMultiplyDocs,
    dotPow: _dotPowJs.dotPowDocs,
    exp: _expJs.expDocs,
    expm: _expmJs.expmDocs,
    expm1: _expm1Js.expm1Docs,
    fix: _fixJs.fixDocs,
    floor: _floorJs.floorDocs,
    gcd: _gcdJs.gcdDocs,
    hypot: _hypotJs.hypotDocs,
    lcm: _lcmJs.lcmDocs,
    log: _logJs.logDocs,
    log2: _log2Js.log2Docs,
    log1p: _log1PJs.log1pDocs,
    log10: _log10Js.log10Docs,
    mod: _modJs.modDocs,
    multiply: _multiplyJs.multiplyDocs,
    norm: _normJs.normDocs,
    nthRoot: _nthRootJs.nthRootDocs,
    nthRoots: _nthRootsJs.nthRootsDocs,
    pow: _powJs.powDocs,
    round: _roundJs.roundDocs,
    sign: _signJs.signDocs,
    sqrt: _sqrtJs.sqrtDocs,
    sqrtm: _sqrtmJs.sqrtmDocs,
    square: _squareJs.squareDocs,
    subtract: _subtractJs.subtractDocs,
    unaryMinus: _unaryMinusJs.unaryMinusDocs,
    unaryPlus: _unaryPlusJs.unaryPlusDocs,
    xgcd: _xgcdJs.xgcdDocs,
    // functions - bitwise
    bitAnd: _bitAndJs.bitAndDocs,
    bitNot: _bitNotJs.bitNotDocs,
    bitOr: _bitOrJs.bitOrDocs,
    bitXor: _bitXorJs.bitXorDocs,
    leftShift: _leftShiftJs.leftShiftDocs,
    rightArithShift: _rightArithShiftJs.rightArithShiftDocs,
    rightLogShift: _rightLogShiftJs.rightLogShiftDocs,
    // functions - combinatorics
    bellNumbers: _bellNumbersJs.bellNumbersDocs,
    catalan: _catalanJs.catalanDocs,
    composition: _compositionJs.compositionDocs,
    stirlingS2: _stirlingS2Js.stirlingS2Docs,
    // functions - core
    config: _configJs.configDocs,
    import: _importJs.importDocs,
    typed: _typedJs.typedDocs,
    // functions - complex
    arg: _argJs.argDocs,
    conj: _conjJs.conjDocs,
    re: _reJs.reDocs,
    im: _imJs.imDocs,
    // functions - expression
    evaluate: _evaluateJs.evaluateDocs,
    help: _helpJs.helpDocs,
    // functions - geometry
    distance: _distanceJs.distanceDocs,
    intersect: _intersectJs.intersectDocs,
    // functions - logical
    and: _andJs.andDocs,
    not: _notJs.notDocs,
    or: _orJs.orDocs,
    xor: _xorJs.xorDocs,
    // functions - matrix
    concat: _concatJs.concatDocs,
    count: _countJs.countDocs,
    cross: _crossJs.crossDocs,
    column: _columnJs.columnDocs,
    ctranspose: _ctransposeJs.ctransposeDocs,
    det: _detJs.detDocs,
    diag: _diagJs.diagDocs,
    diff: _diffJs.diffDocs,
    dot: _dotJs.dotDocs,
    getMatrixDataType: _getMatrixDataTypeJs.getMatrixDataTypeDocs,
    identity: _identityJs.identityDocs,
    filter: _filterJs.filterDocs,
    flatten: _flattenJs.flattenDocs,
    forEach: _forEachJs.forEachDocs,
    inv: _invJs.invDocs,
    eigs: _eigsJs.eigsDocs,
    kron: _kronJs.kronDocs,
    matrixFromFunction: _matrixFromFunctionJs.matrixFromFunctionDocs,
    matrixFromRows: _matrixFromRowsJs.matrixFromRowsDocs,
    matrixFromColumns: _matrixFromColumnsJs.matrixFromColumnsDocs,
    map: _mapJs.mapDocs,
    ones: _onesJs.onesDocs,
    partitionSelect: _partitionSelectJs.partitionSelectDocs,
    range: _rangeJs.rangeDocs,
    resize: _resizeJs.resizeDocs,
    reshape: _reshapeJs.reshapeDocs,
    rotate: _rotateJs.rotateDocs,
    rotationMatrix: _rotationMatrixJs.rotationMatrixDocs,
    row: _rowJs.rowDocs,
    size: _sizeJs.sizeDocs,
    sort: _sortJs.sortDocs,
    squeeze: _squeezeJs.squeezeDocs,
    subset: _subsetJs.subsetDocs,
    trace: _traceJs.traceDocs,
    transpose: _transposeJs.transposeDocs,
    zeros: _zerosJs.zerosDocs,
    // functions - probability
    combinations: _combinationsJs.combinationsDocs,
    combinationsWithRep: _combinationsWithRepJs.combinationsWithRepDocs,
    // distribution: distributionDocs,
    factorial: _factorialJs.factorialDocs,
    gamma: _gammaJs.gammaDocs,
    kldivergence: _kldivergenceJs.kldivergenceDocs,
    multinomial: _multinomialJs.multinomialDocs,
    permutations: _permutationsJs.permutationsDocs,
    pickRandom: _pickRandomJs.pickRandomDocs,
    random: _randomJs.randomDocs,
    randomInt: _randomIntJs.randomIntDocs,
    // functions - relational
    compare: _compareJs.compareDocs,
    compareNatural: _compareNaturalJs.compareNaturalDocs,
    compareText: _compareTextJs.compareTextDocs,
    deepEqual: _deepEqualJs.deepEqualDocs,
    equal: _equalJs.equalDocs,
    equalText: _equalTextJs.equalTextDocs,
    larger: _largerJs.largerDocs,
    largerEq: _largerEqJs.largerEqDocs,
    smaller: _smallerJs.smallerDocs,
    smallerEq: _smallerEqJs.smallerEqDocs,
    unequal: _unequalJs.unequalDocs,
    // functions - set
    setCartesian: _setCartesianJs.setCartesianDocs,
    setDifference: _setDifferenceJs.setDifferenceDocs,
    setDistinct: _setDistinctJs.setDistinctDocs,
    setIntersect: _setIntersectJs.setIntersectDocs,
    setIsSubset: _setIsSubsetJs.setIsSubsetDocs,
    setMultiplicity: _setMultiplicityJs.setMultiplicityDocs,
    setPowerset: _setPowersetJs.setPowersetDocs,
    setSize: _setSizeJs.setSizeDocs,
    setSymDifference: _setSymDifferenceJs.setSymDifferenceDocs,
    setUnion: _setUnionJs.setUnionDocs,
    // functions - special
    erf: _erfJs.erfDocs,
    // functions - statistics
    mad: _madJs.madDocs,
    max: _maxJs.maxDocs,
    mean: _meanJs.meanDocs,
    median: _medianJs.medianDocs,
    min: _minJs.minDocs,
    mode: _modeJs.modeDocs,
    prod: _prodJs.prodDocs,
    quantileSeq: _quantileSeqJs.quantileSeqDocs,
    std: _stdJs.stdDocs,
    sum: _sumJs.sumDocs,
    variance: _varianceJs.varianceDocs,
    // functions - trigonometry
    acos: _acosJs.acosDocs,
    acosh: _acoshJs.acoshDocs,
    acot: _acotJs.acotDocs,
    acoth: _acothJs.acothDocs,
    acsc: _acscJs.acscDocs,
    acsch: _acschJs.acschDocs,
    asec: _asecJs.asecDocs,
    asech: _asechJs.asechDocs,
    asin: _asinJs.asinDocs,
    asinh: _asinhJs.asinhDocs,
    atan: _atanJs.atanDocs,
    atanh: _atanhJs.atanhDocs,
    atan2: _atan2Js.atan2Docs,
    cos: _cosJs.cosDocs,
    cosh: _coshJs.coshDocs,
    cot: _cotJs.cotDocs,
    coth: _cothJs.cothDocs,
    csc: _cscJs.cscDocs,
    csch: _cschJs.cschDocs,
    sec: _secJs.secDocs,
    sech: _sechJs.sechDocs,
    sin: _sinJs.sinDocs,
    sinh: _sinhJs.sinhDocs,
    tan: _tanJs.tanDocs,
    tanh: _tanhJs.tanhDocs,
    // functions - units
    to: _toJs.toDocs,
    // functions - utils
    clone: _cloneJs.cloneDocs,
    format: _formatJs.formatDocs,
    bin: _binJs.binDocs,
    oct: _octJs.octDocs,
    hex: _hexJs.hexDocs,
    isNaN: _isNaNJs.isNaNDocs,
    isInteger: _isIntegerJs.isIntegerDocs,
    isNegative: _isNegativeJs.isNegativeDocs,
    isNumeric: _isNumericJs.isNumericDocs,
    hasNumericValue: _hasNumericValueJs.hasNumericValueDocs,
    isPositive: _isPositiveJs.isPositiveDocs,
    isPrime: _isPrimeJs.isPrimeDocs,
    isZero: _isZeroJs.isZeroDocs,
    // print: printDocs // TODO: add documentation for print as soon as the parser supports objects.
    typeOf: _typeOfJs.typeOfDocs,
    numeric: _numericJs.numericDocs
};

},{"./construction/bignumber.js":"lhMbh","./function/utils/typeOf.js":"7kxQE","./function/utils/isZero.js":"5dEKO","./function/utils/isPrime.js":"jROUS","./function/utils/isPositive.js":"gRxcI","./function/utils/isNumeric.js":"emCjV","./function/utils/hasNumericValue.js":"ijM3B","./function/utils/isNegative.js":"3grcO","./function/utils/isInteger.js":"5TeN1","./function/utils/isNaN.js":"2CTv5","./function/utils/format.js":"1vorQ","./function/utils/bin.js":"9AX89","./function/utils/oct.js":"5Zjs0","./function/utils/hex.js":"914UL","./function/utils/clone.js":"fIszt","./function/units/to.js":"iUY73","./function/trigonometry/tanh.js":"beUr7","./function/trigonometry/tan.js":"k15FI","./function/trigonometry/sinh.js":"2jolO","./function/trigonometry/sech.js":"8iB0v","./function/trigonometry/sec.js":"lkwxl","./function/trigonometry/csch.js":"aM5sm","./function/trigonometry/csc.js":"juGzK","./function/trigonometry/coth.js":"kL0ny","./function/trigonometry/cot.js":"aSbqz","./function/trigonometry/cosh.js":"hccQf","./function/trigonometry/cos.js":"5uGyZ","./function/trigonometry/atan2.js":"56mNB","./function/trigonometry/atanh.js":"d2ArX","./function/trigonometry/atan.js":"aLePB","./function/trigonometry/asinh.js":"5UzFI","./function/trigonometry/asin.js":"fPDA4","./function/trigonometry/asech.js":"7KKBF","./function/trigonometry/asec.js":"5tB5t","./function/trigonometry/acsch.js":"YS6iP","./function/trigonometry/acsc.js":"8oEXw","./function/trigonometry/acoth.js":"lEy5A","./function/trigonometry/acot.js":"5Slkb","./function/trigonometry/acosh.js":"9VJHY","./function/trigonometry/acos.js":"43ms2","./function/statistics/sum.js":"a6uwP","./function/statistics/std.js":"i1Qoh","./function/statistics/quantileSeq.js":"eTJo2","./function/statistics/prod.js":"9LDlR","./function/statistics/mode.js":"kaOHB","./function/statistics/min.js":"ej1jZ","./function/statistics/median.js":"fqzWE","./function/statistics/mean.js":"byUeY","./function/statistics/max.js":"7D1Pj","./function/statistics/mad.js":"6fmkZ","./function/special/erf.js":"6fwwl","./function/set/setUnion.js":"Tx0JW","./function/set/setSymDifference.js":"3A9Sc","./function/set/setSize.js":"2WVjD","./function/set/setPowerset.js":"eWIdN","./function/set/setMultiplicity.js":"7M8Qu","./function/set/setIsSubset.js":"b8q4n","./function/set/setIntersect.js":"8XSWU","./function/set/setDistinct.js":"a2391","./function/set/setDifference.js":"hojh3","./function/set/setCartesian.js":"12c6F","./function/relational/unequal.js":"dv8mz","./function/relational/smallerEq.js":"102LY","./function/relational/smaller.js":"f9qPe","./function/relational/largerEq.js":"g7Nbc","./function/relational/larger.js":"jBnsb","./function/relational/equalText.js":"89UrI","./function/relational/equal.js":"g4ZoN","./function/relational/deepEqual.js":"f4Ugs","./function/relational/compareText.js":"2To73","./function/relational/compareNatural.js":"aqsgv","./function/relational/compare.js":"2RPGx","./function/probability/randomInt.js":"7H4y2","./function/probability/random.js":"9GRld","./function/probability/pickRandom.js":"aDnlY","./function/probability/permutations.js":"34hy9","./function/probability/multinomial.js":"56HtV","./function/probability/kldivergence.js":"iTeDj","./function/probability/gamma.js":"iytHM","./function/probability/factorial.js":"EcXDN","./function/probability/combinations.js":"buBba","./function/probability/combinationsWithRep.js":"7xBC4","./function/matrix/zeros.js":"7lPVn","./function/matrix/transpose.js":"lpTkR","./function/matrix/trace.js":"1Kmce","./function/matrix/subset.js":"btdQF","./function/matrix/squeeze.js":"1sUy6","./function/matrix/sort.js":"ahP7i","./function/matrix/size.js":"javgL","./function/matrix/diff.js":"4mz8t","./function/matrix/reshape.js":"hTWO4","./function/matrix/resize.js":"keyP9","./function/matrix/range.js":"jyswS","./function/matrix/partitionSelect.js":"gbni8","./function/matrix/ones.js":"bLNKY","./function/matrix/map.js":"fHqTI","./function/matrix/kron.js":"4SyOo","./function/matrix/inv.js":"8fH7U","./function/matrix/forEach.js":"hayFj","./function/matrix/flatten.js":"lH0nz","./function/matrix/filter.js":"jPhcK","./function/matrix/identity.js":"eMh72","./function/matrix/getMatrixDataType.js":"gLnfe","./function/matrix/dot.js":"3fmbh","./function/matrix/diag.js":"e0bb4","./function/matrix/det.js":"lgpOa","./function/matrix/ctranspose.js":"7Viaj","./function/matrix/cross.js":"2ylh2","./function/matrix/concat.js":"eKVm1","./function/matrix/count.js":"gITNW","./function/logical/xor.js":"1qbXL","./function/logical/or.js":"bGETN","./function/logical/not.js":"3xV1b","./function/logical/and.js":"csrVM","./function/geometry/intersect.js":"cXUO5","./function/geometry/distance.js":"9DbkL","./function/expression/help.js":"MHKlI","./function/expression/evaluate.js":"exszP","./function/complex/im.js":"djjBi","./function/complex/re.js":"e1JYn","./function/complex/conj.js":"fbapv","./function/complex/arg.js":"hLDWM","./core/typed.js":"1djRE","./core/import.js":"cjRP0","./core/config.js":"f8Ud6","./function/combinatorics/stirlingS2.js":"fw4Vu","./function/combinatorics/composition.js":"hEFpg","./function/combinatorics/catalan.js":"jzlPE","./function/combinatorics/bellNumbers.js":"3kddY","./function/bitwise/rightLogShift.js":"38INz","./function/bitwise/rightArithShift.js":"86H8T","./function/bitwise/leftShift.js":"8aW0O","./function/bitwise/bitXor.js":"4xleK","./function/bitwise/bitOr.js":"5kiaL","./function/bitwise/bitNot.js":"3Fq9Z","./function/bitwise/bitAnd.js":"f0Gui","./function/arithmetic/xgcd.js":"jWytx","./function/arithmetic/unaryPlus.js":"f6Uk0","./function/arithmetic/unaryMinus.js":"fekFb","./function/arithmetic/square.js":"iw4c2","./function/arithmetic/sqrtm.js":"qwckr","./function/arithmetic/sqrt.js":"cgRTM","./function/arithmetic/sign.js":"4cXUQ","./function/arithmetic/round.js":"abM5q","./function/arithmetic/pow.js":"kqxCO","./function/arithmetic/nthRoots.js":"7HRSv","./function/arithmetic/nthRoot.js":"bOACR","./function/arithmetic/norm.js":"9p5aV","./function/arithmetic/multiply.js":"fzIvd","./function/arithmetic/mod.js":"eMtPA","./function/arithmetic/log10.js":"ijDF0","./function/arithmetic/log1p.js":"4jEbn","./function/arithmetic/log2.js":"dh9Nn","./function/arithmetic/log.js":"1PDdv","./function/arithmetic/lcm.js":"kYl5m","./function/arithmetic/hypot.js":"5a6tl","./function/arithmetic/gcd.js":"cxgGj","./function/arithmetic/floor.js":"iigU8","./function/arithmetic/fix.js":"l7w55","./function/arithmetic/expm1.js":"jSfDP","./function/arithmetic/expm.js":"lAYNh","./function/matrix/eigs.js":"fIaj0","./function/arithmetic/exp.js":"bK9Df","./function/arithmetic/dotMultiply.js":"kRiH7","./function/arithmetic/dotDivide.js":"eVOwq","./function/arithmetic/divide.js":"5u9w7","./function/arithmetic/cube.js":"3fB31","./function/arithmetic/ceil.js":"fdxNY","./function/arithmetic/cbrt.js":"lgHaJ","./function/arithmetic/add.js":"I571J","./function/arithmetic/abs.js":"3sFxq","./function/algebra/qr.js":"j0lfW","./function/algebra/usolve.js":"blWo9","./function/algebra/usolveAll.js":"hygiO","./function/algebra/slu.js":"bJevH","./function/algebra/rationalize.js":"98RRk","./function/algebra/simplify.js":"78qAH","./function/algebra/lup.js":"6IVhL","./function/algebra/lsolve.js":"4ja5e","./function/algebra/lsolveAll.js":"6dSmj","./function/algebra/derivative.js":"4gWao","./constants/version.js":"3nTYR","./constants/true.js":"8vrcy","./constants/tau.js":"33ZTw","./constants/SQRT2.js":"4YWOH","./constants/SQRT1_2.js":"3kkzg","./constants/phi.js":"6sctx","./constants/pi.js":"8KHx2","./constants/null.js":"1s4nn","./constants/NaN.js":"khm5a","./constants/LOG10E.js":"i0dmv","./constants/LOG2E.js":"lIomS","./constants/LN10.js":"lKNEK","./constants/LN2.js":"2OjTt","./constants/Infinity.js":"gRn1W","./constants/i.js":"fUA4v","./constants/false.js":"9ZWLE","./constants/e.js":"knlft","./construction/unit.js":"9Dou0","./construction/string.js":"8gPZG","./construction/splitUnit.js":"KvuV4","./construction/sparse.js":"9RrhR","./construction/number.js":"fXj9N","./construction/matrix.js":"ei7q9","./function/matrix/matrixFromFunction.js":"izZst","./function/matrix/matrixFromRows.js":"ifvgF","./function/matrix/matrixFromColumns.js":"4Rl0m","./construction/index.js":"bSeV9","./construction/fraction.js":"fQhz3","./construction/createUnit.js":"kHCp8","./construction/complex.js":"8vn1f","./construction/boolean.js":"iwfbG","./function/arithmetic/dotPow.js":"7NKq8","./function/algebra/lusolve.js":"gmjWx","./function/arithmetic/subtract.js":"2W76k","./function/statistics/variance.js":"fqigD","./function/trigonometry/sin.js":"jNTgU","./function/utils/numeric.js":"kGEyF","./function/matrix/column.js":"7QXwt","./function/matrix/row.js":"k2Oy0","./function/matrix/rotationMatrix.js":"4SlD9","./function/matrix/rotate.js":"1U5QW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lhMbh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bignumberDocs", ()=>bignumberDocs
);
var bignumberDocs = {
    name: 'bignumber',
    category: 'Construction',
    syntax: [
        'bignumber(x)'
    ],
    description: 'Create a big number from a number or string.',
    examples: [
        '0.1 + 0.2',
        'bignumber(0.1) + bignumber(0.2)',
        'bignumber("7.2")',
        'bignumber("7.2e500")',
        'bignumber([0.1, 0.2, 0.3])'
    ],
    seealso: [
        'boolean',
        'complex',
        'fraction',
        'index',
        'matrix',
        'string',
        'unit'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7kxQE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typeOfDocs", ()=>typeOfDocs
);
var typeOfDocs = {
    name: 'typeOf',
    category: 'Utils',
    syntax: [
        'typeOf(x)'
    ],
    description: 'Get the type of a variable.',
    examples: [
        'typeOf(3.5)',
        'typeOf(2 - 4i)',
        'typeOf(45 deg)',
        'typeOf("hello world")'
    ],
    seealso: [
        'getMatrixDataType'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5dEKO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isZeroDocs", ()=>isZeroDocs
);
var isZeroDocs = {
    name: 'isZero',
    category: 'Utils',
    syntax: [
        'isZero(x)'
    ],
    description: 'Test whether a value is zero.',
    examples: [
        'isZero(2)',
        'isZero(0)',
        'isZero(-4)',
        'isZero([3, 0, -2, 0])'
    ],
    seealso: [
        'isInteger',
        'isNumeric',
        'isNegative',
        'isPositive'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jROUS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPrimeDocs", ()=>isPrimeDocs
);
var isPrimeDocs = {
    name: 'isPrime',
    category: 'Utils',
    syntax: [
        'isPrime(x)'
    ],
    description: 'Test whether a value is prime: has no divisors other than itself and one.',
    examples: [
        'isPrime(3)',
        'isPrime(-2)',
        'isPrime([2, 17, 100])'
    ],
    seealso: [
        'isInteger',
        'isNumeric',
        'isNegative',
        'isZero'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gRxcI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPositiveDocs", ()=>isPositiveDocs
);
var isPositiveDocs = {
    name: 'isPositive',
    category: 'Utils',
    syntax: [
        'isPositive(x)'
    ],
    description: 'Test whether a value is positive: larger than zero.',
    examples: [
        'isPositive(2)',
        'isPositive(0)',
        'isPositive(-4)',
        'isPositive([3, 0.5, -2])'
    ],
    seealso: [
        'isInteger',
        'isNumeric',
        'isNegative',
        'isZero'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"emCjV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNumericDocs", ()=>isNumericDocs
);
var isNumericDocs = {
    name: 'isNumeric',
    category: 'Utils',
    syntax: [
        'isNumeric(x)'
    ],
    description: "Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.",
    examples: [
        'isNumeric(2)',
        'isNumeric("2")',
        'hasNumericValue("2")',
        'isNumeric(0)',
        'isNumeric(bignumber(500))',
        'isNumeric(fraction(0.125))',
        'isNumeric(2 + 3i)',
        'isNumeric([2.3, "foo", false])'
    ],
    seealso: [
        'isInteger',
        'isZero',
        'isNegative',
        'isPositive',
        'isNaN',
        'hasNumericValue'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ijM3B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasNumericValueDocs", ()=>hasNumericValueDocs
);
var hasNumericValueDocs = {
    name: 'hasNumericValue',
    category: 'Utils',
    syntax: [
        'hasNumericValue(x)'
    ],
    description: "Test whether a value is an numeric value. In case of a string, true is returned if the string contains a numeric value.",
    examples: [
        'hasNumericValue(2)',
        'hasNumericValue("2")',
        'isNumeric("2")',
        'hasNumericValue(0)',
        'hasNumericValue(bignumber(500))',
        'hasNumericValue(fraction(0.125))',
        'hasNumericValue(2 + 3i)',
        'hasNumericValue([2.3, "foo", false])'
    ],
    seealso: [
        'isInteger',
        'isZero',
        'isNegative',
        'isPositive',
        'isNaN',
        'isNumeric'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3grcO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNegativeDocs", ()=>isNegativeDocs
);
var isNegativeDocs = {
    name: 'isNegative',
    category: 'Utils',
    syntax: [
        'isNegative(x)'
    ],
    description: 'Test whether a value is negative: smaller than zero.',
    examples: [
        'isNegative(2)',
        'isNegative(0)',
        'isNegative(-4)',
        'isNegative([3, 0.5, -2])'
    ],
    seealso: [
        'isInteger',
        'isNumeric',
        'isPositive',
        'isZero'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5TeN1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isIntegerDocs", ()=>isIntegerDocs
);
var isIntegerDocs = {
    name: 'isInteger',
    category: 'Utils',
    syntax: [
        'isInteger(x)'
    ],
    description: 'Test whether a value is an integer number.',
    examples: [
        'isInteger(2)',
        'isInteger(3.5)',
        'isInteger([3, 0.5, -2])'
    ],
    seealso: [
        'isNegative',
        'isNumeric',
        'isPositive',
        'isZero'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2CTv5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNaNDocs", ()=>isNaNDocs
);
var isNaNDocs = {
    name: 'isNaN',
    category: 'Utils',
    syntax: [
        'isNaN(x)'
    ],
    description: 'Test whether a value is NaN (not a number)',
    examples: [
        'isNaN(2)',
        'isNaN(0 / 0)',
        'isNaN(NaN)',
        'isNaN(Infinity)'
    ],
    seealso: [
        'isNegative',
        'isNumeric',
        'isPositive',
        'isZero'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1vorQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatDocs", ()=>formatDocs
);
var formatDocs = {
    name: 'format',
    category: 'Utils',
    syntax: [
        'format(value)',
        'format(value, precision)'
    ],
    description: 'Format a value of any type as string.',
    examples: [
        'format(2.3)',
        'format(3 - 4i)',
        'format([])',
        'format(pi, 3)'
    ],
    seealso: [
        'print'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9AX89":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "binDocs", ()=>binDocs
);
var binDocs = {
    name: 'bin',
    category: 'Utils',
    syntax: [
        'bin(value)'
    ],
    description: 'Format a number as binary',
    examples: [
        'bin(2)'
    ],
    seealso: [
        'oct',
        'hex'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5Zjs0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "octDocs", ()=>octDocs
);
var octDocs = {
    name: 'oct',
    category: 'Utils',
    syntax: [
        'oct(value)'
    ],
    description: 'Format a number as octal',
    examples: [
        'oct(56)'
    ],
    seealso: [
        'bin',
        'hex'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"914UL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hexDocs", ()=>hexDocs
);
var hexDocs = {
    name: 'hex',
    category: 'Utils',
    syntax: [
        'hex(value)'
    ],
    description: 'Format a number as hexadecimal',
    examples: [
        'hex(240)'
    ],
    seealso: [
        'bin',
        'oct'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fIszt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cloneDocs", ()=>cloneDocs
);
var cloneDocs = {
    name: 'clone',
    category: 'Utils',
    syntax: [
        'clone(x)'
    ],
    description: 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
    examples: [
        'clone(3.5)',
        'clone(2 - 4i)',
        'clone(45 deg)',
        'clone([1, 2; 3, 4])',
        'clone("hello world")'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iUY73":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toDocs", ()=>toDocs
);
var toDocs = {
    name: 'to',
    category: 'Units',
    syntax: [
        'x to unit',
        'to(x, unit)'
    ],
    description: 'Change the unit of a value.',
    examples: [
        '5 inch to cm',
        '3.2kg to g',
        '16 bytes in bits'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"beUr7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tanhDocs", ()=>tanhDocs
);
var tanhDocs = {
    name: 'tanh',
    category: 'Trigonometry',
    syntax: [
        'tanh(x)'
    ],
    description: 'Compute the hyperbolic tangent of x in radians.',
    examples: [
        'tanh(0.5)',
        'sinh(0.5) / cosh(0.5)'
    ],
    seealso: [
        'sinh',
        'cosh'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k15FI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tanDocs", ()=>tanDocs
);
var tanDocs = {
    name: 'tan',
    category: 'Trigonometry',
    syntax: [
        'tan(x)'
    ],
    description: 'Compute the tangent of x in radians.',
    examples: [
        'tan(0.5)',
        'sin(0.5) / cos(0.5)',
        'tan(pi / 4)',
        'tan(45 deg)'
    ],
    seealso: [
        'atan',
        'sin',
        'cos'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2jolO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sinhDocs", ()=>sinhDocs
);
var sinhDocs = {
    name: 'sinh',
    category: 'Trigonometry',
    syntax: [
        'sinh(x)'
    ],
    description: 'Compute the hyperbolic sine of x in radians.',
    examples: [
        'sinh(0.5)'
    ],
    seealso: [
        'cosh',
        'tanh'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8iB0v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sechDocs", ()=>sechDocs
);
var sechDocs = {
    name: 'sech',
    category: 'Trigonometry',
    syntax: [
        'sech(x)'
    ],
    description: 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
    examples: [
        'sech(2)',
        '1 / cosh(2)'
    ],
    seealso: [
        'coth',
        'csch',
        'cosh'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lkwxl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "secDocs", ()=>secDocs
);
var secDocs = {
    name: 'sec',
    category: 'Trigonometry',
    syntax: [
        'sec(x)'
    ],
    description: 'Compute the secant of x in radians. Defined as 1/cos(x)',
    examples: [
        'sec(2)',
        '1 / cos(2)'
    ],
    seealso: [
        'cot',
        'csc',
        'cos'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aM5sm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cschDocs", ()=>cschDocs
);
var cschDocs = {
    name: 'csch',
    category: 'Trigonometry',
    syntax: [
        'csch(x)'
    ],
    description: 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
    examples: [
        'csch(2)',
        '1 / sinh(2)'
    ],
    seealso: [
        'sech',
        'coth',
        'sinh'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"juGzK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cscDocs", ()=>cscDocs
);
var cscDocs = {
    name: 'csc',
    category: 'Trigonometry',
    syntax: [
        'csc(x)'
    ],
    description: 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
    examples: [
        'csc(2)',
        '1 / sin(2)'
    ],
    seealso: [
        'sec',
        'cot',
        'sin'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kL0ny":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cothDocs", ()=>cothDocs
);
var cothDocs = {
    name: 'coth',
    category: 'Trigonometry',
    syntax: [
        'coth(x)'
    ],
    description: 'Compute the hyperbolic cotangent of x in radians.',
    examples: [
        'coth(2)',
        '1 / tanh(2)'
    ],
    seealso: [
        'sech',
        'csch',
        'tanh'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aSbqz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cotDocs", ()=>cotDocs
);
var cotDocs = {
    name: 'cot',
    category: 'Trigonometry',
    syntax: [
        'cot(x)'
    ],
    description: 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
    examples: [
        'cot(2)',
        '1 / tan(2)'
    ],
    seealso: [
        'sec',
        'csc',
        'tan'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hccQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "coshDocs", ()=>coshDocs
);
var coshDocs = {
    name: 'cosh',
    category: 'Trigonometry',
    syntax: [
        'cosh(x)'
    ],
    description: 'Compute the hyperbolic cosine of x in radians.',
    examples: [
        'cosh(0.5)'
    ],
    seealso: [
        'sinh',
        'tanh',
        'coth'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5uGyZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cosDocs", ()=>cosDocs
);
var cosDocs = {
    name: 'cos',
    category: 'Trigonometry',
    syntax: [
        'cos(x)'
    ],
    description: 'Compute the cosine of x in radians.',
    examples: [
        'cos(2)',
        'cos(pi / 4) ^ 2',
        'cos(180 deg)',
        'cos(60 deg)',
        'sin(0.2)^2 + cos(0.2)^2'
    ],
    seealso: [
        'acos',
        'sin',
        'tan'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"56mNB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atan2Docs", ()=>atan2Docs
);
var atan2Docs = {
    name: 'atan2',
    category: 'Trigonometry',
    syntax: [
        'atan2(y, x)'
    ],
    description: 'Computes the principal value of the arc tangent of y/x in radians.',
    examples: [
        'atan2(2, 2) / pi',
        'angle = 60 deg in rad',
        'x = cos(angle)',
        'y = sin(angle)',
        'atan2(y, x)'
    ],
    seealso: [
        'sin',
        'cos',
        'tan'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"d2ArX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atanhDocs", ()=>atanhDocs
);
var atanhDocs = {
    name: 'atanh',
    category: 'Trigonometry',
    syntax: [
        'atanh(x)'
    ],
    description: 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
    examples: [
        'atanh(0.5)'
    ],
    seealso: [
        'acosh',
        'asinh'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aLePB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atanDocs", ()=>atanDocs
);
var atanDocs = {
    name: 'atan',
    category: 'Trigonometry',
    syntax: [
        'atan(x)'
    ],
    description: 'Compute the inverse tangent of a value in radians.',
    examples: [
        'atan(0.5)',
        'atan(tan(0.5))'
    ],
    seealso: [
        'tan',
        'acos',
        'asin'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5UzFI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asinhDocs", ()=>asinhDocs
);
var asinhDocs = {
    name: 'asinh',
    category: 'Trigonometry',
    syntax: [
        'asinh(x)'
    ],
    description: 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
    examples: [
        'asinh(0.5)'
    ],
    seealso: [
        'acosh',
        'atanh'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fPDA4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asinDocs", ()=>asinDocs
);
var asinDocs = {
    name: 'asin',
    category: 'Trigonometry',
    syntax: [
        'asin(x)'
    ],
    description: 'Compute the inverse sine of a value in radians.',
    examples: [
        'asin(0.5)',
        'asin(sin(0.5))'
    ],
    seealso: [
        'sin',
        'acos',
        'atan'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7KKBF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asechDocs", ()=>asechDocs
);
var asechDocs = {
    name: 'asech',
    category: 'Trigonometry',
    syntax: [
        'asech(x)'
    ],
    description: 'Calculate the inverse secant of a value.',
    examples: [
        'asech(0.5)'
    ],
    seealso: [
        'acsch',
        'acoth'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5tB5t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asecDocs", ()=>asecDocs
);
var asecDocs = {
    name: 'asec',
    category: 'Trigonometry',
    syntax: [
        'asec(x)'
    ],
    description: 'Calculate the inverse secant of a value.',
    examples: [
        'asec(0.5)',
        'asec(sec(0.5))',
        'asec(2)'
    ],
    seealso: [
        'acos',
        'acot',
        'acsc'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"YS6iP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acschDocs", ()=>acschDocs
);
var acschDocs = {
    name: 'acsch',
    category: 'Trigonometry',
    syntax: [
        'acsch(x)'
    ],
    description: 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
    examples: [
        'acsch(0.5)'
    ],
    seealso: [
        'asech',
        'acoth'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8oEXw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acscDocs", ()=>acscDocs
);
var acscDocs = {
    name: 'acsc',
    category: 'Trigonometry',
    syntax: [
        'acsc(x)'
    ],
    description: 'Calculate the inverse cotangent of a value.',
    examples: [
        'acsc(2)',
        'acsc(csc(0.5))',
        'acsc(0.5)'
    ],
    seealso: [
        'csc',
        'asin',
        'asec'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lEy5A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acothDocs", ()=>acothDocs
);
var acothDocs = {
    name: 'acoth',
    category: 'Trigonometry',
    syntax: [
        'acoth(x)'
    ],
    description: 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
    examples: [
        'acoth(2)',
        'acoth(0.5)'
    ],
    seealso: [
        'acsch',
        'asech'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5Slkb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acotDocs", ()=>acotDocs
);
var acotDocs = {
    name: 'acot',
    category: 'Trigonometry',
    syntax: [
        'acot(x)'
    ],
    description: 'Calculate the inverse cotangent of a value.',
    examples: [
        'acot(0.5)',
        'acot(cot(0.5))',
        'acot(2)'
    ],
    seealso: [
        'cot',
        'atan'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9VJHY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acoshDocs", ()=>acoshDocs
);
var acoshDocs = {
    name: 'acosh',
    category: 'Trigonometry',
    syntax: [
        'acosh(x)'
    ],
    description: 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
    examples: [
        'acosh(1.5)'
    ],
    seealso: [
        'cosh',
        'asinh',
        'atanh'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"43ms2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acosDocs", ()=>acosDocs
);
var acosDocs = {
    name: 'acos',
    category: 'Trigonometry',
    syntax: [
        'acos(x)'
    ],
    description: 'Compute the inverse cosine of a value in radians.',
    examples: [
        'acos(0.5)',
        'acos(cos(2.3))'
    ],
    seealso: [
        'cos',
        'atan',
        'asin'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a6uwP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sumDocs", ()=>sumDocs
);
var sumDocs = {
    name: 'sum',
    category: 'Statistics',
    syntax: [
        'sum(a, b, c, ...)',
        'sum(A)'
    ],
    description: 'Compute the sum of all values.',
    examples: [
        'sum(2, 3, 4, 1)',
        'sum([2, 3, 4, 1])',
        'sum([2, 5; 4, 3])'
    ],
    seealso: [
        'max',
        'mean',
        'median',
        'min',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"i1Qoh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stdDocs", ()=>stdDocs
);
var stdDocs = {
    name: 'std',
    category: 'Statistics',
    syntax: [
        'std(a, b, c, ...)',
        'std(A)',
        'std(A, normalization)'
    ],
    description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
    examples: [
        'std(2, 4, 6)',
        'std([2, 4, 6, 8])',
        'std([2, 4, 6, 8], "uncorrected")',
        'std([2, 4, 6, 8], "biased")',
        'std([1, 2, 3; 4, 5, 6])'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'median',
        'prod',
        'sum',
        'variance'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eTJo2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "quantileSeqDocs", ()=>quantileSeqDocs
);
var quantileSeqDocs = {
    name: 'quantileSeq',
    category: 'Statistics',
    syntax: [
        'quantileSeq(A, prob[, sorted])',
        'quantileSeq(A, [prob1, prob2, ...][, sorted])',
        'quantileSeq(A, N[, sorted])'
    ],
    description: 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
    examples: [
        'quantileSeq([3, -1, 5, 7], 0.5)',
        'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',
        'quantileSeq([3, -1, 5, 7], 2)',
        'quantileSeq([-1, 3, 5, 7], 0.5, true)'
    ],
    seealso: [
        'mean',
        'median',
        'min',
        'max',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9LDlR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prodDocs", ()=>prodDocs
);
var prodDocs = {
    name: 'prod',
    category: 'Statistics',
    syntax: [
        'prod(a, b, c, ...)',
        'prod(A)'
    ],
    description: 'Compute the product of all values.',
    examples: [
        'prod(2, 3, 4)',
        'prod([2, 3, 4])',
        'prod([2, 5; 4, 3])'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'median',
        'min',
        'std',
        'sum',
        'variance'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kaOHB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modeDocs", ()=>modeDocs
);
var modeDocs = {
    name: 'mode',
    category: 'Statistics',
    syntax: [
        'mode(a, b, c, ...)',
        'mode(A)',
        'mode(A, a, b, B, c, ...)'
    ],
    description: 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
    examples: [
        'mode(2, 1, 4, 3, 1)',
        'mode([1, 2.7, 3.2, 4, 2.7])',
        'mode(1, 4, 6, 1, 6)'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'median',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ej1jZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minDocs", ()=>minDocs
);
var minDocs = {
    name: 'min',
    category: 'Statistics',
    syntax: [
        'min(a, b, c, ...)',
        'min(A)',
        'min(A, dim)'
    ],
    description: 'Compute the minimum value of a list of values.',
    examples: [
        'min(2, 3, 4, 1)',
        'min([2, 3, 4, 1])',
        'min([2, 5; 4, 3])',
        'min([2, 5; 4, 3], 1)',
        'min([2, 5; 4, 3], 2)',
        'min(2.7, 7.1, -4.5, 2.0, 4.1)',
        'max(2.7, 7.1, -4.5, 2.0, 4.1)'
    ],
    seealso: [
        'max',
        'mean',
        'median',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fqzWE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "medianDocs", ()=>medianDocs
);
var medianDocs = {
    name: 'median',
    category: 'Statistics',
    syntax: [
        'median(a, b, c, ...)',
        'median(A)'
    ],
    description: 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
    examples: [
        'median(5, 2, 7)',
        'median([3, -1, 5, 7])'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'prod',
        'std',
        'sum',
        'variance',
        'quantileSeq'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"byUeY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "meanDocs", ()=>meanDocs
);
var meanDocs = {
    name: 'mean',
    category: 'Statistics',
    syntax: [
        'mean(a, b, c, ...)',
        'mean(A)',
        'mean(A, dim)'
    ],
    description: 'Compute the arithmetic mean of a list of values.',
    examples: [
        'mean(2, 3, 4, 1)',
        'mean([2, 3, 4, 1])',
        'mean([2, 5; 4, 3])',
        'mean([2, 5; 4, 3], 1)',
        'mean([2, 5; 4, 3], 2)',
        'mean([1.0, 2.7, 3.2, 4.0])'
    ],
    seealso: [
        'max',
        'median',
        'min',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7D1Pj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxDocs", ()=>maxDocs
);
var maxDocs = {
    name: 'max',
    category: 'Statistics',
    syntax: [
        'max(a, b, c, ...)',
        'max(A)',
        'max(A, dim)'
    ],
    description: 'Compute the maximum value of a list of values.',
    examples: [
        'max(2, 3, 4, 1)',
        'max([2, 3, 4, 1])',
        'max([2, 5; 4, 3])',
        'max([2, 5; 4, 3], 1)',
        'max([2, 5; 4, 3], 2)',
        'max(2.7, 7.1, -4.5, 2.0, 4.1)',
        'min(2.7, 7.1, -4.5, 2.0, 4.1)'
    ],
    seealso: [
        'mean',
        'median',
        'min',
        'prod',
        'std',
        'sum',
        'variance'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6fmkZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "madDocs", ()=>madDocs
);
var madDocs = {
    name: 'mad',
    category: 'Statistics',
    syntax: [
        'mad(a, b, c, ...)',
        'mad(A)'
    ],
    description: 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
    examples: [
        'mad(10, 20, 30)',
        'mad([1, 2, 3])'
    ],
    seealso: [
        'mean',
        'median',
        'std',
        'abs'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6fwwl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "erfDocs", ()=>erfDocs
);
var erfDocs = {
    name: 'erf',
    category: 'Special',
    syntax: [
        'erf(x)'
    ],
    description: 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
    examples: [
        'erf(0.2)',
        'erf(-0.5)',
        'erf(4)'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"Tx0JW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setUnionDocs", ()=>setUnionDocs
);
var setUnionDocs = {
    name: 'setUnion',
    category: 'Set',
    syntax: [
        'setUnion(set1, set2)'
    ],
    description: 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setUnion([1, 2, 3, 4], [3, 4, 5, 6])',
        'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
    ],
    seealso: [
        'setIntersect',
        'setDifference'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3A9Sc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setSymDifferenceDocs", ()=>setSymDifferenceDocs
);
var setSymDifferenceDocs = {
    name: 'setSymDifference',
    category: 'Set',
    syntax: [
        'setSymDifference(set1, set2)'
    ],
    description: 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])',
        'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setDifference'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2WVjD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setSizeDocs", ()=>setSizeDocs
);
var setSizeDocs = {
    name: 'setSize',
    category: 'Set',
    syntax: [
        'setSize(set)',
        'setSize(set, unique)'
    ],
    description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
    examples: [
        'setSize([1, 2, 2, 4])',
        'setSize([1, 2, 2, 4], true)'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setDifference'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eWIdN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setPowersetDocs", ()=>setPowersetDocs
);
var setPowersetDocs = {
    name: 'setPowerset',
    category: 'Set',
    syntax: [
        'setPowerset(set)'
    ],
    description: 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
    examples: [
        'setPowerset([1, 2, 3])'
    ],
    seealso: [
        'setCartesian'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7M8Qu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setMultiplicityDocs", ()=>setMultiplicityDocs
);
var setMultiplicityDocs = {
    name: 'setMultiplicity',
    category: 'Set',
    syntax: [
        'setMultiplicity(element, set)'
    ],
    description: 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
    examples: [
        'setMultiplicity(1, [1, 2, 2, 4])',
        'setMultiplicity(2, [1, 2, 2, 4])'
    ],
    seealso: [
        'setDistinct',
        'setSize'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b8q4n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setIsSubsetDocs", ()=>setIsSubsetDocs
);
var setIsSubsetDocs = {
    name: 'setIsSubset',
    category: 'Set',
    syntax: [
        'setIsSubset(set1, set2)'
    ],
    description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setIsSubset([1, 2], [3, 4, 5, 6])',
        'setIsSubset([3, 4], [3, 4, 5, 6])'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setDifference'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8XSWU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setIntersectDocs", ()=>setIntersectDocs
);
var setIntersectDocs = {
    name: 'setIntersect',
    category: 'Set',
    syntax: [
        'setIntersect(set1, set2)'
    ],
    description: 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setIntersect([1, 2, 3, 4], [3, 4, 5, 6])',
        'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
    ],
    seealso: [
        'setUnion',
        'setDifference'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a2391":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setDistinctDocs", ()=>setDistinctDocs
);
var setDistinctDocs = {
    name: 'setDistinct',
    category: 'Set',
    syntax: [
        'setDistinct(set)'
    ],
    description: 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
    examples: [
        'setDistinct([1, 1, 1, 2, 2, 3])'
    ],
    seealso: [
        'setMultiplicity'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hojh3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setDifferenceDocs", ()=>setDifferenceDocs
);
var setDifferenceDocs = {
    name: 'setDifference',
    category: 'Set',
    syntax: [
        'setDifference(set1, set2)'
    ],
    description: 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
    examples: [
        'setDifference([1, 2, 3, 4], [3, 4, 5, 6])',
        'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setSymDifference'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"12c6F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setCartesianDocs", ()=>setCartesianDocs
);
var setCartesianDocs = {
    name: 'setCartesian',
    category: 'Set',
    syntax: [
        'setCartesian(set1, set2)'
    ],
    description: 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.',
    examples: [
        'setCartesian([1, 2], [3, 4])'
    ],
    seealso: [
        'setUnion',
        'setIntersect',
        'setDifference',
        'setPowerset'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dv8mz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unequalDocs", ()=>unequalDocs
);
var unequalDocs = {
    name: 'unequal',
    category: 'Relational',
    syntax: [
        'x != y',
        'unequal(x, y)'
    ],
    description: 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
    examples: [
        '2+2 != 3',
        '2+2 != 4',
        'a = 3.2',
        'b = 6-2.8',
        'a != b',
        '50cm != 0.5m',
        '5 cm != 2 inch'
    ],
    seealso: [
        'equal',
        'smaller',
        'larger',
        'smallerEq',
        'largerEq',
        'compare',
        'deepEqual'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"102LY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "smallerEqDocs", ()=>smallerEqDocs
);
var smallerEqDocs = {
    name: 'smallerEq',
    category: 'Relational',
    syntax: [
        'x <= y',
        'smallerEq(x, y)'
    ],
    description: 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
    examples: [
        '2 <= 1+1',
        '2 < 1+1',
        'a = 3.2',
        'b = 6-2.8',
        '(a <= b)'
    ],
    seealso: [
        'equal',
        'unequal',
        'larger',
        'smaller',
        'largerEq',
        'compare'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"f9qPe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "smallerDocs", ()=>smallerDocs
);
var smallerDocs = {
    name: 'smaller',
    category: 'Relational',
    syntax: [
        'x < y',
        'smaller(x, y)'
    ],
    description: 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
    examples: [
        '2 < 3',
        '5 < 2*2',
        'a = 3.3',
        'b = 6-2.8',
        '(a < b)',
        '5 cm < 2 inch'
    ],
    seealso: [
        'equal',
        'unequal',
        'larger',
        'smallerEq',
        'largerEq',
        'compare'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g7Nbc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "largerEqDocs", ()=>largerEqDocs
);
var largerEqDocs = {
    name: 'largerEq',
    category: 'Relational',
    syntax: [
        'x >= y',
        'largerEq(x, y)'
    ],
    description: 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
    examples: [
        '2 >= 1+1',
        '2 > 1+1',
        'a = 3.2',
        'b = 6-2.8',
        '(a >= b)'
    ],
    seealso: [
        'equal',
        'unequal',
        'smallerEq',
        'smaller',
        'compare'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jBnsb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "largerDocs", ()=>largerDocs
);
var largerDocs = {
    name: 'larger',
    category: 'Relational',
    syntax: [
        'x > y',
        'larger(x, y)'
    ],
    description: 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
    examples: [
        '2 > 3',
        '5 > 2*2',
        'a = 3.3',
        'b = 6-2.8',
        '(a > b)',
        '(b < a)',
        '5 cm > 2 inch'
    ],
    seealso: [
        'equal',
        'unequal',
        'smaller',
        'smallerEq',
        'largerEq',
        'compare'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"89UrI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalTextDocs", ()=>equalTextDocs
);
var equalTextDocs = {
    name: 'equalText',
    category: 'Relational',
    syntax: [
        'equalText(x, y)'
    ],
    description: 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
    examples: [
        'equalText("Hello", "Hello")',
        'equalText("a", "A")',
        'equal("2e3", "2000")',
        'equalText("2e3", "2000")',
        'equalText("B", ["A", "B", "C"])'
    ],
    seealso: [
        'compare',
        'compareNatural',
        'compareText',
        'equal'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g4ZoN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalDocs", ()=>equalDocs
);
var equalDocs = {
    name: 'equal',
    category: 'Relational',
    syntax: [
        'x == y',
        'equal(x, y)'
    ],
    description: 'Check equality of two values. Returns true if the values are equal, and false if not.',
    examples: [
        '2+2 == 3',
        '2+2 == 4',
        'a = 3.2',
        'b = 6-2.8',
        'a == b',
        '50cm == 0.5m'
    ],
    seealso: [
        'unequal',
        'smaller',
        'larger',
        'smallerEq',
        'largerEq',
        'compare',
        'deepEqual',
        'equalText'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"f4Ugs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deepEqualDocs", ()=>deepEqualDocs
);
var deepEqualDocs = {
    name: 'deepEqual',
    category: 'Relational',
    syntax: [
        'deepEqual(x, y)'
    ],
    description: 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
    examples: [
        'deepEqual([1,3,4], [1,3,4])',
        'deepEqual([1,3,4], [1,3])'
    ],
    seealso: [
        'equal',
        'unequal',
        'smaller',
        'larger',
        'smallerEq',
        'largerEq',
        'compare'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2To73":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareTextDocs", ()=>compareTextDocs
);
var compareTextDocs = {
    name: 'compareText',
    category: 'Relational',
    syntax: [
        'compareText(x, y)'
    ],
    description: "Compare two strings lexically. Comparison is case sensitive. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
    examples: [
        'compareText("B", "A")',
        'compareText("A", "B")',
        'compareText("A", "A")',
        'compareText("2", "10")',
        'compare("2", "10")',
        'compare(2, 10)',
        'compareNatural("2", "10")',
        'compareText("B", ["A", "B", "C"])'
    ],
    seealso: [
        'compare',
        'compareNatural'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aqsgv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareNaturalDocs", ()=>compareNaturalDocs
);
var compareNaturalDocs = {
    name: 'compareNatural',
    category: 'Relational',
    syntax: [
        'compareNatural(x, y)'
    ],
    description: "Compare two values of any type in a deterministic, natural way. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
    examples: [
        'compareNatural(2, 3)',
        'compareNatural(3, 2)',
        'compareNatural(2, 2)',
        'compareNatural(5cm, 40mm)',
        'compareNatural("2", "10")',
        'compareNatural(2 + 3i, 2 + 4i)',
        'compareNatural([1, 2, 4], [1, 2, 3])',
        'compareNatural([1, 5], [1, 2, 3])',
        'compareNatural([1, 2], [1, 2])',
        'compareNatural({a: 2}, {a: 4})'
    ],
    seealso: [
        'equal',
        'unequal',
        'smaller',
        'smallerEq',
        'largerEq',
        'compare',
        'compareText'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2RPGx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareDocs", ()=>compareDocs
);
var compareDocs = {
    name: 'compare',
    category: 'Relational',
    syntax: [
        'compare(x, y)'
    ],
    description: "Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",
    examples: [
        'compare(2, 3)',
        'compare(3, 2)',
        'compare(2, 2)',
        'compare(5cm, 40mm)',
        'compare(2, [1, 2, 3])'
    ],
    seealso: [
        'equal',
        'unequal',
        'smaller',
        'smallerEq',
        'largerEq',
        'compareNatural',
        'compareText'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7H4y2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomIntDocs", ()=>randomIntDocs
);
var randomIntDocs = {
    name: 'randomInt',
    category: 'Probability',
    syntax: [
        'randomInt(max)',
        'randomInt(min, max)',
        'randomInt(size)',
        'randomInt(size, max)',
        'randomInt(size, min, max)'
    ],
    description: 'Return a random integer number',
    examples: [
        'randomInt(10, 20)',
        'randomInt([2, 3], 10)'
    ],
    seealso: [
        'pickRandom',
        'random'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9GRld":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomDocs", ()=>randomDocs
);
var randomDocs = {
    name: 'random',
    category: 'Probability',
    syntax: [
        'random()',
        'random(max)',
        'random(min, max)',
        'random(size)',
        'random(size, max)',
        'random(size, min, max)'
    ],
    description: 'Return a random number.',
    examples: [
        'random()',
        'random(10, 20)',
        'random([2, 3])'
    ],
    seealso: [
        'pickRandom',
        'randomInt'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aDnlY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pickRandomDocs", ()=>pickRandomDocs
);
var pickRandomDocs = {
    name: 'pickRandom',
    category: 'Probability',
    syntax: [
        'pickRandom(array)',
        'pickRandom(array, number)',
        'pickRandom(array, weights)',
        'pickRandom(array, number, weights)',
        'pickRandom(array, weights, number)'
    ],
    description: 'Pick a random entry from a given array.',
    examples: [
        'pickRandom(0:10)',
        'pickRandom([1, 3, 1, 6])',
        'pickRandom([1, 3, 1, 6], 2)',
        'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',
        'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',
        'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'
    ],
    seealso: [
        'random',
        'randomInt'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"34hy9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "permutationsDocs", ()=>permutationsDocs
);
var permutationsDocs = {
    name: 'permutations',
    category: 'Probability',
    syntax: [
        'permutations(n)',
        'permutations(n, k)'
    ],
    description: 'Compute the number of permutations of n items taken k at a time',
    examples: [
        'permutations(5)',
        'permutations(5, 3)'
    ],
    seealso: [
        'combinations',
        'combinationsWithRep',
        'factorial'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"56HtV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multinomialDocs", ()=>multinomialDocs
);
var multinomialDocs = {
    name: 'multinomial',
    category: 'Probability',
    syntax: [
        'multinomial(A)'
    ],
    description: 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
    examples: [
        'multinomial([1, 2, 1])'
    ],
    seealso: [
        'combinations',
        'factorial'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iTeDj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "kldivergenceDocs", ()=>kldivergenceDocs
);
var kldivergenceDocs = {
    name: 'kldivergence',
    category: 'Probability',
    syntax: [
        'kldivergence(x, y)'
    ],
    description: 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
    examples: [
        'kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iytHM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gammaDocs", ()=>gammaDocs
);
var gammaDocs = {
    name: 'gamma',
    category: 'Probability',
    syntax: [
        'gamma(n)'
    ],
    description: 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
    examples: [
        'gamma(4)',
        '3!',
        'gamma(1/2)',
        'sqrt(pi)'
    ],
    seealso: [
        'factorial'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"EcXDN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "factorialDocs", ()=>factorialDocs
);
var factorialDocs = {
    name: 'factorial',
    category: 'Probability',
    syntax: [
        'n!',
        'factorial(n)'
    ],
    description: 'Compute the factorial of a value',
    examples: [
        '5!',
        '5 * 4 * 3 * 2 * 1',
        '3!'
    ],
    seealso: [
        'combinations',
        'combinationsWithRep',
        'permutations',
        'gamma'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"buBba":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "combinationsDocs", ()=>combinationsDocs
);
var combinationsDocs = {
    name: 'combinations',
    category: 'Probability',
    syntax: [
        'combinations(n, k)'
    ],
    description: 'Compute the number of combinations of n items taken k at a time',
    examples: [
        'combinations(7, 5)'
    ],
    seealso: [
        'combinationsWithRep',
        'permutations',
        'factorial'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7xBC4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "combinationsWithRepDocs", ()=>combinationsWithRepDocs
);
var combinationsWithRepDocs = {
    name: 'combinationsWithRep',
    category: 'Probability',
    syntax: [
        'combinationsWithRep(n, k)'
    ],
    description: 'Compute the number of combinations of n items taken k at a time with replacements.',
    examples: [
        'combinationsWithRep(7, 5)'
    ],
    seealso: [
        'combinations',
        'permutations',
        'factorial'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7lPVn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zerosDocs", ()=>zerosDocs
);
var zerosDocs = {
    name: 'zeros',
    category: 'Matrix',
    syntax: [
        'zeros(m)',
        'zeros(m, n)',
        'zeros(m, n, p, ...)',
        'zeros([m])',
        'zeros([m, n])',
        'zeros([m, n, p, ...])'
    ],
    description: 'Create a matrix containing zeros.',
    examples: [
        'zeros(3)',
        'zeros(3, 5)',
        'a = [1, 2, 3; 4, 5, 6]',
        'zeros(size(a))'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lpTkR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transposeDocs", ()=>transposeDocs
);
var transposeDocs = {
    name: 'transpose',
    category: 'Matrix',
    syntax: [
        'x\'',
        'transpose(x)'
    ],
    description: 'Transpose a matrix',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'a\'',
        'transpose(a)'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1Kmce":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "traceDocs", ()=>traceDocs
);
var traceDocs = {
    name: 'trace',
    category: 'Matrix',
    syntax: [
        'trace(A)'
    ],
    description: 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
    examples: [
        'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',
        'trace(A)'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"btdQF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subsetDocs", ()=>subsetDocs
);
var subsetDocs = {
    name: 'subset',
    category: 'Matrix',
    syntax: [
        'value(index)',
        'value(index) = replacement',
        'subset(value, [index])',
        'subset(value, [index], replacement)'
    ],
    description: "Get or set a subset of a matrix or string. Indexes are one-based. Both the ranges lower-bound and upper-bound are included.",
    examples: [
        'd = [1, 2; 3, 4]',
        'e = []',
        'e[1, 1:2] = [5, 6]',
        'e[2, :] = [7, 8]',
        'f = d * e',
        'f[2, 1]',
        'f[:, 1]'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1sUy6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squeezeDocs", ()=>squeezeDocs
);
var squeezeDocs = {
    name: 'squeeze',
    category: 'Matrix',
    syntax: [
        'squeeze(x)'
    ],
    description: 'Remove inner and outer singleton dimensions from a matrix.',
    examples: [
        'a = zeros(3,2,1)',
        'size(squeeze(a))',
        'b = zeros(1,1,3)',
        'size(squeeze(b))'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ahP7i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sortDocs", ()=>sortDocs
);
var sortDocs = {
    name: 'sort',
    category: 'Matrix',
    syntax: [
        'sort(x)',
        'sort(x, compare)'
    ],
    description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
    examples: [
        'sort([5, 10, 1])',
        'sort(["C", "B", "A", "D"])',
        'sortByLength(a, b) = size(a)[1] - size(b)[1]',
        'sort(["Langdon", "Tom", "Sara"], sortByLength)',
        'sort(["10", "1", "2"], "natural")'
    ],
    seealso: [
        'map',
        'filter',
        'forEach'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"javgL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sizeDocs", ()=>sizeDocs
);
var sizeDocs = {
    name: 'size',
    category: 'Matrix',
    syntax: [
        'size(x)'
    ],
    description: 'Calculate the size of a matrix.',
    examples: [
        'size(2.3)',
        'size("hello world")',
        'a = [1, 2; 3, 4; 5, 6]',
        'size(a)',
        'size(1:6)'
    ],
    seealso: [
        'concat',
        'count',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4mz8t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diffDocs", ()=>diffDocs
);
var diffDocs = {
    name: 'diff',
    category: 'Matrix',
    syntax: [
        'diff(arr)',
        'diff(arr, dim)'
    ],
    description: [
        'Create a new matrix or array with the difference of the passed matrix or array.',
        'Dim parameter is optional and used to indicant the dimension of the array/matrix to apply the difference',
        'If no dimension parameter is passed it is assumed as dimension 0',
        'Dimension is zero-based in javascript and one-based in the parser',
        'Arrays must be \'rectangular\' meaning arrays like [1, 2]',
        'If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays'
    ],
    examples: [
        'diff([1, 2, 4, 7, 0])',
        'diff([1, 2, 4, 7, 0], 0)',
        'diff(matrix([1, 2, 4, 7, 0]))',
        'diff([[1, 2], [3, 4]])',
        'diff([[1, 2], [3, 4]], 0)',
        'diff([[1, 2], [3, 4]], 1)',
        'diff([[1, 2], [3, 4]], bignumber(1))',
        'diff(matrix([[1, 2], [3, 4]]), 1)',
        'diff([[1, 2], matrix([3, 4])], 1)'
    ],
    seealso: [
        'subtract',
        'partitionSelect'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hTWO4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reshapeDocs", ()=>reshapeDocs
);
var reshapeDocs = {
    name: 'reshape',
    category: 'Matrix',
    syntax: [
        'reshape(x, sizes)'
    ],
    description: 'Reshape a multi dimensional array to fit the specified dimensions.',
    examples: [
        'reshape([1, 2, 3, 4, 5, 6], [2, 3])',
        'reshape([[1, 2], [3, 4]], [1, 4])',
        'reshape([[1, 2], [3, 4]], [4])'
    ],
    seealso: [
        'size',
        'squeeze',
        'resize'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"keyP9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeDocs", ()=>resizeDocs
);
var resizeDocs = {
    name: 'resize',
    category: 'Matrix',
    syntax: [
        'resize(x, size)',
        'resize(x, size, defaultValue)'
    ],
    description: 'Resize a matrix.',
    examples: [
        'resize([1,2,3,4,5], [3])',
        'resize([1,2,3], [5])',
        'resize([1,2,3], [5], -1)',
        'resize(2, [2, 3])',
        'resize("hello", [8], "!")'
    ],
    seealso: [
        'size',
        'subset',
        'squeeze',
        'reshape'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jyswS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rangeDocs", ()=>rangeDocs
);
var rangeDocs = {
    name: 'range',
    category: 'Type',
    syntax: [
        'start:end',
        'start:step:end',
        'range(start, end)',
        'range(start, end, step)',
        'range(string)'
    ],
    description: 'Create a range. Lower bound of the range is included, upper bound is excluded.',
    examples: [
        '1:5',
        '3:-1:-3',
        'range(3, 7)',
        'range(0, 12, 2)',
        'range("4:10")',
        'a = [1, 2, 3, 4; 5, 6, 7, 8]',
        'a[1:2, 1:2]'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gbni8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "partitionSelectDocs", ()=>partitionSelectDocs
);
var partitionSelectDocs = {
    name: 'partitionSelect',
    category: 'Matrix',
    syntax: [
        'partitionSelect(x, k)',
        'partitionSelect(x, k, compare)'
    ],
    description: 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
    examples: [
        'partitionSelect([5, 10, 1], 2)',
        'partitionSelect(["C", "B", "A", "D"], 1)'
    ],
    seealso: [
        'sort'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bLNKY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "onesDocs", ()=>onesDocs
);
var onesDocs = {
    name: 'ones',
    category: 'Matrix',
    syntax: [
        'ones(m)',
        'ones(m, n)',
        'ones(m, n, p, ...)',
        'ones([m])',
        'ones([m, n])',
        'ones([m, n, p, ...])'
    ],
    description: 'Create a matrix containing ones.',
    examples: [
        'ones(3)',
        'ones(3, 5)',
        'ones([2,3]) * 4.5',
        'a = [1, 2, 3; 4, 5, 6]',
        'ones(size(a))'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fHqTI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapDocs", ()=>mapDocs
);
var mapDocs = {
    name: 'map',
    category: 'Matrix',
    syntax: [
        'map(x, callback)'
    ],
    description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
    examples: [
        'map([1, 2, 3], square)'
    ],
    seealso: [
        'filter',
        'forEach'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4SyOo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "kronDocs", ()=>kronDocs
);
var kronDocs = {
    name: 'kron',
    category: 'Matrix',
    syntax: [
        'kron(x, y)'
    ],
    description: 'Calculates the kronecker product of 2 matrices or vectors.',
    examples: [
        'kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])',
        'kron([1,1], [2,3,4])'
    ],
    seealso: [
        'multiply',
        'dot',
        'cross'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8fH7U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invDocs", ()=>invDocs
);
var invDocs = {
    name: 'inv',
    category: 'Matrix',
    syntax: [
        'inv(x)'
    ],
    description: 'Calculate the inverse of a matrix',
    examples: [
        'inv([1, 2; 3, 4])',
        'inv(4)',
        '1 / 4'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hayFj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "forEachDocs", ()=>forEachDocs
);
var forEachDocs = {
    name: 'forEach',
    category: 'Matrix',
    syntax: [
        'forEach(x, callback)'
    ],
    description: 'Iterates over all elements of a matrix/array, and executes the given callback function.',
    examples: [
        'forEach([1, 2, 3], function(val) { console.log(val) })'
    ],
    seealso: [
        'map',
        'sort',
        'filter'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lH0nz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flattenDocs", ()=>flattenDocs
);
var flattenDocs = {
    name: 'flatten',
    category: 'Matrix',
    syntax: [
        'flatten(x)'
    ],
    description: 'Flatten a multi dimensional matrix into a single dimensional matrix.',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'size(a)',
        'b = flatten(a)',
        'size(b)'
    ],
    seealso: [
        'concat',
        'resize',
        'size',
        'squeeze'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jPhcK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterDocs", ()=>filterDocs
);
var filterDocs = {
    name: 'filter',
    category: 'Matrix',
    syntax: [
        'filter(x, test)'
    ],
    description: 'Filter items in a matrix.',
    examples: [
        'isPositive(x) = x > 0',
        'filter([6, -2, -1, 4, 3], isPositive)',
        'filter([6, -2, 0, 1, 0], x != 0)'
    ],
    seealso: [
        'sort',
        'map',
        'forEach'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eMh72":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identityDocs", ()=>identityDocs
);
var identityDocs = {
    name: 'identity',
    category: 'Matrix',
    syntax: [
        'identity(n)',
        'identity(m, n)',
        'identity([m, n])'
    ],
    description: 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
    examples: [
        'identity(3)',
        'identity(3, 5)',
        'a = [1, 2, 3; 4, 5, 6]',
        'identity(size(a))'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gLnfe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMatrixDataTypeDocs", ()=>getMatrixDataTypeDocs
);
var getMatrixDataTypeDocs = {
    name: 'getMatrixDataType',
    category: 'Matrix',
    syntax: [
        'getMatrixDataType(x)'
    ],
    description: "Find the data type of all elements in a matrix or array, for example \"number\" if all items are a number and \"Complex\" if all values are complex numbers. If a matrix contains more than one data type, it will return \"mixed\".",
    examples: [
        'getMatrixDataType([1, 2, 3])',
        'getMatrixDataType([[5 cm], [2 inch]])',
        'getMatrixDataType([1, "text"])',
        'getMatrixDataType([1, bignumber(4)])'
    ],
    seealso: [
        'matrix',
        'sparse',
        'typeOf'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3fmbh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dotDocs", ()=>dotDocs
);
var dotDocs = {
    name: 'dot',
    category: 'Matrix',
    syntax: [
        'dot(A, B)',
        'A * B'
    ],
    description: "Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn",
    examples: [
        'dot([2, 4, 1], [2, 2, 3])',
        '[2, 4, 1] * [2, 2, 3]'
    ],
    seealso: [
        'multiply',
        'cross'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e0bb4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diagDocs", ()=>diagDocs
);
var diagDocs = {
    name: 'diag',
    category: 'Matrix',
    syntax: [
        'diag(x)',
        'diag(x, k)'
    ],
    description: 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
    examples: [
        'diag(1:3)',
        'diag(1:3, 1)',
        'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',
        'diag(a)'
    ],
    seealso: [
        'concat',
        'det',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lgpOa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "detDocs", ()=>detDocs
);
var detDocs = {
    name: 'det',
    category: 'Matrix',
    syntax: [
        'det(x)'
    ],
    description: 'Calculate the determinant of a matrix',
    examples: [
        'det([1, 2; 3, 4])',
        'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'
    ],
    seealso: [
        'concat',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7Viaj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ctransposeDocs", ()=>ctransposeDocs
);
var ctransposeDocs = {
    name: 'ctranspose',
    category: 'Matrix',
    syntax: [
        'x\'',
        'ctranspose(x)'
    ],
    description: 'Complex Conjugate and Transpose a matrix',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'a\'',
        'ctranspose(a)'
    ],
    seealso: [
        'concat',
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2ylh2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "crossDocs", ()=>crossDocs
);
var crossDocs = {
    name: 'cross',
    category: 'Matrix',
    syntax: [
        'cross(A, B)'
    ],
    description: 'Calculate the cross product for two vectors in three dimensional space.',
    examples: [
        'cross([1, 1, 0],  [0, 1, 1])',
        'cross([3, -3, 1], [4, 9, 2])',
        'cross([2, 3, 4],  [5, 6, 7])'
    ],
    seealso: [
        'multiply',
        'dot'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eKVm1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concatDocs", ()=>concatDocs
);
var concatDocs = {
    name: 'concat',
    category: 'Matrix',
    syntax: [
        'concat(A, B, C, ...)',
        'concat(A, B, C, ..., dim)'
    ],
    description: 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
    examples: [
        'A = [1, 2; 5, 6]',
        'B = [3, 4; 7, 8]',
        'concat(A, B)',
        'concat(A, B, 1)',
        'concat(A, B, 2)'
    ],
    seealso: [
        'det',
        'diag',
        'identity',
        'inv',
        'ones',
        'range',
        'size',
        'squeeze',
        'subset',
        'trace',
        'transpose',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gITNW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "countDocs", ()=>countDocs
);
var countDocs = {
    name: 'count',
    category: 'Matrix',
    syntax: [
        'count(x)'
    ],
    description: 'Count the number of elements of a matrix, array or string.',
    examples: [
        'a = [1, 2; 3, 4; 5, 6]',
        'count(a)',
        'size(a)',
        'count("hello world")'
    ],
    seealso: [
        'size'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1qbXL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xorDocs", ()=>xorDocs
);
var xorDocs = {
    name: 'xor',
    category: 'Logical',
    syntax: [
        'x xor y',
        'xor(x, y)'
    ],
    description: 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
    examples: [
        'true xor false',
        'false xor false',
        'true xor true',
        '0 xor 4'
    ],
    seealso: [
        'not',
        'and',
        'or'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bGETN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orDocs", ()=>orDocs
);
var orDocs = {
    name: 'or',
    category: 'Logical',
    syntax: [
        'x or y',
        'or(x, y)'
    ],
    description: 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
    examples: [
        'true or false',
        'false or false',
        '0 or 4'
    ],
    seealso: [
        'not',
        'and',
        'xor'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3xV1b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "notDocs", ()=>notDocs
);
var notDocs = {
    name: 'not',
    category: 'Logical',
    syntax: [
        'not x',
        'not(x)'
    ],
    description: 'Logical not. Flips the boolean value of given argument.',
    examples: [
        'not true',
        'not false',
        'not 2',
        'not 0'
    ],
    seealso: [
        'and',
        'or',
        'xor'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"csrVM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "andDocs", ()=>andDocs
);
var andDocs = {
    name: 'and',
    category: 'Logical',
    syntax: [
        'x and y',
        'and(x, y)'
    ],
    description: 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
    examples: [
        'true and false',
        'true and true',
        '2 and 4'
    ],
    seealso: [
        'not',
        'or',
        'xor'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cXUO5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "intersectDocs", ()=>intersectDocs
);
var intersectDocs = {
    name: 'intersect',
    category: 'Geometry',
    syntax: [
        'intersect(expr1, expr2, expr3, expr4)',
        'intersect(expr1, expr2, expr3)'
    ],
    description: 'Computes the intersection point of lines and/or planes.',
    examples: [
        'intersect([0, 0], [10, 10], [10, 0], [0, 10])',
        'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9DbkL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceDocs", ()=>distanceDocs
);
var distanceDocs = {
    name: 'distance',
    category: 'Geometry',
    syntax: [
        'distance([x1, y1], [x2, y2])',
        'distance([[x1, y1], [x2, y2]])'
    ],
    description: 'Calculates the Euclidean distance between two points.',
    examples: [
        'distance([0,0], [4,4])',
        'distance([[0,0], [4,4]])'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"MHKlI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "helpDocs", ()=>helpDocs
);
var helpDocs = {
    name: 'help',
    category: 'Expression',
    syntax: [
        'help(object)',
        'help(string)'
    ],
    description: 'Display documentation on a function or data type.',
    examples: [
        'help(sqrt)',
        'help("complex")'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"exszP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateDocs", ()=>evaluateDocs
);
var evaluateDocs = {
    name: 'evaluate',
    category: 'Expression',
    syntax: [
        'evaluate(expression)',
        'evaluate([expr1, expr2, expr3, ...])'
    ],
    description: 'Evaluate an expression or an array with expressions.',
    examples: [
        'evaluate("2 + 3")',
        'evaluate("sqrt(" + 4 + ")")'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"djjBi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "imDocs", ()=>imDocs
);
var imDocs = {
    name: 'im',
    category: 'Complex',
    syntax: [
        'im(x)'
    ],
    description: 'Get the imaginary part of a complex number.',
    examples: [
        'im(2 + 3i)',
        're(2 + 3i)',
        'im(-5.2i)',
        'im(2.4)'
    ],
    seealso: [
        're',
        'conj',
        'abs',
        'arg'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e1JYn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reDocs", ()=>reDocs
);
var reDocs = {
    name: 're',
    category: 'Complex',
    syntax: [
        're(x)'
    ],
    description: 'Get the real part of a complex number.',
    examples: [
        're(2 + 3i)',
        'im(2 + 3i)',
        're(-5.2i)',
        're(2.4)'
    ],
    seealso: [
        'im',
        'conj',
        'abs',
        'arg'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fbapv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conjDocs", ()=>conjDocs
);
var conjDocs = {
    name: 'conj',
    category: 'Complex',
    syntax: [
        'conj(x)'
    ],
    description: 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
    examples: [
        'conj(2 + 3i)',
        'conj(2 - 3i)',
        'conj(-5.2i)'
    ],
    seealso: [
        're',
        'im',
        'abs',
        'arg'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hLDWM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "argDocs", ()=>argDocs
);
var argDocs = {
    name: 'arg',
    category: 'Complex',
    syntax: [
        'arg(x)'
    ],
    description: 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
    examples: [
        'arg(2 + 2i)',
        'atan2(3, 2)',
        'arg(2 + 3i)'
    ],
    seealso: [
        're',
        'im',
        'conj',
        'abs'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1djRE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typedDocs", ()=>typedDocs
);
var typedDocs = {
    name: 'typed',
    category: 'Core',
    syntax: [
        'typed(signatures)',
        'typed(name, signatures)'
    ],
    description: 'Create a typed function.',
    examples: [
        'double = typed({ "number, number": f(x)=x+x })',
        'double(2)',
        'double("hello")'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cjRP0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "importDocs", ()=>importDocs
);
var importDocs = {
    name: 'import',
    category: 'Core',
    syntax: [
        'import(functions)',
        'import(functions, options)'
    ],
    description: 'Import functions or constants from an object.',
    examples: [
        'import({myFn: f(x)=x^2, myConstant: 32 })',
        'myFn(2)',
        'myConstant'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"f8Ud6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "configDocs", ()=>configDocs
);
var configDocs = {
    name: 'config',
    category: 'Core',
    syntax: [
        'config()',
        'config(options)'
    ],
    description: 'Get configuration or change configuration.',
    examples: [
        'config()',
        '1/3 + 1/4',
        'config({number: "Fraction"})',
        '1/3 + 1/4'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fw4Vu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stirlingS2Docs", ()=>stirlingS2Docs
);
var stirlingS2Docs = {
    name: 'stirlingS2',
    category: 'Combinatorics',
    syntax: [
        'stirlingS2(n, k)'
    ],
    description: 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
    examples: [
        'stirlingS2(5, 3)'
    ],
    seealso: [
        'bellNumbers'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hEFpg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compositionDocs", ()=>compositionDocs
);
var compositionDocs = {
    name: 'composition',
    category: 'Combinatorics',
    syntax: [
        'composition(n, k)'
    ],
    description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
    examples: [
        'composition(5, 3)'
    ],
    seealso: [
        'combinations'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jzlPE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "catalanDocs", ()=>catalanDocs
);
var catalanDocs = {
    name: 'catalan',
    category: 'Combinatorics',
    syntax: [
        'catalan(n)'
    ],
    description: 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
    examples: [
        'catalan(3)',
        'catalan(8)'
    ],
    seealso: [
        'bellNumbers'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3kddY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bellNumbersDocs", ()=>bellNumbersDocs
);
var bellNumbersDocs = {
    name: 'bellNumbers',
    category: 'Combinatorics',
    syntax: [
        'bellNumbers(n)'
    ],
    description: 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
    examples: [
        'bellNumbers(3)',
        'bellNumbers(8)'
    ],
    seealso: [
        'stirlingS2'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"38INz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rightLogShiftDocs", ()=>rightLogShiftDocs
);
var rightLogShiftDocs = {
    name: 'rightLogShift',
    category: 'Bitwise',
    syntax: [
        'x >>> y',
        'rightLogShift(x, y)'
    ],
    description: 'Bitwise right logical shift of a value x by y number of bits.',
    examples: [
        '8 >>> 1',
        '4 << 1',
        '-12 >>> 2'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitOr',
        'bitXor',
        'leftShift',
        'rightArithShift'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"86H8T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rightArithShiftDocs", ()=>rightArithShiftDocs
);
var rightArithShiftDocs = {
    name: 'rightArithShift',
    category: 'Bitwise',
    syntax: [
        'x >> y',
        'rightArithShift(x, y)'
    ],
    description: 'Bitwise right arithmetic shift of a value x by y number of bits.',
    examples: [
        '8 >> 1',
        '4 << 1',
        '-12 >> 2'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitOr',
        'bitXor',
        'leftShift',
        'rightLogShift'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8aW0O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "leftShiftDocs", ()=>leftShiftDocs
);
var leftShiftDocs = {
    name: 'leftShift',
    category: 'Bitwise',
    syntax: [
        'x << y',
        'leftShift(x, y)'
    ],
    description: 'Bitwise left logical shift of a value x by y number of bits.',
    examples: [
        '4 << 1',
        '8 >> 1'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitOr',
        'bitXor',
        'rightArithShift',
        'rightLogShift'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4xleK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitXorDocs", ()=>bitXorDocs
);
var bitXorDocs = {
    name: 'bitXor',
    category: 'Bitwise',
    syntax: [
        'bitXor(x, y)'
    ],
    description: 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
    examples: [
        'bitOr(1, 2)',
        'bitXor([2, 3, 4], 4)'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitOr',
        'leftShift',
        'rightArithShift',
        'rightLogShift'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5kiaL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitOrDocs", ()=>bitOrDocs
);
var bitOrDocs = {
    name: 'bitOr',
    category: 'Bitwise',
    syntax: [
        'x | y',
        'bitOr(x, y)'
    ],
    description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
    examples: [
        '5 | 3',
        'bitOr([1, 2, 3], 4)'
    ],
    seealso: [
        'bitAnd',
        'bitNot',
        'bitXor',
        'leftShift',
        'rightArithShift',
        'rightLogShift'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3Fq9Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitNotDocs", ()=>bitNotDocs
);
var bitNotDocs = {
    name: 'bitNot',
    category: 'Bitwise',
    syntax: [
        '~x',
        'bitNot(x)'
    ],
    description: 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
    examples: [
        '~1',
        '~2',
        'bitNot([2, -3, 4])'
    ],
    seealso: [
        'bitAnd',
        'bitOr',
        'bitXor',
        'leftShift',
        'rightArithShift',
        'rightLogShift'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"f0Gui":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitAndDocs", ()=>bitAndDocs
);
var bitAndDocs = {
    name: 'bitAnd',
    category: 'Bitwise',
    syntax: [
        'x & y',
        'bitAnd(x, y)'
    ],
    description: 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
    examples: [
        '5 & 3',
        'bitAnd(53, 131)',
        '[1, 12, 31] & 42'
    ],
    seealso: [
        'bitNot',
        'bitOr',
        'bitXor',
        'leftShift',
        'rightArithShift',
        'rightLogShift'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jWytx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xgcdDocs", ()=>xgcdDocs
);
var xgcdDocs = {
    name: 'xgcd',
    category: 'Arithmetic',
    syntax: [
        'xgcd(a, b)'
    ],
    description: 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
    examples: [
        'xgcd(8, 12)',
        'gcd(8, 12)',
        'xgcd(36163, 21199)'
    ],
    seealso: [
        'gcd',
        'lcm'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"f6Uk0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unaryPlusDocs", ()=>unaryPlusDocs
);
var unaryPlusDocs = {
    name: 'unaryPlus',
    category: 'Operators',
    syntax: [
        '+x',
        'unaryPlus(x)'
    ],
    description: 'Converts booleans and strings to numbers.',
    examples: [
        '+true',
        '+"2"'
    ],
    seealso: [
        'add',
        'subtract',
        'unaryMinus'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fekFb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unaryMinusDocs", ()=>unaryMinusDocs
);
var unaryMinusDocs = {
    name: 'unaryMinus',
    category: 'Operators',
    syntax: [
        '-x',
        'unaryMinus(x)'
    ],
    description: 'Inverse the sign of a value. Converts booleans and strings to numbers.',
    examples: [
        '-4.5',
        '-(-5.6)',
        '-"22"'
    ],
    seealso: [
        'add',
        'subtract',
        'unaryPlus'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iw4c2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squareDocs", ()=>squareDocs
);
var squareDocs = {
    name: 'square',
    category: 'Arithmetic',
    syntax: [
        'square(x)'
    ],
    description: 'Compute the square of a value. The square of x is x * x.',
    examples: [
        'square(3)',
        'sqrt(9)',
        '3^2',
        '3 * 3'
    ],
    seealso: [
        'multiply',
        'pow',
        'sqrt',
        'cube'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"qwckr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sqrtmDocs", ()=>sqrtmDocs
);
var sqrtmDocs = {
    name: 'sqrtm',
    category: 'Arithmetic',
    syntax: [
        'sqrtm(x)'
    ],
    description: 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
    examples: [
        'sqrtm([[1, 2], [3, 4]])'
    ],
    seealso: [
        'sqrt',
        'abs',
        'square',
        'multiply'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cgRTM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sqrtDocs", ()=>sqrtDocs
);
var sqrtDocs = {
    name: 'sqrt',
    category: 'Arithmetic',
    syntax: [
        'sqrt(x)'
    ],
    description: 'Compute the square root value. If x = y * y, then y is the square root of x.',
    examples: [
        'sqrt(25)',
        '5 * 5',
        'sqrt(-1)'
    ],
    seealso: [
        'square',
        'sqrtm',
        'multiply',
        'nthRoot',
        'nthRoots',
        'pow'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4cXUQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signDocs", ()=>signDocs
);
var signDocs = {
    name: 'sign',
    category: 'Arithmetic',
    syntax: [
        'sign(x)'
    ],
    description: 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
    examples: [
        'sign(3.5)',
        'sign(-4.2)',
        'sign(0)'
    ],
    seealso: [
        'abs'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"abM5q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "roundDocs", ()=>roundDocs
);
var roundDocs = {
    name: 'round',
    category: 'Arithmetic',
    syntax: [
        'round(x)',
        'round(x, n)'
    ],
    description: 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
    examples: [
        'round(3.2)',
        'round(3.8)',
        'round(-4.2)',
        'round(-4.8)',
        'round(pi, 3)',
        'round(123.45678, 2)'
    ],
    seealso: [
        'ceil',
        'floor',
        'fix'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kqxCO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "powDocs", ()=>powDocs
);
var powDocs = {
    name: 'pow',
    category: 'Operators',
    syntax: [
        'x ^ y',
        'pow(x, y)'
    ],
    description: 'Calculates the power of x to y, x^y.',
    examples: [
        '2^3',
        '2*2*2',
        '1 + e ^ (pi * i)'
    ],
    seealso: [
        'multiply',
        'nthRoot',
        'nthRoots',
        'sqrt'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7HRSv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nthRootsDocs", ()=>nthRootsDocs
);
var nthRootsDocs = {
    name: 'nthRoots',
    category: 'Arithmetic',
    syntax: [
        'nthRoots(A)',
        'nthRoots(A, root)'
    ],
    description: "Calculate the nth roots of a value. An nth root of a positive real number A, is a positive real solution of the equation \"x^root = A\". This function returns an array of complex values.",
    examples: [
        'nthRoots(1)',
        'nthRoots(1, 3)'
    ],
    seealso: [
        'sqrt',
        'pow',
        'nthRoot'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bOACR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nthRootDocs", ()=>nthRootDocs
);
var nthRootDocs = {
    name: 'nthRoot',
    category: 'Arithmetic',
    syntax: [
        'nthRoot(a)',
        'nthRoot(a, root)'
    ],
    description: "Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation \"x^root = A\".",
    examples: [
        '4 ^ 3',
        'nthRoot(64, 3)',
        'nthRoot(9, 2)',
        'sqrt(9)'
    ],
    seealso: [
        'nthRoots',
        'pow',
        'sqrt'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9p5aV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normDocs", ()=>normDocs
);
var normDocs = {
    name: 'norm',
    category: 'Arithmetic',
    syntax: [
        'norm(x)',
        'norm(x, p)'
    ],
    description: 'Calculate the norm of a number, vector or matrix.',
    examples: [
        'abs(-3.5)',
        'norm(-3.5)',
        'norm(3 - 4i)',
        'norm([1, 2, -3], Infinity)',
        'norm([1, 2, -3], -Infinity)',
        'norm([3, 4], 2)',
        'norm([[1, 2], [3, 4]], 1)',
        'norm([[1, 2], [3, 4]], "inf")',
        'norm([[1, 2], [3, 4]], "fro")'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fzIvd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multiplyDocs", ()=>multiplyDocs
);
var multiplyDocs = {
    name: 'multiply',
    category: 'Operators',
    syntax: [
        'x * y',
        'multiply(x, y)'
    ],
    description: 'multiply two values.',
    examples: [
        'a = 2.1 * 3.4',
        'a / 3.4',
        '2 * 3 + 4',
        '2 * (3 + 4)',
        '3 * 2.1 km'
    ],
    seealso: [
        'divide'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eMtPA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modDocs", ()=>modDocs
);
var modDocs = {
    name: 'mod',
    category: 'Operators',
    syntax: [
        'x % y',
        'x mod y',
        'mod(x, y)'
    ],
    description: 'Calculates the modulus, the remainder of an integer division.',
    examples: [
        '7 % 3',
        '11 % 2',
        '10 mod 4',
        'isOdd(x) = x % 2',
        'isOdd(2)',
        'isOdd(3)'
    ],
    seealso: [
        'divide'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ijDF0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log10Docs", ()=>log10Docs
);
var log10Docs = {
    name: 'log10',
    category: 'Arithmetic',
    syntax: [
        'log10(x)'
    ],
    description: 'Compute the 10-base logarithm of a value.',
    examples: [
        'log10(0.00001)',
        'log10(10000)',
        '10 ^ 4',
        'log(10000) / log(10)',
        'log(10000, 10)'
    ],
    seealso: [
        'exp',
        'log'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4jEbn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log1pDocs", ()=>log1pDocs
);
var log1pDocs = {
    name: 'log1p',
    category: 'Arithmetic',
    syntax: [
        'log1p(x)',
        'log1p(x, base)'
    ],
    description: 'Calculate the logarithm of a `value+1`',
    examples: [
        'log1p(2.5)',
        'exp(log1p(1.4))',
        'pow(10, 4)',
        'log1p(9999, 10)',
        'log1p(9999) / log(10)'
    ],
    seealso: [
        'exp',
        'log',
        'log2',
        'log10'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dh9Nn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log2Docs", ()=>log2Docs
);
var log2Docs = {
    name: 'log2',
    category: 'Arithmetic',
    syntax: [
        'log2(x)'
    ],
    description: 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
    examples: [
        'log2(0.03125)',
        'log2(16)',
        'log2(16) / log2(2)',
        'pow(2, 4)'
    ],
    seealso: [
        'exp',
        'log1p',
        'log',
        'log10'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1PDdv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logDocs", ()=>logDocs
);
var logDocs = {
    name: 'log',
    category: 'Arithmetic',
    syntax: [
        'log(x)',
        'log(x, base)'
    ],
    description: 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
    examples: [
        'log(3.5)',
        'a = log(2.4)',
        'exp(a)',
        '10 ^ 4',
        'log(10000, 10)',
        'log(10000) / log(10)',
        'b = log(1024, 2)',
        '2 ^ b'
    ],
    seealso: [
        'exp',
        'log1p',
        'log2',
        'log10'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kYl5m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lcmDocs", ()=>lcmDocs
);
var lcmDocs = {
    name: 'lcm',
    category: 'Arithmetic',
    syntax: [
        'lcm(x, y)'
    ],
    description: 'Compute the least common multiple.',
    examples: [
        'lcm(4, 6)',
        'lcm(6, 21)',
        'lcm(6, 21, 5)'
    ],
    seealso: [
        'gcd'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5a6tl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hypotDocs", ()=>hypotDocs
);
var hypotDocs = {
    name: 'hypot',
    category: 'Arithmetic',
    syntax: [
        'hypot(a, b, c, ...)',
        'hypot([a, b, c, ...])'
    ],
    description: 'Calculate the hypotenusa of a list with values. ',
    examples: [
        'hypot(3, 4)',
        'sqrt(3^2 + 4^2)',
        'hypot(-2)',
        'hypot([3, 4, 5])'
    ],
    seealso: [
        'abs',
        'norm'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cxgGj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gcdDocs", ()=>gcdDocs
);
var gcdDocs = {
    name: 'gcd',
    category: 'Arithmetic',
    syntax: [
        'gcd(a, b)',
        'gcd(a, b, c, ...)'
    ],
    description: 'Compute the greatest common divisor.',
    examples: [
        'gcd(8, 12)',
        'gcd(-4, 6)',
        'gcd(25, 15, -10)'
    ],
    seealso: [
        'lcm',
        'xgcd'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iigU8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floorDocs", ()=>floorDocs
);
var floorDocs = {
    name: 'floor',
    category: 'Arithmetic',
    syntax: [
        'floor(x)'
    ],
    description: 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
    examples: [
        'floor(3.2)',
        'floor(3.8)',
        'floor(-4.2)'
    ],
    seealso: [
        'ceil',
        'fix',
        'round'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"l7w55":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fixDocs", ()=>fixDocs
);
var fixDocs = {
    name: 'fix',
    category: 'Arithmetic',
    syntax: [
        'fix(x)'
    ],
    description: 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
    examples: [
        'fix(3.2)',
        'fix(3.8)',
        'fix(-4.2)',
        'fix(-4.8)'
    ],
    seealso: [
        'ceil',
        'floor',
        'round'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jSfDP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expm1Docs", ()=>expm1Docs
);
var expm1Docs = {
    name: 'expm1',
    category: 'Arithmetic',
    syntax: [
        'expm1(x)'
    ],
    description: 'Calculate the value of subtracting 1 from the exponential value.',
    examples: [
        'expm1(2)',
        'pow(e, 2) - 1',
        'log(expm1(2) + 1)'
    ],
    seealso: [
        'exp',
        'pow',
        'log'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lAYNh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expmDocs", ()=>expmDocs
);
var expmDocs = {
    name: 'expm',
    category: 'Arithmetic',
    syntax: [
        'exp(x)'
    ],
    description: "Compute the matrix exponential, expm(A) = e^A. The matrix must be square. Not to be confused with exp(a), which performs element-wise exponentiation.",
    examples: [
        'expm([[0,2],[0,0]])'
    ],
    seealso: [
        'exp'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fIaj0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eigsDocs", ()=>eigsDocs
);
var eigsDocs = {
    name: 'eigs',
    category: 'Matrix',
    syntax: [
        'eigs(x)'
    ],
    description: 'Calculate the eigenvalues and eigenvectors of a real symmetric matrix',
    examples: [
        'eigs([[5, 2.3], [2.3, 1]])'
    ],
    seealso: [
        'inv'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bK9Df":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expDocs", ()=>expDocs
);
var expDocs = {
    name: 'exp',
    category: 'Arithmetic',
    syntax: [
        'exp(x)'
    ],
    description: 'Calculate the exponent of a value.',
    examples: [
        'exp(1.3)',
        'e ^ 1.3',
        'log(exp(1.3))',
        'x = 2.4',
        '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'
    ],
    seealso: [
        'expm',
        'expm1',
        'pow',
        'log'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kRiH7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dotMultiplyDocs", ()=>dotMultiplyDocs
);
var dotMultiplyDocs = {
    name: 'dotMultiply',
    category: 'Operators',
    syntax: [
        'x .* y',
        'dotMultiply(x, y)'
    ],
    description: 'Multiply two values element wise.',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'b = [2, 1, 1; 3, 2, 5]',
        'a .* b'
    ],
    seealso: [
        'multiply',
        'divide',
        'dotDivide'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eVOwq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dotDivideDocs", ()=>dotDivideDocs
);
var dotDivideDocs = {
    name: 'dotDivide',
    category: 'Operators',
    syntax: [
        'x ./ y',
        'dotDivide(x, y)'
    ],
    description: 'Divide two values element wise.',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'b = [2, 1, 1; 3, 2, 5]',
        'a ./ b'
    ],
    seealso: [
        'multiply',
        'dotMultiply',
        'divide'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5u9w7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divideDocs", ()=>divideDocs
);
var divideDocs = {
    name: 'divide',
    category: 'Operators',
    syntax: [
        'x / y',
        'divide(x, y)'
    ],
    description: 'Divide two values.',
    examples: [
        'a = 2 / 3',
        'a * 3',
        '4.5 / 2',
        '3 + 4 / 2',
        '(3 + 4) / 2',
        '18 km / 4.5'
    ],
    seealso: [
        'multiply'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3fB31":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubeDocs", ()=>cubeDocs
);
var cubeDocs = {
    name: 'cube',
    category: 'Arithmetic',
    syntax: [
        'cube(x)'
    ],
    description: 'Compute the cube of a value. The cube of x is x * x * x.',
    examples: [
        'cube(2)',
        '2^3',
        '2 * 2 * 2'
    ],
    seealso: [
        'multiply',
        'square',
        'pow'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fdxNY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ceilDocs", ()=>ceilDocs
);
var ceilDocs = {
    name: 'ceil',
    category: 'Arithmetic',
    syntax: [
        'ceil(x)'
    ],
    description: 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
    examples: [
        'ceil(3.2)',
        'ceil(3.8)',
        'ceil(-4.2)'
    ],
    seealso: [
        'floor',
        'fix',
        'round'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lgHaJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cbrtDocs", ()=>cbrtDocs
);
var cbrtDocs = {
    name: 'cbrt',
    category: 'Arithmetic',
    syntax: [
        'cbrt(x)',
        'cbrt(x, allRoots)'
    ],
    description: 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
    examples: [
        'cbrt(64)',
        'cube(4)',
        'cbrt(-8)',
        'cbrt(2 + 3i)',
        'cbrt(8i)',
        'cbrt(8i, true)',
        'cbrt(27 m^3)'
    ],
    seealso: [
        'square',
        'sqrt',
        'cube',
        'multiply'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"I571J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addDocs", ()=>addDocs
);
var addDocs = {
    name: 'add',
    category: 'Operators',
    syntax: [
        'x + y',
        'add(x, y)'
    ],
    description: 'Add two values.',
    examples: [
        'a = 2.1 + 3.6',
        'a - 3.6',
        '3 + 2i',
        '3 cm + 2 inch',
        '"2.3" + "4"'
    ],
    seealso: [
        'subtract'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3sFxq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "absDocs", ()=>absDocs
);
var absDocs = {
    name: 'abs',
    category: 'Arithmetic',
    syntax: [
        'abs(x)'
    ],
    description: 'Compute the absolute value.',
    examples: [
        'abs(3.5)',
        'abs(-4.2)'
    ],
    seealso: [
        'sign'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"j0lfW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "qrDocs", ()=>qrDocs
);
var qrDocs = {
    name: 'qr',
    category: 'Algebra',
    syntax: [
        'qr(A)'
    ],
    description: 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
    examples: [
        'qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'
    ],
    seealso: [
        'lup',
        'slu',
        'matrix'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"blWo9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usolveDocs", ()=>usolveDocs
);
var usolveDocs = {
    name: 'usolve',
    category: 'Algebra',
    syntax: [
        'x=usolve(U, b)'
    ],
    description: 'Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
    examples: [
        'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'
    ],
    seealso: [
        'usolveAll',
        'lup',
        'lusolve',
        'lsolve',
        'matrix',
        'sparse'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hygiO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usolveAllDocs", ()=>usolveAllDocs
);
var usolveAllDocs = {
    name: 'usolveAll',
    category: 'Algebra',
    syntax: [
        'x=usolve(U, b)'
    ],
    description: 'Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
    examples: [
        'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'
    ],
    seealso: [
        'usolve',
        'lup',
        'lusolve',
        'lsolve',
        'matrix',
        'sparse'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bJevH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sluDocs", ()=>sluDocs
);
var sluDocs = {
    name: 'slu',
    category: 'Algebra',
    syntax: [
        'slu(A, order, threshold)'
    ],
    description: 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
    examples: [
        'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'
    ],
    seealso: [
        'lusolve',
        'lsolve',
        'usolve',
        'matrix',
        'sparse',
        'lup',
        'qr'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"98RRk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rationalizeDocs", ()=>rationalizeDocs
);
var rationalizeDocs = {
    name: 'rationalize',
    category: 'Algebra',
    syntax: [
        'rationalize(expr)',
        'rationalize(expr, scope)',
        'rationalize(expr, scope, detailed)'
    ],
    description: 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
    examples: [
        'rationalize("2x/y - y/(x+1)")',
        'rationalize("2x/y - y/(x+1)", true)'
    ],
    seealso: [
        'simplify'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"78qAH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "simplifyDocs", ()=>simplifyDocs
);
var simplifyDocs = {
    name: 'simplify',
    category: 'Algebra',
    syntax: [
        'simplify(expr)',
        'simplify(expr, rules)'
    ],
    description: 'Simplify an expression tree.',
    examples: [
        'simplify("3 + 2 / 4")',
        'simplify("2x + x")',
        'f = parse("x * (x + 2 + x)")',
        'simplified = simplify(f)',
        'simplified.evaluate({x: 2})'
    ],
    seealso: [
        'derivative',
        'parse',
        'evaluate'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6IVhL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lupDocs", ()=>lupDocs
);
var lupDocs = {
    name: 'lup',
    category: 'Algebra',
    syntax: [
        'lup(m)'
    ],
    description: 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
    examples: [
        'lup([[2, 1], [1, 4]])',
        'lup(matrix([[2, 1], [1, 4]]))',
        'lup(sparse([[2, 1], [1, 4]]))'
    ],
    seealso: [
        'lusolve',
        'lsolve',
        'usolve',
        'matrix',
        'sparse',
        'slu',
        'qr'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4ja5e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lsolveDocs", ()=>lsolveDocs
);
var lsolveDocs = {
    name: 'lsolve',
    category: 'Algebra',
    syntax: [
        'x=lsolve(L, b)'
    ],
    description: 'Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
    examples: [
        'a = [-2, 3; 2, 1]',
        'b = [11, 9]',
        'x = lsolve(a, b)'
    ],
    seealso: [
        'lsolveAll',
        'lup',
        'lusolve',
        'usolve',
        'matrix',
        'sparse'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6dSmj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lsolveAllDocs", ()=>lsolveAllDocs
);
var lsolveAllDocs = {
    name: 'lsolveAll',
    category: 'Algebra',
    syntax: [
        'x=lsolveAll(L, b)'
    ],
    description: 'Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
    examples: [
        'a = [-2, 3; 2, 1]',
        'b = [11, 9]',
        'x = lsolve(a, b)'
    ],
    seealso: [
        'lsolve',
        'lup',
        'lusolve',
        'usolve',
        'matrix',
        'sparse'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4gWao":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "derivativeDocs", ()=>derivativeDocs
);
var derivativeDocs = {
    name: 'derivative',
    category: 'Algebra',
    syntax: [
        'derivative(expr, variable)',
        'derivative(expr, variable, {simplify: boolean})'
    ],
    description: 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
    examples: [
        'derivative("2x^3", "x")',
        'derivative("2x^3", "x", {simplify: false})',
        'derivative("2x^2 + 3x + 4", "x")',
        'derivative("sin(2x)", "x")',
        'f = parse("x^2 + x")',
        'x = parse("x")',
        'df = derivative(f, x)',
        'df.evaluate({x: 3})'
    ],
    seealso: [
        'simplify',
        'parse',
        'evaluate'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3nTYR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versionDocs", ()=>versionDocs
);
var versionDocs = {
    name: 'version',
    category: 'Constants',
    syntax: [
        'version'
    ],
    description: 'A string with the version number of math.js',
    examples: [
        'version'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8vrcy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "trueDocs", ()=>trueDocs
);
var trueDocs = {
    name: 'true',
    category: 'Constants',
    syntax: [
        'true'
    ],
    description: 'Boolean value true',
    examples: [
        'true'
    ],
    seealso: [
        'false'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"33ZTw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tauDocs", ()=>tauDocs
);
var tauDocs = {
    name: 'tau',
    category: 'Constants',
    syntax: [
        'tau'
    ],
    description: 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
    examples: [
        'tau',
        '2 * pi'
    ],
    seealso: [
        'pi'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4YWOH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SQRT2Docs", ()=>SQRT2Docs
);
var SQRT2Docs = {
    name: 'SQRT2',
    category: 'Constants',
    syntax: [
        'SQRT2'
    ],
    description: 'Returns the square root of 2, approximately equal to 1.414',
    examples: [
        'SQRT2',
        'sqrt(2)'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3kkzg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SQRT12Docs", ()=>SQRT12Docs
);
var SQRT12Docs = {
    name: 'SQRT1_2',
    category: 'Constants',
    syntax: [
        'SQRT1_2'
    ],
    description: 'Returns the square root of 1/2, approximately equal to 0.707',
    examples: [
        'SQRT1_2',
        'sqrt(1/2)'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6sctx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "phiDocs", ()=>phiDocs
);
var phiDocs = {
    name: 'phi',
    category: 'Constants',
    syntax: [
        'phi'
    ],
    description: 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
    examples: [
        'phi'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8KHx2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "piDocs", ()=>piDocs
);
var piDocs = {
    name: 'pi',
    category: 'Constants',
    syntax: [
        'pi'
    ],
    description: 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
    examples: [
        'pi',
        'sin(pi/2)'
    ],
    seealso: [
        'tau'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1s4nn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nullDocs", ()=>nullDocs
);
var nullDocs = {
    name: 'null',
    category: 'Constants',
    syntax: [
        'null'
    ],
    description: 'Value null',
    examples: [
        'null'
    ],
    seealso: [
        'true',
        'false'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"khm5a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NaNDocs", ()=>NaNDocs
);
var NaNDocs = {
    name: 'NaN',
    category: 'Constants',
    syntax: [
        'NaN'
    ],
    description: 'Not a number',
    examples: [
        'NaN',
        '0 / 0'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"i0dmv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LOG10EDocs", ()=>LOG10EDocs
);
var LOG10EDocs = {
    name: 'LOG10E',
    category: 'Constants',
    syntax: [
        'LOG10E'
    ],
    description: 'Returns the base-10 logarithm of E, approximately equal to 0.434',
    examples: [
        'LOG10E',
        'log(e, 10)'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lIomS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LOG2EDocs", ()=>LOG2EDocs
);
var LOG2EDocs = {
    name: 'LOG2E',
    category: 'Constants',
    syntax: [
        'LOG2E'
    ],
    description: 'Returns the base-2 logarithm of E, approximately equal to 1.442',
    examples: [
        'LOG2E',
        'log(e, 2)'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lKNEK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LN10Docs", ()=>LN10Docs
);
var LN10Docs = {
    name: 'LN10',
    category: 'Constants',
    syntax: [
        'LN10'
    ],
    description: 'Returns the natural logarithm of 10, approximately equal to 2.302',
    examples: [
        'LN10',
        'log(10)'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2OjTt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LN2Docs", ()=>LN2Docs
);
var LN2Docs = {
    name: 'LN2',
    category: 'Constants',
    syntax: [
        'LN2'
    ],
    description: 'Returns the natural logarithm of 2, approximately equal to 0.693',
    examples: [
        'LN2',
        'log(2)'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gRn1W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InfinityDocs", ()=>InfinityDocs
);
var InfinityDocs = {
    name: 'Infinity',
    category: 'Constants',
    syntax: [
        'Infinity'
    ],
    description: 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
    examples: [
        'Infinity',
        '1 / 0'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fUA4v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iDocs", ()=>iDocs
);
var iDocs = {
    name: 'i',
    category: 'Constants',
    syntax: [
        'i'
    ],
    description: 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
    examples: [
        'i',
        'i * i',
        'sqrt(-1)'
    ],
    seealso: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9ZWLE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "falseDocs", ()=>falseDocs
);
var falseDocs = {
    name: 'false',
    category: 'Constants',
    syntax: [
        'false'
    ],
    description: 'Boolean value false',
    examples: [
        'false'
    ],
    seealso: [
        'true'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"knlft":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eDocs", ()=>eDocs
);
var eDocs = {
    name: 'e',
    category: 'Constants',
    syntax: [
        'e'
    ],
    description: 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
    examples: [
        'e',
        'e ^ 2',
        'exp(2)',
        'log(e)'
    ],
    seealso: [
        'exp'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9Dou0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unitDocs", ()=>unitDocs
);
var unitDocs = {
    name: 'unit',
    category: 'Construction',
    syntax: [
        'value unit',
        'unit(value, unit)',
        'unit(string)'
    ],
    description: 'Create a unit.',
    examples: [
        '5.5 mm',
        '3 inch',
        'unit(7.1, "kilogram")',
        'unit("23 deg")'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'matrix',
        'number',
        'string'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8gPZG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringDocs", ()=>stringDocs
);
var stringDocs = {
    name: 'string',
    category: 'Construction',
    syntax: [
        '"text"',
        'string(x)'
    ],
    description: 'Create a string or convert a value to a string',
    examples: [
        '"Hello World!"',
        'string(4.2)',
        'string(3 + 2i)'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'matrix',
        'number',
        'unit'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"KvuV4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitUnitDocs", ()=>splitUnitDocs
);
var splitUnitDocs = {
    name: 'splitUnit',
    category: 'Construction',
    syntax: [
        'splitUnit(unit: Unit, parts: Unit[])'
    ],
    description: 'Split a unit in an array of units whose sum is equal to the original unit.',
    examples: [
        'splitUnit(1 m, ["feet", "inch"])'
    ],
    seealso: [
        'unit',
        'createUnit'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9RrhR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseDocs", ()=>sparseDocs
);
var sparseDocs = {
    name: 'sparse',
    category: 'Construction',
    syntax: [
        'sparse()',
        'sparse([a1, b1, ...; a1, b2, ...])',
        'sparse([a1, b1, ...; a1, b2, ...], "number")'
    ],
    description: 'Create a sparse matrix.',
    examples: [
        'sparse()',
        'sparse([3, 4; 5, 6])',
        'sparse([3, 0; 5, 0], "number")'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'number',
        'string',
        'unit',
        'matrix'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fXj9N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numberDocs", ()=>numberDocs
);
var numberDocs = {
    name: 'number',
    category: 'Construction',
    syntax: [
        'x',
        'number(x)',
        'number(unit, valuelessUnit)'
    ],
    description: 'Create a number or convert a string or boolean into a number.',
    examples: [
        '2',
        '2e3',
        '4.05',
        'number(2)',
        'number("7.2")',
        'number(true)',
        'number([true, false, true, true])',
        'number(unit("52cm"), "m")'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'fraction',
        'index',
        'matrix',
        'string',
        'unit'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ei7q9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matrixDocs", ()=>matrixDocs
);
var matrixDocs = {
    name: 'matrix',
    category: 'Construction',
    syntax: [
        '[]',
        '[a1, b1, ...; a2, b2, ...]',
        'matrix()',
        'matrix("dense")',
        'matrix([...])'
    ],
    description: 'Create a matrix.',
    examples: [
        '[]',
        '[1, 2, 3]',
        '[1, 2, 3; 4, 5, 6]',
        'matrix()',
        'matrix([3, 4])',
        'matrix([3, 4; 5, 6], "sparse")',
        'matrix([3, 4; 5, 6], "sparse", "number")'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'number',
        'string',
        'unit',
        'sparse'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"izZst":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matrixFromFunctionDocs", ()=>matrixFromFunctionDocs
);
var matrixFromFunctionDocs = {
    name: 'matrixFromFunction',
    category: 'Matrix',
    syntax: [
        'math.matrixFromFunction(size, fn)',
        'math.matrixFromFunction(size, fn, format)',
        'math.matrixFromFunction(size, fn, format, datatype)',
        'math.matrixFromFunction(size, format, fn)',
        'math.matrixFromFunction(size, format, datatype, fn)'
    ],
    description: 'Create a matrix by evaluating a generating function at each index.',
    examples: [
        'f(I) = I[1] - I[2]',
        'matrixFromFunction([3,3], f)',
        'g(I) = I[1] - I[2] == 1 ? 4 : 0',
        'matrixFromFunction([100, 100], "sparse", g)',
        'matrixFromFunction([5], random)'
    ],
    seealso: [
        'matrix',
        'matrixFromRows',
        'matrixFromColumns',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ifvgF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matrixFromRowsDocs", ()=>matrixFromRowsDocs
);
var matrixFromRowsDocs = {
    name: 'matrixFromRows',
    category: 'Matrix',
    syntax: [
        'math.matrixFromRows(...arr)',
        'math.matrixFromRows(row1, row2)',
        'math.matrixFromRows(row1, row2, row3)'
    ],
    description: 'Create a dense matrix from vectors as individual rows.',
    examples: [
        'matrixFromRows([1, 2, 3], [[4],[5],[6]])'
    ],
    seealso: [
        'matrix',
        'matrixFromColumns',
        'matrixFromFunction',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4Rl0m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matrixFromColumnsDocs", ()=>matrixFromColumnsDocs
);
var matrixFromColumnsDocs = {
    name: 'matrixFromColumns',
    category: 'Matrix',
    syntax: [
        'math.matrixFromColumns(...arr)',
        'math.matrixFromColumns(row1, row2)',
        'math.matrixFromColumns(row1, row2, row3)'
    ],
    description: 'Create a dense matrix from vectors as individual columns.',
    examples: [
        'matrixFromColumns([1, 2, 3], [[4],[5],[6]])'
    ],
    seealso: [
        'matrix',
        'matrixFromRows',
        'matrixFromFunction',
        'zeros'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bSeV9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "indexDocs", ()=>indexDocs
);
var indexDocs = {
    name: 'index',
    category: 'Construction',
    syntax: [
        '[start]',
        '[start:end]',
        '[start:step:end]',
        '[start1, start 2, ...]',
        '[start1:end1, start2:end2, ...]',
        '[start1:step1:end1, start2:step2:end2, ...]'
    ],
    description: 'Create an index to get or replace a subset of a matrix',
    examples: [
        '[]',
        '[1, 2, 3]',
        'A = [1, 2, 3; 4, 5, 6]',
        'A[1, :]',
        'A[1, 2] = 50',
        'A[0:2, 0:2] = ones(2, 2)'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'matrix,',
        'number',
        'range',
        'string',
        'unit'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fQhz3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fractionDocs", ()=>fractionDocs
);
var fractionDocs = {
    name: 'fraction',
    category: 'Construction',
    syntax: [
        'fraction(num)',
        'fraction(num,den)'
    ],
    description: 'Create a fraction from a number or from a numerator and denominator.',
    examples: [
        'fraction(0.125)',
        'fraction(1, 3) + fraction(2, 5)'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'complex',
        'index',
        'matrix',
        'string',
        'unit'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kHCp8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnitDocs", ()=>createUnitDocs
);
var createUnitDocs = {
    name: 'createUnit',
    category: 'Construction',
    syntax: [
        'createUnit(definitions)',
        'createUnit(name, definition)'
    ],
    description: 'Create a user-defined unit and register it with the Unit type.',
    examples: [
        'createUnit("foo")',
        'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})',
        'createUnit("mph", "1 mile/hour")'
    ],
    seealso: [
        'unit',
        'splitUnit'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8vn1f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "complexDocs", ()=>complexDocs
);
var complexDocs = {
    name: 'complex',
    category: 'Construction',
    syntax: [
        'complex()',
        'complex(re, im)',
        'complex(string)'
    ],
    description: 'Create a complex number.',
    examples: [
        'complex()',
        'complex(2, 3)',
        'complex("7 - 2i")'
    ],
    seealso: [
        'bignumber',
        'boolean',
        'index',
        'matrix',
        'number',
        'string',
        'unit'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iwfbG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "booleanDocs", ()=>booleanDocs
);
var booleanDocs = {
    name: 'boolean',
    category: 'Construction',
    syntax: [
        'x',
        'boolean(x)'
    ],
    description: 'Convert a string or number into a boolean.',
    examples: [
        'boolean(0)',
        'boolean(1)',
        'boolean(3)',
        'boolean("true")',
        'boolean("false")',
        'boolean([1, 0, 1, 1])'
    ],
    seealso: [
        'bignumber',
        'complex',
        'index',
        'matrix',
        'number',
        'string',
        'unit'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7NKq8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dotPowDocs", ()=>dotPowDocs
);
var dotPowDocs = {
    name: 'dotPow',
    category: 'Operators',
    syntax: [
        'x .^ y',
        'dotPow(x, y)'
    ],
    description: 'Calculates the power of x to y element wise.',
    examples: [
        'a = [1, 2, 3; 4, 5, 6]',
        'a .^ 2'
    ],
    seealso: [
        'pow'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gmjWx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lusolveDocs", ()=>lusolveDocs
);
var lusolveDocs = {
    name: 'lusolve',
    category: 'Algebra',
    syntax: [
        'x=lusolve(A, b)',
        'x=lusolve(lu, b)'
    ],
    description: 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
    examples: [
        'a = [-2, 3; 2, 1]',
        'b = [11, 9]',
        'x = lusolve(a, b)'
    ],
    seealso: [
        'lup',
        'slu',
        'lsolve',
        'usolve',
        'matrix',
        'sparse'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2W76k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subtractDocs", ()=>subtractDocs
);
var subtractDocs = {
    name: 'subtract',
    category: 'Operators',
    syntax: [
        'x - y',
        'subtract(x, y)'
    ],
    description: 'subtract two values.',
    examples: [
        'a = 5.3 - 2',
        'a + 2',
        '2/3 - 1/6',
        '2 * 3 - 3',
        '2.1 km - 500m'
    ],
    seealso: [
        'add'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fqigD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "varianceDocs", ()=>varianceDocs
);
var varianceDocs = {
    name: 'variance',
    category: 'Statistics',
    syntax: [
        'variance(a, b, c, ...)',
        'variance(A)',
        'variance(A, normalization)'
    ],
    description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
    examples: [
        'variance(2, 4, 6)',
        'variance([2, 4, 6, 8])',
        'variance([2, 4, 6, 8], "uncorrected")',
        'variance([2, 4, 6, 8], "biased")',
        'variance([1, 2, 3; 4, 5, 6])'
    ],
    seealso: [
        'max',
        'mean',
        'min',
        'median',
        'min',
        'prod',
        'std',
        'sum'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jNTgU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sinDocs", ()=>sinDocs
);
var sinDocs = {
    name: 'sin',
    category: 'Trigonometry',
    syntax: [
        'sin(x)'
    ],
    description: 'Compute the sine of x in radians.',
    examples: [
        'sin(2)',
        'sin(pi / 4) ^ 2',
        'sin(90 deg)',
        'sin(30 deg)',
        'sin(0.2)^2 + cos(0.2)^2'
    ],
    seealso: [
        'asin',
        'cos',
        'tan'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kGEyF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numericDocs", ()=>numericDocs
);
var numericDocs = {
    name: 'numeric',
    category: 'Utils',
    syntax: [
        'numeric(x)'
    ],
    description: 'Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.',
    examples: [
        'numeric("4")',
        'numeric("4", "number")',
        'numeric("4", "BigNumber")',
        'numeric("4", "Fraction)',
        'numeric(4, "Fraction")',
        'numeric(fraction(2, 5), "number)'
    ],
    seealso: [
        'number',
        'fraction',
        'bignumber',
        'string',
        'format'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7QXwt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "columnDocs", ()=>columnDocs
);
var columnDocs = {
    name: 'column',
    category: 'Matrix',
    syntax: [
        'column(x, index)'
    ],
    description: 'Return a column from a matrix or array.',
    examples: [
        'A = [[1, 2], [3, 4]]',
        'column(A, 1)',
        'column(A, 2)'
    ],
    seealso: [
        'row',
        'matrixFromColumns'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k2Oy0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rowDocs", ()=>rowDocs
);
var rowDocs = {
    name: 'row',
    category: 'Matrix',
    syntax: [
        'row(x, index)'
    ],
    description: 'Return a row from a matrix or array.',
    examples: [
        'A = [[1, 2], [3, 4]]',
        'row(A, 1)',
        'row(A, 2)'
    ],
    seealso: [
        'column',
        'matrixFromRows'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4SlD9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotationMatrixDocs", ()=>rotationMatrixDocs
);
var rotationMatrixDocs = {
    name: 'rotationMatrix',
    category: 'Matrix',
    syntax: [
        'rotationMatrix(theta)',
        'rotationMatrix(theta, v)',
        'rotationMatrix(theta, v, format)'
    ],
    description: "Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",
    examples: [
        'rotationMatrix(pi / 2)',
        'rotationMatrix(unit("45deg"), [0, 0, 1])',
        'rotationMatrix(1, matrix([0, 0, 1]), "sparse")'
    ],
    seealso: [
        'cos',
        'sin'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1U5QW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotateDocs", ()=>rotateDocs
);
var rotateDocs = {
    name: 'rotate',
    category: 'Matrix',
    syntax: [
        'rotate(w, theta)',
        'rotate(w, theta, v)'
    ],
    description: "Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",
    examples: [
        'rotate([1, 0], math.pi / 2)',
        'rotate(matrix([1, 0]), unit("35deg"))',
        'rotate([1, 0, 0], unit("90deg"), [0, 0, 1])',
        'rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'
    ],
    seealso: [
        'matrix',
        'rotationMatrix'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hoA3d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createChain", ()=>createChain
);
var _factoryJs = require("../../../utils/factory.js");
var name = 'chain';
var dependencies = [
    'typed',
    'Chain'
];
var createChain = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Chain  } = _ref;
    /**
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing `chain.done()`, which returns
   * the final value.
   *
   * The chain has a number of special functions:
   *
   * - `done()`     Finalize the chain and return the chain's value.
   * - `valueOf()`  The same as `done()`
   * - `toString()` Executes `math.format()` onto the chain's value, returning
   *                a string representation of the value.
   *
   * Syntax:
   *
   *    math.chain(value)
   *
   * Examples:
   *
   *     math.chain(3)
   *         .add(4)
   *         .subtract(2)
   *         .done()     // 5
   *
   *     math.chain( [[1, 2], [3, 4]] )
   *         .subset(math.index(0, 0), 8)
   *         .multiply(3)
   *         .done()     // [[24, 6], [9, 12]]
   *
   * @param {*} [value]   A value of any type on which to start a chained operation.
   * @return {math.Chain} The created chain
   */ return typed(name, {
        '': function _() {
            return new Chain();
        },
        any: function any(value) {
            return new Chain(value);
        }
    });
});

},{"../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b9l67":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDet", ()=>createDet
);
var _isJs = require("../../utils/is.js");
var _objectJs = require("../../utils/object.js");
var _stringJs = require("../../utils/string.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'det';
var dependencies = [
    'typed',
    'matrix',
    'subtract',
    'multiply',
    'unaryMinus',
    'lup'
];
var createDet = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix: matrix1 , subtract , multiply , unaryMinus , lup  } = _ref;
    /**
   * Calculate the determinant of a matrix
   * @param {Array[]} matrix  A square, two dimensional matrix
   * @param {number} rows     Number of rows of the matrix (zero-based)
   * @param {number} cols     Number of columns of the matrix (zero-based)
   * @returns {number} det
   * @private
   */ function _det(matrix, rows, cols) {
        if (rows === 1) {
            // this is a 1 x 1 matrix
            return _objectJs.clone(matrix[0][0]);
        } else if (rows === 2) {
            // this is a 2 x 2 matrix
            // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
            return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
        } else {
            // Compute the LU decomposition
            var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)
            var det = decomp.U[0][0];
            for(var _i = 1; _i < rows; _i++){
                det = multiply(det, decomp.U[_i][_i]);
            } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.
            // This can be determined by counting the cycles. This is roughly a linear time algorithm.
            var evenCycles = 0;
            var i = 0;
            var visited = [];
            while(true){
                while(visited[i]){
                    i++;
                }
                if (i >= rows) break;
                var j = i;
                var cycleLen = 0;
                while(!visited[decomp.p[j]]){
                    visited[decomp.p[j]] = true;
                    j = decomp.p[j];
                    cycleLen++;
                }
                if (cycleLen % 2 === 0) {
                    evenCycles++;
                }
            }
            return evenCycles % 2 === 0 ? det : unaryMinus(det);
        }
    }
    /**
   * Calculate the determinant of a matrix.
   *
   * Syntax:
   *
   *    math.det(x)
   *
   * Examples:
   *
   *    math.det([[1, 2], [3, 4]]) // returns -2
   *
   *    const A = [
   *      [-2, 2, 3],
   *      [-1, 1, 3],
   *      [2, 0, -1]
   *    ]
   *    math.det(A) // returns 6
   *
   * See also:
   *
   *    inv
   *
   * @param {Array | Matrix} x  A matrix
   * @return {number} The determinant of `x`
   */ return typed(name, {
        any: function any(x) {
            return _objectJs.clone(x);
        },
        'Array | Matrix': function det(x) {
            var size;
            if (_isJs.isMatrix(x)) size = x.size();
            else if (Array.isArray(x)) {
                x = matrix1(x);
                size = x.size();
            } else // a scalar
            size = [];
            switch(size.length){
                case 0:
                    // scalar
                    return _objectJs.clone(x);
                case 1:
                    // vector
                    if (size[0] === 1) return _objectJs.clone(x.valueOf()[0]);
                    else throw new RangeError("Matrix must be square (size: " + _stringJs.format(size) + ')');
                case 2:
                    // two dimensional array
                    var rows = size[0];
                    var cols = size[1];
                    if (rows === cols) return _det(x.clone().valueOf(), rows, cols);
                    else throw new RangeError("Matrix must be square (size: " + _stringJs.format(size) + ')');
                default:
                    // multi dimensional array
                    throw new RangeError("Matrix must be two dimensional (size: " + _stringJs.format(size) + ')');
            }
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/object.js":"eRHhH","../../utils/string.js":"0PPSB","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cpReH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createInv", ()=>createInv
);
var _isJs = require("../../utils/is.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var _stringJs = require("../../utils/string.js");
var name = 'inv';
var dependencies = [
    'typed',
    'matrix',
    'divideScalar',
    'addScalar',
    'multiply',
    'unaryMinus',
    'det',
    'identity',
    'abs'
];
var createInv = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , divideScalar , addScalar , multiply , unaryMinus , det , identity , abs  } = _ref;
    /**
   * Calculate the inverse of a square matrix
   * @param {Array[]} mat     A square matrix
   * @param {number} rows     Number of rows
   * @param {number} cols     Number of columns, must equal rows
   * @return {Array[]} inv    Inverse matrix
   * @private
   */ function _inv(mat, rows, cols) {
        var r, s, f, value, temp;
        if (rows === 1) {
            // this is a 1 x 1 matrix
            value = mat[0][0];
            if (value === 0) {
                throw Error('Cannot calculate inverse, determinant is zero');
            }
            return [
                [
                    divideScalar(1, value)
                ]
            ];
        } else if (rows === 2) {
            // this is a 2 x 2 matrix
            var d = det(mat);
            if (d === 0) {
                throw Error('Cannot calculate inverse, determinant is zero');
            }
            return [
                [
                    divideScalar(mat[1][1], d),
                    divideScalar(unaryMinus(mat[0][1]), d)
                ],
                [
                    divideScalar(unaryMinus(mat[1][0]), d),
                    divideScalar(mat[0][0], d)
                ]
            ];
        } else {
            // this is a matrix of 3 x 3 or larger
            // calculate inverse using gauss-jordan elimination
            //      https://en.wikipedia.org/wiki/Gaussian_elimination
            //      http://mathworld.wolfram.com/MatrixInverse.html
            //      http://math.uww.edu/~mcfarlat/inverse.htm
            // make a copy of the matrix (only the arrays, not of the elements)
            var A = mat.concat();
            for(r = 0; r < rows; r++){
                A[r] = A[r].concat();
            } // create an identity matrix which in the end will contain the
            // matrix inverse
            var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions
            for(var c = 0; c < cols; c++){
                // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
                var ABig = abs(A[c][c]);
                var rBig = c;
                r = c + 1;
                while(r < rows){
                    if (abs(A[r][c]) > ABig) {
                        ABig = abs(A[r][c]);
                        rBig = r;
                    }
                    r++;
                }
                if (ABig === 0) {
                    throw Error('Cannot calculate inverse, determinant is zero');
                }
                r = rBig;
                if (r !== c) {
                    temp = A[c];
                    A[c] = A[r];
                    A[r] = temp;
                    temp = B[c];
                    B[c] = B[r];
                    B[r] = temp;
                } // eliminate non-zero values on the other rows at column c
                var Ac = A[c];
                var Bc = B[c];
                for(r = 0; r < rows; r++){
                    var Ar = A[r];
                    var Br = B[r];
                    if (r !== c) {
                        // eliminate value at column c and row r
                        if (Ar[c] !== 0) {
                            f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
                            // at column c
                            for(s = c; s < cols; s++){
                                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
                            }
                            for(s = 0; s < cols; s++){
                                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
                            }
                        }
                    } else {
                        // normalize value at Acc to 1,
                        // divide each value on row r with the value at Acc
                        f = Ac[c];
                        for(s = c; s < cols; s++){
                            Ar[s] = divideScalar(Ar[s], f);
                        }
                        for(s = 0; s < cols; s++){
                            Br[s] = divideScalar(Br[s], f);
                        }
                    }
                }
            }
            return B;
        }
    }
    /**
   * Calculate the inverse of a square matrix.
   *
   * Syntax:
   *
   *     math.inv(x)
   *
   * Examples:
   *
   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
   *     math.inv(4)                 // returns 0.25
   *     1 / 4                       // returns 0.25
   *
   * See also:
   *
   *     det, transpose
   *
   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
   * @return {number | Complex | Array | Matrix} The inverse of `x`.
   */ return typed(name, {
        'Array | Matrix': function ArrayMatrix(x) {
            var size = _isJs.isMatrix(x) ? x.size() : _arrayJs.arraySize(x);
            switch(size.length){
                case 1:
                    // vector
                    if (size[0] === 1) {
                        if (_isJs.isMatrix(x)) return matrix([
                            divideScalar(1, x.valueOf()[0])
                        ]);
                        else return [
                            divideScalar(1, x[0])
                        ];
                    } else throw new RangeError("Matrix must be square (size: " + _stringJs.format(size) + ')');
                case 2:
                    var rows = size[0];
                    var cols = size[1];
                    if (rows === cols) {
                        if (_isJs.isMatrix(x)) return matrix(_inv(x.valueOf(), rows, cols), x.storage());
                        else // return an Array
                        return _inv(x, rows, cols);
                    } else throw new RangeError("Matrix must be square (size: " + _stringJs.format(size) + ')');
                default:
                    // multi dimensional array
                    throw new RangeError("Matrix must be two dimensional (size: " + _stringJs.format(size) + ')');
            }
        },
        any: function any(x) {
            // scalar
            return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","../../utils/string.js":"0PPSB","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hPYiN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createEigs", ()=>createEigs
);
var _factoryJs = require("../../utils/factory.js");
var _stringJs = require("../../utils/string.js");
var _complexEigsJs = require("./eigs/complexEigs.js");
var _realSymetricJs = require("./eigs/realSymetric.js");
var _isJs = require("../../utils/is.js");
var name = 'eigs'; // The absolute state of math.js's dependency system:
var dependencies = [
    'config',
    'typed',
    'matrix',
    'addScalar',
    'equal',
    'subtract',
    'abs',
    'atan',
    'cos',
    'sin',
    'multiplyScalar',
    'divideScalar',
    'inv',
    'bignumber',
    'multiply',
    'add',
    'larger',
    'column',
    'flatten',
    'number',
    'complex',
    'sqrt',
    'diag',
    'qr',
    'usolve',
    'usolveAll',
    'im',
    're',
    'smaller',
    'matrixFromColumns',
    'dot'
];
var createEigs = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { config , typed , matrix , addScalar , subtract , equal , abs , atan , cos , sin , multiplyScalar , divideScalar , inv , bignumber , multiply , add , larger , column , flatten , number , complex , sqrt , diag , qr , usolve , usolveAll , im , re , smaller , matrixFromColumns , dot  } = _ref;
    var doRealSymetric = _realSymetricJs.createRealSymmetric({
        config,
        addScalar,
        subtract,
        column,
        flatten,
        equal,
        abs,
        atan,
        cos,
        sin,
        multiplyScalar,
        inv,
        bignumber,
        complex,
        multiply,
        add
    });
    var doComplexEigs = _complexEigsJs.createComplexEigs({
        config,
        addScalar,
        subtract,
        multiply,
        multiplyScalar,
        flatten,
        divideScalar,
        sqrt,
        abs,
        bignumber,
        diag,
        qr,
        inv,
        usolve,
        usolveAll,
        equal,
        complex,
        larger,
        smaller,
        matrixFromColumns,
        dot
    });
    function computeValuesAndVectors(mat, prec) {
        if (prec === undefined) {
            prec = config.epsilon;
        }
        var size = mat.size();
        if (size.length !== 2 || size[0] !== size[1]) {
            throw new RangeError('Matrix must be square (size: ' + _stringJs.format(size) + ')');
        }
        var arr = mat.toArray();
        var N = size[0];
        if (isReal(arr, N, prec)) {
            coerceReal(arr, N);
            if (isSymmetric(arr, N, prec)) {
                var _type = coerceTypes(mat, arr, N);
                return doRealSymetric(arr, N, prec, _type);
            }
        }
        var type = coerceTypes(mat, arr, N);
        return doComplexEigs(arr, N, prec, type);
    }
    /** @return {boolean} */ function isSymmetric(arr, N, prec) {
        for(var i = 0; i < N; i++){
            for(var j = i; j < N; j++){
                // TODO proper comparison of bignum and frac
                if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {
                    return false;
                }
            }
        }
        return true;
    }
    /** @return {boolean} */ function isReal(arr, N, prec) {
        for(var i = 0; i < N; i++){
            for(var j = 0; j < N; j++){
                // TODO proper comparison of bignum and frac
                if (larger(bignumber(abs(im(arr[i][j]))), prec)) {
                    return false;
                }
            }
        }
        return true;
    }
    function coerceReal(arr, N) {
        for(var i = 0; i < N; i++){
            for(var j = 0; j < N; j++){
                arr[i][j] = re(arr[i][j]);
            }
        }
    }
    /** @return {'number' | 'BigNumber' | 'Complex'} */ function coerceTypes(mat, arr, N) {
        /** @type {string} */ var type = mat.datatype();
        if (type === 'number' || type === 'BigNumber' || type === 'Complex') {
            return type;
        }
        var hasNumber = false;
        var hasBig = false;
        var hasComplex = false;
        for(var i = 0; i < N; i++){
            for(var j = 0; j < N; j++){
                var el = arr[i][j];
                if (_isJs.isNumber(el) || _isJs.isFraction(el)) {
                    hasNumber = true;
                } else if (_isJs.isBigNumber(el)) {
                    hasBig = true;
                } else if (_isJs.isComplex(el)) {
                    hasComplex = true;
                } else {
                    throw TypeError('Unsupported type in Matrix: ' + _isJs.typeOf(el));
                }
            }
        }
        if (hasBig && hasComplex) {
            console.warn('Complex BigNumbers not supported, this operation will lose precission.');
        }
        if (hasComplex) {
            for(var _i = 0; _i < N; _i++){
                for(var _j = 0; _j < N; _j++){
                    arr[_i][_j] = complex(arr[_i][_j]);
                }
            }
            return 'Complex';
        }
        if (hasBig) {
            for(var _i2 = 0; _i2 < N; _i2++){
                for(var _j2 = 0; _j2 < N; _j2++){
                    arr[_i2][_j2] = bignumber(arr[_i2][_j2]);
                }
            }
            return 'BigNumber';
        }
        if (hasNumber) {
            for(var _i3 = 0; _i3 < N; _i3++){
                for(var _j3 = 0; _j3 < N; _j3++){
                    arr[_i3][_j3] = number(arr[_i3][_j3]);
                }
            }
            return 'number';
        } else {
            throw TypeError('Matrix contains unsupported types only.');
        }
    }
    /**
   * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.
   * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –
   * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).
   * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information
   * in `err.values` and `err.vectors`.
   *
   * Syntax:
   *
   *     math.eigs(x, [prec])
   *
   * Examples:
   *
   *     const { eigs, multiply, column, transpose } = math
   *     const H = [[5, 2.3], [2.3, 1]]
   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}
   *     const E = ans.values
   *     const U = ans.vectors
   *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))
   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H
   *     E[0] == UTxHxU[0][0]  // returns true
   *
   * See also:
   *
   *     inv
   *
   * @param {Array | Matrix} x  Matrix to be diagonalized
   *
   * @param {number | BigNumber} [prec] Precision, default value: 1e-15
   * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.
   *
   */ return typed('eigs', {
        Array: function Array(x) {
            var mat = matrix(x);
            return computeValuesAndVectors(mat);
        },
        'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {
            var mat = matrix(x);
            return computeValuesAndVectors(mat, prec);
        },
        Matrix: function Matrix(mat) {
            var { values , vectors  } = computeValuesAndVectors(mat);
            return {
                values: matrix(values),
                vectors: matrix(vectors)
            };
        },
        'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {
            var { values , vectors  } = computeValuesAndVectors(mat, prec);
            return {
                values: matrix(values),
                vectors: matrix(vectors)
            };
        }
    });
});

},{"../../utils/factory.js":"26foW","../../utils/string.js":"0PPSB","./eigs/complexEigs.js":"8q9Ii","./eigs/realSymetric.js":"021L1","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8q9Ii":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createComplexEigs", ()=>createComplexEigs
);
var _objectJs = require("../../../utils/object.js");
function createComplexEigs(_ref) {
    var { addScalar , subtract , flatten , multiply , multiplyScalar , divideScalar , sqrt , abs , bignumber , diag , inv , qr , usolve , usolveAll , equal , complex , larger , smaller , matrixFromColumns , dot  } = _ref;
    /**
   * @param {number[][]} arr the matrix to find eigenvalues of
   * @param {number} N size of the matrix
   * @param {number|BigNumber} prec precision, anything lower will be considered zero
   * @param {'number'|'BigNumber'|'Complex'} type
   * @param {boolean} findVectors should we find eigenvectors?
   *
   * @returns {{ values: number[], vectors: number[][] }}
   */ function complexEigs(arr, N, prec, type, findVectors) {
        if (findVectors === undefined) findVectors = true;
         // TODO check if any row/col are zero except the diagonal
        // make sure corresponding rows and columns have similar magnitude
        // important because of numerical stability
        var R = balance(arr, N, prec, type, findVectors); // R is the row transformation matrix
        // A' = R A R⁻¹, A is the original matrix
        // (if findVectors is false, R is undefined)
        // TODO if magnitudes of elements vary over many orders,
        // move greatest elements to the top left corner
        // using similarity transformations, reduce the matrix
        // to Hessenberg form (upper triangular plus one subdiagonal row)
        // updates the transformation matrix R with new row operationsq
        reduceToHessenberg(arr, N, prec, type, findVectors, R); // find eigenvalues
        var { values , C  } = iterateUntilTriangular(arr, N, prec, type, findVectors); // values is the list of eigenvalues, C is the column
        // transformation matrix that transforms the hessenberg
        // matrix to upper triangular
        // compose transformations A → hess. and hess. → triang.
        C = multiply(inv(R), C);
        var vectors;
        if (findVectors) {
            vectors = findEigenvectors(arr, N, C, values, prec, type);
            vectors = matrixFromColumns(...vectors);
        }
        return {
            values,
            vectors
        };
    }
    /**
   * @param {number[][]} arr
   * @param {number} N
   * @param {number} prec
   * @param {'number'|'BigNumber'|'Complex'} type
   * @returns {number[][]}
   */ function balance(arr, N, prec, type, findVectors) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
        var one = big ? bignumber(1) : cplx ? complex(1) : 1; // base of the floating-point arithmetic
        var radix = big ? bignumber(10) : 2;
        var radixSq = multiplyScalar(radix, radix); // the diagonal transformation matrix R
        var Rdiag;
        if (findVectors) Rdiag = Array(N).fill(one);
         // this isn't the only time we loop thru the matrix...
        var last = false;
        while(!last){
            // ...haha I'm joking! unless...
            last = true;
            for(var i = 0; i < N; i++){
                // compute the taxicab norm of i-th column and row
                // TODO optimize for complex numbers
                var colNorm = zero;
                var rowNorm = zero;
                for(var j = 0; j < N; j++){
                    if (i === j) continue;
                    var c = abs(arr[i][j]);
                    colNorm = addScalar(colNorm, c);
                    rowNorm = addScalar(rowNorm, c);
                }
                if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {
                    // find integer power closest to balancing the matrix
                    // (we want to scale only by integer powers of radix,
                    // so that we don't lose any precision due to round-off)
                    var f = one;
                    var _c = colNorm;
                    var rowDivRadix = divideScalar(rowNorm, radix);
                    var rowMulRadix = multiplyScalar(rowNorm, radix);
                    while(smaller(_c, rowDivRadix)){
                        _c = multiplyScalar(_c, radixSq);
                        f = multiplyScalar(f, radix);
                    }
                    while(larger(_c, rowMulRadix)){
                        _c = divideScalar(_c, radixSq);
                        f = divideScalar(f, radix);
                    } // check whether balancing is needed
                    // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)
                    var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95)); // apply balancing similarity transformation
                    if (condition) {
                        // we should loop once again to check whether
                        // another rebalancing is needed
                        last = false;
                        var g = divideScalar(1, f);
                        for(var _j = 0; _j < N; _j++){
                            if (i === _j) continue;
                            arr[i][_j] = multiplyScalar(arr[i][_j], f);
                            arr[_j][i] = multiplyScalar(arr[_j][i], g);
                        } // keep track of transformations
                        if (findVectors) Rdiag[i] = multiplyScalar(Rdiag[i], f);
                    }
                }
            }
        } // return the diagonal row transformation matrix
        return diag(Rdiag);
    }
    /**
   * @param {number[][]} arr
   * @param {number} N
   * @param {number} prec
   * @param {'number'|'BigNumber'|'Complex'} type
   * @param {boolean} findVectors
   * @param {number[][]} R the row transformation matrix that will be modified
   */ function reduceToHessenberg(arr, N, prec, type, findVectors, R) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
        if (big) prec = bignumber(prec);
        for(var i = 0; i < N - 2; i++){
            // Find the largest subdiag element in the i-th col
            var maxIndex = 0;
            var max = zero;
            for(var j = i + 1; j < N; j++){
                var el = arr[j][i];
                if (smaller(abs(max), abs(el))) {
                    max = el;
                    maxIndex = j;
                }
            } // This col is pivoted, no need to do anything
            if (smaller(abs(max), prec)) continue;
            if (maxIndex !== i + 1) {
                // Interchange maxIndex-th and (i+1)-th row
                var tmp1 = arr[maxIndex];
                arr[maxIndex] = arr[i + 1];
                arr[i + 1] = tmp1; // Interchange maxIndex-th and (i+1)-th column
                for(var _j2 = 0; _j2 < N; _j2++){
                    var tmp2 = arr[_j2][maxIndex];
                    arr[_j2][maxIndex] = arr[_j2][i + 1];
                    arr[_j2][i + 1] = tmp2;
                } // keep track of transformations
                if (findVectors) {
                    var tmp3 = R[maxIndex];
                    R[maxIndex] = R[i + 1];
                    R[i + 1] = tmp3;
                }
            } // Reduce following rows and columns
            for(var _j3 = i + 2; _j3 < N; _j3++){
                var n = divideScalar(arr[_j3][i], max);
                if (n === 0) continue;
                 // from j-th row subtract n-times (i+1)th row
                for(var k = 0; k < N; k++)arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));
                 // to (i+1)th column add n-times j-th column
                for(var _k = 0; _k < N; _k++)arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));
                 // keep track of transformations
                if (findVectors) for(var _k2 = 0; _k2 < N; _k2++)R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));
            }
        }
        return R;
    }
    /**
   * @returns {{values: values, C: Matrix}}
   * @see Press, Wiliams: Numerical recipes in Fortran 77
   * @see https://en.wikipedia.org/wiki/QR_algorithm
   */ function iterateUntilTriangular(A, N, prec, type, findVectors) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var one = big ? bignumber(1) : cplx ? complex(1) : 1;
        if (big) prec = bignumber(prec);
         // The Francis Algorithm
        // The core idea of this algorithm is that doing successive
        // A' = Q⁺AQ transformations will eventually converge to block-
        // upper-triangular with diagonal blocks either 1x1 or 2x2.
        // The Q here is the one from the QR decomposition, A = QR.
        // Since the eigenvalues of a block-upper-triangular matrix are
        // the eigenvalues of its diagonal blocks and we know how to find
        // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.
        var arr = _objectJs.clone(A); // the list of converged eigenvalues
        var lambdas = []; // size of arr, which will get smaller as eigenvalues converge
        var n = N; // the diagonal of the block-diagonal matrix that turns
        // converged 2x2 matrices into upper triangular matrices
        var Sdiag = []; // N×N matrix describing the overall transformation done during the QR algorithm
        var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined; // n×n matrix describing the QR transformations done since last convergence
        var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined; // last eigenvalue converged before this many steps
        var lastConvergenceBefore = 0;
        while(lastConvergenceBefore <= 100){
            lastConvergenceBefore += 1; // TODO if the convergence is slow, do something clever
            // Perform the factorization
            var k = 0; // TODO set close to an eigenvalue
            for(var i = 0; i < n; i++)arr[i][i] = subtract(arr[i][i], k);
             // TODO do an implicit QR transformation
            var { Q , R  } = qr(arr);
            arr = multiply(R, Q);
            for(var _i = 0; _i < n; _i++)arr[_i][_i] = addScalar(arr[_i][_i], k);
             // keep track of transformations
            if (findVectors) Qpartial = multiply(Qpartial, Q);
             // The rightmost diagonal element converged to an eigenvalue
            if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {
                lastConvergenceBefore = 0;
                lambdas.push(arr[n - 1][n - 1]); // keep track of transformations
                if (findVectors) {
                    Sdiag.unshift([
                        [
                            1
                        ]
                    ]);
                    inflateMatrix(Qpartial, N);
                    Qtotal = multiply(Qtotal, Qpartial);
                    if (n > 1) Qpartial = diag(Array(n - 1).fill(one));
                } // reduce the matrix size
                n -= 1;
                arr.pop();
                for(var _i2 = 0; _i2 < n; _i2++)arr[_i2].pop();
                 // The rightmost diagonal 2x2 block converged
            } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {
                lastConvergenceBefore = 0;
                var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);
                lambdas.push(...ll); // keep track of transformations
                if (findVectors) {
                    Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));
                    inflateMatrix(Qpartial, N);
                    Qtotal = multiply(Qtotal, Qpartial);
                    if (n > 2) Qpartial = diag(Array(n - 2).fill(one));
                } // reduce the matrix size
                n -= 2;
                arr.pop();
                arr.pop();
                for(var _i3 = 0; _i3 < n; _i3++){
                    arr[_i3].pop();
                    arr[_i3].pop();
                }
            }
            if (n === 0) break;
        } // standard sorting
        lambdas.sort((a, b)=>+subtract(abs(a), abs(b))
        ); // the algorithm didn't converge
        if (lastConvergenceBefore > 100) {
            var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));
            err.values = lambdas;
            err.vectors = [];
            throw err;
        } // combine the overall QR transformation Qtotal with the subsequent
        // transformation S that turns the diagonal 2x2 blocks to upper triangular
        var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;
        return {
            values: lambdas,
            C
        };
    }
    /**
   * @param {Matrix} A original matrix
   * @param {number} N size of A
   * @param {Matrix} C column transformation matrix that turns A into upper triangular
   * @param {number[]} values array of eigenvalues of A
   * @param {'number'|'BigNumber'|'Complex'} type
   * @returns {number[][]} eigenvalues
   */ function findEigenvectors(A, N, C, values, prec, type) {
        var Cinv = inv(C);
        var U = multiply(Cinv, A, C);
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
        var one = big ? bignumber(1) : cplx ? complex(1) : 1; // turn values into a kind of "multiset"
        // this way it is easier to find eigenvectors
        var uniqueValues = [];
        var multiplicities = [];
        for (var λ of values){
            var i = indexOf(uniqueValues, λ, equal);
            if (i === -1) {
                uniqueValues.push(λ);
                multiplicities.push(1);
            } else multiplicities[i] += 1;
        } // find eigenvectors by solving U − λE = 0
        // TODO replace with an iterative eigenvector algorithm
        // (this one might fail for imprecise eigenvalues)
        var vectors = [];
        var len = uniqueValues.length;
        var b = Array(N).fill(zero);
        var E = diag(Array(N).fill(one)); // eigenvalues for which usolve failed (due to numerical error)
        var failedLambdas = [];
        for(var _i4 = 0; _i4 < len; _i4++){
            var _λ = uniqueValues[_i4];
            var _A = subtract(U, multiply(_λ, E)); // the characteristic matrix
            var solutions = usolveAll(_A, b);
            solutions = solutions.map((v)=>multiply(C, v)
            );
            solutions.shift(); // ignore the null vector
            // looks like we missed something, try inverse iteration
            while(solutions.length < multiplicities[_i4]){
                var approxVec = inverseIterate(_A, N, solutions, prec, type);
                if (approxVec == null) {
                    // no more vectors were found
                    failedLambdas.push(_λ);
                    break;
                }
                solutions.push(approxVec);
            }
            vectors.push(...solutions.map((v)=>flatten(v)
            ));
        }
        if (failedLambdas.length !== 0) {
            var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));
            err.values = values;
            err.vectors = vectors;
            throw err;
        }
        return vectors;
    }
    /**
   * Compute the eigenvalues of an 2x2 matrix
   * @return {[number,number]}
   */ function eigenvalues2x2(a, b, c, d) {
        // λ± = ½ trA ± ½ √( tr²A - 4 detA )
        var trA = addScalar(a, d);
        var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));
        var x = multiplyScalar(trA, 0.5);
        var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);
        return [
            addScalar(x, y),
            subtract(x, y)
        ];
    }
    /**
   * For an 2x2 matrix compute the transformation matrix S,
   * so that SAS⁻¹ is an upper triangular matrix
   * @return {[[number,number],[number,number]]}
   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf
   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html
   */ function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
        var one = big ? bignumber(1) : cplx ? complex(1) : 1; // matrix is already upper triangular
        // return an identity matrix
        if (smaller(abs(c), prec)) return [
            [
                one,
                zero
            ],
            [
                zero,
                one
            ]
        ];
         // matrix is diagonalizable
        // return its eigenvectors as columns
        if (larger(abs(subtract(l1, l2)), prec)) return [
            [
                subtract(l1, d),
                subtract(l2, d)
            ],
            [
                c,
                c
            ]
        ];
         // matrix is not diagonalizable
        // compute off-diagonal elements of N = A - λI
        // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )
        // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )
        var na = subtract(a, l1);
        var nb = subtract(b, l1);
        var nc = subtract(c, l1);
        var nd = subtract(d, l1);
        if (smaller(abs(nb), prec)) return [
            [
                na,
                one
            ],
            [
                nc,
                zero
            ]
        ];
        else return [
            [
                nb,
                zero
            ],
            [
                nd,
                one
            ]
        ];
    }
    /**
   * Enlarge the matrix from n×n to N×N, setting the new
   * elements to 1 on diagonal and 0 elsewhere
   */ function inflateMatrix(arr, N) {
        // add columns
        for(var i = 0; i < arr.length; i++)arr[i].push(...Array(N - arr[i].length).fill(0));
         // add rows
        for(var _i5 = arr.length; _i5 < N; _i5++){
            arr.push(Array(N).fill(0));
            arr[_i5][_i5] = 1;
        }
        return arr;
    }
    /**
   * Create a block-diagonal matrix with the given square matrices on the diagonal
   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal
   * @param {number} N the size of the resulting matrix
   */ function blockDiag(arr, N) {
        var M = [];
        for(var i = 0; i < N; i++)M[i] = Array(N).fill(0);
        var I = 0;
        for (var sub of arr){
            var n = sub.length;
            for(var _i6 = 0; _i6 < n; _i6++)for(var j = 0; j < n; j++)M[I + _i6][I + j] = sub[_i6][j];
            I += n;
        }
        return M;
    }
    /**
   * Finds the index of an element in an array using a custom equality function
   * @template T
   * @param {Array<T>} arr array in which to search
   * @param {T} el the element to find
   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`
   * @returns {number} the index of `el`, or -1 when it's not in `arr`
   */ function indexOf(arr, el, fn) {
        for(var i = 0; i < arr.length; i++){
            if (fn(arr[i], el)) return i;
        }
        return -1;
    }
    /**
   * Provided a near-singular upper-triangular matrix A and a list of vectors,
   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal
   * to each vector in the list
   * @template T
   * @param {T[][]} A near-singular square matrix
   * @param {number} N dimension
   * @param {T[][]} orthog list of vectors
   * @param {number} prec epsilon
   * @param {'number'|'BigNumber'|'Complex'} type
   * @return {T[] | null} eigenvector
   *
   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration
   */ function inverseIterate(A, N, orthog, prec, type) {
        var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;
        var b; // the vector
        // you better choose a random vector before I count to five
        var i = 0;
        while(true){
            b = randomOrthogonalVector(N, orthog, type);
            b = usolve(A, b);
            if (larger(norm(b), largeNum)) break;
            if (++i >= 5) return null;
        } // you better converge before I count to ten
        i = 0;
        while(true){
            var c = usolve(A, b);
            if (smaller(norm(orthogonalComplement(b, [
                c
            ])), prec)) break;
            if (++i >= 10) return null;
            b = normalize(c);
        }
        return b;
    }
    /**
   * Generates a random unit vector of dimension N, orthogonal to each vector in the list
   * @template T
   * @param {number} N dimension
   * @param {T[][]} orthog list of vectors
   * @param {'number'|'BigNumber'|'Complex'} type
   * @returns {T[]} random vector
   */ function randomOrthogonalVector(N, orthog, type) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex'; // generate random vector with the correct type
        var v = Array(N).fill(0).map((_)=>2 * Math.random() - 1
        );
        if (big) v = v.map((n)=>bignumber(n)
        );
        if (cplx) v = v.map((n)=>complex(n)
        );
         // project to orthogonal complement
        v = orthogonalComplement(v, orthog); // normalize
        return normalize(v, type);
    }
    /**
   * Project vector v to the orthogonal complement of an array of vectors
   */ function orthogonalComplement(v, orthog) {
        for (var w of orthog)// v := v − (w, v)/∥w∥² w
        v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));
        return v;
    }
    /**
   * Calculate the norm of a vector.
   * We can't use math.norm because factory can't handle circular dependency.
   * Seriously, I'm really fed up with factory.
   */ function norm(v) {
        return abs(sqrt(dot(v, v)));
    }
    /**
   * Normalize a vector
   * @template T
   * @param {T[]} v
   * @param {'number'|'BigNumber'|'Complex'} type
   * @returns {T[]} normalized vec
   */ function normalize(v, type) {
        var big = type === 'BigNumber';
        var cplx = type === 'Complex';
        var one = big ? bignumber(1) : cplx ? complex(1) : 1;
        return multiply(divideScalar(one, norm(v)), v);
    }
    return complexEigs;
}

},{"../../../utils/object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"021L1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRealSymmetric", ()=>createRealSymmetric
);
var _objectJs = require("../../../utils/object.js");
function createRealSymmetric(_ref) {
    var { config , addScalar , subtract , abs , atan , cos , sin , multiplyScalar , inv , bignumber , multiply , add  } = _ref;
    /**
   * @param {number[] | BigNumber[]} arr
   * @param {number} N
   * @param {number} prec
   * @param {'number' | 'BigNumber'} type
   */ function main(arr, N) {
        var prec = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : config.epsilon;
        var type = arguments.length > 3 ? arguments[3] : undefined;
        if (type === 'number') return diag(arr, prec);
        if (type === 'BigNumber') return diagBig(arr, prec);
        throw TypeError('Unsupported data type: ' + type);
    } // diagonalization implementation for number (efficient)
    function diag(x, precision) {
        var N = x.length;
        var e0 = Math.abs(precision / N);
        var psi;
        var Sij = new Array(N); // Sij is Identity Matrix
        for(var i = 0; i < N; i++){
            Sij[i] = createArray(N, 0);
            Sij[i][i] = 1;
        } // initial error
        var Vab = getAij(x);
        while(Math.abs(Vab[1]) >= Math.abs(e0)){
            var _i = Vab[0][0];
            var j = Vab[0][1];
            psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);
            x = x1(x, psi, _i, j);
            Sij = Sij1(Sij, psi, _i, j);
            Vab = getAij(x);
        }
        var Ei = createArray(N, 0); // eigenvalues
        for(var _i2 = 0; _i2 < N; _i2++)Ei[_i2] = x[_i2][_i2];
        return sorting(_objectJs.clone(Ei), _objectJs.clone(Sij));
    } // diagonalization implementation for bigNumber
    function diagBig(x, precision) {
        var N = x.length;
        var e0 = abs(precision / N);
        var psi;
        var Sij = new Array(N); // Sij is Identity Matrix
        for(var i = 0; i < N; i++){
            Sij[i] = createArray(N, 0);
            Sij[i][i] = 1;
        } // initial error
        var Vab = getAijBig(x);
        while(abs(Vab[1]) >= abs(e0)){
            var _i3 = Vab[0][0];
            var j = Vab[0][1];
            psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);
            x = x1Big(x, psi, _i3, j);
            Sij = Sij1Big(Sij, psi, _i3, j);
            Vab = getAijBig(x);
        }
        var Ei = createArray(N, 0); // eigenvalues
        for(var _i4 = 0; _i4 < N; _i4++)Ei[_i4] = x[_i4][_i4];
         // return [clone(Ei), clone(Sij)]
        return sorting(_objectJs.clone(Ei), _objectJs.clone(Sij));
    } // get angle
    function getTheta(aii, ajj, aij) {
        var denom = ajj - aii;
        if (Math.abs(denom) <= config.epsilon) return Math.PI / 4;
        else return 0.5 * Math.atan(2 * aij / (ajj - aii));
    } // get angle
    function getThetaBig(aii, ajj, aij) {
        var denom = subtract(ajj, aii);
        if (abs(denom) <= config.epsilon) return bignumber(-1).acos().div(4);
        else return multiplyScalar(0.5, atan(multiply(2, aij, inv(denom))));
    } // update eigvec
    function Sij1(Sij, theta, i, j) {
        var N = Sij.length;
        var c = Math.cos(theta);
        var s = Math.sin(theta);
        var Ski = createArray(N, 0);
        var Skj = createArray(N, 0);
        for(var k = 0; k < N; k++){
            Ski[k] = c * Sij[k][i] - s * Sij[k][j];
            Skj[k] = s * Sij[k][i] + c * Sij[k][j];
        }
        for(var _k = 0; _k < N; _k++){
            Sij[_k][i] = Ski[_k];
            Sij[_k][j] = Skj[_k];
        }
        return Sij;
    } // update eigvec for overlap
    function Sij1Big(Sij, theta, i, j) {
        var N = Sij.length;
        var c = cos(theta);
        var s = sin(theta);
        var Ski = createArray(N, bignumber(0));
        var Skj = createArray(N, bignumber(0));
        for(var k = 0; k < N; k++){
            Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));
            Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));
        }
        for(var _k2 = 0; _k2 < N; _k2++){
            Sij[_k2][i] = Ski[_k2];
            Sij[_k2][j] = Skj[_k2];
        }
        return Sij;
    } // update matrix
    function x1Big(Hij, theta, i, j) {
        var N = Hij.length;
        var c = bignumber(cos(theta));
        var s = bignumber(sin(theta));
        var c2 = multiplyScalar(c, c);
        var s2 = multiplyScalar(s, s);
        var Aki = createArray(N, bignumber(0));
        var Akj = createArray(N, bignumber(0)); // 2cs Hij
        var csHij = multiply(bignumber(2), c, s, Hij[i][j]); //  Aii
        var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));
        var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i
        for(var k = 0; k < N; k++){
            Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));
            Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));
        } // Modify Hij
        Hij[i][i] = Aii;
        Hij[j][j] = Ajj;
        Hij[i][j] = bignumber(0);
        Hij[j][i] = bignumber(0); // 0  to i
        for(var _k3 = 0; _k3 < N; _k3++)if (_k3 !== i && _k3 !== j) {
            Hij[i][_k3] = Aki[_k3];
            Hij[_k3][i] = Aki[_k3];
            Hij[j][_k3] = Akj[_k3];
            Hij[_k3][j] = Akj[_k3];
        }
        return Hij;
    } // update matrix
    function x1(Hij, theta, i, j) {
        var N = Hij.length;
        var c = Math.cos(theta);
        var s = Math.sin(theta);
        var c2 = c * c;
        var s2 = s * s;
        var Aki = createArray(N, 0);
        var Akj = createArray(N, 0); //  Aii
        var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];
        var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i
        for(var k = 0; k < N; k++){
            Aki[k] = c * Hij[i][k] - s * Hij[j][k];
            Akj[k] = s * Hij[i][k] + c * Hij[j][k];
        } // Modify Hij
        Hij[i][i] = Aii;
        Hij[j][j] = Ajj;
        Hij[i][j] = 0;
        Hij[j][i] = 0; // 0  to i
        for(var _k4 = 0; _k4 < N; _k4++)if (_k4 !== i && _k4 !== j) {
            Hij[i][_k4] = Aki[_k4];
            Hij[_k4][i] = Aki[_k4];
            Hij[j][_k4] = Akj[_k4];
            Hij[_k4][j] = Akj[_k4];
        }
        return Hij;
    } // get max off-diagonal value from Upper Diagonal
    function getAij(Mij) {
        var N = Mij.length;
        var maxMij = 0;
        var maxIJ = [
            0,
            1
        ];
        for(var i = 0; i < N; i++){
            for(var j = i + 1; j < N; j++)if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {
                maxMij = Math.abs(Mij[i][j]);
                maxIJ = [
                    i,
                    j
                ];
            }
        }
        return [
            maxIJ,
            maxMij
        ];
    } // get max off-diagonal value from Upper Diagonal
    function getAijBig(Mij) {
        var N = Mij.length;
        var maxMij = 0;
        var maxIJ = [
            0,
            1
        ];
        for(var i = 0; i < N; i++){
            for(var j = i + 1; j < N; j++)if (abs(maxMij) < abs(Mij[i][j])) {
                maxMij = abs(Mij[i][j]);
                maxIJ = [
                    i,
                    j
                ];
            }
        }
        return [
            maxIJ,
            maxMij
        ];
    } // sort results
    function sorting(E, S) {
        var N = E.length;
        var values = Array(N);
        var vectors = Array(N);
        for(var k = 0; k < N; k++)vectors[k] = Array(N);
        for(var i = 0; i < N; i++){
            var minID = 0;
            var minE = E[0];
            for(var j = 0; j < E.length; j++)if (abs(E[j]) < abs(minE)) {
                minID = j;
                minE = E[minID];
            }
            values[i] = E.splice(minID, 1)[0];
            for(var _k5 = 0; _k5 < N; _k5++){
                vectors[_k5][i] = S[_k5][minID];
                S[_k5].splice(minID, 1);
            }
        }
        return {
            values,
            vectors
        };
    }
    /**
   * Create an array of a certain size and fill all items with an initial value
   * @param {number} size
   * @param {number} value
   * @return {number[]}
   */ function createArray(size, value) {
        // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)
        var array = new Array(size);
        for(var i = 0; i < size; i++)array[i] = value;
        return array;
    }
    return main;
}

},{"../../../utils/object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g5Mf8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createExpm", ()=>createExpm
);
var _isJs = require("../../utils/is.js");
var _stringJs = require("../../utils/string.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'expm';
var dependencies = [
    'typed',
    'abs',
    'add',
    'identity',
    'inv',
    'multiply'
];
var createExpm = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , abs , add , identity , inv , multiply  } = _ref;
    function infinityNorm(A) {
        var n = A.size()[0];
        var infNorm = 0;
        for(var i = 0; i < n; i++){
            var rowSum = 0;
            for(var j = 0; j < n; j++){
                rowSum += abs(A.get([
                    i,
                    j
                ]));
            }
            infNorm = Math.max(rowSum, infNorm);
        }
        return infNorm;
    }
    /**
   * Find the best parameters for the Pade approximant given
   * the matrix norm and desired accuracy. Returns the first acceptable
   * combination in order of increasing computational load.
   */ function findParams(infNorm, eps) {
        var maxSearchSize = 30;
        for(var k = 0; k < maxSearchSize; k++){
            for(var q = 0; q <= k; q++){
                var j = k - q;
                if (errorEstimate(infNorm, q, j) < eps) {
                    return {
                        q: q,
                        j: j
                    };
                }
            }
        }
        throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
    }
    /**
   * Returns the estimated error of the Pade approximant for the given
   * parameters.
   */ function errorEstimate(infNorm, q, j) {
        var qfac = 1;
        for(var i = 2; i <= q; i++){
            qfac *= i;
        }
        var twoqfac = qfac;
        for(var _i2 = q + 1; _i2 <= 2 * q; _i2++){
            twoqfac *= _i2;
        }
        var twoqp1fac = twoqfac * (2 * q + 1);
        return 8 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
    }
    /**
   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
   * Not to be confused with exp(a), which performs element-wise
   * exponentiation.
   *
   * The exponential is calculated using the Padé approximant with scaling and
   * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
   * Matrix," by Moler and Van Loan.
   *
   * Syntax:
   *
   *     math.expm(x)
   *
   * Examples:
   *
   *     const A = [[0,2],[0,0]]
   *     math.expm(A)        // returns [[1,2],[0,1]]
   *
   * See also:
   *
   *     exp
   *
   * @param {Matrix} x  A square Matrix
   * @return {Matrix}   The exponential of x
   */ return typed(name, {
        Matrix: function Matrix(A) {
            // Check matrix size
            var size = A.size();
            if (size.length !== 2 || size[0] !== size[1]) throw new RangeError("Matrix must be square (size: " + _stringJs.format(size) + ')');
            var n = size[0]; // Desired accuracy of the approximant (The actual accuracy
            // will be affected by round-off error)
            var eps = 0.000000000000001; // The Padé approximant is not so accurate when the values of A
            // are "large", so scale A by powers of two. Then compute the
            // exponential, and square the result repeatedly according to
            // the identity e^A = (e^(A/m))^m
            // Compute infinity-norm of A, ||A||, to see how "big" it is
            var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the
            // Padé approximant to reach the desired accuracy
            var params = findParams(infNorm, eps);
            var q = params.q;
            var j = params.j; // The Pade approximation to e^A is:
            // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
            // where
            // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
            // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i
            // Scale A by 1 / 2^j
            var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix
            var N = identity(n);
            var D = identity(n); // Initialization (i=0)
            var factor = 1; // Initialization (i=1)
            var AposToI = Apos; // Cloning not necessary
            var alternate = -1;
            for(var i = 1; i <= q; i++){
                if (i > 1) {
                    AposToI = multiply(AposToI, Apos);
                    alternate = -alternate;
                }
                factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);
                N = add(N, multiply(factor, AposToI));
                D = add(D, multiply(factor * alternate, AposToI));
            }
            var R = multiply(inv(D), N); // Square j times
            for(var _i = 0; _i < j; _i++)R = multiply(R, R);
            return _isJs.isSparseMatrix(A) ? A.createSparseMatrix(R) : R;
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/string.js":"0PPSB","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8rv2b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSqrtm", ()=>createSqrtm
);
var _isJs = require("../../utils/is.js");
var _stringJs = require("../../utils/string.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'sqrtm';
var dependencies = [
    'typed',
    'abs',
    'add',
    'multiply',
    'sqrt',
    'subtract',
    'inv',
    'size',
    'max',
    'identity'
];
var createSqrtm = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , abs , add , multiply , sqrt , subtract , inv , size: size1 , max , identity  } = _ref;
    var _maxIterations = 1000;
    var _tolerance = 0.000001;
    /**
   * Calculate the principal square root matrix using the Denman–Beavers iterative method
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   * @private
   */ function _denmanBeavers(A) {
        var error;
        var iterations = 0;
        var Y = A;
        var Z = identity(size1(A));
        do {
            var Yk = Y;
            Y = multiply(0.5, add(Yk, inv(Z)));
            Z = multiply(0.5, add(Z, inv(Yk)));
            error = max(abs(subtract(Y, Yk)));
            if (error > _tolerance && ++iterations > _maxIterations) throw new Error('computing square root of matrix: iterative method could not converge');
        }while (error > _tolerance)
        return Y;
    }
    /**
   * Calculate the principal square root of a square matrix.
   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
   *
   * Syntax:
   *
   *     X = math.sqrtm(A)
   *
   * Examples:
   *
   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   */ return typed(name, {
        'Array | Matrix': function ArrayMatrix(A) {
            var size = _isJs.isMatrix(A) ? A.size() : _arrayJs.arraySize(A);
            switch(size.length){
                case 1:
                    // Single element Array | Matrix
                    if (size[0] === 1) return sqrt(A);
                    else throw new RangeError("Matrix must be square (size: " + _stringJs.format(size) + ')');
                case 2:
                    // Two-dimensional Array | Matrix
                    var rows = size[0];
                    var cols = size[1];
                    if (rows === cols) return _denmanBeavers(A);
                    else throw new RangeError("Matrix must be square (size: " + _stringJs.format(size) + ')');
                default:
                    // Multi dimensional array
                    throw new RangeError("Matrix must be at most two dimensional (size: " + _stringJs.format(size) + ')');
            }
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/string.js":"0PPSB","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7ToLg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDivide", ()=>createDivide
);
var _factoryJs = require("../../utils/factory.js");
var _objectJs = require("../../utils/object.js");
var _algorithm11Js = require("../../type/matrix/utils/algorithm11.js");
var _algorithm14Js = require("../../type/matrix/utils/algorithm14.js");
var name = 'divide';
var dependencies = [
    'typed',
    'matrix',
    'multiply',
    'equalScalar',
    'divideScalar',
    'inv'
];
var createDivide = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , multiply , equalScalar , divideScalar , inv  } = _ref;
    var algorithm11 = _algorithm11Js.createAlgorithm11({
        typed,
        equalScalar
    });
    var algorithm14 = _algorithm14Js.createAlgorithm14({
        typed
    });
    /**
   * Divide two values, `x / y`.
   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
   *
   * Syntax:
   *
   *    math.divide(x, y)
   *
   * Examples:
   *
   *    math.divide(2, 3)            // returns number 0.6666666666666666
   *
   *    const a = math.complex(5, 14)
   *    const b = math.complex(4, 1)
   *    math.divide(a, b)            // returns Complex 2 + 3i
   *
   *    const c = [[7, -6], [13, -4]]
   *    const d = [[1, 2], [4, 3]]
   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
   *
   *    const e = math.unit('18 km')
   *    math.divide(e, 4.5)          // returns Unit 4 km
   *
   * See also:
   *
   *    multiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
   */ return typed('divide', _objectJs.extend({
        // we extend the signatures of divideScalar with signatures dealing with matrices
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
            // TODO: implement matrix right division using pseudo inverse
            // https://www.mathworks.nl/help/matlab/ref/mrdivide.html
            // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
            // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
            return multiply(x, inv(y));
        },
        'DenseMatrix, any': function DenseMatrixAny(x, y) {
            return algorithm14(x, y, divideScalar, false);
        },
        'SparseMatrix, any': function SparseMatrixAny(x, y) {
            return algorithm11(x, y, divideScalar, false);
        },
        'Array, any': function ArrayAny(x, y) {
            // use matrix implementation
            return algorithm14(matrix(x), y, divideScalar, false).valueOf();
        },
        'any, Array | Matrix': function anyArrayMatrix(x, y) {
            return multiply(x, inv(y));
        }
    }, divideScalar.signatures));
});

},{"../../utils/factory.js":"26foW","../../utils/object.js":"eRHhH","../../type/matrix/utils/algorithm11.js":"bG0hV","../../type/matrix/utils/algorithm14.js":"82VrR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1iKWK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDistance", ()=>createDistance
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'distance';
var dependencies = [
    'typed',
    'addScalar',
    'subtract',
    'divideScalar',
    'multiplyScalar',
    'unaryMinus',
    'sqrt',
    'abs'
];
var createDistance = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , addScalar , subtract , multiplyScalar , divideScalar , unaryMinus , sqrt , abs  } = _ref;
    function _isNumber(a) {
        // distance supports numbers and bignumbers
        return typeof a === 'number' || _isJs.isBigNumber(a);
    }
    function _2d(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (a.constructor !== Array) {
            a = _objectToArray(a);
        }
        return _isNumber(a[0]) && _isNumber(a[1]);
    }
    function _3d(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (a.constructor !== Array) {
            a = _objectToArray(a);
        }
        return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
    }
    function _containsOnlyNumbers(a) {
        // checks if the number of arguments are correct in count and are valid (should be numbers)
        if (!Array.isArray(a)) {
            a = _objectToArray(a);
        }
        return a.every(_isNumber);
    }
    function _parametricLine(a) {
        if (a.constructor !== Array) {
            a = _objectToArray(a);
        }
        return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
    }
    function _objectToArray(o) {
        var keys = Object.keys(o);
        var a = [];
        for(var i = 0; i < keys.length; i++){
            a.push(o[keys[i]]);
        }
        return a;
    }
    function _pairwise(a) {
        // checks for valid arguments passed to _distancePairwise(Array)
        if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
            if (a.some((aI)=>aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1])
            )) {
                return false;
            }
        } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
            if (a.some((aI)=>aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2])
            )) {
                return false;
            }
        } else {
            return false;
        }
        return true;
    }
    function _distancePointLine2D(x, y, a, b, c) {
        var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
        var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
        return divideScalar(num, den);
    }
    function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
        var num = [
            subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)),
            subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)),
            subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))
        ];
        num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
        var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
        return divideScalar(num, den);
    }
    function _euclideanDistance(x, y) {
        var vectorSize = x.length;
        var result = 0;
        var diff = 0;
        for(var i = 0; i < vectorSize; i++){
            diff = subtract(x[i], y[i]);
            result = addScalar(multiplyScalar(diff, diff), result);
        }
        return sqrt(result);
    }
    function _distancePairwise(a) {
        var result = [];
        var pointA = [];
        var pointB = [];
        for(var i = 0; i < a.length - 1; i++){
            for(var j = i + 1; j < a.length; j++){
                if (a[0].length === 2) {
                    pointA = [
                        a[i][0],
                        a[i][1]
                    ];
                    pointB = [
                        a[j][0],
                        a[j][1]
                    ];
                } else if (a[0].length === 3) {
                    pointA = [
                        a[i][0],
                        a[i][1],
                        a[i][2]
                    ];
                    pointB = [
                        a[j][0],
                        a[j][1],
                        a[j][2]
                    ];
                }
                result.push(_euclideanDistance(pointA, pointB));
            }
        }
        return result;
    }
    /**
    * Calculates:
    *    The eucledian distance between two points in N-dimensional spaces.
    *    Distance between point and a line in 2 and 3 dimensional spaces.
    *    Pairwise distance between a set of 2D or 3D points
    * NOTE:
    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
    *
    * Syntax:
    *    math.distance([x1, y1], [x2, y2])
    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
    *    math.distance([x1, y1, z1], [x2, y2, z2])
    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])
    *    math.distance([[A], [B], [C]...])
    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
    *
    * Examples:
    *    math.distance([0,0], [4,4])                     // Returns 5.6569
    *    math.distance(
    *     {pointOneX: 0, pointOneY: 0},
    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
    *    math.distance(
    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2
    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
    *    math.distance(
    *     {pointX: 1, pointY: 4},
    *     {lineOnePtX: 6, lineOnePtY: 3},
    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
    *    math.distance(
    *     {pointX: 2, pointY: 3, pointZ: 1},
    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
    *
    * @param {Array | Matrix | Object} x    Co-ordinates of first point
    * @param {Array | Matrix | Object} y    Co-ordinates of second point
    * @return {Number | BigNumber} Returns the distance from two/three points
  */ return typed(name, {
        'Array, Array, Array': function ArrayArrayArray(x, y, z) {
            // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
            if (x.length === 2 && y.length === 2 && z.length === 2) {
                if (!_2d(x)) throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
                if (!_2d(y)) throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
                if (!_2d(z)) throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
                var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));
                var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);
                var yCoeff = unaryMinus(multiplyScalar(m, y[0]));
                var constant = x[1];
                return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
            } else throw new TypeError('Invalid Arguments: Try again');
        },
        'Object, Object, Object': function ObjectObjectObject(x, y, z) {
            if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
                if (!_2d(x)) throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
                if (!_2d(y)) throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
                if (!_2d(z)) throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
                if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {
                    var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));
                    var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);
                    var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));
                    var constant = x.pointX;
                    return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
                } else throw new TypeError('Key names do not match');
            } else throw new TypeError('Invalid Arguments: Try again');
        },
        'Array, Array': function ArrayArray(x, y) {
            // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
            if (x.length === 2 && y.length === 3) {
                if (!_2d(x)) throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
                if (!_3d(y)) throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
                return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
            } else if (x.length === 3 && y.length === 6) {
                // Point to Line 3D
                if (!_3d(x)) throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
                if (!_parametricLine(y)) throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
                return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
            } else if (x.length === y.length && x.length > 0) {
                // Point to Point N-dimensions
                if (!_containsOnlyNumbers(x)) throw new TypeError('All values of an array should be numbers or BigNumbers');
                if (!_containsOnlyNumbers(y)) throw new TypeError('All values of an array should be numbers or BigNumbers');
                return _euclideanDistance(x, y);
            } else throw new TypeError('Invalid Arguments: Try again');
        },
        'Object, Object': function ObjectObject(x, y) {
            if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
                if (!_2d(x)) throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
                if (!_3d(y)) throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
                if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
                else throw new TypeError('Key names do not match');
            } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
                // Point to Line 3D
                if (!_3d(x)) throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
                if (!_parametricLine(y)) throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
                if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
                else throw new TypeError('Key names do not match');
            } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
                // Point to Point 2D
                if (!_2d(x)) throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
                if (!_2d(y)) throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
                if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) return _euclideanDistance([
                    x.pointOneX,
                    x.pointOneY
                ], [
                    y.pointTwoX,
                    y.pointTwoY
                ]);
                else throw new TypeError('Key names do not match');
            } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
                // Point to Point 3D
                if (!_3d(x)) throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
                if (!_3d(y)) throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
                if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) return _euclideanDistance([
                    x.pointOneX,
                    x.pointOneY,
                    x.pointOneZ
                ], [
                    y.pointTwoX,
                    y.pointTwoY,
                    y.pointTwoZ
                ]);
                else throw new TypeError('Key names do not match');
            } else throw new TypeError('Invalid Arguments: Try again');
        },
        Array: function Array(arr) {
            if (!_pairwise(arr)) throw new TypeError('Incorrect array format entered for pairwise distance calculation');
            return _distancePairwise(arr);
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lBb89":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIntersect", ()=>createIntersect
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'intersect';
var dependencies = [
    'typed',
    'config',
    'abs',
    'add',
    'addScalar',
    'matrix',
    'multiply',
    'multiplyScalar',
    'divideScalar',
    'subtract',
    'smaller',
    'equalScalar',
    'flatten'
];
var createIntersect = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , abs , add , addScalar , matrix , multiply , multiplyScalar , divideScalar , subtract , smaller , equalScalar , flatten  } = _ref;
    function _AAA(x, y, plane) {
        x = _coerceArr(x);
        y = _coerceArr(y);
        plane = _coerceArr(plane);
        if (!_3d(x)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }
        if (!_3d(y)) {
            throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }
        if (!_4d(plane)) {
            throw new TypeError('Array with 4 numbers expected as third argument');
        }
        return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
    }
    function _AAAA(w, x, y, z) {
        w = _coerceArr(w);
        x = _coerceArr(x);
        y = _coerceArr(y);
        z = _coerceArr(z);
        if (w.length === 2) {
            if (!_2d(w)) {
                throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
            }
            if (!_2d(x)) {
                throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
            }
            if (!_2d(y)) {
                throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
            }
            if (!_2d(z)) {
                throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
            }
            return _intersect2d(w, x, y, z);
        } else if (w.length === 3) {
            if (!_3d(w)) {
                throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
            }
            if (!_3d(x)) {
                throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
            }
            if (!_3d(y)) {
                throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
            }
            if (!_3d(z)) {
                throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
            }
            return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
        } else {
            throw new TypeError('Arrays with two or thee dimensional points expected');
        }
    }
    /** Coerce row and column 2-dim arrays to 1-dim array */ function _coerceArr(arr) {
        // row matrix
        if (arr.length === 1) return arr[0]; // column matrix
        if (arr.length > 1 && Array.isArray(arr[0])) {
            if (arr.every((el)=>Array.isArray(el) && el.length === 1
            )) return flatten(arr);
        }
        return arr;
    }
    function _isNumeric(a) {
        // intersect supports numbers and bignumbers
        return typeof a === 'number' || _isJs.isBigNumber(a);
    }
    function _2d(x) {
        return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);
    }
    function _3d(x) {
        return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);
    }
    function _4d(x) {
        return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);
    }
    function _intersect2d(p1a, p1b, p2a, p2b) {
        var o1 = p1a;
        var o2 = p2a;
        var d1 = subtract(o1, p1b);
        var d2 = subtract(o2, p2b);
        var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));
        if (smaller(abs(det), config.epsilon)) {
            return null;
        }
        var d20o11 = multiplyScalar(d2[0], o1[1]);
        var d21o10 = multiplyScalar(d2[1], o1[0]);
        var d20o21 = multiplyScalar(d2[0], o2[1]);
        var d21o20 = multiplyScalar(d2[1], o2[0]);
        var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);
        return add(multiply(d1, t), o1);
    }
    function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
        // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
        var add1 = multiplyScalar(subtract(a, b), subtract(c, d));
        var add2 = multiplyScalar(subtract(e, f), subtract(g, h));
        var add3 = multiplyScalar(subtract(i, j), subtract(k, l));
        return addScalar(addScalar(add1, add2), add3);
    }
    function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
        var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);
        var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);
        var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);
        var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);
        var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);
        var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));
        var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);
        var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));
        var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));
        var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));
        var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));
        var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));
        var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));
        if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {
            return [
                pax,
                pay,
                paz
            ];
        } else {
            return null;
        }
    }
    function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
        var x1x = multiplyScalar(x1, x);
        var x2x = multiplyScalar(x2, x);
        var y1y = multiplyScalar(y1, y);
        var y2y = multiplyScalar(y2, y);
        var z1z = multiplyScalar(z1, z);
        var z2z = multiplyScalar(z2, z);
        var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);
        var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);
        var t = divideScalar(numerator, denominator);
        var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));
        var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));
        var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));
        return [
            px,
            py,
            pz
        ]; // TODO: Add cases when line is parallel to the plane:
    //       (a) no intersection,
    //       (b) line contained in plane
    }
    /**
   * Calculates the point of intersection of two lines in two or three dimensions
   * and of a line and a plane in three dimensions. The inputs are in the form of
   * arrays or 1 dimensional matrices. The line intersection functions return null
   * if the lines do not meet.
   *
   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
   *
   * Syntax:
   *
   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
   *
   * Examples:
   *
   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
   *
   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
   *                              OR Co-efficients of the plane's equation
   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
   *                              OR undefined if the calculation is for line and plane
   * @return {Array}              Returns the point of intersection of lines/lines-planes
   */ return typed('intersect', {
        'Array, Array, Array': _AAA,
        'Array, Array, Array, Array': _AAAA,
        'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
            var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());
            return arr === null ? null : matrix(arr);
        },
        'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
            // TODO: output matrix type should match input matrix type
            var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());
            return arr === null ? null : matrix(arr);
        }
    });
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Yixb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSum", ()=>createSum
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _improveErrorMessageJs = require("./utils/improveErrorMessage.js");
var name = 'sum';
var dependencies = [
    'typed',
    'config',
    'add',
    'numeric'
];
var createSum = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , add , numeric  } = _ref;
    /**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array | Matrix} array
   * @return {number} sum
   * @private
   */ function _sum(array) {
        var sum;
        _collectionJs.deepForEach(array, function(value) {
            try {
                sum = sum === undefined ? value : add(sum, value);
            } catch (err) {
                throw _improveErrorMessageJs.improveErrorMessage(err, 'sum', value);
            }
        }); // make sure returning numeric value: parse a string into a numeric value
        if (sum === undefined) {
            sum = numeric(0, config.number);
        }
        if (typeof sum === 'string') {
            sum = numeric(sum, config.number);
        }
        return sum;
    }
    function _nsumDim(array, dim) {
        try {
            var sum = _collectionJs.reduce(array, dim, add);
            return sum;
        } catch (err) {
            throw _improveErrorMessageJs.improveErrorMessage(err, 'sum');
        }
    }
    /**
   * Compute the sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3)               // returns 10
   *     math.sum([2, 1, 4, 3])             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The sum of all values
   */ return typed(name, {
        // sum([a, b, c, d, ...])
        'Array | Matrix': _sum,
        // sum([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': _nsumDim,
        // sum(a, b, c, d, ...)
        '...': function _(args) {
            if (_collectionJs.containsCollections(args)) throw new TypeError('Scalar values expected in function sum');
            return _sum(args);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","./utils/improveErrorMessage.js":"ee5yO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cESdD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMean", ()=>createMean
);
var _collectionJs = require("../../utils/collection.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var _improveErrorMessageJs = require("./utils/improveErrorMessage.js");
var name = 'mean';
var dependencies = [
    'typed',
    'add',
    'divide'
];
var createMean = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , add , divide  } = _ref;
    /**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */ function _nmeanDim(array, dim) {
        try {
            var sum = _collectionJs.reduce(array, dim, add);
            var s = Array.isArray(array) ? _arrayJs.arraySize(array) : array.size();
            return divide(sum, s[dim]);
        } catch (err) {
            throw _improveErrorMessageJs.improveErrorMessage(err, 'mean');
        }
    }
    /**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */ function _mean(array) {
        var sum;
        var num = 0;
        _collectionJs.deepForEach(array, function(value) {
            try {
                sum = sum === undefined ? value : add(sum, value);
                num++;
            } catch (err) {
                throw _improveErrorMessageJs.improveErrorMessage(err, 'mean', value);
            }
        });
        if (num === 0) {
            throw new Error('Cannot calculate the mean of an empty array');
        }
        return divide(sum, num);
    }
    /**
   * Compute the mean value of matrix or a list with values.
   * In case of a multi dimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dim)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3)                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */ return typed(name, {
        // mean([a, b, c, d, ...])
        'Array | Matrix': _mean,
        // mean([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': _nmeanDim,
        // mean(a, b, c, d, ...)
        '...': function _(args) {
            if (_collectionJs.containsCollections(args)) throw new TypeError('Scalar values expected in function mean');
            return _mean(args);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","./utils/improveErrorMessage.js":"ee5yO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"02Hor":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMedian", ()=>createMedian
);
var _collectionJs = require("../../utils/collection.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var _improveErrorMessageJs = require("./utils/improveErrorMessage.js");
var name = 'median';
var dependencies = [
    'typed',
    'add',
    'divide',
    'compare',
    'partitionSelect'
];
var createMedian = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , add , divide , compare , partitionSelect  } = _ref;
    /**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */ function _median(array) {
        try {
            array = _arrayJs.flatten(array.valueOf());
            var num = array.length;
            if (num === 0) throw new Error('Cannot calculate median of an empty array');
            if (num % 2 === 0) {
                // even: return the average of the two middle values
                var mid = num / 2 - 1;
                var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part
                var left = array[mid];
                for(var i = 0; i < mid; ++i)if (compare(array[i], left) > 0) left = array[i];
                return middle2(left, right);
            } else {
                // odd: return the middle value
                var m = partitionSelect(array, (num - 1) / 2);
                return middle(m);
            }
        } catch (err) {
            throw _improveErrorMessageJs.improveErrorMessage(err, 'median');
        }
    } // helper function to type check the middle value of the array
    var middle = typed({
        'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
            return value;
        }
    }); // helper function to type check the two middle value of the array
    var middle2 = typed({
        'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
            return divide(add(left, right), 2);
        }
    });
    /**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7)        // returns 5
   *     math.median([3, -1, 5, 7])  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, variance, quantileSeq
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */ return typed(name, {
        // median([a, b, c, d, ...])
        'Array | Matrix': _median,
        // median([a, b, c, d, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
            // TODO: implement median(A, dim)
            throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)
        },
        // median(a, b, c, d, ...)
        '...': function _(args) {
            if (_collectionJs.containsCollections(args)) throw new TypeError('Scalar values expected in function median');
            return _median(args);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","./utils/improveErrorMessage.js":"ee5yO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eEV9W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMad", ()=>createMad
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var _improveErrorMessageJs = require("./utils/improveErrorMessage.js");
var name = 'mad';
var dependencies = [
    'typed',
    'abs',
    'map',
    'median',
    'subtract'
];
var createMad = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , abs , map , median , subtract  } = _ref;
    function _mad(array) {
        array = _arrayJs.flatten(array.valueOf());
        if (array.length === 0) {
            throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
        }
        try {
            var med = median(array);
            return median(map(array, function(value) {
                return abs(subtract(value, med));
            }));
        } catch (err) {
            if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
                throw new TypeError(err.message.replace('median', 'mad'));
            } else {
                throw _improveErrorMessageJs.improveErrorMessage(err, 'mad');
            }
        }
    }
    /**
   * Compute the median absolute deviation of a matrix or a list with values.
   * The median absolute deviation is defined as the median of the absolute
   * deviations from the median.
   *
   * Syntax:
   *
   *     math.mad(a, b, c, ...)
   *     math.mad(A)
   *
   * Examples:
   *
   *     math.mad(10, 20, 30)             // returns 10
   *     math.mad([1, 2, 3])              // returns 1
   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
   *
   * See also:
   *
   *     median, mean, std, abs
   *
   * @param {Array | Matrix} array
   *                        A single matrix or multiple scalar values.
   * @return {*} The median absolute deviation.
   */ return typed(name, {
        // mad([a, b, c, d, ...])
        'Array | Matrix': _mad,
        // mad(a, b, c, d, ...)
        '...': function _(args) {
            return _mad(args);
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","./utils/improveErrorMessage.js":"ee5yO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lt7yb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createVariance", ()=>createVariance
);
var _collectionJs = require("../../utils/collection.js");
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var _improveErrorMessageJs = require("./utils/improveErrorMessage.js");
var DEFAULT_NORMALIZATION = 'unbiased';
var name = 'variance';
var dependencies = [
    'typed',
    'add',
    'subtract',
    'multiply',
    'divide',
    'apply',
    'isNaN'
];
var createVariance = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , add , subtract , multiply , divide , apply , isNaN  } = _ref;
    /**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */ function _var(array, normalization) {
        var sum;
        var num = 0;
        if (array.length === 0) {
            throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
        } // calculate the mean and number of elements
        _collectionJs.deepForEach(array, function(value) {
            try {
                sum = sum === undefined ? value : add(sum, value);
                num++;
            } catch (err) {
                throw _improveErrorMessageJs.improveErrorMessage(err, 'variance', value);
            }
        });
        if (num === 0) throw new Error('Cannot calculate variance of an empty array');
        var mean = divide(sum, num); // calculate the variance
        sum = undefined;
        _collectionJs.deepForEach(array, function(value) {
            var diff = subtract(value, mean);
            sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));
        });
        if (isNaN(sum)) {
            return sum;
        }
        switch(normalization){
            case 'uncorrected':
                return divide(sum, num);
            case 'biased':
                return divide(sum, num + 1);
            case 'unbiased':
                {
                    var zero = _isJs.isBigNumber(sum) ? sum.mul(0) : 0;
                    return num === 1 ? zero : divide(sum, num - 1);
                }
            default:
                throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
        }
    }
    function _varDim(array, dim, normalization) {
        try {
            if (array.length === 0) {
                throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
            }
            return apply(array, dim, (x)=>_var(x, normalization)
            );
        } catch (err) {
            throw _improveErrorMessageJs.improveErrorMessage(err, 'variance');
        }
    }
    /**
   * Compute the variance of a matrix or a  list with values.
   * In case of a (multi dimensional) array or matrix, the variance over all
   * elements will be calculated.
   *
   * Additionally, it is possible to compute the variance along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.variance(a, b, c, ...)
   *     math.variance(A)
   *     math.variance(A, normalization)
   *     math.variance(A, dimension)
   *     math.variance(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.variance(2, 4, 6)                     // returns 4
   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667
   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5
   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4
   *
   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5
   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the variance for a matrix
   * @return {*} The variance
   */ return typed(name, {
        // variance([a, b, c, d, ...])
        'Array | Matrix': function ArrayMatrix(array) {
            return _var(array, DEFAULT_NORMALIZATION);
        },
        // variance([a, b, c, d, ...], normalization)
        'Array | Matrix, string': _var,
        // variance([a, b, c, c, ...], dim)
        'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
            return _varDim(array, dim, DEFAULT_NORMALIZATION);
        },
        // variance([a, b, c, c, ...], dim, normalization)
        'Array | Matrix, number | BigNumber, string': _varDim,
        // variance(a, b, c, d, ...)
        '...': function _(args) {
            return _var(args, DEFAULT_NORMALIZATION);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","./utils/improveErrorMessage.js":"ee5yO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5MSHz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createQuantileSeq", ()=>createQuantileSeq
);
var _isJs = require("../../utils/is.js");
var _numberJs = require("../../utils/number.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'quantileSeq';
var dependencies = [
    'typed',
    'add',
    'multiply',
    'partitionSelect',
    'compare'
];
var createQuantileSeq = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , add , multiply , partitionSelect , compare  } = _ref;
    /**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a (multi dimensional) array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, variance
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */ function quantileSeq(data, probOrN, sorted) {
        var probArr, dataArr, one;
        if (arguments.length < 2 || arguments.length > 3) throw new SyntaxError('Function quantileSeq requires two or three parameters');
        if (_isJs.isCollection(data)) {
            sorted = sorted || false;
            if (typeof sorted === 'boolean') {
                dataArr = data.valueOf();
                if (_isJs.isNumber(probOrN)) {
                    if (probOrN < 0) throw new Error('N/prob must be non-negative');
                    if (probOrN <= 1) // quantileSeq([a, b, c, d, ...], prob[,sorted])
                    return _quantileSeq(dataArr, probOrN, sorted);
                    if (probOrN > 1) {
                        // quantileSeq([a, b, c, d, ...], N[,sorted])
                        if (!_numberJs.isInteger(probOrN)) throw new Error('N must be a positive integer');
                        var nPlusOne = probOrN + 1;
                        probArr = new Array(probOrN);
                        for(var i = 0; i < probOrN;)probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
                        return probArr;
                    }
                }
                if (_isJs.isBigNumber(probOrN)) {
                    var BigNumber = probOrN.constructor;
                    if (probOrN.isNegative()) throw new Error('N/prob must be non-negative');
                    one = new BigNumber(1);
                    if (probOrN.lte(one)) // quantileSeq([a, b, c, d, ...], prob[,sorted])
                    return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));
                    if (probOrN.gt(one)) {
                        // quantileSeq([a, b, c, d, ...], N[,sorted])
                        if (!probOrN.isInteger()) throw new Error('N must be a positive integer');
                         // largest possible Array length is 2^32-1
                        // 2^32 < 10^15, thus safe conversion guaranteed
                        var intN = probOrN.toNumber();
                        if (intN > 4294967295) throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
                        var _nPlusOne = new BigNumber(intN + 1);
                        probArr = new Array(intN);
                        for(var _i = 0; _i < intN;)probArr[_i] = new BigNumber(_quantileSeq(dataArr, new BigNumber(++_i).div(_nPlusOne), sorted));
                        return probArr;
                    }
                }
                if (Array.isArray(probOrN)) {
                    // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
                    probArr = new Array(probOrN.length);
                    for(var _i2 = 0; _i2 < probArr.length; ++_i2){
                        var currProb = probOrN[_i2];
                        if (_isJs.isNumber(currProb)) {
                            if (currProb < 0 || currProb > 1) throw new Error('Probability must be between 0 and 1, inclusive');
                        } else if (_isJs.isBigNumber(currProb)) {
                            one = new currProb.constructor(1);
                            if (currProb.isNegative() || currProb.gt(one)) throw new Error('Probability must be between 0 and 1, inclusive');
                        } else throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
                        probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);
                    }
                    return probArr;
                }
                throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
            }
            throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
        }
        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
    }
    /**
   * Calculate the prob order quantile of an n-dimensional array.
   *
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */ function _quantileSeq(array, prob, sorted) {
        var flat = _arrayJs.flatten(array);
        var len = flat.length;
        if (len === 0) throw new Error('Cannot calculate quantile of an empty sequence');
        if (_isJs.isNumber(prob)) {
            var _index = prob * (len - 1);
            var _fracPart = _index % 1;
            if (_fracPart === 0) {
                var value = sorted ? flat[_index] : partitionSelect(flat, _index);
                validate(value);
                return value;
            }
            var _integerPart = Math.floor(_index);
            var _left;
            var _right;
            if (sorted) {
                _left = flat[_integerPart];
                _right = flat[_integerPart + 1];
            } else {
                _right = partitionSelect(flat, _integerPart + 1); // max of partition is kth largest
                _left = flat[_integerPart];
                for(var i = 0; i < _integerPart; ++i)if (compare(flat[i], _left) > 0) _left = flat[i];
            }
            validate(_left);
            validate(_right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
            return add(multiply(_left, 1 - _fracPart), multiply(_right, _fracPart));
        } // If prob is a BigNumber
        var index = prob.times(len - 1);
        if (index.isInteger()) {
            index = index.toNumber();
            var _value = sorted ? flat[index] : partitionSelect(flat, index);
            validate(_value);
            return _value;
        }
        var integerPart = index.floor();
        var fracPart = index.minus(integerPart);
        var integerPartNumber = integerPart.toNumber();
        var left;
        var right;
        if (sorted) {
            left = flat[integerPartNumber];
            right = flat[integerPartNumber + 1];
        } else {
            right = partitionSelect(flat, integerPartNumber + 1); // max of partition is kth largest
            left = flat[integerPartNumber];
            for(var _i3 = 0; _i3 < integerPartNumber; ++_i3)if (compare(flat[_i3], left) > 0) left = flat[_i3];
        }
        validate(left);
        validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
        var one = new fracPart.constructor(1);
        return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
    }
    /**
   * Check if array value types are valid, throw error otherwise.
   * @param {number | BigNumber | Unit} x
   * @param {number | BigNumber | Unit} x
   * @private
   */ var validate = typed({
        'number | BigNumber | Unit': function numberBigNumberUnit(x) {
            return x;
        }
    });
    return quantileSeq;
});

},{"../../utils/is.js":"iwdlF","../../utils/number.js":"l1AB8","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dTYLn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createStd", ()=>createStd
);
var _factoryJs = require("../../utils/factory.js");
var name = 'std';
var dependencies = [
    'typed',
    'sqrt',
    'variance'
];
var createStd = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , sqrt , variance  } = _ref;
    function _std(array, normalization) {
        if (array.length === 0) {
            throw new SyntaxError('Function std requires one or more parameters (0 provided)');
        }
        try {
            return sqrt(variance.apply(null, arguments));
        } catch (err) {
            if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {
                throw new TypeError(err.message.replace(' variance', ' std'));
            } else {
                throw err;
            }
        }
    }
    /**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(variance(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated by default, unless an axis is specified
   * in which case the standard deviation will be computed along that axis.
   *
   * Additionally, it is possible to compute the standard deviation along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *     math.std(A, dimension)
   *     math.std(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6)                     // returns 2
   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased')      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, variance
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the standard deviation for a matrix
   * @return {*} The standard deviation
   */ return typed(name, {
        // std([a, b, c, d, ...])
        'Array | Matrix': _std,
        // std([a, b, c, d, ...], normalization)
        'Array | Matrix, string': _std,
        // std([a, b, c, c, ...], dim)
        'Array | Matrix, number | BigNumber': _std,
        // std([a, b, c, c, ...], dim, normalization)
        'Array | Matrix, number | BigNumber, string': _std,
        // std(a, b, c, d, ...)
        '...': function _(args) {
            return _std(args);
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"92yHi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCombinations", ()=>createCombinations
);
var _factoryJs = require("../../utils/factory.js");
var _combinationsJs = require("../../plain/number/combinations.js");
var name = 'combinations';
var dependencies = [
    'typed'
];
var createCombinations = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5) // returns 21
   *
   * See also:
   *
   *    combinationsWithRep, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */ return typed(name, {
        'number, number': _combinationsJs.combinationsNumber,
        'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
            var BigNumber = n.constructor;
            var result, i;
            var nMinusk = n.minus(k);
            var one = new BigNumber(1);
            if (!isPositiveInteger(n) || !isPositiveInteger(k)) throw new TypeError('Positive integer value expected in function combinations');
            if (k.gt(n)) throw new TypeError('k must be less than n in function combinations');
            result = one;
            if (k.lt(nMinusk)) for(i = one; i.lte(nMinusk); i = i.plus(one))result = result.times(k.plus(i)).dividedBy(i);
            else for(i = one; i.lte(k); i = i.plus(one))result = result.times(nMinusk.plus(i)).dividedBy(i);
            return result;
        } // TODO: implement support for collection in combinations
    });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */ function isPositiveInteger(n) {
    return n.isInteger() && n.gte(0);
}

},{"../../utils/factory.js":"26foW","../../plain/number/combinations.js":"dGBSM","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4z98Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCombinationsWithRep", ()=>createCombinationsWithRep
);
var _factoryJs = require("../../utils/factory.js");
var _numberJs = require("../../utils/number.js");
var _productJs = require("../../utils/product.js");
var name = 'combinationsWithRep';
var dependencies = [
    'typed'
];
var createCombinationsWithRep = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities, allowing individual outcomes to be repeated more than once.
   *
   * CombinationsWithRep only takes integer arguments.
   * The following condition must be enforced: k <= n + k -1.
   *
   * Syntax:
   *
   *     math.combinationsWithRep(n, k)
   *
   * Examples:
   *
   *    math.combinationsWithRep(7, 5) // returns 462
   *
   * See also:
   *
   *    combinations, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations with replacement.
   */ return typed(name, {
        'number, number': function numberNumber(n, k) {
            if (!_numberJs.isInteger(n) || n < 0) throw new TypeError('Positive integer value expected in function combinationsWithRep');
            if (!_numberJs.isInteger(k) || k < 0) throw new TypeError('Positive integer value expected in function combinationsWithRep');
            if (n < 1) throw new TypeError('k must be less than or equal to n + k - 1');
            if (k < n - 1) {
                var _prodrange = _productJs.product(n, n + k - 1);
                return _prodrange / _productJs.product(1, k);
            }
            var prodrange = _productJs.product(k + 1, n + k - 1);
            return prodrange / _productJs.product(1, n - 1);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
            var BigNumber = n.constructor;
            var result, i;
            var one = new BigNumber(1);
            var nMinusOne = n.minus(one);
            if (!isPositiveInteger(n) || !isPositiveInteger(k)) throw new TypeError('Positive integer value expected in function combinationsWithRep');
            if (n.lt(one)) throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');
            result = one;
            if (k.lt(nMinusOne)) for(i = one; i.lte(nMinusOne); i = i.plus(one))result = result.times(k.plus(i)).dividedBy(i);
            else for(i = one; i.lte(k); i = i.plus(one))result = result.times(nMinusOne.plus(i)).dividedBy(i);
            return result;
        }
    });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */ function isPositiveInteger(n) {
    return n.isInteger() && n.gte(0);
}

},{"../../utils/factory.js":"26foW","../../utils/number.js":"l1AB8","../../utils/product.js":"8TGRR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gPaqO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGamma", ()=>createGamma
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var _indexJs = require("../../plain/number/index.js");
var name = 'gamma';
var dependencies = [
    'typed',
    'config',
    'multiplyScalar',
    'pow',
    'BigNumber',
    'Complex'
];
var createGamma = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , multiplyScalar , pow , BigNumber: _BigNumber , Complex: _Complex  } = _ref;
    /**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */ function bigFactorial(n) {
        if (n < 8) {
            return new _BigNumber([
                1,
                1,
                2,
                6,
                24,
                120,
                720,
                5040
            ][n]);
        }
        var precision = config.precision + (Math.log(n.toNumber()) | 0);
        var Big = _BigNumber.clone({
            precision: precision
        });
        if (n % 2 === 1) {
            return n.times(bigFactorial(new _BigNumber(n - 1)));
        }
        var p = n;
        var prod = new Big(n);
        var sum = n.toNumber();
        while(p > 2){
            p -= 2;
            sum += p;
            prod = prod.times(sum);
        }
        return new _BigNumber(prod.toPrecision(_BigNumber.precision));
    }
    /**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5)       // returns 24
   *    math.gamma(-0.5)    // returns -3.5449077018110335
   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | Array | Matrix} n   A real or complex number
   * @return {number | Array | Matrix}    The gamma of `n`
   */ return typed(name, {
        number: _indexJs.gammaNumber,
        Complex: function Complex(n) {
            if (n.im === 0) return this(n.re);
            n = new _Complex(n.re - 1, n.im);
            var x = new _Complex(_indexJs.gammaP[0], 0);
            for(var i = 1; i < _indexJs.gammaP.length; ++i){
                var real = n.re + i; // x += p[i]/(n+i)
                var den = real * real + n.im * n.im;
                if (den !== 0) {
                    x.re += _indexJs.gammaP[i] * real / den;
                    x.im += -(_indexJs.gammaP[i] * n.im) / den;
                } else x.re = _indexJs.gammaP[i] < 0 ? -Infinity : Infinity;
            }
            var t = new _Complex(n.re + _indexJs.gammaG + 0.5, n.im);
            var twoPiSqrt = Math.sqrt(2 * Math.PI);
            n.re += 0.5;
            var result = pow(t, n);
            if (result.im === 0) // sqrt(2*PI)*result
            result.re *= twoPiSqrt;
            else if (result.re === 0) result.im *= twoPiSqrt;
            else {
                result.re *= twoPiSqrt;
                result.im *= twoPiSqrt;
            }
            var r = Math.exp(-t.re); // exp(-t)
            t.re = r * Math.cos(-t.im);
            t.im = r * Math.sin(-t.im);
            return multiplyScalar(multiplyScalar(result, t), x);
        },
        BigNumber: function BigNumber(n) {
            if (n.isInteger()) return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));
            if (!n.isFinite()) return new _BigNumber(n.isNegative() ? NaN : Infinity);
            throw new Error('Integer BigNumber expected');
        },
        'Array | Matrix': function ArrayMatrix(n) {
            return _collectionJs.deepMap(n, this);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","../../plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lEyzb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFactorial", ()=>createFactorial
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'factorial';
var dependencies = [
    'typed',
    'gamma'
];
var createFactorial = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , gamma  } = _ref;
    /**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5)    // returns 120
   *    math.factorial(3)    // returns 6
   *
   * See also:
   *
   *    combinations, combinationsWithRep, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */ return typed(name, {
        number: function number(n) {
            if (n < 0) throw new Error('Value must be non-negative');
            return gamma(n + 1);
        },
        BigNumber: function BigNumber(n) {
            if (n.isNegative()) throw new Error('Value must be non-negative');
            return gamma(n.plus(1));
        },
        'Array | Matrix': function ArrayMatrix(n) {
            return _collectionJs.deepMap(n, this);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1xIUT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createKldivergence", ()=>createKldivergence
);
var _factoryJs = require("../../utils/factory.js");
var name = 'kldivergence';
var dependencies = [
    'typed',
    'matrix',
    'divide',
    'sum',
    'multiply',
    'dotDivide',
    'log',
    'isNumeric'
];
var createKldivergence = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , divide , sum , multiply , dotDivide , log , isNumeric  } = _ref;
    function _kldiv(q, p) {
        var plength = p.size().length;
        var qlength = q.size().length;
        if (plength > 1) {
            throw new Error('first object must be one dimensional');
        }
        if (qlength > 1) {
            throw new Error('second object must be one dimensional');
        }
        if (plength !== qlength) {
            throw new Error('Length of two vectors must be equal');
        } // Before calculation, apply normalization
        var sumq = sum(q);
        if (sumq === 0) {
            throw new Error('Sum of elements in first object must be non zero');
        }
        var sump = sum(p);
        if (sump === 0) {
            throw new Error('Sum of elements in second object must be non zero');
        }
        var qnorm = divide(q, sum(q));
        var pnorm = divide(p, sum(p));
        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));
        if (isNumeric(result)) {
            return result;
        } else {
            return Number.NaN;
        }
    }
    /**
     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
     *
     * Syntax:
     *
     *     math.kldivergence(x, y)
     *
     * Examples:
     *
     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
     *
     *
     * @param  {Array | Matrix} q    First vector
     * @param  {Array | Matrix} p    Second vector
     * @return {number}              Returns distance between q and p
     */ return typed(name, {
        'Array, Array': function ArrayArray(q, p) {
            return _kldiv(matrix(q), matrix(p));
        },
        'Matrix, Array': function MatrixArray(q, p) {
            return _kldiv(q, matrix(p));
        },
        'Array, Matrix': function ArrayMatrix(q, p) {
            return _kldiv(matrix(q), p);
        },
        'Matrix, Matrix': function MatrixMatrix(q, p) {
            return _kldiv(q, p);
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aDuJJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMultinomial", ()=>createMultinomial
);
var _collectionJs = require("../../utils/collection.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'multinomial';
var dependencies = [
    'typed',
    'add',
    'divide',
    'multiply',
    'factorial',
    'isInteger',
    'isPositive'
];
var createMultinomial = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , add , divide , multiply , factorial , isInteger , isPositive  } = _ref;
    /**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]) // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */ return typed(name, {
        'Array | Matrix': function ArrayMatrix(a) {
            var sum = 0;
            var denom = 1;
            _collectionJs.deepForEach(a, function(ai) {
                if (!isInteger(ai) || !isPositive(ai)) throw new TypeError('Positive integer value expected in function multinomial');
                sum = add(sum, ai);
                denom = multiply(denom, factorial(ai));
            });
            return divide(factorial(sum), denom);
        }
    });
});

},{"../../utils/collection.js":"4hyl2","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k8f9C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPermutations", ()=>createPermutations
);
var _numberJs = require("../../utils/number.js");
var _productJs = require("../../utils/product.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'permutations';
var dependencies = [
    'typed',
    'factorial'
];
var createPermutations = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , factorial  } = _ref;
    /**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5)     // 120
   *    math.permutations(5, 3)  // 60
   *
   * See also:
   *
   *    combinations, combinationsWithRep, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */ return typed(name, {
        'number | BigNumber': factorial,
        'number, number': function numberNumber(n, k) {
            if (!_numberJs.isInteger(n) || n < 0) throw new TypeError('Positive integer value expected in function permutations');
            if (!_numberJs.isInteger(k) || k < 0) throw new TypeError('Positive integer value expected in function permutations');
            if (k > n) throw new TypeError('second argument k must be less than or equal to first argument n');
             // Permute n objects, k at a time
            return _productJs.product(n - k + 1, n);
        },
        'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
            var result, i;
            if (!isPositiveInteger(n) || !isPositiveInteger(k)) throw new TypeError('Positive integer value expected in function permutations');
            if (k.gt(n)) throw new TypeError('second argument k must be less than or equal to first argument n');
            var one = n.mul(0).add(1);
            result = one;
            for(i = n.minus(k).plus(1); i.lte(n); i = i.plus(1))result = result.times(i);
            return result;
        } // TODO: implement support for collection in permutations
    });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */ function isPositiveInteger(n) {
    return n.isInteger() && n.gte(0);
}

},{"../../utils/number.js":"l1AB8","../../utils/product.js":"8TGRR","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"quUWX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPickRandom", ()=>createPickRandom
);
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var _isJs = require("../../utils/is.js");
var _seededRNGJs = require("./util/seededRNG.js");
var name = 'pickRandom';
var dependencies = [
    'typed',
    'config',
    '?on'
];
var createPickRandom = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , on  } = _ref;
    // seeded pseudo random number generator
    var rng = _seededRNGJs.createRng(config.randomSeed);
    if (on) on('config', function(curr, prev) {
        if (curr.randomSeed !== prev.randomSeed) rng = _seededRNGJs.createRng(curr.randomSeed);
    });
    /**
   * @param {Array | Matrix} possibles
   * @param {{
   *   number?: number,
   *   weights?: Array | Matrix,
   *   elementWise: boolean
   * }} options
   * @returns {number | Array}
   * @private
   */ function _pickRandom(possibles, _ref2) {
        var { number , weights , elementWise =true  } = _ref2;
        var single = typeof number === 'undefined';
        if (single) {
            number = 1;
        }
        var createMatrix = _isJs.isMatrix(possibles) ? possibles.create : _isJs.isMatrix(weights) ? weights.create : null;
        possibles = possibles.valueOf(); // get Array
        if (weights) {
            weights = weights.valueOf(); // get Array
        }
        if (elementWise === true) {
            possibles = _arrayJs.flatten(possibles);
            weights = _arrayJs.flatten(weights);
        }
        var totalWeights = 0;
        if (typeof weights !== 'undefined') {
            if (weights.length !== possibles.length) {
                throw new Error('Weights must have the same length as possibles');
            }
            for(var i = 0, len = weights.length; i < len; i++){
                if (!_isJs.isNumber(weights[i]) || weights[i] < 0) {
                    throw new Error('Weights must be an array of positive numbers');
                }
                totalWeights += weights[i];
            }
        }
        var length = possibles.length;
        var result = [];
        var pick;
        while(result.length < number){
            if (typeof weights === 'undefined') {
                pick = possibles[Math.floor(rng() * length)];
            } else {
                var randKey = rng() * totalWeights;
                for(var _i = 0, _len = possibles.length; _i < _len; _i++){
                    randKey -= weights[_i];
                    if (randKey < 0) {
                        pick = possibles[_i];
                        break;
                    }
                }
            }
            result.push(pick);
        }
        return single ? result[0] : createMatrix ? createMatrix(result) : result;
    }
    /**
   * Random pick one or more values from a one dimensional array.
   * Array elements are picked using a random function with uniform or weighted distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *     math.pickRandom(array, number)
   *     math.pickRandom(array, weights)
   *     math.pickRandom(array, number, weights)
   *     math.pickRandom(array, weights, number)
   *     math.pickRandom(array, { weights, number, elementWise })
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
   *
   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })
   *         // returns one of the items in the array
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array | Matrix} array     A one dimensional array
   * @param {Int} number               An int or float
   * @param {Array | Matrix} weights   An array of ints or floats
   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.
   *                                   Returns an array with the configured number of elements when number is > 1.
   */ return typed(name, {
        'Array | Matrix': function ArrayMatrix(possibles) {
            return _pickRandom(possibles, {
            });
        },
        'Array | Matrix, Object': function ArrayMatrixObject(possibles, options) {
            return _pickRandom(possibles, options);
        },
        'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {
            return _pickRandom(possibles, {
                number
            });
        },
        'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(possibles, weights) {
            return _pickRandom(possibles, {
                weights
            });
        },
        'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {
            return _pickRandom(possibles, {
                number,
                weights
            });
        },
        'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {
            return _pickRandom(possibles, {
                number,
                weights
            });
        }
    });
});

},{"../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","../../utils/is.js":"iwdlF","./util/seededRNG.js":"Qv2fV","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"Qv2fV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRng", ()=>createRng
);
var _seedrandom = require("seedrandom");
var _seedrandomDefault = parcelHelpers.interopDefault(_seedrandom);
var singletonRandom = /* #__PURE__ */ _seedrandomDefault.default(Date.now());
function createRng(randomSeed) {
    var random; // create a new random generator with given seed
    function setSeed(seed) {
        random = seed === null ? singletonRandom : _seedrandomDefault.default(String(seed));
    } // initialize a seeded pseudo random number generator with config's random seed
    setSeed(randomSeed); // wrapper function so the rng can be updated via generator
    function rng() {
        return random();
    }
    return rng;
}

},{"seedrandom":"lSuZy","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lSuZy":[function(require,module,exports) {
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.
// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require('./lib/alea');
// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require('./lib/xor128');
// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require('./lib/xorwow');
// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require('./lib/xorshift7');
// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require('./lib/xor4096');
// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require('./lib/tychei');
// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require('./seedrandom');
sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;
module.exports = sr;

},{"./lib/alea":"2vwaY","./lib/xor128":"cWd2v","./lib/xorwow":"8M0As","./lib/xorshift7":"hOID1","./lib/xor4096":"9X3bP","./lib/tychei":"lgRxF","./seedrandom":"jI1gJ"}],"2vwaY":[function(require,module,exports) {
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -
// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
(function(global, module, define) {
    function Alea(seed) {
        var me = this, mash = Mash();
        me.next = function() {
            var t = 2091639 * me.s0 + me.c * 0.00000000023283064365386963; // 2^-32
            me.s0 = me.s1;
            me.s1 = me.s2;
            return me.s2 = t - (me.c = t | 0);
        };
        // Apply the seeding algorithm from Baagoe.
        me.c = 1;
        me.s0 = mash(' ');
        me.s1 = mash(' ');
        me.s2 = mash(' ');
        me.s0 -= mash(seed);
        if (me.s0 < 0) me.s0 += 1;
        me.s1 -= mash(seed);
        if (me.s1 < 0) me.s1 += 1;
        me.s2 -= mash(seed);
        if (me.s2 < 0) me.s2 += 1;
        mash = null;
    }
    function copy(f, t) {
        t.c = f.c;
        t.s0 = f.s0;
        t.s1 = f.s1;
        t.s2 = f.s2;
        return t;
    }
    function impl(seed, opts) {
        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
        prng.int32 = function() {
            return xg.next() * 4294967296 | 0;
        };
        prng.double = function() {
            return prng() + (prng() * 2097152 | 0) * 0.00000000000000011102230246251565; // 2^-53
        };
        prng.quick = prng;
        if (state) {
            if (typeof state == 'object') copy(state, xg);
            prng.state = function() {
                return copy(xg, {
                });
            };
        }
        return prng;
    }
    function Mash() {
        var n = 4022871197;
        var mash = function(data) {
            data = String(data);
            for(var i = 0; i < data.length; i++){
                n += data.charCodeAt(i);
                var h = 0.02519603282416938 * n;
                n = h >>> 0;
                h -= n;
                h *= n;
                n = h >>> 0;
                h -= n;
                n += h * 4294967296; // 2^32
            }
            return (n >>> 0) * 0.00000000023283064365386963; // 2^-32
        };
        return mash;
    }
    if (module && module.exports) module.exports = impl;
    else if (define && define.amd) define(function() {
        return impl;
    });
    else this.alea = impl;
})(this, typeof module == 'object' && module, typeof define == 'function' && define // present with an AMD loader
);

},{}],"cWd2v":[function(require,module,exports) {
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper
(function(global, module, define) {
    function XorGen(seed) {
        var me = this, strseed = '';
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        // Set up generator function.
        me.next = function() {
            var t = me.x ^ me.x << 11;
            me.x = me.y;
            me.y = me.z;
            me.z = me.w;
            return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;
        };
        if (seed === (seed | 0)) // Integer seed.
        me.x = seed;
        else // String seed.
        strseed += seed;
        // Mix in string seed, then discard an initial batch of 64 values.
        for(var k = 0; k < strseed.length + 64; k++){
            me.x ^= strseed.charCodeAt(k) | 0;
            me.next();
        }
    }
    function copy(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        return t;
    }
    function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / 2097152;
            while (result === 0)
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (typeof state == 'object') copy(state, xg);
            prng.state = function() {
                return copy(xg, {
                });
            };
        }
        return prng;
    }
    if (module && module.exports) module.exports = impl;
    else if (define && define.amd) define(function() {
        return impl;
    });
    else this.xor128 = impl;
})(this, typeof module == 'object' && module, typeof define == 'function' && define // present with an AMD loader
);

},{}],"8M0As":[function(require,module,exports) {
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper
(function(global, module, define) {
    function XorGen(seed) {
        var me = this, strseed = '';
        // Set up generator function.
        me.next = function() {
            var t = me.x ^ me.x >>> 2;
            me.x = me.y;
            me.y = me.z;
            me.z = me.w;
            me.w = me.v;
            return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;
        };
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        me.v = 0;
        if (seed === (seed | 0)) // Integer seed.
        me.x = seed;
        else // String seed.
        strseed += seed;
        // Mix in string seed, then discard an initial batch of 64 values.
        for(var k = 0; k < strseed.length + 64; k++){
            me.x ^= strseed.charCodeAt(k) | 0;
            if (k == strseed.length) me.d = me.x << 10 ^ me.x >>> 4;
            me.next();
        }
    }
    function copy(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        t.v = f.v;
        t.d = f.d;
        return t;
    }
    function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / 2097152;
            while (result === 0)
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (typeof state == 'object') copy(state, xg);
            prng.state = function() {
                return copy(xg, {
                });
            };
        }
        return prng;
    }
    if (module && module.exports) module.exports = impl;
    else if (define && define.amd) define(function() {
        return impl;
    });
    else this.xorwow = impl;
})(this, typeof module == 'object' && module, typeof define == 'function' && define // present with an AMD loader
);

},{}],"hOID1":[function(require,module,exports) {
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf
(function(global, module, define) {
    function XorGen(seed1) {
        var me1 = this;
        // Set up generator function.
        me1.next = function() {
            // Update xor generator.
            var X = me1.x, i = me1.i, t, v, w;
            t = X[i];
            t ^= t >>> 7;
            v = t ^ t << 24;
            t = X[i + 1 & 7];
            v ^= t ^ t >>> 10;
            t = X[i + 3 & 7];
            v ^= t ^ t >>> 3;
            t = X[i + 4 & 7];
            v ^= t ^ t << 7;
            t = X[i + 7 & 7];
            t = t ^ t << 13;
            v ^= t ^ t << 9;
            X[i] = v;
            me1.i = i + 1 & 7;
            return v;
        };
        function init(me, seed) {
            var j, w, X = [];
            if (seed === (seed | 0)) // Seed state array using a 32-bit integer.
            w = X[0] = seed;
            else {
                // Seed state using a string.
                seed = '' + seed;
                for(j = 0; j < seed.length; ++j)X[j & 7] = X[j & 7] << 15 ^ seed.charCodeAt(j) + X[j + 1 & 7] << 13;
            }
            // Enforce an array length of 8, not all zeroes.
            while(X.length < 8)X.push(0);
            for(j = 0; j < 8 && X[j] === 0; ++j);
            if (j == 8) w = X[7] = -1;
            else w = X[j];
            me.x = X;
            me.i = 0;
            // Discard an initial 256 values.
            for(j = 256; j > 0; --j)me.next();
        }
        init(me1, seed1);
    }
    function copy(f, t) {
        t.x = f.x.slice();
        t.i = f.i;
        return t;
    }
    function impl(seed, opts) {
        if (seed == null) seed = +new Date;
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / 2097152;
            while (result === 0)
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (state.x) copy(state, xg);
            prng.state = function() {
                return copy(xg, {
                });
            };
        }
        return prng;
    }
    if (module && module.exports) module.exports = impl;
    else if (define && define.amd) define(function() {
        return impl;
    });
    else this.xorshift7 = impl;
})(this, typeof module == 'object' && module, typeof define == 'function' && define // present with an AMD loader
);

},{}],"9X3bP":[function(require,module,exports) {
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().
(function(global, module, define) {
    function XorGen(seed1) {
        var me1 = this;
        // Set up generator function.
        me1.next = function() {
            var w = me1.w, X = me1.X, i = me1.i, t, v;
            // Update Weyl generator.
            me1.w = w = w + 1640531527 | 0;
            // Update xor generator.
            v = X[i + 34 & 127];
            t = X[i = i + 1 & 127];
            v ^= v << 13;
            t ^= t << 17;
            v ^= v >>> 15;
            t ^= t >>> 12;
            // Update Xor generator array state.
            v = X[i] = v ^ t;
            me1.i = i;
            // Result is the combination.
            return v + (w ^ w >>> 16) | 0;
        };
        function init(me, seed) {
            var t, v, i, j, w, X = [], limit = 128;
            if (seed === (seed | 0)) {
                // Numeric seeds initialize v, which is used to generates X.
                v = seed;
                seed = null;
            } else {
                // String seeds are mixed into v and X one character at a time.
                seed = seed + '\0';
                v = 0;
                limit = Math.max(limit, seed.length);
            }
            // Initialize circular array and weyl value.
            for(i = 0, j = -32; j < limit; ++j){
                // Put the unicode characters into the array, and shuffle them.
                if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
                // After 32 shuffles, take v as the starting w value.
                if (j === 0) w = v;
                v ^= v << 10;
                v ^= v >>> 15;
                v ^= v << 4;
                v ^= v >>> 13;
                if (j >= 0) {
                    w = w + 1640531527 | 0; // Weyl.
                    t = X[j & 127] ^= v + w; // Combine xor and weyl to init array.
                    i = 0 == t ? i + 1 : 0; // Count zeroes.
                }
            }
            // We have detected all zeroes; make the key nonzero.
            if (i >= 128) X[(seed && seed.length || 0) & 127] = -1;
            // Run the generator 512 times to further mix the state before using it.
            // Factoring this as a function slows the main generator, so it is just
            // unrolled here.  The weyl generator is not advanced while warming up.
            i = 127;
            for(j = 512; j > 0; --j){
                v = X[i + 34 & 127];
                t = X[i = i + 1 & 127];
                v ^= v << 13;
                t ^= t << 17;
                v ^= v >>> 15;
                t ^= t >>> 12;
                X[i] = v ^ t;
            }
            // Storing state as object members is faster than using closure variables.
            me.w = w;
            me.X = X;
            me.i = i;
        }
        init(me1, seed1);
    }
    function copy(f, t) {
        t.i = f.i;
        t.w = f.w;
        t.X = f.X.slice();
        return t;
    }
    function impl(seed, opts) {
        if (seed == null) seed = +new Date;
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / 2097152;
            while (result === 0)
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (state.X) copy(state, xg);
            prng.state = function() {
                return copy(xg, {
                });
            };
        }
        return prng;
    }
    if (module && module.exports) module.exports = impl;
    else if (define && define.amd) define(function() {
        return impl;
    });
    else this.xor4096 = impl;
})(this, typeof module == 'object' && module, typeof define == 'function' && define // present with an AMD loader
);

},{}],"lgRxF":[function(require,module,exports) {
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
(function(global, module, define) {
    function XorGen(seed) {
        var me = this, strseed = '';
        // Set up generator function.
        me.next = function() {
            var b = me.b, c = me.c, d = me.d, a = me.a;
            b = b << 25 ^ b >>> 7 ^ c;
            c = c - d | 0;
            d = d << 24 ^ d >>> 8 ^ a;
            a = a - b | 0;
            me.b = b = b << 20 ^ b >>> 12 ^ c;
            me.c = c = c - d | 0;
            me.d = d << 16 ^ c >>> 16 ^ a;
            return me.a = a - b | 0;
        };
        /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */ me.a = 0;
        me.b = 0;
        me.c = -1640531527;
        me.d = 1367130551;
        if (seed === Math.floor(seed)) {
            // Integer seed.
            me.a = seed / 4294967296 | 0;
            me.b = seed | 0;
        } else // String seed.
        strseed += seed;
        // Mix in string seed, then discard an initial batch of 64 values.
        for(var k = 0; k < strseed.length + 20; k++){
            me.b ^= strseed.charCodeAt(k) | 0;
            me.next();
        }
    }
    function copy(f, t) {
        t.a = f.a;
        t.b = f.b;
        t.c = f.c;
        t.d = f.d;
        return t;
    }
    function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
            do var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / 2097152;
            while (result === 0)
            return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
            if (typeof state == 'object') copy(state, xg);
            prng.state = function() {
                return copy(xg, {
                });
            };
        }
        return prng;
    }
    if (module && module.exports) module.exports = impl;
    else if (define && define.amd) define(function() {
        return impl;
    });
    else this.tychei = impl;
})(this, typeof module == 'object' && module, typeof define == 'function' && define // present with an AMD loader
);

},{}],"jI1gJ":[function(require,module,exports) {
/*
Copyright 2019 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/ (function(global, pool, math) {
    //
    // The following constants are related to IEEE 754 limits.
    //
    var width = 256, chunks = 6, digits = 52, rngname = 'random', startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto; // node.js crypto module, initialized at the bottom.
    //
    // seedrandom()
    // This is the seedrandom function described above.
    //
    function seedrandom(seed1, options, callback) {
        var key = [];
        options = options == true ? {
            entropy: true
        } : options || {
        };
        // Flatten the seed string or build one from local entropy if needed.
        var shortseed = mixkey(flatten(options.entropy ? [
            seed1,
            tostring(pool)
        ] : seed1 == null ? autoseed() : seed1, 3), key);
        // Use the seed to initialize an ARC4 generator.
        var arc4 = new ARC4(key);
        // This function returns a random double in [0, 1) that contains
        // randomness in every bit of the mantissa of the IEEE 754 value.
        var prng1 = function() {
            var n = arc4.g(chunks), d = startdenom, x = 0; //   and no 'extra last byte'.
            while(n < significance){
                n = (n + x) * width; //   shifting numerator and
                d *= width; //   denominator and generating a
                x = arc4.g(1); //   new least-significant-byte.
            }
            while(n >= overflow){
                n /= 2; //   last byte, shift everything
                d /= 2; //   right using integer math until
                x >>>= 1; //   we have exactly the desired bits.
            }
            return (n + x) / d; // Form the number within [0, 1).
        };
        prng1.int32 = function() {
            return arc4.g(4) | 0;
        };
        prng1.quick = function() {
            return arc4.g(4) / 4294967296;
        };
        prng1.double = prng1;
        // Mix the randomness into accumulated entropy.
        mixkey(tostring(arc4.S), pool);
        // Calling convention: what to return as a function of prng, seed, is_math.
        return (options.pass || callback || function(prng, seed, is_math_call, state) {
            if (state) {
                // Load the arc4 state from the given state if it has an S array.
                if (state.S) copy(state, arc4);
                // Only provide the .state method if requested via options.state.
                prng.state = function() {
                    return copy(arc4, {
                    });
                };
            }
            // If called as a method of Math (Math.seedrandom()), mutate
            // Math.random because that is how seedrandom.js has worked since v1.0.
            if (is_math_call) {
                math[rngname] = prng;
                return seed;
            } else return prng;
        })(prng1, shortseed, 'global' in options ? options.global : this == math, options.state);
    }
    //
    // ARC4
    //
    // An ARC4 implementation.  The constructor takes a key in the form of
    // an array of at most (width) integers that should be 0 <= x < (width).
    //
    // The g(count) method returns a pseudorandom integer that concatenates
    // the next (count) outputs from ARC4.  Its return value is a number x
    // that is in the range 0 <= x < (width ^ count).
    //
    function ARC4(key) {
        var t1, keylen = key.length, me = this, i1 = 0, j1 = me.i = me.j = 0, s1 = me.S = [];
        // The empty key [] is treated as [0].
        if (!keylen) key = [
            keylen++
        ];
        // Set up S using the standard key scheduling algorithm.
        while(i1 < width)s1[i1] = i1++;
        for(i1 = 0; i1 < width; i1++){
            s1[i1] = s1[j1 = mask & j1 + key[i1 % keylen] + (t1 = s1[i1])];
            s1[j1] = t1;
        }
        // The "g" method returns the next (count) outputs as one number.
        (me.g = function(count) {
            // Using instance members instead of closure state nearly doubles speed.
            var t, r = 0, i = me.i, j = me.j, s = me.S;
            while(count--){
                t = s[i = mask & i + 1];
                r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];
            }
            me.i = i;
            me.j = j;
            return r;
        // For robust unpredictability, the function call below automatically
        // discards an initial batch of values.  This is called RC4-drop[256].
        // See http://google.com/search?q=rsa+fluhrer+response&btnI
        })(width);
    }
    //
    // copy()
    // Copies internal state of ARC4 to or from a plain object.
    //
    function copy(f, t) {
        t.i = f.i;
        t.j = f.j;
        t.S = f.S.slice();
        return t;
    }
    //
    // flatten()
    // Converts an object tree to nested arrays of strings.
    //
    function flatten(obj, depth) {
        var result = [], typ = typeof obj, prop;
        if (depth && typ == 'object') {
            for(prop in obj)try {
                result.push(flatten(obj[prop], depth - 1));
            } catch (e) {
            }
        }
        return result.length ? result : typ == 'string' ? obj : obj + '\0';
    }
    //
    // mixkey()
    // Mixes a string seed into a key that is an array of integers, and
    // returns a shortened string seed that is equivalent to the result key.
    //
    function mixkey(seed, key) {
        var stringseed = seed + '', smear, j = 0;
        while(j < stringseed.length)key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
        return tostring(key);
    }
    //
    // autoseed()
    // Returns an object for autoseeding, using window.crypto and Node crypto
    // module if available.
    //
    function autoseed() {
        try {
            var out;
            if (nodecrypto && (out = nodecrypto.randomBytes)) // The use of 'out' to remember randomBytes makes tight minified code.
            out = out(width);
            else {
                out = new Uint8Array(width);
                (global.crypto || global.msCrypto).getRandomValues(out);
            }
            return tostring(out);
        } catch (e) {
            var browser = global.navigator, plugins = browser && browser.plugins;
            return [
                +new Date,
                global,
                plugins,
                global.screen,
                tostring(pool)
            ];
        }
    }
    //
    // tostring()
    // Converts an array of charcodes to a string
    //
    function tostring(a) {
        return String.fromCharCode.apply(0, a);
    }
    //
    // When seedrandom.js is loaded, we immediately mix a few bits
    // from the built-in RNG into the entropy pool.  Because we do
    // not want to interfere with deterministic PRNG state later,
    // seedrandom will not call math.random on its own again after
    // initialization.
    //
    mixkey(math.random(), pool);
    //
    // Nodejs and AMD support: export the implementation as a module using
    // either convention.
    //
    if (typeof module == 'object' && module.exports) {
        module.exports = seedrandom;
        // When in node.js, try using crypto package for autoseeding.
        try {
            nodecrypto = require('crypto');
        } catch (ex) {
        }
    } else if (typeof define == 'function' && define.amd) define(function() {
        return seedrandom;
    });
    else // When included as a plain script, set up Math.seedrandom global.
    math['seed' + rngname] = seedrandom;
// End anonymous scope, and pass initial values.
})(// global: `self` in browsers (including strict mode and web workers),
// otherwise `this` in Node and other environments
typeof self !== 'undefined' ? self : this, [], Math // math: package containing random, pow, and seedrandom
);

},{"crypto":"joWnX"}],"joWnX":[function(require,module,exports) {
"use strict";

},{}],"72iqv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRandom", ()=>createRandom
);
parcelHelpers.export(exports, "createRandomNumber", ()=>createRandomNumber
);
var _factoryJs = require("../../utils/factory.js");
var _isJs = require("../../utils/is.js");
var _seededRNGJs = require("./util/seededRNG.js");
var _randomMatrixJs = require("./util/randomMatrix.js");
var name = 'random';
var dependencies = [
    'typed',
    'config',
    '?on'
];
var createRandom = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , on  } = _ref;
    // seeded pseudo random number generator
    var rng = _seededRNGJs.createRng(config.randomSeed);
    if (on) on('config', function(curr, prev) {
        if (curr.randomSeed !== prev.randomSeed) rng = _seededRNGJs.createRng(curr.randomSeed);
    });
    function _randomMatrix(size, min, max) {
        var res = _randomMatrixJs.randomMatrix(size.valueOf(), ()=>_random(min, max)
        );
        return _isJs.isMatrix(size) ? size.create(res) : res;
    }
    function _random(min, max) {
        return min + rng() * (max - min);
    }
    /**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random()       // returns a random number between 0 and 1
   *     math.random(100)    // returns a random number between 0 and 100
   *     math.random(30, 40) // returns a random number between 30 and 40
   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */ return typed(name, {
        '': ()=>_random(0, 1)
        ,
        number: (max)=>_random(0, max)
        ,
        'number, number': (min, max)=>_random(min, max)
        ,
        'Array | Matrix': (size)=>_randomMatrix(size, 0, 1)
        ,
        'Array | Matrix, number': (size, max)=>_randomMatrix(size, 0, max)
        ,
        'Array | Matrix, number, number': (size, min, max)=>_randomMatrix(size, min, max)
    });
}); // number only implementation of random, no matrix support
var createRandomNumber = /* #__PURE__ */ _factoryJs.factory(name, [
    'typed',
    'config',
    '?on'
], (_ref2)=>{
    var { typed , config , on , matrix  } = _ref2;
    // seeded pseudo random number generator1
    var rng = _seededRNGJs.createRng(config.randomSeed);
    if (on) on('config', function(curr, prev) {
        if (curr.randomSeed !== prev.randomSeed) rng = _seededRNGJs.createRng(curr.randomSeed);
    });
    function _random(min, max) {
        return min + rng() * (max - min);
    }
    return typed(name, {
        '': ()=>_random(0, 1)
        ,
        number: (max)=>_random(0, max)
        ,
        'number, number': (min, max)=>_random(min, max)
    });
});

},{"../../utils/factory.js":"26foW","../../utils/is.js":"iwdlF","./util/seededRNG.js":"Qv2fV","./util/randomMatrix.js":"kVDBR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kVDBR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This is a util function for generating a random matrix recursively.
 * @param {number[]} size
 * @param {function} random
 * @returns {Array}
 */ parcelHelpers.export(exports, "randomMatrix", ()=>randomMatrix
);
function randomMatrix(size, random) {
    var data = [];
    size = size.slice(0);
    if (size.length > 1) for(var i = 0, length = size.shift(); i < length; i++)data.push(randomMatrix(size, random));
    else for(var _i = 0, _length = size.shift(); _i < _length; _i++)data.push(random());
    return data;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gH9nJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRandomInt", ()=>createRandomInt
);
var _factoryJs = require("../../utils/factory.js");
var _randomMatrixJs = require("./util/randomMatrix.js");
var _seededRNGJs = require("./util/seededRNG.js");
var _isJs = require("../../utils/is.js");
var name = 'randomInt';
var dependencies = [
    'typed',
    'config',
    '?on'
];
var createRandomInt = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , on  } = _ref;
    // seeded pseudo random number generator
    var rng = _seededRNGJs.createRng(config.randomSeed);
    if (on) on('config', function(curr, prev) {
        if (curr.randomSeed !== prev.randomSeed) rng = _seededRNGJs.createRng(curr.randomSeed);
    });
    function _randomIntMatrix(size, min, max) {
        var res = _randomMatrixJs.randomMatrix(size.valueOf(), ()=>_randomInt(min, max)
        );
        return _isJs.isMatrix(size) ? size.create(res) : res;
    }
    function _randomInt(min, max) {
        return Math.floor(min + rng() * (max - min));
    }
    /**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt()                // generate a random integer between 0 and 1
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100)    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40) // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */ return typed(name, {
        '': ()=>_randomInt(0, 1)
        ,
        number: (max)=>_randomInt(0, max)
        ,
        'number, number': (min, max)=>_randomInt(min, max)
        ,
        'Array | Matrix': (size)=>_randomIntMatrix(size, 0, 1)
        ,
        'Array | Matrix, number': (size, max)=>_randomIntMatrix(size, 0, max)
        ,
        'Array | Matrix, number, number': (size, min, max)=>_randomIntMatrix(size, min, max)
    });
});

},{"../../utils/factory.js":"26foW","./util/randomMatrix.js":"kVDBR","./util/seededRNG.js":"Qv2fV","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iKXi1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createStirlingS2", ()=>createStirlingS2
);
var _factoryJs = require("../../utils/factory.js");
var name = 'stirlingS2';
var dependencies = [
    'typed',
    'addScalar',
    'subtract',
    'multiplyScalar',
    'divideScalar',
    'pow',
    'factorial',
    'combinations',
    'isNegative',
    'isInteger',
    'larger'
];
var createStirlingS2 = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , addScalar , subtract , multiplyScalar , divideScalar , pow , factorial , combinations , isNegative , isInteger , larger  } = _ref;
    /**
   * The Stirling numbers of the second kind, counts the number of ways to partition
   * a set of n labelled objects into k nonempty unlabelled subsets.
   * stirlingS2 only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   *  If n = k or k = 1, then s(n,k) = 1
   *
   * Syntax:
   *
   *   math.stirlingS2(n, k)
   *
   * Examples:
   *
   *    math.stirlingS2(5, 3) //returns 25
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     S(n,k)
   */ return typed(name, {
        'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
            if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) throw new TypeError('Non-negative integer value expected in function stirlingS2');
            else if (larger(k, n)) throw new TypeError('k must be less than or equal to n in function stirlingS2');
             // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]
            var kFactorial = factorial(k);
            var result = 0;
            for(var i = 0; i <= k; i++){
                var negativeOne = pow(-1, subtract(k, i));
                var kChooseI = combinations(k, i);
                var iPower = pow(i, n);
                result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));
            }
            return divideScalar(result, kFactorial);
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"i9Ddl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBellNumbers", ()=>createBellNumbers
);
var _factoryJs = require("../../utils/factory.js");
var name = 'bellNumbers';
var dependencies = [
    'typed',
    'addScalar',
    'isNegative',
    'isInteger',
    'stirlingS2'
];
var createBellNumbers = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , addScalar , isNegative , isInteger , stirlingS2  } = _ref;
    /**
   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
   * bellNumbers only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.bellNumbers(n)
   *
   * Examples:
   *
   *    math.bellNumbers(3) // returns 5
   *    math.bellNumbers(8) // returns 4140
   *
   * See also:
   *
   *    stirlingS2
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @return {Number | BigNumber}     B(n)
   */ return typed(name, {
        'number | BigNumber': function numberBigNumber(n) {
            if (!isInteger(n) || isNegative(n)) throw new TypeError('Non-negative integer value expected in function bellNumbers');
             // Sum (k=0, n) S(n,k).
            var result = 0;
            for(var i = 0; i <= n; i++)result = addScalar(result, stirlingS2(n, i));
            return result;
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"egWZj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCatalan", ()=>createCatalan
);
var _factoryJs = require("../../utils/factory.js");
var name = 'catalan';
var dependencies = [
    'typed',
    'addScalar',
    'divideScalar',
    'multiplyScalar',
    'combinations',
    'isNegative',
    'isInteger'
];
var createCatalan = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , addScalar , divideScalar , multiplyScalar , combinations , isNegative , isInteger  } = _ref;
    /**
   * The Catalan Numbers enumerate combinatorial structures of many different types.
   * catalan only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.catalan(n)
   *
   * Examples:
   *
   *    math.catalan(3) // returns 5
   *    math.catalan(8) // returns 1430
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    nth Catalan number
   * @return {Number | BigNumber}     Cn(n)
   */ return typed(name, {
        'number | BigNumber': function numberBigNumber(n) {
            if (!isInteger(n) || isNegative(n)) throw new TypeError('Non-negative integer value expected in function catalan');
            return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aNToZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createComposition", ()=>createComposition
);
var _factoryJs = require("../../utils/factory.js");
var name = 'composition';
var dependencies = [
    'typed',
    'addScalar',
    'combinations',
    'isNegative',
    'isPositive',
    'isInteger',
    'larger'
];
var createComposition = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , addScalar , combinations , isPositive , isNegative , isInteger , larger  } = _ref;
    /**
   * The composition counts of n into k parts.
   *
   * composition only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *   math.composition(n, k)
   *
   * Examples:
   *
   *    math.composition(5, 3) // returns 6
   *
   * See also:
   *
   *    combinations
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
   */ return typed(name, {
        'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
            if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) throw new TypeError('Positive integer value expected in function composition');
            else if (larger(k, n)) throw new TypeError('k must be less than or equal to n in function composition');
            return combinations(addScalar(n, -1), addScalar(k, -1));
        }
    });
});

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3rQ8N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSimplify", ()=>createSimplify
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var _utilJs = require("./simplify/util.js");
var _simplifyCoreJs = require("./simplify/simplifyCore.js");
var _simplifyConstantJs = require("./simplify/simplifyConstant.js");
var _resolveJs = require("./simplify/resolve.js");
var _objectJs = require("../../utils/object.js");
var _mapJs = require("../../utils/map.js");
var name = 'simplify';
var dependencies = [
    'config',
    'typed',
    'parse',
    'add',
    'subtract',
    'multiply',
    'divide',
    'pow',
    'isZero',
    'equal',
    '?fraction',
    '?bignumber',
    'mathWithTransform',
    'ConstantNode',
    'FunctionNode',
    'OperatorNode',
    'ParenthesisNode',
    'SymbolNode'
];
var createSimplify = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { config , typed , parse , add , subtract , multiply , divide , pow , isZero , equal , fraction , bignumber , mathWithTransform , ConstantNode , FunctionNode , OperatorNode , ParenthesisNode , SymbolNode  } = _ref;
    var simplifyConstant = _simplifyConstantJs.createSimplifyConstant({
        typed,
        config,
        mathWithTransform,
        fraction,
        bignumber,
        ConstantNode,
        OperatorNode,
        FunctionNode,
        SymbolNode
    });
    var simplifyCore = _simplifyCoreJs.createSimplifyCore({
        equal,
        isZero,
        add,
        subtract,
        multiply,
        divide,
        pow,
        ConstantNode,
        OperatorNode,
        FunctionNode,
        ParenthesisNode
    });
    var resolve = _resolveJs.createResolve({
        parse,
        FunctionNode,
        OperatorNode,
        ParenthesisNode
    });
    var { isCommutative , isAssociative , flatten , unflattenr , unflattenl , createMakeNodeFunction  } = _utilJs.createUtil({
        FunctionNode,
        OperatorNode,
        SymbolNode
    });
    /**
   * Simplify an expression tree.
   *
   * A list of rules are applied to an expression, repeating over the list until
   * no further changes are made.
   * It's possible to pass a custom set of rules to the function as second
   * argument. A rule can be specified as an object, string, or function:
   *
   *     const rules = [
   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
   *       function (node) {
   *         // ... return a new node or return the node unchanged
   *         return node
   *       }
   *     ]
   *
   * String and object rules consist of a left and right pattern. The left is
   * used to match against the expression and the right determines what matches
   * are replaced with. The main difference between a pattern and a normal
   * expression is that variables starting with the following characters are
   * interpreted as wildcards:
   *
   * - 'n' - matches any Node
   * - 'c' - matches any ConstantNode
   * - 'v' - matches any Node that is not a ConstantNode
   *
   * The default list of rules is exposed on the function as `simplify.rules`
   * and can be used as a basis to built a set of custom rules.
   *
   * For more details on the theory, see:
   *
   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
   *
   *  An optional `options` argument can be passed as last argument of `simplify`.
   *  There is currently one option available:
   *  - `exactFractions`: a boolean which is `true` by default.
   *  - `fractionsLimit`: when `exactFractions` is true, a fraction will be returned
   *    only when both numerator and denominator are smaller than `fractionsLimit`.
   *    Default value is 10000.
   *
   * Syntax:
   *
   *     simplify(expr)
   *     simplify(expr, rules)
   *     simplify(expr, rules)
   *     simplify(expr, rules, scope)
   *     simplify(expr, rules, scope, options)
   *     simplify(expr, scope)
   *     simplify(expr, scope, options)
   *
   * Examples:
   *
   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node "2 * x"
   *     math.simplify('2 * 3 * x', {x: 4})        // Node "24"
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify(f)                          // Node "2 * x"
   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node "x * 2 / 5"
   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node "0.4 * x"
   *
   * See also:
   *
   *     derivative, parse, evaluate, rationalize
   *
   * @param {Node | string} expr
   *            The expression to be simplified
   * @param {Array<{l:string, r: string} | string | function>} [rules]
   *            Optional list with custom rules
   * @return {Node} Returns the simplified form of `expr`
   */ var simplify = typed('simplify', {
        string: function string(expr) {
            return this(parse(expr), this.rules, _mapJs.createEmptyMap(), {
            });
        },
        'string, Map | Object': function stringMapObject(expr, scope) {
            return this(parse(expr), this.rules, scope, {
            });
        },
        'string, Map | Object, Object': function stringMapObjectObject(expr, scope, options) {
            return this(parse(expr), this.rules, scope, options);
        },
        'string, Array': function stringArray(expr, rules) {
            return this(parse(expr), rules, _mapJs.createEmptyMap(), {
            });
        },
        'string, Array, Map | Object': function stringArrayMapObject(expr, rules, scope) {
            return this(parse(expr), rules, scope, {
            });
        },
        'string, Array, Map | Object, Object': function stringArrayMapObjectObject(expr, rules, scope, options) {
            return this(parse(expr), rules, scope, options);
        },
        'Node, Map | Object': function NodeMapObject(expr, scope) {
            return this(expr, this.rules, scope, {
            });
        },
        'Node, Map | Object, Object': function NodeMapObjectObject(expr, scope, options) {
            return this(expr, this.rules, scope, options);
        },
        Node: function Node(expr) {
            return this(expr, this.rules, _mapJs.createEmptyMap(), {
            });
        },
        'Node, Array': function NodeArray(expr, rules) {
            return this(expr, rules, _mapJs.createEmptyMap(), {
            });
        },
        'Node, Array, Map | Object': function NodeArrayMapObject(expr, rules, scope) {
            return this(expr, rules, scope, {
            });
        },
        'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {
            return this(expr, rules, _mapJs.createMap(scope), options);
        },
        'Node, Array, Map, Object': function NodeArrayMapObject(expr, rules, scope, options) {
            rules = _buildRules(rules);
            var res = resolve(expr, scope);
            res = removeParens(res);
            var visited = {
            };
            var str = res.toString({
                parenthesis: 'all'
            });
            while(!visited[str]){
                visited[str] = true;
                _lastsym = 0; // counter for placeholder symbols
                for(var i = 0; i < rules.length; i++){
                    if (typeof rules[i] === 'function') res = rules[i](res, options);
                    else {
                        flatten(res);
                        res = applyRule(res, rules[i]);
                    }
                    unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
                }
                str = res.toString({
                    parenthesis: 'all'
                });
            }
            return res;
        }
    });
    simplify.simplifyCore = simplifyCore;
    simplify.resolve = resolve;
    function removeParens(node1) {
        return node1.transform(function(node, path, parent) {
            return _isJs.isParenthesisNode(node) ? removeParens(node.content) : node;
        });
    } // All constants that are allowed in rules
    var SUPPORTED_CONSTANTS = {
        true: true,
        false: true,
        e: true,
        i: true,
        Infinity: true,
        LN2: true,
        LN10: true,
        LOG2E: true,
        LOG10E: true,
        NaN: true,
        phi: true,
        pi: true,
        SQRT1_2: true,
        SQRT2: true,
        tau: true // null: false,
    }; // Array of strings, used to build the ruleSet.
    // Each l (left side) and r (right side) are parsed by
    // the expression parser into a node tree.
    // Left hand sides are matched to subtrees within the
    // expression to be parsed and replaced with the right
    // hand side.
    // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
    // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
    // It is possible to get into an infinite loop with conflicting rules
    simplify.rules = [
        simplifyCore,
        // { l: 'n^0', r: '1' },     // simplifyCore
        // { l: '0*n', r: '0' },     // simplifyCore
        // { l: 'n/n', r: '1'},      // simplifyCore
        // { l: 'n^1', r: 'n' },     // simplifyCore
        // { l: '+n1', r:'n1' },     // simplifyCore
        // { l: 'n--n1', r:'n+n1' }, // simplifyCore
        {
            l: 'log(e)',
            r: '1'
        },
        {
            l: 'n-n1',
            r: 'n+-n1'
        },
        {
            l: '-(c*v)',
            r: '(-c) * v'
        },
        {
            l: '-v',
            r: '(-1) * v'
        },
        {
            l: 'n/n1^n2',
            r: 'n*n1^-n2'
        },
        {
            l: 'n/n1',
            r: 'n*n1^-1'
        },
        {
            l: '(n ^ n1) ^ n2',
            r: 'n ^ (n1 * n2)'
        },
        {
            l: 'n*n',
            r: 'n^2'
        },
        {
            l: 'n * n^n1',
            r: 'n^(n1+1)'
        },
        {
            l: 'n^n1 * n^n2',
            r: 'n^(n1+n2)'
        },
        {
            l: 'n+n',
            r: '2*n'
        },
        {
            l: 'n+-n',
            r: '0'
        },
        {
            l: 'n1*n2 + n2',
            r: '(n1+1)*n2'
        },
        {
            l: 'n1*n3 + n2*n3',
            r: '(n1+n2)*n3'
        },
        {
            l: 'n1 + -1 * (n2 + n3)',
            r: 'n1 + -1 * n2 + -1 * n3'
        },
        simplifyConstant,
        {
            l: '(-n)*n1',
            r: '-(n*n1)'
        },
        // ordering of constants
        {
            l: 'c+v',
            r: 'v+c',
            context: {
                add: {
                    commutative: false
                }
            }
        },
        {
            l: 'v*c',
            r: 'c*v',
            context: {
                multiply: {
                    commutative: false
                }
            }
        },
        // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
        {
            l: 'n+-n1',
            r: 'n-n1'
        },
        {
            l: 'n*(n1^-1)',
            r: 'n/n1'
        },
        {
            l: 'n*n1^-n2',
            r: 'n/n1^n2'
        },
        {
            l: 'n1^-1',
            r: '1/n1'
        },
        {
            l: 'n*(n1/n2)',
            r: '(n*n1)/n2'
        },
        {
            l: 'n-(n1+n2)',
            r: 'n-n1-n2'
        },
        // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
        // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
        {
            l: '1*n',
            r: 'n'
        },
        {
            l: 'n1/(n2/n3)',
            r: '(n1*n3)/n2'
        }
    ];
    /**
   * Parse the string array of rules into nodes
   *
   * Example syntax for rules:
   *
   * Position constants to the left in a product:
   * { l: 'n1 * c1', r: 'c1 * n1' }
   * n1 is any Node, and c1 is a ConstantNode.
   *
   * Apply difference of squares formula:
   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
   * n1, n2 mean any Node.
   *
   * Short hand notation:
   * 'n1 * c1 -> c1 * n1'
   */ function _buildRules(rules) {
        // Array of rules to be used to simplify expressions
        var ruleSet = [];
        for(var i = 0; i < rules.length; i++){
            var rule = rules[i];
            var newRule = void 0;
            var ruleType = typeof rule;
            switch(ruleType){
                case 'string':
                    var lr = rule.split('->');
                    if (lr.length === 2) rule = {
                        l: lr[0],
                        r: lr[1]
                    };
                    else throw SyntaxError('Could not parse rule: ' + rule);
                /* falls through */ case 'object':
                    newRule = {
                        l: removeParens(parse(rule.l)),
                        r: removeParens(parse(rule.r))
                    };
                    if (rule.context) newRule.evaluate = rule.context;
                    if (rule.evaluate) newRule.evaluate = parse(rule.evaluate);
                    if (isAssociative(newRule.l)) {
                        var makeNode = createMakeNodeFunction(newRule.l);
                        var expandsym = _getExpandPlaceholderSymbol();
                        newRule.expanded = {
                        };
                        newRule.expanded.l = makeNode([
                            newRule.l.clone(),
                            expandsym
                        ]); // Push the expandsym into the deepest possible branch.
                        // This helps to match the newRule against nodes returned from getSplits() later on.
                        flatten(newRule.expanded.l);
                        unflattenr(newRule.expanded.l);
                        newRule.expanded.r = makeNode([
                            newRule.r,
                            expandsym
                        ]);
                    }
                    break;
                case 'function':
                    newRule = rule;
                    break;
                default:
                    throw TypeError('Unsupported type of rule: ' + ruleType);
            } // console.log('Adding rule: ' + rules[i])
            // console.log(newRule)
            ruleSet.push(newRule);
        }
        return ruleSet;
    }
    var _lastsym = 0;
    function _getExpandPlaceholderSymbol() {
        return new SymbolNode('_p' + _lastsym++);
    }
    /**
   * Returns a simplfied form of node, or the original node if no simplification was possible.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
   */ var applyRule = typed('applyRule', {
        'Node, Object': function NodeObject(node2, rule) {
            // console.log('Entering applyRule(' + node.toString() + ')')
            // Do not clone node unless we find a match
            var res = node2; // First replace our child nodes with their simplified versions
            // If a child could not be simplified, the assignments will have
            // no effect since the node is returned unchanged
            if (res instanceof OperatorNode || res instanceof FunctionNode) {
                if (res.args) for(var i = 0; i < res.args.length; i++)res.args[i] = applyRule(res.args[i], rule);
            } else if (res instanceof ParenthesisNode) {
                if (res.content) res.content = applyRule(res.content, rule);
            } // Try to match a rule against this node
            var repl = rule.r;
            var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.
            // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.
            if (!matches && rule.expanded) {
                repl = rule.expanded.r;
                matches = _ruleMatch(rule.expanded.l, res)[0];
            }
            if (matches) {
                // const before = res.toString({parenthesis: 'all'})
                // Create a new node by cloning the rhs of the matched rule
                // we keep any implicit multiplication state if relevant
                var implicit = res.implicit;
                res = repl.clone();
                if (implicit && 'implicit' in repl) res.implicit = true;
                 // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes
                res = res.transform(function(node) {
                    if (node.isSymbolNode && _objectJs.hasOwnProperty(matches.placeholders, node.name)) return matches.placeholders[node.name].clone();
                    else return node;
                }); // const after = res.toString({parenthesis: 'all'})
            // console.log('Simplified ' + before + ' to ' + after)
            }
            return res;
        }
    });
    /**
   * Get (binary) combinations of a flattened binary node
   * e.g. +(node1, node2, node3) -> [
   *        +(node1,  +(node2, node3)),
   *        +(node2,  +(node1, node3)),
   *        +(node3,  +(node1, node2))]
   *
   */ function getSplits(node, context) {
        var res = [];
        var right, rightArgs;
        var makeNode = createMakeNodeFunction(node);
        if (isCommutative(node, context)) for(var i = 0; i < node.args.length; i++){
            rightArgs = node.args.slice(0);
            rightArgs.splice(i, 1);
            right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
            res.push(makeNode([
                node.args[i],
                right
            ]));
        }
        else {
            rightArgs = node.args.slice(1);
            right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
            res.push(makeNode([
                node.args[0],
                right
            ]));
        }
        return res;
    }
    /**
   * Returns the set union of two match-placeholders or null if there is a conflict.
   */ function mergeMatch(match1, match2) {
        var res = {
            placeholders: {
            }
        }; // Some matches may not have placeholders; this is OK
        if (!match1.placeholders && !match2.placeholders) return res;
        else if (!match1.placeholders) return match2;
        else if (!match2.placeholders) return match1;
         // Placeholders with the same key must match exactly
        for(var key in match1.placeholders)if (_objectJs.hasOwnProperty(match1.placeholders, key)) {
            res.placeholders[key] = match1.placeholders[key];
            if (_objectJs.hasOwnProperty(match2.placeholders, key)) {
                if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) return null;
            }
        }
        for(var _key in match2.placeholders)if (_objectJs.hasOwnProperty(match2.placeholders, _key)) res.placeholders[_key] = match2.placeholders[_key];
        return res;
    }
    /**
   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   */ function combineChildMatches(list1, list2) {
        var res = [];
        if (list1.length === 0 || list2.length === 0) return res;
        var merged;
        for(var i1 = 0; i1 < list1.length; i1++)for(var i2 = 0; i2 < list2.length; i2++){
            merged = mergeMatch(list1[i1], list2[i2]);
            if (merged) res.push(merged);
        }
        return res;
    }
    /**
   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   * Returns a list of unique matches.
   */ function mergeChildMatches(childMatches) {
        if (childMatches.length === 0) return childMatches;
        var sets = childMatches.reduce(combineChildMatches);
        var uniqueSets = [];
        var unique = {
        };
        for(var i = 0; i < sets.length; i++){
            var s = JSON.stringify(sets[i]);
            if (!unique[s]) {
                unique[s] = true;
                uniqueSets.push(sets[i]);
            }
        }
        return uniqueSets;
    }
    /**
   * Determines whether node matches rule.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {Object} Information about the match, if it exists.
   */ function _ruleMatch(rule, node, isSplit) {
        //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
        //    console.log('rule = ' + rule)
        //    console.log('node = ' + node)
        //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')
        var res = [
            {
                placeholders: {
                }
            }
        ];
        if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {
            // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
            if (rule instanceof OperatorNode) {
                if (rule.op !== node.op || rule.fn !== node.fn) return [];
            } else if (rule instanceof FunctionNode) {
                if (rule.name !== node.name) return [];
            } // rule and node match. Search the children of rule and node.
            if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) && node.args.length === rule.args.length || isSplit) {
                // Expect non-associative operators to match exactly
                var childMatches = [];
                for(var i = 0; i < rule.args.length; i++){
                    var childMatch = _ruleMatch(rule.args[i], node.args[i]);
                    if (childMatch.length === 0) // Child did not match, so stop searching immediately
                    return [];
                     // The child matched, so add the information returned from the child to our result
                    childMatches.push(childMatch);
                }
                res = mergeChildMatches(childMatches);
            } else if (node.args.length >= 2 && rule.args.length === 2) {
                // node is flattened, rule is not
                // Associative operators/functions can be split in different ways so we check if the rule matches each
                // them and return their union.
                var splits = getSplits(node, rule.context);
                var splitMatches = [];
                for(var _i = 0; _i < splits.length; _i++){
                    var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here
                    splitMatches = splitMatches.concat(matchSet);
                }
                return splitMatches;
            } else if (rule.args.length > 2) throw Error('Unexpected non-binary associative function: ' + rule.toString());
            else // Incorrect number of arguments in rule and node, so no match
            return [];
        } else if (rule instanceof SymbolNode) {
            // If the rule is a SymbolNode, then it carries a special meaning
            // according to the first character of the symbol node name.
            // c.* matches a ConstantNode
            // n.* matches any node
            if (rule.name.length === 0) throw new Error('Symbol in rule has 0 length...!?');
            if (SUPPORTED_CONSTANTS[rule.name]) {
                // built-in constant must match exactly
                if (rule.name !== node.name) return [];
            } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') // rule matches _anything_, so assign this node to the rule.name placeholder
            // Assign node to the rule.name placeholder.
            // Our parent will check for matches among placeholders.
            res[0].placeholders[rule.name] = node;
            else if (rule.name[0] === 'v') {
                // rule matches any variable thing (not a ConstantNode)
                if (!_isJs.isConstantNode(node)) res[0].placeholders[rule.name] = node;
                else // Mis-match: rule was expecting something other than a ConstantNode
                return [];
            } else if (rule.name[0] === 'c') {
                // rule matches any ConstantNode
                if (node instanceof ConstantNode) res[0].placeholders[rule.name] = node;
                else // Mis-match: rule was expecting a ConstantNode
                return [];
            } else throw new Error('Invalid symbol in rule: ' + rule.name);
        } else if (rule instanceof ConstantNode) {
            // Literal constant must match exactly
            if (!equal(rule.value, node.value)) return [];
        } else // Some other node was encountered which we aren't prepared for, so no match
        return [];
         // It's a match!
        // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')
        return res;
    }
    /**
   * Determines whether p and q (and all their children nodes) are identical.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
   * @return {Object} Information about the match, if it exists.
   */ function _exactMatch(p, q) {
        if (p instanceof ConstantNode && q instanceof ConstantNode) {
            if (!equal(p.value, q.value)) return false;
        } else if (p instanceof SymbolNode && q instanceof SymbolNode) {
            if (p.name !== q.name) return false;
        } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {
            if (p instanceof OperatorNode) {
                if (p.op !== q.op || p.fn !== q.fn) return false;
            } else if (p instanceof FunctionNode) {
                if (p.name !== q.name) return false;
            }
            if (p.args.length !== q.args.length) return false;
            for(var i = 0; i < p.args.length; i++){
                if (!_exactMatch(p.args[i], q.args[i])) return false;
            }
        } else return false;
        return true;
    }
    return simplify;
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","./simplify/util.js":"1lHyS","./simplify/simplifyCore.js":"kNjyV","./simplify/simplifyConstant.js":"5cMio","./simplify/resolve.js":"jSeLd","../../utils/object.js":"eRHhH","../../utils/map.js":"1C0lk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1lHyS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUtil", ()=>createUtil
);
var _isJs = require("../../../utils/is.js");
var _factoryJs = require("../../../utils/factory.js");
var _objectJs = require("../../../utils/object.js");
var name1 = 'simplifyUtil';
var dependencies = [
    'FunctionNode',
    'OperatorNode',
    'SymbolNode'
];
var createUtil = /* #__PURE__ */ _factoryJs.factory(name1, dependencies, (_ref)=>{
    var { FunctionNode , OperatorNode , SymbolNode  } = _ref;
    // TODO commutative/associative properties rely on the arguments
    // e.g. multiply is not commutative for matrices
    // The properties should be calculated from an argument to simplify, or possibly something in math.config
    // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
    var commutative = {
        add: true,
        multiply: true
    };
    var associative = {
        add: true,
        multiply: true
    };
    function isCommutative(node, context) {
        if (!_isJs.isOperatorNode(node)) return true;
        var name = node.fn.toString();
        if (context && _objectJs.hasOwnProperty(context, name) && _objectJs.hasOwnProperty(context[name], 'commutative')) return context[name].commutative;
        return commutative[name] || false;
    }
    function isAssociative(node, context) {
        if (!_isJs.isOperatorNode(node)) return false;
        var name = node.fn.toString();
        if (context && _objectJs.hasOwnProperty(context, name) && _objectJs.hasOwnProperty(context[name], 'associative')) return context[name].associative;
        return associative[name] || false;
    }
    /**
   * Flatten all associative operators in an expression tree.
   * Assumes parentheses have already been removed.
   */ function flatten(node) {
        if (!node.args || node.args.length === 0) return node;
        node.args = allChildren(node);
        for(var i = 0; i < node.args.length; i++)flatten(node.args[i]);
    }
    /**
   * Get the children of a node as if it has been flattened.
   * TODO implement for FunctionNodes
   */ function allChildren(node1) {
        var op;
        var children = [];
        var findChildren1 = function findChildren(node) {
            for(var i = 0; i < node.args.length; i++){
                var child = node.args[i];
                if (_isJs.isOperatorNode(child) && op === child.op) findChildren(child);
                else children.push(child);
            }
        };
        if (isAssociative(node1)) {
            op = node1.op;
            findChildren1(node1);
            return children;
        } else return node1.args;
    }
    /**
   *  Unflatten all flattened operators to a right-heavy binary tree.
   */ function unflattenr(node) {
        if (!node.args || node.args.length === 0) return;
        var makeNode = createMakeNodeFunction(node);
        var l = node.args.length;
        for(var i = 0; i < l; i++)unflattenr(node.args[i]);
        if (l > 2 && isAssociative(node)) {
            var curnode = node.args.pop();
            while(node.args.length > 0)curnode = makeNode([
                node.args.pop(),
                curnode
            ]);
            node.args = curnode.args;
        }
    }
    /**
   *  Unflatten all flattened operators to a left-heavy binary tree.
   */ function unflattenl(node) {
        if (!node.args || node.args.length === 0) return;
        var makeNode = createMakeNodeFunction(node);
        var l = node.args.length;
        for(var i = 0; i < l; i++)unflattenl(node.args[i]);
        if (l > 2 && isAssociative(node)) {
            var curnode = node.args.shift();
            while(node.args.length > 0)curnode = makeNode([
                curnode,
                node.args.shift()
            ]);
            node.args = curnode.args;
        }
    }
    function createMakeNodeFunction(node) {
        if (_isJs.isOperatorNode(node)) return function(args) {
            try {
                return new OperatorNode(node.op, node.fn, args, node.implicit);
            } catch (err) {
                console.error(err);
                return [];
            }
        };
        else return function(args) {
            return new FunctionNode(new SymbolNode(node.name), args);
        };
    }
    return {
        createMakeNodeFunction,
        isCommutative,
        isAssociative,
        flatten,
        allChildren,
        unflattenr,
        unflattenl
    };
});

},{"../../../utils/is.js":"iwdlF","../../../utils/factory.js":"26foW","../../../utils/object.js":"eRHhH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kNjyV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSimplifyCore", ()=>createSimplifyCore
);
var _isJs = require("../../../utils/is.js");
var _factoryJs = require("../../../utils/factory.js");
var name = 'simplifyCore';
var dependencies = [
    'equal',
    'isZero',
    'add',
    'subtract',
    'multiply',
    'divide',
    'pow',
    'ConstantNode',
    'OperatorNode',
    'FunctionNode',
    'ParenthesisNode'
];
var createSimplifyCore = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { equal , isZero , add , subtract , multiply , divide , pow , ConstantNode , OperatorNode , FunctionNode , ParenthesisNode  } = _ref;
    var node0 = new ConstantNode(0);
    var node1 = new ConstantNode(1);
    /**
   * simplifyCore() performs single pass simplification suitable for
   * applications requiring ultimate performance. In contrast, simplify()
   * extends simplifyCore() with additional passes to provide deeper
   * simplification.
   *
   * Syntax:
   *
   *     simplify.simplifyCore(expr)
   *
   * Examples:
   *
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify.simpifyCore(f)                          // Node {2 * x}
   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}
   *
   * See also:
   *
   *     derivative
   *
   * @param {Node} node
   *     The expression to be simplified
   */ function simplifyCore(node) {
        if (_isJs.isOperatorNode(node) && node.isUnary()) {
            var a0 = simplifyCore(node.args[0]);
            if (node.op === '+') // unary plus
            return a0;
            if (node.op === '-') {
                // unary minus
                if (_isJs.isOperatorNode(a0)) {
                    if (a0.isUnary() && a0.op === '-') return a0.args[0];
                    else if (a0.isBinary() && a0.fn === 'subtract') return new OperatorNode('-', 'subtract', [
                        a0.args[1],
                        a0.args[0]
                    ]);
                }
                return new OperatorNode(node.op, node.fn, [
                    a0
                ]);
            }
        } else if (_isJs.isOperatorNode(node) && node.isBinary()) {
            var _a = simplifyCore(node.args[0]);
            var a1 = simplifyCore(node.args[1]);
            if (node.op === '+') {
                if (_isJs.isConstantNode(_a)) {
                    if (isZero(_a.value)) return a1;
                    else if (_isJs.isConstantNode(a1)) return new ConstantNode(add(_a.value, a1.value));
                }
                if (_isJs.isConstantNode(a1) && isZero(a1.value)) return _a;
                if (_isJs.isOperatorNode(a1) && a1.isUnary() && a1.op === '-') return new OperatorNode('-', 'subtract', [
                    _a,
                    a1.args[0]
                ]);
                return new OperatorNode(node.op, node.fn, a1 ? [
                    _a,
                    a1
                ] : [
                    _a
                ]);
            } else if (node.op === '-') {
                if (_isJs.isConstantNode(_a) && a1) {
                    if (_isJs.isConstantNode(a1)) return new ConstantNode(subtract(_a.value, a1.value));
                    else if (isZero(_a.value)) return new OperatorNode('-', 'unaryMinus', [
                        a1
                    ]);
                } // if (node.fn === "subtract" && node.args.length === 2) {
                if (node.fn === 'subtract') {
                    if (_isJs.isConstantNode(a1) && isZero(a1.value)) return _a;
                    if (_isJs.isOperatorNode(a1) && a1.isUnary() && a1.op === '-') return simplifyCore(new OperatorNode('+', 'add', [
                        _a,
                        a1.args[0]
                    ]));
                    return new OperatorNode(node.op, node.fn, [
                        _a,
                        a1
                    ]);
                }
            } else if (node.op === '*') {
                if (_isJs.isConstantNode(_a)) {
                    if (isZero(_a.value)) return node0;
                    else if (equal(_a.value, 1)) return a1;
                    else if (_isJs.isConstantNode(a1)) return new ConstantNode(multiply(_a.value, a1.value));
                }
                if (_isJs.isConstantNode(a1)) {
                    if (isZero(a1.value)) return node0;
                    else if (equal(a1.value, 1)) return _a;
                    else if (_isJs.isOperatorNode(_a) && _a.isBinary() && _a.op === node.op) {
                        var a00 = _a.args[0];
                        if (_isJs.isConstantNode(a00)) {
                            var a00a1 = new ConstantNode(multiply(a00.value, a1.value));
                            return new OperatorNode(node.op, node.fn, [
                                a00a1,
                                _a.args[1]
                            ], node.implicit); // constants on left
                        }
                    }
                    return new OperatorNode(node.op, node.fn, [
                        a1,
                        _a
                    ], node.implicit); // constants on left
                }
                return new OperatorNode(node.op, node.fn, [
                    _a,
                    a1
                ], node.implicit);
            } else if (node.op === '/') {
                if (_isJs.isConstantNode(_a)) {
                    if (isZero(_a.value)) return node0;
                    else if (_isJs.isConstantNode(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) return new ConstantNode(divide(_a.value, a1.value));
                }
                return new OperatorNode(node.op, node.fn, [
                    _a,
                    a1
                ]);
            } else if (node.op === '^') {
                if (_isJs.isConstantNode(a1)) {
                    if (isZero(a1.value)) return node1;
                    else if (equal(a1.value, 1)) return _a;
                    else {
                        if (_isJs.isConstantNode(_a)) // fold constant
                        return new ConstantNode(pow(_a.value, a1.value));
                        else if (_isJs.isOperatorNode(_a) && _a.isBinary() && _a.op === '^') {
                            var a01 = _a.args[1];
                            if (_isJs.isConstantNode(a01)) return new OperatorNode(node.op, node.fn, [
                                _a.args[0],
                                new ConstantNode(multiply(a01.value, a1.value))
                            ]);
                        }
                    }
                }
                return new OperatorNode(node.op, node.fn, [
                    _a,
                    a1
                ]);
            }
        } else if (_isJs.isParenthesisNode(node)) {
            var c = simplifyCore(node.content);
            if (_isJs.isParenthesisNode(c) || _isJs.isSymbolNode(c) || _isJs.isConstantNode(c)) return c;
            return new ParenthesisNode(c);
        } else if (_isJs.isFunctionNode(node)) {
            var args = node.args.map(simplifyCore).map(function(arg) {
                return _isJs.isParenthesisNode(arg) ? arg.content : arg;
            });
            return new FunctionNode(simplifyCore(node.fn), args);
        }
        return node;
    }
    return simplifyCore;
});

},{"../../../utils/is.js":"iwdlF","../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5cMio":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSimplifyConstant", ()=>createSimplifyConstant
);
// TODO this could be improved by simplifying seperated constants under associative and commutative operators
var _isJs = require("../../../utils/is.js");
var _factoryJs = require("../../../utils/factory.js");
var _utilJs = require("./util.js");
var _noopJs = require("../../../utils/noop.js");
var name = 'simplifyConstant';
var dependencies = [
    'typed',
    'config',
    'mathWithTransform',
    '?fraction',
    '?bignumber',
    'ConstantNode',
    'OperatorNode',
    'FunctionNode',
    'SymbolNode'
];
var createSimplifyConstant = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , mathWithTransform , fraction , bignumber , ConstantNode , OperatorNode , FunctionNode , SymbolNode  } = _ref;
    var { isCommutative , isAssociative , allChildren , createMakeNodeFunction  } = _utilJs.createUtil({
        FunctionNode,
        OperatorNode,
        SymbolNode
    });
    function simplifyConstant(expr, options) {
        var res = foldFraction(expr, options);
        return _isJs.isNode(res) ? res : _toNode(res);
    }
    function _eval(fnname, args, options) {
        try {
            return _toNumber(mathWithTransform[fnname].apply(null, args), options);
        } catch (ignore) {
            // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
            args = args.map(function(x) {
                if (_isJs.isFraction(x)) return x.valueOf();
                return x;
            });
            return _toNumber(mathWithTransform[fnname].apply(null, args), options);
        }
    }
    var _toNode = typed({
        Fraction: _fractionToNode,
        number: function number(n) {
            if (n < 0) return unaryMinusNode(new ConstantNode(-n));
            return new ConstantNode(n);
        },
        BigNumber: function BigNumber(n) {
            if (n < 0) return unaryMinusNode(new ConstantNode(-n));
            return new ConstantNode(n); // old parameters: (n.toString(), 'number')
        },
        Complex: function Complex(s) {
            throw new Error('Cannot convert Complex number to Node');
        }
    }); // convert a number to a fraction only if it can be expressed exactly,
    // and when both numerator and denominator are small enough
    function _exactFraction(n, options) {
        var exactFractions = options && options.exactFractions !== false;
        if (exactFractions && isFinite(n) && fraction) {
            var f = fraction(n);
            var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default
            if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) return f;
        }
        return n;
    } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
    // BigNumbers are left alone
    var _toNumber = typed({
        'string, Object': function stringObject(s, options) {
            if (config.number === 'BigNumber') {
                if (bignumber === undefined) _noopJs.noBignumber();
                return bignumber(s);
            } else if (config.number === 'Fraction') {
                if (fraction === undefined) _noopJs.noFraction();
                return fraction(s);
            } else {
                var n = parseFloat(s);
                return _exactFraction(n, options);
            }
        },
        'Fraction, Object': function FractionObject(s, options) {
            return s;
        },
        // we don't need options here
        'BigNumber, Object': function BigNumberObject(s, options) {
            return s;
        },
        // we don't need options here
        'number, Object': function numberObject(s, options) {
            return _exactFraction(s, options);
        },
        'Complex, Object': function ComplexObject(s, options) {
            if (s.im !== 0) return s;
            return _exactFraction(s.re, options);
        }
    });
    function unaryMinusNode(n) {
        return new OperatorNode('-', 'unaryMinus', [
            n
        ]);
    }
    function _fractionToNode(f) {
        var n;
        var vn = f.s * f.n;
        if (vn < 0) n = new OperatorNode('-', 'unaryMinus', [
            new ConstantNode(-vn)
        ]);
        else n = new ConstantNode(vn);
        if (f.d === 1) return n;
        return new OperatorNode('/', 'divide', [
            n,
            new ConstantNode(f.d)
        ]);
    }
    /*
   * Create a binary tree from a list of Fractions and Nodes.
   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
   * @param args - list of Fractions and Nodes
   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
   * if args.length is 1, returns args[0]
   * @return - Either a Node representing a binary expression or Fraction
   */ function foldOp(fn, args, makeNode, options) {
        return args.reduce(function(a, b) {
            if (!_isJs.isNode(a) && !_isJs.isNode(b)) {
                try {
                    return _eval(fn, [
                        a,
                        b
                    ], options);
                } catch (ignoreandcontinue) {
                }
                a = _toNode(a);
                b = _toNode(b);
            } else if (!_isJs.isNode(a)) a = _toNode(a);
            else if (!_isJs.isNode(b)) b = _toNode(b);
            return makeNode([
                a,
                b
            ]);
        });
    } // destroys the original node and returns a folded one
    function foldFraction(node, options) {
        switch(node.type){
            case 'SymbolNode':
                return node;
            case 'ConstantNode':
                if (typeof node.value === 'number' || !isNaN(node.value)) return _toNumber(node.value, options);
                return node;
            case 'FunctionNode':
                if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) return node;
                // Process operators as OperatorNode
                var operatorFunctions = [
                    'add',
                    'multiply'
                ];
                if (operatorFunctions.indexOf(node.name) === -1) {
                    var args = node.args.map((arg)=>foldFraction(arg, options)
                    ); // If all args are numbers
                    if (!args.some(_isJs.isNode)) try {
                        return _eval(node.name, args, options);
                    } catch (ignoreandcontine) {
                    }
                     // Convert all args to nodes and construct a symbolic function call
                    args = args.map(function(arg) {
                        return _isJs.isNode(arg) ? arg : _toNode(arg);
                    });
                    return new FunctionNode(node.name, args);
                }
            /* falls through */ case 'OperatorNode':
                var fn = node.fn.toString();
                var _args;
                var res;
                var makeNode = createMakeNodeFunction(node);
                if (_isJs.isOperatorNode(node) && node.isUnary()) {
                    _args = [
                        foldFraction(node.args[0], options)
                    ];
                    if (!_isJs.isNode(_args[0])) res = _eval(fn, _args, options);
                    else res = makeNode(_args);
                } else if (isAssociative(node)) {
                    _args = allChildren(node);
                    _args = _args.map((arg)=>foldFraction(arg, options)
                    );
                    if (isCommutative(fn)) {
                        // commutative binary operator
                        var consts = [];
                        var vars = [];
                        for(var i = 0; i < _args.length; i++)if (!_isJs.isNode(_args[i])) consts.push(_args[i]);
                        else vars.push(_args[i]);
                        if (consts.length > 1) {
                            res = foldOp(fn, consts, makeNode, options);
                            vars.unshift(res);
                            res = foldOp(fn, vars, makeNode, options);
                        } else // we won't change the children order since it's not neccessary
                        res = foldOp(fn, _args, makeNode, options);
                    } else // non-commutative binary operator
                    res = foldOp(fn, _args, makeNode, options);
                } else {
                    // non-associative binary operator
                    _args = node.args.map((arg)=>foldFraction(arg, options)
                    );
                    res = foldOp(fn, _args, makeNode, options);
                }
                return res;
            case 'ParenthesisNode':
                // remove the uneccessary parenthesis
                return foldFraction(node.content, options);
            case 'AccessorNode':
            /* falls through */ case 'ArrayNode':
            /* falls through */ case 'AssignmentNode':
            /* falls through */ case 'BlockNode':
            /* falls through */ case 'FunctionAssignmentNode':
            /* falls through */ case 'IndexNode':
            /* falls through */ case 'ObjectNode':
            /* falls through */ case 'RangeNode':
            /* falls through */ case 'ConditionalNode':
            /* falls through */ default:
                throw new Error("Unimplemented node type in simplifyConstant: ".concat(node.type));
        }
    }
    return simplifyConstant;
});

},{"../../../utils/is.js":"iwdlF","../../../utils/factory.js":"26foW","./util.js":"1lHyS","../../../utils/noop.js":"fXPyT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jSeLd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createResolve", ()=>createResolve
);
var _mapJs = require("../../../utils/map.js");
var _isJs = require("../../../utils/is.js");
var _factoryJs = require("../../../utils/factory.js");
var name = 'resolve';
var dependencies = [
    'parse',
    'FunctionNode',
    'OperatorNode',
    'ParenthesisNode'
];
var createResolve = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { parse , FunctionNode , OperatorNode , ParenthesisNode  } = _ref;
    /**
   * resolve(expr, scope) replaces variable nodes with their scoped values
   *
   * Syntax:
   *
   *     simplify.resolve(expr, scope)
   *
   * Examples:
   *
   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
   *
   * @param {Node} node
   *     The expression tree to be simplified
   * @param {Object} scope with variables to be resolved
   */ function resolve(node, scope) {
        if (!scope) return node;
        if (!_mapJs.isMap(scope)) scope = _mapJs.createMap(scope);
        if (_isJs.isSymbolNode(node)) {
            var value = scope.get(node.name);
            if (_isJs.isNode(value)) return resolve(value, scope);
            else if (typeof value === 'number') return parse(String(value));
        } else if (_isJs.isOperatorNode(node)) {
            var args = node.args.map(function(arg) {
                return resolve(arg, scope);
            });
            return new OperatorNode(node.op, node.fn, args, node.implicit);
        } else if (_isJs.isParenthesisNode(node)) return new ParenthesisNode(resolve(node.content, scope));
        else if (_isJs.isFunctionNode(node)) {
            var _args = node.args.map(function(arg) {
                return resolve(arg, scope);
            });
            return new FunctionNode(node.name, _args);
        }
        return node;
    }
    return resolve;
});

},{"../../../utils/map.js":"1C0lk","../../../utils/is.js":"iwdlF","../../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1TF43":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDerivative", ()=>createDerivative
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'derivative';
var dependencies = [
    'typed',
    'config',
    'parse',
    'simplify',
    'equal',
    'isZero',
    'numeric',
    'ConstantNode',
    'FunctionNode',
    'OperatorNode',
    'ParenthesisNode',
    'SymbolNode'
];
var createDerivative = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , parse , simplify , equal , isZero , numeric , ConstantNode , FunctionNode , OperatorNode , ParenthesisNode , SymbolNode  } = _ref;
    /**
   * Takes the derivative of an expression expressed in parser Nodes.
   * The derivative will be taken over the supplied variable in the
   * second parameter. If there are multiple variables in the expression,
   * it will return a partial derivative.
   *
   * This uses rules of differentiation which can be found here:
   *
   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)
   *
   * Syntax:
   *
   *     derivative(expr, variable)
   *     derivative(expr, variable, options)
   *
   * Examples:
   *
   *     math.derivative('x^2', 'x')                     // Node {2 * x}
   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
   *     math.derivative('2*x', 'x').evaluate()          // number 2
   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8
   *     const f = math.parse('x^2')
   *     const x = math.parse('x')
   *     math.derivative(f, x)                           // Node {2 * x}
   *
   * See also:
   *
   *     simplify, parse, evaluate
   *
   * @param  {Node | string} expr           The expression to differentiate
   * @param  {SymbolNode | string} variable The variable over which to differentiate
   * @param  {{simplify: boolean}} [options]
   *                         There is one option available, `simplify`, which
   *                         is true by default. When false, output will not
   *                         be simplified.
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */ var derivative = typed('derivative', {
        'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {
            var constNodes = {
            };
            constTag(constNodes, expr, variable.name);
            var res = _derivative(expr, constNodes);
            return options.simplify ? simplify(res) : res;
        },
        'Node, SymbolNode': function NodeSymbolNode(expr, variable) {
            return this(expr, variable, {
                simplify: true
            });
        },
        'string, SymbolNode': function stringSymbolNode(expr, variable) {
            return this(parse(expr), variable);
        },
        'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {
            return this(parse(expr), variable, options);
        },
        'string, string': function stringString(expr, variable) {
            return this(parse(expr), parse(variable));
        },
        'string, string, Object': function stringStringObject(expr, variable, options) {
            return this(parse(expr), parse(variable), options);
        },
        'Node, string': function NodeString(expr, variable) {
            return this(expr, parse(variable));
        },
        'Node, string, Object': function NodeStringObject(expr, variable, options) {
            return this(expr, parse(variable), options);
        } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments
    });
    derivative._simplify = true;
    derivative.toTex = function(deriv) {
        return _derivTex.apply(null, deriv.args);
    }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.
    // NOTE: the optional "order" parameter here is currently unused
    var _derivTex = typed('_derivTex', {
        'Node, SymbolNode': function NodeSymbolNode(expr, x) {
            if (_isJs.isConstantNode(expr) && _isJs.typeOf(expr.value) === 'string') return _derivTex(parse(expr.value).toString(), x.toString(), 1);
            else return _derivTex(expr.toString(), x.toString(), 1);
        },
        'Node, ConstantNode': function NodeConstantNode(expr, x) {
            if (_isJs.typeOf(x.value) === 'string') return _derivTex(expr, parse(x.value));
            else throw new Error("The second parameter to 'derivative' is a non-string constant");
        },
        'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {
            return _derivTex(expr.toString(), x.name, order.value);
        },
        'string, string, number': function stringStringNumber(expr, x, order) {
            var d;
            if (order === 1) d = '{d\\over d' + x + '}';
            else d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
            return d + "\\left[".concat(expr, "\\right]");
        }
    });
    /**
   * Does a depth-first search on the expression tree to identify what Nodes
   * are constants (e.g. 2 + 2), and stores the ones that are constants in
   * constNodes. Classification is done as follows:
   *
   *   1. ConstantNodes are constants.
   *   2. If there exists a SymbolNode, of which we are differentiating over,
   *      in the subtree it is not constant.
   *
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {string} varName     Variable that we are differentiating
   * @return {boolean}  if node is constant
   */ // TODO: can we rewrite constTag into a pure function?
    var constTag = typed('constTag', {
        'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {
            constNodes[node] = true;
            return true;
        },
        'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {
            // Treat other variables like constants. For reasoning, see:
            //   https://en.wikipedia.org/wiki/Partial_derivative
            if (node.name !== varName) {
                constNodes[node] = true;
                return true;
            }
            return false;
        },
        'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {
            return constTag(constNodes, node.content, varName);
        },
        'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {
            if (node.params.indexOf(varName) === -1) {
                constNodes[node] = true;
                return true;
            }
            return constTag(constNodes, node.expr, varName);
        },
        'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {
            if (node.args.length > 0) {
                var isConst = constTag(constNodes, node.args[0], varName);
                for(var i = 1; i < node.args.length; ++i)isConst = constTag(constNodes, node.args[i], varName) && isConst;
                if (isConst) {
                    constNodes[node] = true;
                    return true;
                }
            }
            return false;
        }
    });
    /**
   * Applies differentiation rules.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */ var _derivative = typed('_derivative', {
        'ConstantNode, Object': function ConstantNodeObject(node) {
            return createConstantNode(0);
        },
        'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {
            if (constNodes[node] !== undefined) return createConstantNode(0);
            return createConstantNode(1);
        },
        'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {
            return new ParenthesisNode(_derivative(node.content, constNodes));
        },
        'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {
            if (constNodes[node] !== undefined) return createConstantNode(0);
            return _derivative(node.expr, constNodes);
        },
        'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {
            if (node.args.length !== 1) funcArgsCheck(node);
            if (constNodes[node] !== undefined) return createConstantNode(0);
            var arg0 = node.args[0];
            var arg1;
            var div = false; // is output a fraction?
            var negative = false; // is output negative?
            var funcDerivative;
            switch(node.name){
                case 'cbrt':
                    // d/dx(cbrt(x)) = 1 / (3x^(2/3))
                    div = true;
                    funcDerivative = new OperatorNode('*', 'multiply', [
                        createConstantNode(3),
                        new OperatorNode('^', 'pow', [
                            arg0,
                            new OperatorNode('/', 'divide', [
                                createConstantNode(2),
                                createConstantNode(3)
                            ])
                        ])
                    ]);
                    break;
                case 'sqrt':
                case 'nthRoot':
                    // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
                    if (node.args.length === 1) {
                        div = true;
                        funcDerivative = new OperatorNode('*', 'multiply', [
                            createConstantNode(2),
                            new FunctionNode('sqrt', [
                                arg0
                            ])
                        ]);
                    } else if (node.args.length === 2) {
                        // Rearrange from nthRoot(x, a) -> x^(1/a)
                        arg1 = new OperatorNode('/', 'divide', [
                            createConstantNode(1),
                            node.args[1]
                        ]); // Is a variable?
                        constNodes[arg1] = constNodes[node.args[1]];
                        return _derivative(new OperatorNode('^', 'pow', [
                            arg0,
                            arg1
                        ]), constNodes);
                    }
                    break;
                case 'log10':
                    arg1 = createConstantNode(10);
                /* fall through! */ case 'log':
                    if (!arg1 && node.args.length === 1) {
                        // d/dx(log(x)) = 1 / x
                        funcDerivative = arg0.clone();
                        div = true;
                    } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
                        // d/dx(log(x, c)) = 1 / (x*ln(c))
                        funcDerivative = new OperatorNode('*', 'multiply', [
                            arg0.clone(),
                            new FunctionNode('log', [
                                arg1 || node.args[1]
                            ])
                        ]);
                        div = true;
                    } else if (node.args.length === 2) // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
                    return _derivative(new OperatorNode('/', 'divide', [
                        new FunctionNode('log', [
                            arg0
                        ]),
                        new FunctionNode('log', [
                            node.args[1]
                        ])
                    ]), constNodes);
                    break;
                case 'pow':
                    constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser
                    return _derivative(new OperatorNode('^', 'pow', [
                        arg0,
                        node.args[1]
                    ]), constNodes);
                case 'exp':
                    // d/dx(e^x) = e^x
                    funcDerivative = new FunctionNode('exp', [
                        arg0.clone()
                    ]);
                    break;
                case 'sin':
                    // d/dx(sin(x)) = cos(x)
                    funcDerivative = new FunctionNode('cos', [
                        arg0.clone()
                    ]);
                    break;
                case 'cos':
                    // d/dx(cos(x)) = -sin(x)
                    funcDerivative = new OperatorNode('-', 'unaryMinus', [
                        new FunctionNode('sin', [
                            arg0.clone()
                        ])
                    ]);
                    break;
                case 'tan':
                    // d/dx(tan(x)) = sec(x)^2
                    funcDerivative = new OperatorNode('^', 'pow', [
                        new FunctionNode('sec', [
                            arg0.clone()
                        ]),
                        createConstantNode(2)
                    ]);
                    break;
                case 'sec':
                    // d/dx(sec(x)) = sec(x)tan(x)
                    funcDerivative = new OperatorNode('*', 'multiply', [
                        node,
                        new FunctionNode('tan', [
                            arg0.clone()
                        ])
                    ]);
                    break;
                case 'csc':
                    // d/dx(csc(x)) = -csc(x)cot(x)
                    negative = true;
                    funcDerivative = new OperatorNode('*', 'multiply', [
                        node,
                        new FunctionNode('cot', [
                            arg0.clone()
                        ])
                    ]);
                    break;
                case 'cot':
                    // d/dx(cot(x)) = -csc(x)^2
                    negative = true;
                    funcDerivative = new OperatorNode('^', 'pow', [
                        new FunctionNode('csc', [
                            arg0.clone()
                        ]),
                        createConstantNode(2)
                    ]);
                    break;
                case 'asin':
                    // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
                    div = true;
                    funcDerivative = new FunctionNode('sqrt', [
                        new OperatorNode('-', 'subtract', [
                            createConstantNode(1),
                            new OperatorNode('^', 'pow', [
                                arg0.clone(),
                                createConstantNode(2)
                            ])
                        ])
                    ]);
                    break;
                case 'acos':
                    // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
                    div = true;
                    negative = true;
                    funcDerivative = new FunctionNode('sqrt', [
                        new OperatorNode('-', 'subtract', [
                            createConstantNode(1),
                            new OperatorNode('^', 'pow', [
                                arg0.clone(),
                                createConstantNode(2)
                            ])
                        ])
                    ]);
                    break;
                case 'atan':
                    // d/dx(atan(x)) = 1 / (x^2 + 1)
                    div = true;
                    funcDerivative = new OperatorNode('+', 'add', [
                        new OperatorNode('^', 'pow', [
                            arg0.clone(),
                            createConstantNode(2)
                        ]),
                        createConstantNode(1)
                    ]);
                    break;
                case 'asec':
                    // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
                    div = true;
                    funcDerivative = new OperatorNode('*', 'multiply', [
                        new FunctionNode('abs', [
                            arg0.clone()
                        ]),
                        new FunctionNode('sqrt', [
                            new OperatorNode('-', 'subtract', [
                                new OperatorNode('^', 'pow', [
                                    arg0.clone(),
                                    createConstantNode(2)
                                ]),
                                createConstantNode(1)
                            ])
                        ])
                    ]);
                    break;
                case 'acsc':
                    // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
                    div = true;
                    negative = true;
                    funcDerivative = new OperatorNode('*', 'multiply', [
                        new FunctionNode('abs', [
                            arg0.clone()
                        ]),
                        new FunctionNode('sqrt', [
                            new OperatorNode('-', 'subtract', [
                                new OperatorNode('^', 'pow', [
                                    arg0.clone(),
                                    createConstantNode(2)
                                ]),
                                createConstantNode(1)
                            ])
                        ])
                    ]);
                    break;
                case 'acot':
                    // d/dx(acot(x)) = -1 / (x^2 + 1)
                    div = true;
                    negative = true;
                    funcDerivative = new OperatorNode('+', 'add', [
                        new OperatorNode('^', 'pow', [
                            arg0.clone(),
                            createConstantNode(2)
                        ]),
                        createConstantNode(1)
                    ]);
                    break;
                case 'sinh':
                    // d/dx(sinh(x)) = cosh(x)
                    funcDerivative = new FunctionNode('cosh', [
                        arg0.clone()
                    ]);
                    break;
                case 'cosh':
                    // d/dx(cosh(x)) = sinh(x)
                    funcDerivative = new FunctionNode('sinh', [
                        arg0.clone()
                    ]);
                    break;
                case 'tanh':
                    // d/dx(tanh(x)) = sech(x)^2
                    funcDerivative = new OperatorNode('^', 'pow', [
                        new FunctionNode('sech', [
                            arg0.clone()
                        ]),
                        createConstantNode(2)
                    ]);
                    break;
                case 'sech':
                    // d/dx(sech(x)) = -sech(x)tanh(x)
                    negative = true;
                    funcDerivative = new OperatorNode('*', 'multiply', [
                        node,
                        new FunctionNode('tanh', [
                            arg0.clone()
                        ])
                    ]);
                    break;
                case 'csch':
                    // d/dx(csch(x)) = -csch(x)coth(x)
                    negative = true;
                    funcDerivative = new OperatorNode('*', 'multiply', [
                        node,
                        new FunctionNode('coth', [
                            arg0.clone()
                        ])
                    ]);
                    break;
                case 'coth':
                    // d/dx(coth(x)) = -csch(x)^2
                    negative = true;
                    funcDerivative = new OperatorNode('^', 'pow', [
                        new FunctionNode('csch', [
                            arg0.clone()
                        ]),
                        createConstantNode(2)
                    ]);
                    break;
                case 'asinh':
                    // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
                    div = true;
                    funcDerivative = new FunctionNode('sqrt', [
                        new OperatorNode('+', 'add', [
                            new OperatorNode('^', 'pow', [
                                arg0.clone(),
                                createConstantNode(2)
                            ]),
                            createConstantNode(1)
                        ])
                    ]);
                    break;
                case 'acosh':
                    // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
                    div = true;
                    funcDerivative = new FunctionNode('sqrt', [
                        new OperatorNode('-', 'subtract', [
                            new OperatorNode('^', 'pow', [
                                arg0.clone(),
                                createConstantNode(2)
                            ]),
                            createConstantNode(1)
                        ])
                    ]);
                    break;
                case 'atanh':
                    // d/dx(atanh(x)) = 1 / (1 - x^2)
                    div = true;
                    funcDerivative = new OperatorNode('-', 'subtract', [
                        createConstantNode(1),
                        new OperatorNode('^', 'pow', [
                            arg0.clone(),
                            createConstantNode(2)
                        ])
                    ]);
                    break;
                case 'asech':
                    // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
                    div = true;
                    negative = true;
                    funcDerivative = new OperatorNode('*', 'multiply', [
                        arg0.clone(),
                        new FunctionNode('sqrt', [
                            new OperatorNode('-', 'subtract', [
                                createConstantNode(1),
                                new OperatorNode('^', 'pow', [
                                    arg0.clone(),
                                    createConstantNode(2)
                                ])
                            ])
                        ])
                    ]);
                    break;
                case 'acsch':
                    // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
                    div = true;
                    negative = true;
                    funcDerivative = new OperatorNode('*', 'multiply', [
                        new FunctionNode('abs', [
                            arg0.clone()
                        ]),
                        new FunctionNode('sqrt', [
                            new OperatorNode('+', 'add', [
                                new OperatorNode('^', 'pow', [
                                    arg0.clone(),
                                    createConstantNode(2)
                                ]),
                                createConstantNode(1)
                            ])
                        ])
                    ]);
                    break;
                case 'acoth':
                    // d/dx(acoth(x)) = -1 / (1 - x^2)
                    div = true;
                    negative = true;
                    funcDerivative = new OperatorNode('-', 'subtract', [
                        createConstantNode(1),
                        new OperatorNode('^', 'pow', [
                            arg0.clone(),
                            createConstantNode(2)
                        ])
                    ]);
                    break;
                case 'abs':
                    // d/dx(abs(x)) = abs(x)/x
                    funcDerivative = new OperatorNode('/', 'divide', [
                        new FunctionNode(new SymbolNode('abs'), [
                            arg0.clone()
                        ]),
                        arg0.clone()
                    ]);
                    break;
                case 'gamma':
                default:
                    throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
            }
            var op, func;
            if (div) {
                op = '/';
                func = 'divide';
            } else {
                op = '*';
                func = 'multiply';
            }
            /* Apply chain rule to all functions:
         F(x)  = f(g(x))
         F'(x) = g'(x)*f'(g(x)) */ var chainDerivative = _derivative(arg0, constNodes);
            if (negative) chainDerivative = new OperatorNode('-', 'unaryMinus', [
                chainDerivative
            ]);
            return new OperatorNode(op, func, [
                chainDerivative,
                funcDerivative
            ]);
        },
        'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {
            if (constNodes[node] !== undefined) return createConstantNode(0);
            if (node.op === '+') // d/dx(sum(f(x)) = sum(f'(x))
            return new OperatorNode(node.op, node.fn, node.args.map(function(arg) {
                return _derivative(arg, constNodes);
            }));
            if (node.op === '-') {
                // d/dx(+/-f(x)) = +/-f'(x)
                if (node.isUnary()) return new OperatorNode(node.op, node.fn, [
                    _derivative(node.args[0], constNodes)
                ]);
                 // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)
                if (node.isBinary()) return new OperatorNode(node.op, node.fn, [
                    _derivative(node.args[0], constNodes),
                    _derivative(node.args[1], constNodes)
                ]);
            }
            if (node.op === '*') {
                // d/dx(c*f(x)) = c*f'(x)
                var constantTerms = node.args.filter(function(arg) {
                    return constNodes[arg] !== undefined;
                });
                if (constantTerms.length > 0) {
                    var nonConstantTerms = node.args.filter(function(arg) {
                        return constNodes[arg] === undefined;
                    });
                    var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);
                    var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));
                    return new OperatorNode('*', 'multiply', newArgs);
                } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)
                return new OperatorNode('+', 'add', node.args.map(function(argOuter) {
                    return new OperatorNode('*', 'multiply', node.args.map(function(argInner) {
                        return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
                    }));
                }));
            }
            if (node.op === '/' && node.isBinary()) {
                var arg0 = node.args[0];
                var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c
                if (constNodes[arg1] !== undefined) return new OperatorNode('/', 'divide', [
                    _derivative(arg0, constNodes),
                    arg1
                ]);
                 // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)
                if (constNodes[arg0] !== undefined) return new OperatorNode('*', 'multiply', [
                    new OperatorNode('-', 'unaryMinus', [
                        arg0
                    ]),
                    new OperatorNode('/', 'divide', [
                        _derivative(arg1, constNodes),
                        new OperatorNode('^', 'pow', [
                            arg1.clone(),
                            createConstantNode(2)
                        ])
                    ])
                ]);
                 // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2
                return new OperatorNode('/', 'divide', [
                    new OperatorNode('-', 'subtract', [
                        new OperatorNode('*', 'multiply', [
                            _derivative(arg0, constNodes),
                            arg1.clone()
                        ]),
                        new OperatorNode('*', 'multiply', [
                            arg0.clone(),
                            _derivative(arg1, constNodes)
                        ])
                    ]),
                    new OperatorNode('^', 'pow', [
                        arg1.clone(),
                        createConstantNode(2)
                    ])
                ]);
            }
            if (node.op === '^' && node.isBinary()) {
                var _arg = node.args[0];
                var _arg2 = node.args[1];
                if (constNodes[_arg] !== undefined) {
                    // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
                    if (_isJs.isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) return createConstantNode(0);
                     // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)
                    return new OperatorNode('*', 'multiply', [
                        node,
                        new OperatorNode('*', 'multiply', [
                            new FunctionNode('log', [
                                _arg.clone()
                            ]),
                            _derivative(_arg2.clone(), constNodes)
                        ])
                    ]);
                }
                if (constNodes[_arg2] !== undefined) {
                    if (_isJs.isConstantNode(_arg2)) {
                        // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
                        if (isZero(_arg2.value)) return createConstantNode(0);
                         // Ignore exponent; f(x)^1 = f(x)
                        if (equal(_arg2.value, 1)) return _derivative(_arg, constNodes);
                    } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)
                    var powMinusOne = new OperatorNode('^', 'pow', [
                        _arg.clone(),
                        new OperatorNode('-', 'subtract', [
                            _arg2,
                            createConstantNode(1)
                        ])
                    ]);
                    return new OperatorNode('*', 'multiply', [
                        _arg2.clone(),
                        new OperatorNode('*', 'multiply', [
                            _derivative(_arg, constNodes),
                            powMinusOne
                        ])
                    ]);
                } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]
                return new OperatorNode('*', 'multiply', [
                    new OperatorNode('^', 'pow', [
                        _arg.clone(),
                        _arg2.clone()
                    ]),
                    new OperatorNode('+', 'add', [
                        new OperatorNode('*', 'multiply', [
                            _derivative(_arg, constNodes),
                            new OperatorNode('/', 'divide', [
                                _arg2.clone(),
                                _arg.clone()
                            ])
                        ]),
                        new OperatorNode('*', 'multiply', [
                            _derivative(_arg2, constNodes),
                            new FunctionNode('log', [
                                _arg.clone()
                            ])
                        ])
                    ])
                ]);
            }
            throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
        }
    });
    /**
   * Ensures the number of arguments for a function are correct,
   * and will throw an error otherwise.
   *
   * @param {FunctionNode} node
   */ function funcArgsCheck(node) {
        // TODO add min, max etc
        if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) return;
         // There should be an incorrect number of arguments if we reach here
        // Change all args to constants to avoid unidentified
        // symbol error when compiling function
        for(var i = 0; i < node.args.length; ++i)node.args[i] = createConstantNode(0);
        node.compile().evaluate();
        throw new Error('Expected TypeError, but none found');
    }
    /**
   * Helper function to create a constant node with a specific type
   * (number, BigNumber, Fraction)
   * @param {number} value
   * @param {string} [valueType]
   * @return {ConstantNode}
   */ function createConstantNode(value, valueType) {
        return new ConstantNode(numeric(value, valueType || config.number));
    }
    return derivative;
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gxQRl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRationalize", ()=>createRationalize
);
var _numberJs = require("../../utils/number.js");
var _factoryJs = require("../../utils/factory.js");
var _simplifyConstantJs = require("./simplify/simplifyConstant.js");
var _simplifyCoreJs = require("./simplify/simplifyCore.js");
var name = 'rationalize';
var dependencies = [
    'config',
    'typed',
    'equal',
    'isZero',
    'add',
    'subtract',
    'multiply',
    'divide',
    'pow',
    'parse',
    'simplify',
    '?bignumber',
    '?fraction',
    'mathWithTransform',
    'ConstantNode',
    'OperatorNode',
    'FunctionNode',
    'SymbolNode',
    'ParenthesisNode'
];
var createRationalize = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { config , typed , equal , isZero , add , subtract , multiply , divide , pow , parse , simplify , fraction , bignumber , mathWithTransform , ConstantNode , OperatorNode , FunctionNode , SymbolNode , ParenthesisNode  } = _ref;
    var simplifyConstant = _simplifyConstantJs.createSimplifyConstant({
        typed,
        config,
        mathWithTransform,
        fraction,
        bignumber,
        ConstantNode,
        OperatorNode,
        FunctionNode,
        SymbolNode
    });
    var simplifyCore = _simplifyCoreJs.createSimplifyCore({
        equal,
        isZero,
        add,
        subtract,
        multiply,
        divide,
        pow,
        ConstantNode,
        OperatorNode,
        FunctionNode,
        ParenthesisNode
    });
    /**
   *  Function to simplify an expression using an optional scope and
   *  return it if the expression is a polynomial expression, i.e.
   *  an expression with one or more variables and the operators
   *  +, -, *, and ^, where the exponent can only be a positive integer.
   *
   * Syntax:
   *
   *     polynomial(expr,scope,extended, rules)
   *
   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
   * @param  {object} scope           Optional scope for expression simplification
   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
   * @param  {array}  rules           Optional. Default is no rule.
   *
   *
   * @return {Object}
   *            {Object} node:   node simplified expression
   *            {Array}  variables:  variable names
   */ function polynomial(expr, scope, extended, rules) {
        var variables = [];
        var node1 = simplify(expr, rules, scope, {
            exactFractions: false
        }); // Resolves any variables and functions with all defined parameters
        extended = !!extended;
        var oper = '+-*' + (extended ? '/' : '');
        recPoly(node1);
        var retFunc = {
        };
        retFunc.expression = node1;
        retFunc.variables = variables;
        return retFunc; // -------------------------------------------------------------------------------------------------------
        /**
     *  Function to simplify an expression using an optional scope and
     *  return it if the expression is a polynomial expression, i.e.
     *  an expression with one or more variables and the operators
     *  +, -, *, and ^, where the exponent can only be a positive integer.
     *
     * Syntax:
     *
     *     recPoly(node)
     *
     *
     * @param  {Node} node               The current sub tree expression in recursion
     *
     * @return                           nothing, throw an exception if error
     */ function recPoly(node) {
            var tp = node.type; // node type
            if (tp === 'FunctionNode') {
                // No function call in polynomial expression
                throw new Error('There is an unsolved function call');
            } else if (tp === 'OperatorNode') {
                if (node.op === '^') {
                    // TODO: handle negative exponents like in '1/x^(-2)'
                    if (node.args[1].type !== 'ConstantNode' || !_numberJs.isInteger(parseFloat(node.args[1].value))) {
                        throw new Error('There is a non-integer exponent');
                    } else {
                        recPoly(node.args[0]);
                    }
                } else {
                    if (oper.indexOf(node.op) === -1) {
                        throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
                    }
                    for(var i = 0; i < node.args.length; i++){
                        recPoly(node.args[i]);
                    }
                } // type of operator
            } else if (tp === 'SymbolNode') {
                var _name = node.name; // variable name
                var pos = variables.indexOf(_name);
                if (pos === -1) {
                    // new variable in expression
                    variables.push(_name);
                }
            } else if (tp === 'ParenthesisNode') {
                recPoly(node.content);
            } else if (tp !== 'ConstantNode') {
                throw new Error('type ' + tp + ' is not allowed in polynomial expression');
            }
        } // end of recPoly
    } // end of polynomial
    // ---------------------------------------------------------------------------------------
    /**
   * Return a rule set to rationalize an polynomial expression in rationalize
   *
   * Syntax:
   *
   *     rulesRationalize()
   *
   * @return {array}        rule set to rationalize an polynomial expression
   */ function rulesRationalize() {
        var oldRules = [
            simplifyCore,
            {
                l: 'n+n',
                r: '2*n'
            },
            {
                l: 'n+-n',
                r: '0'
            },
            simplifyConstant,
            {
                l: 'n*(n1^-1)',
                r: 'n/n1'
            },
            {
                l: 'n*n1^-n2',
                r: 'n/n1^n2'
            },
            {
                l: 'n1^-1',
                r: '1/n1'
            },
            {
                l: 'n*(n1/n2)',
                r: '(n*n1)/n2'
            },
            {
                l: '1*n',
                r: 'n'
            }
        ];
        var rulesFirst = [
            {
                l: '(-n1)/(-n2)',
                r: 'n1/n2'
            },
            {
                l: '(-n1)*(-n2)',
                r: 'n1*n2'
            },
            {
                l: 'n1--n2',
                r: 'n1+n2'
            },
            {
                l: 'n1-n2',
                r: 'n1+(-n2)'
            },
            {
                l: '(n1+n2)*n3',
                r: '(n1*n3 + n2*n3)'
            },
            {
                l: 'n1*(n2+n3)',
                r: '(n1*n2+n1*n3)'
            },
            {
                l: 'c1*n + c2*n',
                r: '(c1+c2)*n'
            },
            {
                l: 'c1*n + n',
                r: '(c1+1)*n'
            },
            {
                l: 'c1*n - c2*n',
                r: '(c1-c2)*n'
            },
            {
                l: 'c1*n - n',
                r: '(c1-1)*n'
            },
            {
                l: 'v/c',
                r: '(1/c)*v'
            },
            {
                l: 'v/-c',
                r: '-(1/c)*v'
            },
            {
                l: '-v*-c',
                r: 'c*v'
            },
            {
                l: '-v*c',
                r: '-c*v'
            },
            {
                l: 'v*-c',
                r: '-c*v'
            },
            {
                l: 'v*c',
                r: 'c*v'
            },
            {
                l: '-(-n1*n2)',
                r: '(n1*n2)'
            },
            {
                l: '-(n1*n2)',
                r: '(-n1*n2)'
            },
            {
                l: '-(-n1+n2)',
                r: '(n1-n2)'
            },
            {
                l: '-(n1+n2)',
                r: '(-n1-n2)'
            },
            {
                l: '(n1^n2)^n3',
                r: '(n1^(n2*n3))'
            },
            {
                l: '-(-n1/n2)',
                r: '(n1/n2)'
            },
            {
                l: '-(n1/n2)',
                r: '(-n1/n2)'
            }
        ]; // Divisao and Unary
        var rulesDistrDiv = [
            {
                l: '(n1/n2 + n3/n4)',
                r: '((n1*n4 + n3*n2)/(n2*n4))'
            },
            {
                l: '(n1/n2 + n3)',
                r: '((n1 + n3*n2)/n2)'
            },
            {
                l: '(n1 + n2/n3)',
                r: '((n1*n3 + n2)/n3)'
            }
        ]; // Sum fraction with number 1
        var rulesSucDiv = [
            {
                l: '(n1/(n2/n3))',
                r: '((n1*n3)/n2)'
            },
            {
                l: '(n1/n2/n3)',
                r: '(n1/(n2*n3))'
            }
        ];
        var setRules = {
        }; // rules set in 4 steps.
        // All rules => infinite loop
        // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)
        setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set
        setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules
        setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules
        setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.
        // Division simplification
        // Second rule set.
        // There is no aggregate expression with parentesis, but the only variable can be scattered.
        setRules.finalRules = [
            simplifyCore,
            {
                l: 'n*-n',
                r: '-n^2'
            },
            {
                l: 'n*n',
                r: 'n^2'
            },
            simplifyConstant,
            {
                l: 'n*-n^n1',
                r: '-n^(n1+1)'
            },
            {
                l: 'n*n^n1',
                r: 'n^(n1+1)'
            },
            {
                l: 'n^n1*-n^n2',
                r: '-n^(n1+n2)'
            },
            {
                l: 'n^n1*n^n2',
                r: 'n^(n1+n2)'
            },
            {
                l: 'n^n1*-n',
                r: '-n^(n1+1)'
            },
            {
                l: 'n^n1*n',
                r: 'n^(n1+1)'
            },
            {
                l: 'n^n1/-n',
                r: '-n^(n1-1)'
            },
            {
                l: 'n^n1/n',
                r: 'n^(n1-1)'
            },
            {
                l: 'n/-n^n1',
                r: '-n^(1-n1)'
            },
            {
                l: 'n/n^n1',
                r: 'n^(1-n1)'
            },
            {
                l: 'n^n1/-n^n2',
                r: 'n^(n1-n2)'
            },
            {
                l: 'n^n1/n^n2',
                r: 'n^(n1-n2)'
            },
            {
                l: 'n1+(-n2*n3)',
                r: 'n1-n2*n3'
            },
            {
                l: 'v*(-c)',
                r: '-c*v'
            },
            {
                l: 'n1+-n2',
                r: 'n1-n2'
            },
            {
                l: 'v*c',
                r: 'c*v'
            },
            {
                l: '(n1^n2)^n3',
                r: '(n1^(n2*n3))'
            } // Power to Power
        ];
        return setRules;
    } // End rulesRationalize
    // ---------------------------------------------------------------------------------------
    /**
   *  Expand recursively a tree node for handling with expressions with exponents
   *  (it's not for constants, symbols or functions with exponents)
   *  PS: The other parameters are internal for recursion
   *
   * Syntax:
   *
   *     expandPower(node)
   *
   * @param  {Node} node         Current expression node
   * @param  {node} parent       Parent current node inside the recursion
   * @param  (int}               Parent number of chid inside the rercursion
   *
   * @return {node}        node expression with all powers expanded.
   */ function expandPower(node, parent, indParent) {
        var tp = node.type;
        var internal = arguments.length > 1; // TRUE in internal calls
        if (tp === 'OperatorNode' && node.isBinary()) {
            var does = false;
            var val;
            if (node.op === '^') {
                // First operator: Parenthesis or UnaryMinus
                if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
                    // Second operator: Constant
                    val = parseFloat(node.args[1].value);
                    does = val >= 2 && _numberJs.isInteger(val);
                }
            }
            if (does) {
                // Exponent >= 2
                // Before:
                //            operator A --> Subtree
                // parent pow
                //            constant
                //
                if (val > 2) {
                    // Exponent > 2,
                    // AFTER:  (exponent > 2)
                    //             operator A --> Subtree
                    // parent  *
                    //                 deep clone (operator A --> Subtree
                    //             pow
                    //                 constant - 1
                    //
                    var nEsqTopo = node.args[0];
                    var nDirTopo = new OperatorNode('^', 'pow', [
                        node.args[0].cloneDeep(),
                        new ConstantNode(val - 1)
                    ]);
                    node = new OperatorNode('*', 'multiply', [
                        nEsqTopo,
                        nDirTopo
                    ]);
                } else {
                    // Expo = 2 - no power
                    // AFTER:  (exponent =  2)
                    //             operator A --> Subtree
                    // parent   oper
                    //            deep clone (operator A --> Subtree)
                    //
                    node = new OperatorNode('*', 'multiply', [
                        node.args[0],
                        node.args[0].cloneDeep()
                    ]);
                }
                if (internal) {
                    // Change parent references in internal recursive calls
                    if (indParent === 'content') {
                        parent.content = node;
                    } else {
                        parent.args[indParent] = node;
                    }
                }
            } // does
        } // binary OperatorNode
        if (tp === 'ParenthesisNode') {
            // Recursion
            expandPower(node.content, node, 'content');
        } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
            for(var i = 0; i < node.args.length; i++){
                expandPower(node.args[i], node, i);
            }
        }
        if (!internal) {
            // return the root node
            return node;
        }
    } // End expandPower
    // ---------------------------------------------------------------------------------------
    /**
   * Auxilary function for rationalize
   * Convert near canonical polynomial in one variable in a canonical polynomial
   * with one term for each exponent in decreasing order
   *
   * Syntax:
   *
   *     polyToCanonical(node [, coefficients])
   *
   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
   *
   *        The string or tree expression needs to be at below syntax, with free spaces:
   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
   *       Where 'var' is one variable with any valid name
   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
   *             'expo' are integers greater than 0. It can be omitted if equal than 1.
   *
   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
   *
   *
   * @return {node}        new node tree with one variable polynomial or string error.
   */ function polyToCanonical(node2, coefficients) {
        if (coefficients === undefined) {
            coefficients = [];
        } // coefficients.
        coefficients[0] = 0; // index is the exponent
        var o1 = {
        };
        o1.cte = 1;
        o1.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
        //       It is used to deduce the exponent: 1 for *, 0 for "".
        o1.fire = '';
        var maxExpo = 0; // maximum exponent
        var varname = ''; // variable name
        recurPol(node2, null, o1);
        maxExpo = coefficients.length - 1;
        var first = true;
        var no;
        for(var i = maxExpo; i >= 0; i--){
            if (coefficients[i] === 0) continue;
            var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));
            var op = coefficients[i] < 0 ? '-' : '+';
            if (i > 0) {
                // Is not a constant without variable
                var n2 = new SymbolNode(varname);
                if (i > 1) {
                    var n3 = new ConstantNode(i);
                    n2 = new OperatorNode('^', 'pow', [
                        n2,
                        n3
                    ]);
                }
                if (coefficients[i] === -1 && first) {
                    n1 = new OperatorNode('-', 'unaryMinus', [
                        n2
                    ]);
                } else if (Math.abs(coefficients[i]) === 1) {
                    n1 = n2;
                } else {
                    n1 = new OperatorNode('*', 'multiply', [
                        n1,
                        n2
                    ]);
                }
            }
            if (first) {
                no = n1;
            } else if (op === '+') {
                no = new OperatorNode('+', 'add', [
                    no,
                    n1
                ]);
            } else {
                no = new OperatorNode('-', 'subtract', [
                    no,
                    n1
                ]);
            }
            first = false;
        } // for
        if (first) {
            return new ConstantNode(0);
        } else {
            return no;
        }
        /**
     * Recursive auxilary function inside polyToCanonical for
     * converting expression in canonical form
     *
     * Syntax:
     *
     *     recurPol(node, noPai, obj)
     *
     * @param  {Node} node        The current subpolynomial expression
     * @param  {Node | Null}  noPai   The current parent node
     * @param  {object}    obj        Object with many internal flags
     *
     * @return {}                    No return. If error, throws an exception
     */ function recurPol(node, noPai, o) {
            var tp = node.type;
            if (tp === 'FunctionNode') {
                // ***** FunctionName *****
                // No function call in polynomial expression
                throw new Error('There is an unsolved function call');
            } else if (tp === 'OperatorNode') {
                // ***** OperatorName *****
                if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');
                if (noPai !== null) {
                    // -(unary),^  : children of *,+,-
                    if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
                        throw new Error('Invalid ' + node.op + ' placing');
                    } // -,+,* : children of +,-
                    if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
                        throw new Error('Invalid ' + node.op + ' placing');
                    } // -,+ : first child
                    if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
                        throw new Error('Invalid ' + node.op + ' placing');
                    }
                } // Has parent
                // Firers: ^,*       Old:   ^,&,-(unary): firers
                if (node.op === '^' || node.op === '*') {
                    o.fire = node.op;
                }
                for(var _i = 0; _i < node.args.length; _i++){
                    // +,-: reset fire
                    if (node.fn === 'unaryMinus') o.oper = '-';
                    if (node.op === '+' || node.fn === 'subtract') {
                        o.fire = '';
                        o.cte = 1; // default if there is no constant
                        o.oper = _i === 0 ? '+' : node.op;
                    }
                    o.noFil = _i; // number of son
                    recurPol(node.args[_i], node, o);
                } // for in children
            } else if (tp === 'SymbolNode') {
                // ***** SymbolName *****
                if (node.name !== varname && varname !== '') {
                    throw new Error('There is more than one variable');
                }
                varname = node.name;
                if (noPai === null) {
                    coefficients[1] = 1;
                    return;
                } // ^: Symbol is First child
                if (noPai.op === '^' && o.noFil !== 0) {
                    throw new Error('In power the variable should be the first parameter');
                } // *: Symbol is Second child
                if (noPai.op === '*' && o.noFil !== 1) {
                    throw new Error('In multiply the variable should be the second parameter');
                } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)
                if (o.fire === '' || o.fire === '*') {
                    if (maxExpo < 1) coefficients[1] = 0;
                    coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
                    maxExpo = Math.max(1, maxExpo);
                }
            } else if (tp === 'ConstantNode') {
                var valor = parseFloat(node.value);
                if (noPai === null) {
                    coefficients[0] = valor;
                    return;
                }
                if (noPai.op === '^') {
                    // cte: second  child of power
                    if (o.noFil !== 1) throw new Error('Constant cannot be powered');
                    if (!_numberJs.isInteger(valor) || valor <= 0) {
                        throw new Error('Non-integer exponent is not allowed');
                    }
                    for(var _i2 = maxExpo + 1; _i2 < valor; _i2++){
                        coefficients[_i2] = 0;
                    }
                    if (valor > maxExpo) coefficients[valor] = 0;
                    coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
                    maxExpo = Math.max(valor, maxExpo);
                    return;
                }
                o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.
                if (o.fire === '') {
                    coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
                }
            } else {
                throw new Error('Type ' + tp + ' is not allowed');
            }
        } // End of recurPol
    } // End of polyToCanonical
    /**
   * Transform a rationalizable expression in a rational fraction.
   * If rational fraction is one variable polynomial then converts
   * the numerator and denominator in canonical form, with decreasing
   * exponents, returning the coefficients of numerator.
   *
   * Syntax:
   *
   *     rationalize(expr)
   *     rationalize(expr, detailed)
   *     rationalize(expr, scope)
   *     rationalize(expr, scope, detailed)
   *
   * Examples:
   *
   *     math.rationalize('sin(x)+y')
   *                   //  Error: There is an unsolved function call
   *     math.rationalize('2x/y - y/(x+1)')
   *                   // (2*x^2-y^2+2*x)/(x*y+y)
   *     math.rationalize('(2x+1)^6')
   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
   *
   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
   *     math.rationalize('x+x+x+y',{})    // 3*x+y
   *
   *     const ret = math.rationalize('x+x+x+y',{},true)
   *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
   *     const ret = math.rationalize('-2+5x^2',{},true)
   *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
   *
   * See also:
   *
   *     simplify
   *
   * @param  {Node|string} expr    The expression to check if is a polynomial expression
   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
   *
   * @return {Object | Node}    The rational polynomial of `expr` or na object
   *            {Object}
   *              {Expression Node} expression: node simplified expression
   *              {Expression Node} numerator: simplified numerator of expression
   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
   *              {Array}           variables:  variable names
   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent
   *           {Expression Node}  node simplified expression
   *
   */ return typed(name, {
        string: function string(expr) {
            return this(parse(expr), {
            }, false);
        },
        'string, boolean': function stringBoolean(expr, detailed) {
            return this(parse(expr), {
            }, detailed);
        },
        'string, Object': function stringObject(expr, scope) {
            return this(parse(expr), scope, false);
        },
        'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {
            return this(parse(expr), scope, detailed);
        },
        Node: function Node(expr) {
            return this(expr, {
            }, false);
        },
        'Node, boolean': function NodeBoolean(expr, detailed) {
            return this(expr, {
            }, detailed);
        },
        'Node, Object': function NodeObject(expr, scope) {
            return this(expr, scope, false);
        },
        'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {
            var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form
            var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial
            var nVars = polyRet.variables.length;
            expr = polyRet.expression;
            if (nVars >= 1) {
                // If expression in not a constant
                expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)
                var sBefore; // Previous expression
                var rules;
                var eDistrDiv = true;
                var redoInic = false;
                expr = simplify(expr, setRules.firstRules, {
                }, {
                    exactFractions: false
                }); // Apply the initial rules, including succ div rules
                var s;
                while(true){
                    // Apply alternately  successive division rules and distr.div.rules
                    rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;
                    expr = simplify(expr, rules); // until no more changes
                    eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules
                    s = expr.toString();
                    if (s === sBefore) break; // No changes : end of the loop
                    redoInic = true;
                    sBefore = s;
                }
                if (redoInic) // Apply first rules again without succ div rules (if there are changes)
                expr = simplify(expr, setRules.firstRulesAgain, {
                }, {
                    exactFractions: false
                });
                expr = simplify(expr, setRules.finalRules, {
                }, {
                    exactFractions: false
                }); // Apply final rules
            } // NVars >= 1
            var coefficients = [];
            var retRationalize = {
            };
            if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
                // Separate numerator from denominator
                if (nVars === 1) {
                    expr.args[0] = polyToCanonical(expr.args[0], coefficients);
                    expr.args[1] = polyToCanonical(expr.args[1]);
                }
                if (detailed) {
                    retRationalize.numerator = expr.args[0];
                    retRationalize.denominator = expr.args[1];
                }
            } else {
                if (nVars === 1) expr = polyToCanonical(expr, coefficients);
                if (detailed) {
                    retRationalize.numerator = expr;
                    retRationalize.denominator = null;
                }
            } // nVars
            if (!detailed) return expr;
            retRationalize.coefficients = coefficients;
            retRationalize.variables = polyRet.variables;
            retRationalize.expression = expr;
            return retRationalize;
        } // ^^^^^^^ end of rationalize ^^^^^^^^
    }); // end of typed rationalize
});

},{"../../utils/number.js":"l1AB8","../../utils/factory.js":"26foW","./simplify/simplifyConstant.js":"5cMio","./simplify/simplifyCore.js":"kNjyV","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"l9Iat":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createReviver", ()=>createReviver
);
var _factoryJs = require("../utils/factory.js");
var name = 'reviver';
var dependencies = [
    'classes'
];
var createReviver = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { classes  } = _ref;
    /**
   * Instantiate mathjs data types from their JSON representation
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the revived object
   */ return function reviver(key, value) {
        var constructor = classes[value && value.mathjs];
        if (constructor && typeof constructor.fromJSON === 'function') return constructor.fromJSON(value);
        return value;
    };
});

},{"../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"h3Fw1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createReplacer", ()=>createReplacer
);
var _factoryJs = require("../utils/factory.js");
var name = 'replacer';
var dependencies = [];
var createReplacer = /* #__PURE__ */ _factoryJs.factory(name, dependencies, ()=>{
    /**
   * Stringify data types into their JSON representation.
   * Most data types can be serialized using their `.toJSON` method,
   * but not all, for example the number `Infinity`. For these cases you have
   * to use the replacer. Example usage:
   *
   *     JSON.stringify([2, Infinity], math.replacer)
   *
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the replaced object
   */ return function replacer(key, value) {
        // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON
        if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) return {
            mathjs: 'number',
            value: String(value)
        };
        return value;
    };
});

},{"../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bWQAE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTrue", ()=>createTrue
);
parcelHelpers.export(exports, "createFalse", ()=>createFalse
);
parcelHelpers.export(exports, "createNull", ()=>createNull
);
parcelHelpers.export(exports, "createInfinity", ()=>createInfinity
);
parcelHelpers.export(exports, "createNaN", ()=>createNaN
);
parcelHelpers.export(exports, "createPi", ()=>createPi
);
parcelHelpers.export(exports, "createTau", ()=>createTau
);
parcelHelpers.export(exports, "createE", ()=>createE
);
parcelHelpers.export(exports, "createPhi", ()=>createPhi
);
parcelHelpers.export(exports, "createLN2", ()=>createLN2
);
parcelHelpers.export(exports, "createLN10", ()=>createLN10
);
parcelHelpers.export(exports, "createLOG2E", ()=>createLOG2E
);
parcelHelpers.export(exports, "createLOG10E", ()=>createLOG10E
);
parcelHelpers.export(exports, "createSQRT1_2", ()=>createSQRT1_2
);
parcelHelpers.export(exports, "createSQRT2", ()=>createSQRT2
);
parcelHelpers.export(exports, "createI", ()=>createI
);
parcelHelpers.export(exports, "createUppercasePi", ()=>createUppercasePi
);
parcelHelpers.export(exports, "createUppercaseE", ()=>createUppercaseE
);
parcelHelpers.export(exports, "createVersion", ()=>createVersion
);
var _factoryJs = require("./utils/factory.js");
var _versionJs = require("./version.js");
var _constantsJs = require("./utils/bignumber/constants.js");
var _indexJs = require("./plain/number/index.js");
var createTrue = /* #__PURE__ */ _factoryJs.factory('true', [], ()=>true
);
var createFalse = /* #__PURE__ */ _factoryJs.factory('false', [], ()=>false
);
var createNull = /* #__PURE__ */ _factoryJs.factory('null', [], ()=>null
);
var createInfinity = /* #__PURE__ */ recreateFactory('Infinity', [
    'config',
    '?BigNumber'
], (_ref)=>{
    var { config , BigNumber  } = _ref;
    return config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity;
});
var createNaN = /* #__PURE__ */ recreateFactory('NaN', [
    'config',
    '?BigNumber'
], (_ref2)=>{
    var { config , BigNumber  } = _ref2;
    return config.number === 'BigNumber' ? new BigNumber(NaN) : NaN;
});
var createPi = /* #__PURE__ */ recreateFactory('pi', [
    'config',
    '?BigNumber'
], (_ref3)=>{
    var { config , BigNumber  } = _ref3;
    return config.number === 'BigNumber' ? _constantsJs.createBigNumberPi(BigNumber) : _indexJs.pi;
});
var createTau = /* #__PURE__ */ recreateFactory('tau', [
    'config',
    '?BigNumber'
], (_ref4)=>{
    var { config , BigNumber  } = _ref4;
    return config.number === 'BigNumber' ? _constantsJs.createBigNumberTau(BigNumber) : _indexJs.tau;
});
var createE = /* #__PURE__ */ recreateFactory('e', [
    'config',
    '?BigNumber'
], (_ref5)=>{
    var { config , BigNumber  } = _ref5;
    return config.number === 'BigNumber' ? _constantsJs.createBigNumberE(BigNumber) : _indexJs.e;
}); // golden ratio, (1+sqrt(5))/2
var createPhi = /* #__PURE__ */ recreateFactory('phi', [
    'config',
    '?BigNumber'
], (_ref6)=>{
    var { config , BigNumber  } = _ref6;
    return config.number === 'BigNumber' ? _constantsJs.createBigNumberPhi(BigNumber) : _indexJs.phi;
});
var createLN2 = /* #__PURE__ */ recreateFactory('LN2', [
    'config',
    '?BigNumber'
], (_ref7)=>{
    var { config , BigNumber  } = _ref7;
    return config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2;
});
var createLN10 = /* #__PURE__ */ recreateFactory('LN10', [
    'config',
    '?BigNumber'
], (_ref8)=>{
    var { config , BigNumber  } = _ref8;
    return config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10;
});
var createLOG2E = /* #__PURE__ */ recreateFactory('LOG2E', [
    'config',
    '?BigNumber'
], (_ref9)=>{
    var { config , BigNumber  } = _ref9;
    return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E;
});
var createLOG10E = /* #__PURE__ */ recreateFactory('LOG10E', [
    'config',
    '?BigNumber'
], (_ref10)=>{
    var { config , BigNumber  } = _ref10;
    return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E;
});
var createSQRT1_2 = /* #__PURE__ */ recreateFactory('SQRT1_2', [
    'config',
    '?BigNumber'
], (_ref11)=>{
    var { config , BigNumber  } = _ref11;
    return config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2;
});
var createSQRT2 = /* #__PURE__ */ recreateFactory('SQRT2', [
    'config',
    '?BigNumber'
], (_ref12)=>{
    var { config , BigNumber  } = _ref12;
    return config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2;
});
var createI = /* #__PURE__ */ recreateFactory('i', [
    'Complex'
], (_ref13)=>{
    var { Complex  } = _ref13;
    return Complex.I;
}); // for backward compatibility with v5
var createUppercasePi = /* #__PURE__ */ _factoryJs.factory('PI', [
    'pi'
], (_ref14)=>{
    var { pi  } = _ref14;
    return pi;
});
var createUppercaseE = /* #__PURE__ */ _factoryJs.factory('E', [
    'e'
], (_ref15)=>{
    var { e  } = _ref15;
    return e;
});
var createVersion = /* #__PURE__ */ _factoryJs.factory('version', [], ()=>_versionJs.version
); // helper function to create a factory with a flag recreateOnConfigChange
// idea: allow passing optional properties to be attached to the factory function as 4th argument?
function recreateFactory(name, dependencies, create) {
    return _factoryJs.factory(name, dependencies, create, {
        recreateOnConfigChange: true
    });
}

},{"./utils/factory.js":"26foW","./version.js":"eQgbr","./utils/bignumber/constants.js":"gqh5e","./plain/number/index.js":"8bgPw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eQgbr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version
);
var version = '10.0.0'; // Note: This file is automatically generated when building math.js.
 // Changes made in this file will be overwritten.

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ksQEE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSpeedOfLight", ()=>createSpeedOfLight
);
parcelHelpers.export(exports, "createGravitationConstant", ()=>createGravitationConstant
);
parcelHelpers.export(exports, "createPlanckConstant", ()=>createPlanckConstant
);
parcelHelpers.export(exports, "createReducedPlanckConstant", ()=>createReducedPlanckConstant
);
parcelHelpers.export(exports, "createMagneticConstant", ()=>createMagneticConstant
);
parcelHelpers.export(exports, "createElectricConstant", ()=>createElectricConstant
);
parcelHelpers.export(exports, "createVacuumImpedance", ()=>createVacuumImpedance
);
parcelHelpers.export(exports, "createCoulomb", ()=>createCoulomb
);
parcelHelpers.export(exports, "createElementaryCharge", ()=>createElementaryCharge
);
parcelHelpers.export(exports, "createBohrMagneton", ()=>createBohrMagneton
);
parcelHelpers.export(exports, "createConductanceQuantum", ()=>createConductanceQuantum
);
parcelHelpers.export(exports, "createInverseConductanceQuantum", ()=>createInverseConductanceQuantum
);
parcelHelpers.export(exports, "createMagneticFluxQuantum", ()=>createMagneticFluxQuantum
);
parcelHelpers.export(exports, "createNuclearMagneton", ()=>createNuclearMagneton
);
parcelHelpers.export(exports, "createKlitzing", ()=>createKlitzing
);
parcelHelpers.export(exports, "createJosephson", ()=>createJosephson
);
parcelHelpers.export(exports, "createBohrRadius", ()=>createBohrRadius
);
parcelHelpers.export(exports, "createClassicalElectronRadius", ()=>createClassicalElectronRadius
);
parcelHelpers.export(exports, "createElectronMass", ()=>createElectronMass
);
parcelHelpers.export(exports, "createFermiCoupling", ()=>createFermiCoupling
);
parcelHelpers.export(exports, "createFineStructure", ()=>createFineStructure
);
parcelHelpers.export(exports, "createHartreeEnergy", ()=>createHartreeEnergy
);
parcelHelpers.export(exports, "createProtonMass", ()=>createProtonMass
);
parcelHelpers.export(exports, "createDeuteronMass", ()=>createDeuteronMass
);
parcelHelpers.export(exports, "createNeutronMass", ()=>createNeutronMass
);
parcelHelpers.export(exports, "createQuantumOfCirculation", ()=>createQuantumOfCirculation
);
parcelHelpers.export(exports, "createRydberg", ()=>createRydberg
);
parcelHelpers.export(exports, "createThomsonCrossSection", ()=>createThomsonCrossSection
);
parcelHelpers.export(exports, "createWeakMixingAngle", ()=>createWeakMixingAngle
);
parcelHelpers.export(exports, "createEfimovFactor", ()=>createEfimovFactor
);
parcelHelpers.export(exports, "createAtomicMass", ()=>createAtomicMass
);
parcelHelpers.export(exports, "createAvogadro", ()=>createAvogadro
);
parcelHelpers.export(exports, "createBoltzmann", ()=>createBoltzmann
);
parcelHelpers.export(exports, "createFaraday", ()=>createFaraday
);
parcelHelpers.export(exports, "createFirstRadiation", ()=>createFirstRadiation
);
parcelHelpers.export(exports, "createLoschmidt", ()=>createLoschmidt
);
parcelHelpers.export(exports, "createGasConstant", ()=>createGasConstant
);
parcelHelpers.export(exports, "createMolarPlanckConstant", ()=>createMolarPlanckConstant
);
parcelHelpers.export(exports, "createMolarVolume", ()=>createMolarVolume
);
parcelHelpers.export(exports, "createSackurTetrode", ()=>createSackurTetrode
);
parcelHelpers.export(exports, "createSecondRadiation", ()=>createSecondRadiation
);
parcelHelpers.export(exports, "createStefanBoltzmann", ()=>createStefanBoltzmann
);
parcelHelpers.export(exports, "createWienDisplacement", ()=>createWienDisplacement
);
parcelHelpers.export(exports, "createMolarMass", ()=>createMolarMass
);
parcelHelpers.export(exports, "createMolarMassC12", ()=>createMolarMassC12
);
parcelHelpers.export(exports, "createGravity", ()=>createGravity
);
parcelHelpers.export(exports, "createPlanckLength", ()=>createPlanckLength
);
parcelHelpers.export(exports, "createPlanckMass", ()=>createPlanckMass
);
parcelHelpers.export(exports, "createPlanckTime", ()=>createPlanckTime
);
parcelHelpers.export(exports, "createPlanckCharge", ()=>createPlanckCharge
);
parcelHelpers.export(exports, "createPlanckTemperature", ()=>createPlanckTemperature
);
var _factoryJs = require("../../utils/factory.js"); // Source: https://en.wikipedia.org/wiki/Physical_constant
var createSpeedOfLight = /* #__PURE__ */ unitFactory('speedOfLight', '299792458', 'm s^-1');
var createGravitationConstant = /* #__PURE__ */ unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');
var createPlanckConstant = /* #__PURE__ */ unitFactory('planckConstant', '6.62607015e-34', 'J s');
var createReducedPlanckConstant = /* #__PURE__ */ unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants
var createMagneticConstant = /* #__PURE__ */ unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');
var createElectricConstant = /* #__PURE__ */ unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');
var createVacuumImpedance = /* #__PURE__ */ unitFactory('vacuumImpedance', '376.730313667', 'ohm');
var createCoulomb = /* #__PURE__ */ unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');
var createElementaryCharge = /* #__PURE__ */ unitFactory('elementaryCharge', '1.602176634e-19', 'C');
var createBohrMagneton = /* #__PURE__ */ unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');
var createConductanceQuantum = /* #__PURE__ */ unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');
var createInverseConductanceQuantum = /* #__PURE__ */ unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');
var createMagneticFluxQuantum = /* #__PURE__ */ unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');
var createNuclearMagneton = /* #__PURE__ */ unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');
var createKlitzing = /* #__PURE__ */ unitFactory('klitzing', '25812.807459304513', 'ohm');
var createJosephson = /* #__PURE__ */ unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed
var createBohrRadius = /* #__PURE__ */ unitFactory('bohrRadius', '5.29177210903e-11', 'm');
var createClassicalElectronRadius = /* #__PURE__ */ unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');
var createElectronMass = /* #__PURE__ */ unitFactory('electronMass', '9.1093837015e-31', 'kg');
var createFermiCoupling = /* #__PURE__ */ unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');
var createFineStructure = numberFactory('fineStructure', 0.0072973525693);
var createHartreeEnergy = /* #__PURE__ */ unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');
var createProtonMass = /* #__PURE__ */ unitFactory('protonMass', '1.67262192369e-27', 'kg');
var createDeuteronMass = /* #__PURE__ */ unitFactory('deuteronMass', '3.3435830926e-27', 'kg');
var createNeutronMass = /* #__PURE__ */ unitFactory('neutronMass', '1.6749271613e-27', 'kg');
var createQuantumOfCirculation = /* #__PURE__ */ unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');
var createRydberg = /* #__PURE__ */ unitFactory('rydberg', '10973731.568160', 'm^-1');
var createThomsonCrossSection = /* #__PURE__ */ unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');
var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.2229);
var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants
var createAtomicMass = /* #__PURE__ */ unitFactory('atomicMass', '1.66053906660e-27', 'kg');
var createAvogadro = /* #__PURE__ */ unitFactory('avogadro', '6.02214076e23', 'mol^-1');
var createBoltzmann = /* #__PURE__ */ unitFactory('boltzmann', '1.380649e-23', 'J K^-1');
var createFaraday = /* #__PURE__ */ unitFactory('faraday', '96485.33212331001', 'C mol^-1');
var createFirstRadiation = /* #__PURE__ */ unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance
var createLoschmidt = /* #__PURE__ */ unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');
var createGasConstant = /* #__PURE__ */ unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');
var createMolarPlanckConstant = /* #__PURE__ */ unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');
var createMolarVolume = /* #__PURE__ */ unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');
var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);
var createSecondRadiation = /* #__PURE__ */ unitFactory('secondRadiation', '0.014387768775039337', 'm K');
var createStefanBoltzmann = /* #__PURE__ */ unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');
var createWienDisplacement = /* #__PURE__ */ unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values
var createMolarMass = /* #__PURE__ */ unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');
var createMolarMassC12 = /* #__PURE__ */ unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');
var createGravity = /* #__PURE__ */ unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js
var createPlanckLength = /* #__PURE__ */ unitFactory('planckLength', '1.616255e-35', 'm');
var createPlanckMass = /* #__PURE__ */ unitFactory('planckMass', '2.176435e-8', 'kg');
var createPlanckTime = /* #__PURE__ */ unitFactory('planckTime', '5.391245e-44', 's');
var createPlanckCharge = /* #__PURE__ */ unitFactory('planckCharge', '1.87554603778e-18', 'C');
var createPlanckTemperature = /* #__PURE__ */ unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,
// a Unit with either a number value or a BigNumber value depending on the configuration
function unitFactory(name, valueStr, unitStr) {
    var dependencies = [
        'config',
        'Unit',
        'BigNumber'
    ];
    return _factoryJs.factory(name, dependencies, (_ref)=>{
        var { config , Unit , BigNumber  } = _ref;
        // Note that we can parse into number or BigNumber.
        // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values
        // Therefore we dont use Unit.parse()
        var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);
        var unit = new Unit(value, unitStr);
        unit.fixPrefix = true;
        return unit;
    });
} // helper function to create a factory function which creates a numeric constant,
// either a number or BigNumber depending on the configuration
function numberFactory(name, value) {
    var dependencies = [
        'config',
        'BigNumber'
    ];
    return _factoryJs.factory(name, dependencies, (_ref2)=>{
        var { config , BigNumber  } = _ref2;
        return config.number === 'BigNumber' ? new BigNumber(value) : value;
    });
}

},{"../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"idj0G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createApplyTransform", ()=>createApplyTransform
);
var _errorTransformJs = require("./utils/errorTransform.js");
var _factoryJs = require("../../utils/factory.js");
var _applyJs = require("../../function/matrix/apply.js");
var _isJs = require("../../utils/is.js");
var name = 'apply';
var dependencies = [
    'typed',
    'isInteger'
];
var createApplyTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , isInteger  } = _ref;
    var apply = _applyJs.createApply({
        typed,
        isInteger
    }); // @see: comment of concat itself
    return typed('apply', {
        '...any': function any(args) {
            // change dim from one-based to zero-based
            var dim = args[1];
            if (_isJs.isNumber(dim)) args[1] = dim - 1;
            else if (_isJs.isBigNumber(dim)) args[1] = dim.minus(1);
            try {
                return apply.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"./utils/errorTransform.js":"gl6m9","../../utils/factory.js":"26foW","../../function/matrix/apply.js":"7QrEO","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kRwHR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createColumnTransform", ()=>createColumnTransform
);
var _errorTransformJs = require("./utils/errorTransform.js");
var _factoryJs = require("../../utils/factory.js");
var _columnJs = require("../../function/matrix/column.js");
var _isJs = require("../../utils/is.js");
var name = 'column';
var dependencies = [
    'typed',
    'Index',
    'matrix',
    'range'
];
var createColumnTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Index , matrix , range  } = _ref;
    var column = _columnJs.createColumn({
        typed,
        Index,
        matrix,
        range
    }); // @see: comment of column itself
    return typed('column', {
        '...any': function any(args) {
            // change last argument from zero-based to one-based
            var lastIndex = args.length - 1;
            var last = args[lastIndex];
            if (_isJs.isNumber(last)) args[lastIndex] = last - 1;
            try {
                return column.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"./utils/errorTransform.js":"gl6m9","../../utils/factory.js":"26foW","../../function/matrix/column.js":"kSV9g","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"99xLP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFilterTransform", ()=>createFilterTransform
);
var _isJs = require("../../utils/is.js");
var _arrayJs = require("../../utils/array.js");
var _functionJs = require("../../utils/function.js");
var _compileInlineExpressionJs = require("./utils/compileInlineExpression.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'filter';
var dependencies = [
    'typed'
];
var createFilterTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Attach a transform function to math.filter
   * Adds a property transform containing the transform function.
   *
   * This transform adds support for equations as test function for math.filter,
   * so you can do something like 'filter([3, -2, 5], x > 0)'.
   */ function filterTransform(args, math, scope) {
        var x, callback;
        if (args[0]) x = args[0].compile().evaluate(scope);
        if (args[1]) {
            if (_isJs.isSymbolNode(args[1]) || _isJs.isFunctionAssignmentNode(args[1])) // a function pointer, like filter([3, -2, 5], myTestFunction)
            callback = args[1].compile().evaluate(scope);
            else // an expression like filter([3, -2, 5], x > 0)
            callback = _compileInlineExpressionJs.compileInlineExpression(args[1], math, scope);
        }
        return filter(x, callback);
    }
    filterTransform.rawArgs = true; // one based version of function filter
    var filter = typed('filter', {
        'Array, function': _filter,
        'Matrix, function': function MatrixFunction(x, test) {
            return x.create(_filter(x.toArray(), test));
        },
        'Array, RegExp': _arrayJs.filterRegExp,
        'Matrix, RegExp': function MatrixRegExp(x, test) {
            return x.create(_arrayJs.filterRegExp(x.toArray(), test));
        }
    });
    return filterTransform;
}, {
    isTransformFunction: true
});
/**
 * Filter values in a callback given a callback function
 *
 * !!! Passes a one-based index !!!
 *
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */ function _filter(x, callback) {
    // figure out what number of arguments the callback function expects
    var args = _functionJs.maxArgumentCount(callback);
    return _arrayJs.filter(x, function(value, index, array) {
        // invoke the callback function with the right number of arguments
        if (args === 1) return callback(value);
        else if (args === 2) return callback(value, [
            index + 1
        ]);
        else // 3 or -1
        return callback(value, [
            index + 1
        ], array);
    });
}

},{"../../utils/is.js":"iwdlF","../../utils/array.js":"3R6c8","../../utils/function.js":"b1EsA","./utils/compileInlineExpression.js":"inO7O","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"inO7O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Compile an inline expression like "x > 0"
 * @param {Node} expression
 * @param {Object} math
 * @param {Object} scope
 * @return {function} Returns a function with one argument which fills in the
 *                    undefined variable (like "x") and evaluates the expression
 */ parcelHelpers.export(exports, "compileInlineExpression", ()=>compileInlineExpression
);
var _isJs = require("../../../utils/is.js");
var _scopeJs = require("../../../utils/scope.js");
function compileInlineExpression(expression, math, scope) {
    // find an undefined symbol
    var symbol = expression.filter(function(node) {
        return _isJs.isSymbolNode(node) && !(node.name in math) && !scope.has(node.name);
    })[0];
    if (!symbol) throw new Error('No undefined variable found in inline expression "' + expression + '"');
     // create a test function for this equation
    var name = symbol.name; // variable name
    var subScope = _scopeJs.createSubScope(scope);
    var eq = expression.compile();
    return function inlineExpression(x) {
        subScope.set(name, x);
        return eq.evaluate(subScope);
    };
}

},{"../../../utils/is.js":"iwdlF","../../../utils/scope.js":"9dmpT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e7Ff3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createForEachTransform", ()=>createForEachTransform
);
var _isJs = require("../../utils/is.js");
var _functionJs = require("../../utils/function.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var _compileInlineExpressionJs = require("./utils/compileInlineExpression.js");
var name = 'forEach';
var dependencies = [
    'typed'
];
var createForEachTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Attach a transform function to math.forEach
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */ function forEachTransform(args, math, scope) {
        var x, callback;
        if (args[0]) x = args[0].compile().evaluate(scope);
        if (args[1]) {
            if (_isJs.isSymbolNode(args[1]) || _isJs.isFunctionAssignmentNode(args[1])) // a function pointer, like forEach([3, -2, 5], myTestFunction)
            callback = args[1].compile().evaluate(scope);
            else // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
            callback = _compileInlineExpressionJs.compileInlineExpression(args[1], math, scope);
        }
        return _forEach(x, callback);
    }
    forEachTransform.rawArgs = true; // one-based version of forEach
    var _forEach = typed('forEach', {
        'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {
            // figure out what number of arguments the callback function expects
            var args = _functionJs.maxArgumentCount(callback);
            var recurse1 = function recurse(value, index) {
                if (Array.isArray(value)) _arrayJs.forEach(value, function(child, i) {
                    // we create a copy of the index array and append the new index value
                    recurse(child, index.concat(i + 1)); // one based index, hence i+1
                });
                else {
                    // invoke the callback function with the right number of arguments
                    if (args === 1) callback(value);
                    else if (args === 2) callback(value, index);
                    else // 3 or -1
                    callback(value, index, array);
                }
            };
            recurse1(array.valueOf(), []); // pass Array
        }
    });
    return forEachTransform;
}, {
    isTransformFunction: true
});

},{"../../utils/is.js":"iwdlF","../../utils/function.js":"b1EsA","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","./utils/compileInlineExpression.js":"inO7O","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"inVUt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createIndexTransform", ()=>createIndexTransform
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var name = 'index';
var dependencies = [
    'Index'
];
var createIndexTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { Index  } = _ref;
    /**
   * Attach a transform function to math.index
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */ return function indexTransform() {
        var args = [];
        for(var i = 0, ii = arguments.length; i < ii; i++){
            var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number
            if (_isJs.isRange(arg)) {
                arg.start--;
                arg.end -= arg.step > 0 ? 0 : 2;
            } else if (arg && arg.isSet === true) arg = arg.map(function(v) {
                return v - 1;
            });
            else if (_isJs.isArray(arg) || _isJs.isMatrix(arg)) arg = arg.map(function(v) {
                return v - 1;
            });
            else if (_isJs.isNumber(arg)) arg--;
            else if (_isJs.isBigNumber(arg)) arg = arg.toNumber() - 1;
            else if (typeof arg === 'string') ;
            else throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
            args[i] = arg;
        }
        var res = new Index();
        Index.apply(res, args);
        return res;
    };
}, {
    isTransformFunction: true
});

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5sPz5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMapTransform", ()=>createMapTransform
);
var _isJs = require("../../utils/is.js");
var _functionJs = require("../../utils/function.js");
var _arrayJs = require("../../utils/array.js");
var _factoryJs = require("../../utils/factory.js");
var _compileInlineExpressionJs = require("./utils/compileInlineExpression.js");
var name = 'map';
var dependencies = [
    'typed'
];
var createMapTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed  } = _ref;
    /**
   * Attach a transform function to math.map
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */ function mapTransform(args, math, scope) {
        var x, callback;
        if (args[0]) x = args[0].compile().evaluate(scope);
        if (args[1]) {
            if (_isJs.isSymbolNode(args[1]) || _isJs.isFunctionAssignmentNode(args[1])) // a function pointer, like filter([3, -2, 5], myTestFunction)
            callback = args[1].compile().evaluate(scope);
            else // an expression like filter([3, -2, 5], x > 0)
            callback = _compileInlineExpressionJs.compileInlineExpression(args[1], math, scope);
        }
        return map(x, callback);
    }
    mapTransform.rawArgs = true; // one-based version of map function
    var map = typed('map', {
        'Array, function': function ArrayFunction(x, callback) {
            return _map(x, callback, x);
        },
        'Matrix, function': function MatrixFunction(x, callback) {
            return x.create(_map(x.valueOf(), callback, x));
        }
    });
    return mapTransform;
}, {
    isTransformFunction: true
});
/**
 * Map for a multi dimensional array. One-based indexes
 * @param {Array} array
 * @param {function} callback
 * @param {Array} orig
 * @return {Array}
 * @private
 */ function _map(array, callback, orig) {
    // figure out what number of arguments the callback function expects
    var argsCount = _functionJs.maxArgumentCount(callback);
    function recurse(value, index) {
        if (Array.isArray(value)) return _arrayJs.map(value, function(child, i) {
            // we create a copy of the index array and append the new index value
            return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
        });
        else {
            // invoke the (typed) callback function with the right number of arguments
            if (argsCount === 1) return callback(value);
            else if (argsCount === 2) return callback(value, index);
            else // 3 or -1
            return callback(value, index, orig);
        }
    }
    return recurse(array, []);
}

},{"../../utils/is.js":"iwdlF","../../utils/function.js":"b1EsA","../../utils/array.js":"3R6c8","../../utils/factory.js":"26foW","./utils/compileInlineExpression.js":"inO7O","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dJsO8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMaxTransform", ()=>createMaxTransform
);
var _factoryJs = require("../../utils/factory.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _maxJs = require("../../function/statistics/max.js");
var _lastDimToZeroBaseJs = require("./utils/lastDimToZeroBase.js");
var name = 'max';
var dependencies = [
    'typed',
    'config',
    'numeric',
    'larger'
];
var createMaxTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , numeric , larger  } = _ref;
    var max = _maxJs.createMax({
        typed,
        config,
        numeric,
        larger
    });
    /**
   * Attach a transform function to math.max
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function max
   * from one-based to zero based
   */ return typed('max', {
        '...any': function any(args) {
            args = _lastDimToZeroBaseJs.lastDimToZeroBase(args);
            try {
                return max.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","./utils/errorTransform.js":"gl6m9","../../function/statistics/max.js":"8eqWS","./utils/lastDimToZeroBase.js":"lWXdp","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lWXdp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Change last argument dim from one-based to zero-based.
 */ parcelHelpers.export(exports, "lastDimToZeroBase", ()=>lastDimToZeroBase
);
var _isJs = require("../../../utils/is.js");
function lastDimToZeroBase(args) {
    if (args.length === 2 && _isJs.isCollection(args[0])) {
        args = args.slice();
        var dim = args[1];
        if (_isJs.isNumber(dim)) args[1] = dim - 1;
        else if (_isJs.isBigNumber(dim)) args[1] = dim.minus(1);
    }
    return args;
}

},{"../../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3ppmU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMeanTransform", ()=>createMeanTransform
);
var _factoryJs = require("../../utils/factory.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _meanJs = require("../../function/statistics/mean.js");
var _lastDimToZeroBaseJs = require("./utils/lastDimToZeroBase.js");
var name = 'mean';
var dependencies = [
    'typed',
    'add',
    'divide'
];
var createMeanTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , add , divide  } = _ref;
    var mean = _meanJs.createMean({
        typed,
        add,
        divide
    });
    /**
   * Attach a transform function to math.mean
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function mean
   * from one-based to zero based
   */ return typed('mean', {
        '...any': function any(args) {
            args = _lastDimToZeroBaseJs.lastDimToZeroBase(args);
            try {
                return mean.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","./utils/errorTransform.js":"gl6m9","../../function/statistics/mean.js":"cESdD","./utils/lastDimToZeroBase.js":"lWXdp","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3W1Ai":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMinTransform", ()=>createMinTransform
);
var _factoryJs = require("../../utils/factory.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _minJs = require("../../function/statistics/min.js");
var _lastDimToZeroBaseJs = require("./utils/lastDimToZeroBase.js");
var name = 'min';
var dependencies = [
    'typed',
    'config',
    'numeric',
    'smaller'
];
var createMinTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , numeric , smaller  } = _ref;
    var min = _minJs.createMin({
        typed,
        config,
        numeric,
        smaller
    });
    /**
   * Attach a transform function to math.min
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function min
   * from one-based to zero based
   */ return typed('min', {
        '...any': function any(args) {
            args = _lastDimToZeroBaseJs.lastDimToZeroBase(args);
            try {
                return min.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","./utils/errorTransform.js":"gl6m9","../../function/statistics/min.js":"eSLZj","./utils/lastDimToZeroBase.js":"lWXdp","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bWPpJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRangeTransform", ()=>createRangeTransform
);
var _factoryJs = require("../../utils/factory.js");
var _rangeJs = require("../../function/matrix/range.js");
var name = 'range';
var dependencies = [
    'typed',
    'config',
    '?matrix',
    '?bignumber',
    'smaller',
    'smallerEq',
    'larger',
    'largerEq'
];
var createRangeTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , matrix , bignumber , smaller , smallerEq , larger , largerEq  } = _ref;
    var range = _rangeJs.createRange({
        typed,
        config,
        matrix,
        bignumber,
        smaller,
        smallerEq,
        larger,
        largerEq
    });
    /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */ return typed('range', {
        '...any': function any(args) {
            var lastIndex = args.length - 1;
            var last = args[lastIndex];
            if (typeof last !== 'boolean') // append a parameter includeEnd=true
            args.push(true);
            return range.apply(null, args);
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","../../function/matrix/range.js":"cwFZb","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7vu2A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRowTransform", ()=>createRowTransform
);
var _factoryJs = require("../../utils/factory.js");
var _rowJs = require("../../function/matrix/row.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _isJs = require("../../utils/is.js");
var name = 'row';
var dependencies = [
    'typed',
    'Index',
    'matrix',
    'range'
];
var createRowTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , Index , matrix , range  } = _ref;
    var row = _rowJs.createRow({
        typed,
        Index,
        matrix,
        range
    }); // @see: comment of row itself
    return typed('row', {
        '...any': function any(args) {
            // change last argument from zero-based to one-based
            var lastIndex = args.length - 1;
            var last = args[lastIndex];
            if (_isJs.isNumber(last)) args[lastIndex] = last - 1;
            try {
                return row.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","../../function/matrix/row.js":"2blb8","./utils/errorTransform.js":"gl6m9","../../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cZO24":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSubsetTransform", ()=>createSubsetTransform
);
var _factoryJs = require("../../utils/factory.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _subsetJs = require("../../function/matrix/subset.js");
var name = 'subset';
var dependencies = [
    'typed',
    'matrix'
];
var createSubsetTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix  } = _ref;
    var subset = _subsetJs.createSubset({
        typed,
        matrix
    });
    /**
   * Attach a transform function to math.subset
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */ return typed('subset', {
        '...any': function any(args) {
            try {
                return subset.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","./utils/errorTransform.js":"gl6m9","../../function/matrix/subset.js":"ikxy0","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7Ur7Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConcatTransform", ()=>createConcatTransform
);
var _isJs = require("../../utils/is.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _factoryJs = require("../../utils/factory.js");
var _concatJs = require("../../function/matrix/concat.js");
var name = 'concat';
var dependencies = [
    'typed',
    'matrix',
    'isInteger'
];
var createConcatTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , isInteger  } = _ref;
    var concat = _concatJs.createConcat({
        typed,
        matrix,
        isInteger
    });
    /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function concat
   * from one-based to zero based
   */ return typed('concat', {
        '...any': function any(args) {
            // change last argument from one-based to zero-based
            var lastIndex = args.length - 1;
            var last = args[lastIndex];
            if (_isJs.isNumber(last)) args[lastIndex] = last - 1;
            else if (_isJs.isBigNumber(last)) args[lastIndex] = last.minus(1);
            try {
                return concat.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/is.js":"iwdlF","./utils/errorTransform.js":"gl6m9","../../utils/factory.js":"26foW","../../function/matrix/concat.js":"jDA7k","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e39un":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDiffTransform", ()=>createDiffTransform
);
var _factoryJs = require("../../utils/factory.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _diffJs = require("../../function/matrix/diff.js");
var _lastDimToZeroBaseJs = require("./utils/lastDimToZeroBase.js");
var name = 'diff';
var dependencies = [
    'typed',
    'matrix',
    'subtract',
    'number',
    'bignumber'
];
var createDiffTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , matrix , subtract , number , bignumber  } = _ref;
    var diff = _diffJs.createDiff({
        typed,
        matrix,
        subtract,
        number,
        bignumber
    });
    /**
   * Attach a transform function to math.diff
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */ return typed(name, {
        '...any': function any(args) {
            args = _lastDimToZeroBaseJs.lastDimToZeroBase(args);
            try {
                return diff.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","./utils/errorTransform.js":"gl6m9","../../function/matrix/diff.js":"1noV6","./utils/lastDimToZeroBase.js":"lWXdp","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e5hNu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createStdTransform", ()=>createStdTransform
);
var _factoryJs = require("../../utils/factory.js");
var _stdJs = require("../../function/statistics/std.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _lastDimToZeroBaseJs = require("./utils/lastDimToZeroBase.js");
var name = 'std';
var dependencies = [
    'typed',
    'sqrt',
    'variance'
];
var createStdTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , sqrt , variance  } = _ref;
    var std = _stdJs.createStd({
        typed,
        sqrt,
        variance
    });
    return typed('std', {
        '...any': function any(args) {
            args = _lastDimToZeroBaseJs.lastDimToZeroBase(args);
            try {
                return std.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","../../function/statistics/std.js":"dTYLn","./utils/errorTransform.js":"gl6m9","./utils/lastDimToZeroBase.js":"lWXdp","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cQ24b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSumTransform", ()=>createSumTransform
);
var _factoryJs = require("../../utils/factory.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _sumJs = require("../../function/statistics/sum.js");
var _lastDimToZeroBaseJs = require("./utils/lastDimToZeroBase.js");
/**
 * Attach a transform function to math.sum
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function mean
 * from one-based to zero based
 */ var name = 'sum';
var dependencies = [
    'typed',
    'config',
    'add',
    'numeric'
];
var createSumTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , config , add , numeric  } = _ref;
    var sum = _sumJs.createSum({
        typed,
        config,
        add,
        numeric
    });
    return typed(name, {
        '...any': function any(args) {
            args = _lastDimToZeroBaseJs.lastDimToZeroBase(args);
            try {
                return sum.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","./utils/errorTransform.js":"gl6m9","../../function/statistics/sum.js":"6Yixb","./utils/lastDimToZeroBase.js":"lWXdp","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2nmKA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createVarianceTransform", ()=>createVarianceTransform
);
var _factoryJs = require("../../utils/factory.js");
var _errorTransformJs = require("./utils/errorTransform.js");
var _varianceJs = require("../../function/statistics/variance.js");
var _lastDimToZeroBaseJs = require("./utils/lastDimToZeroBase.js");
var name = 'variance';
var dependencies = [
    'typed',
    'add',
    'subtract',
    'multiply',
    'divide',
    'apply',
    'isNaN'
];
var createVarianceTransform = /* #__PURE__ */ _factoryJs.factory(name, dependencies, (_ref)=>{
    var { typed , add , subtract , multiply , divide , apply , isNaN  } = _ref;
    var variance = _varianceJs.createVariance({
        typed,
        add,
        subtract,
        multiply,
        divide,
        apply,
        isNaN
    });
    return typed(name, {
        '...any': function any(args) {
            args = _lastDimToZeroBaseJs.lastDimToZeroBase(args);
            try {
                return variance.apply(null, args);
            } catch (err) {
                throw _errorTransformJs.errorTransform(err);
            }
        }
    });
}, {
    isTransformFunction: true
});

},{"../../utils/factory.js":"26foW","./utils/errorTransform.js":"gl6m9","../../function/statistics/variance.js":"lt7yb","./utils/lastDimToZeroBase.js":"lWXdp","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2XNXv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Chain", ()=>Chain
);
parcelHelpers.export(exports, "Node", ()=>Node
);
parcelHelpers.export(exports, "ObjectNode", ()=>ObjectNode
);
parcelHelpers.export(exports, "OperatorNode", ()=>OperatorNode
);
parcelHelpers.export(exports, "ParenthesisNode", ()=>ParenthesisNode
);
parcelHelpers.export(exports, "RelationalNode", ()=>RelationalNode
);
parcelHelpers.export(exports, "ArrayNode", ()=>ArrayNode
);
parcelHelpers.export(exports, "BlockNode", ()=>BlockNode
);
parcelHelpers.export(exports, "ConditionalNode", ()=>ConditionalNode
);
parcelHelpers.export(exports, "ConstantNode", ()=>ConstantNode
);
parcelHelpers.export(exports, "RangeNode", ()=>RangeNode
);
parcelHelpers.export(exports, "reviver", ()=>reviver
);
parcelHelpers.export(exports, "chain", ()=>chain
);
parcelHelpers.export(exports, "FunctionAssignmentNode", ()=>FunctionAssignmentNode
);
parcelHelpers.export(exports, "AccessorNode", ()=>AccessorNode
);
parcelHelpers.export(exports, "AssignmentNode", ()=>AssignmentNode
);
parcelHelpers.export(exports, "IndexNode", ()=>IndexNode
);
parcelHelpers.export(exports, "SymbolNode", ()=>SymbolNode
);
parcelHelpers.export(exports, "FunctionNode", ()=>FunctionNode
);
parcelHelpers.export(exports, "parse", ()=>parse
);
parcelHelpers.export(exports, "compile", ()=>compile
);
parcelHelpers.export(exports, "evaluate", ()=>evaluate
);
parcelHelpers.export(exports, "Help", ()=>Help
);
parcelHelpers.export(exports, "Parser", ()=>Parser
);
parcelHelpers.export(exports, "parser", ()=>parser
);
parcelHelpers.export(exports, "simplify", ()=>simplify
);
parcelHelpers.export(exports, "derivative", ()=>derivative
);
parcelHelpers.export(exports, "help", ()=>help
);
parcelHelpers.export(exports, "rationalize", ()=>rationalize
);
parcelHelpers.export(exports, "docs", ()=>_embeddedDocsJs.embeddedDocs
);
var _extends = require("@babel/runtime/helpers/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _configReadonlyJs = require("./configReadonly.js");
var _factoriesAnyJs = require("../factoriesAny.js");
var _pureFunctionsAnyGeneratedJs = require("./pureFunctionsAny.generated.js");
var _embeddedDocsJs = require("../expression/embeddedDocs/embeddedDocs.js");
var math = {
}; // NOT pure!
var mathWithTransform = {
}; // NOT pure!
var classes = {
}; // NOT pure!
var Chain = _factoriesAnyJs.createChainClass({
    math
});
var Node = _factoriesAnyJs.createNode({
    mathWithTransform
});
var ObjectNode = _factoriesAnyJs.createObjectNode({
    Node
});
var OperatorNode = _factoriesAnyJs.createOperatorNode({
    Node
});
var ParenthesisNode = _factoriesAnyJs.createParenthesisNode({
    Node
});
var RelationalNode = _factoriesAnyJs.createRelationalNode({
    Node
});
var ArrayNode = _factoriesAnyJs.createArrayNode({
    Node
});
var BlockNode = _factoriesAnyJs.createBlockNode({
    Node,
    ResultSet: _pureFunctionsAnyGeneratedJs.ResultSet
});
var ConditionalNode = _factoriesAnyJs.createConditionalNode({
    Node
});
var ConstantNode = _factoriesAnyJs.createConstantNode({
    Node
});
var RangeNode = _factoriesAnyJs.createRangeNode({
    Node
});
var reviver = _factoriesAnyJs.createReviver({
    classes
});
var chain = _factoriesAnyJs.createChain({
    Chain,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
var FunctionAssignmentNode = _factoriesAnyJs.createFunctionAssignmentNode({
    Node,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
var AccessorNode = _factoriesAnyJs.createAccessorNode({
    Node,
    subset: _pureFunctionsAnyGeneratedJs.subset
});
var AssignmentNode = _factoriesAnyJs.createAssignmentNode({
    matrix: _pureFunctionsAnyGeneratedJs.matrix,
    Node,
    subset: _pureFunctionsAnyGeneratedJs.subset
});
var IndexNode = _factoriesAnyJs.createIndexNode({
    Node,
    Range: _pureFunctionsAnyGeneratedJs.Range,
    size: _pureFunctionsAnyGeneratedJs.size
});
var SymbolNode = _factoriesAnyJs.createSymbolNode({
    Unit: _pureFunctionsAnyGeneratedJs.Unit,
    Node,
    math
});
var FunctionNode = _factoriesAnyJs.createFunctionNode({
    Node,
    SymbolNode,
    math
});
var parse = _factoriesAnyJs.createParse({
    AccessorNode,
    ArrayNode,
    AssignmentNode,
    BlockNode,
    ConditionalNode,
    ConstantNode,
    FunctionAssignmentNode,
    FunctionNode,
    IndexNode,
    ObjectNode,
    OperatorNode,
    ParenthesisNode,
    RangeNode,
    RelationalNode,
    SymbolNode,
    config: _configReadonlyJs.config,
    numeric: _pureFunctionsAnyGeneratedJs.numeric,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
var compile = _factoriesAnyJs.createCompile({
    parse,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
var evaluate = _factoriesAnyJs.createEvaluate({
    parse,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
var Help = _factoriesAnyJs.createHelpClass({
    parse
});
var Parser = _factoriesAnyJs.createParserClass({
    evaluate
});
var parser = _factoriesAnyJs.createParser({
    Parser,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
var simplify = _factoriesAnyJs.createSimplify({
    bignumber: _pureFunctionsAnyGeneratedJs.bignumber,
    fraction: _pureFunctionsAnyGeneratedJs.fraction,
    ConstantNode,
    FunctionNode,
    OperatorNode,
    ParenthesisNode,
    SymbolNode,
    add: _pureFunctionsAnyGeneratedJs.add,
    config: _configReadonlyJs.config,
    divide: _pureFunctionsAnyGeneratedJs.divide,
    equal: _pureFunctionsAnyGeneratedJs.equal,
    isZero: _pureFunctionsAnyGeneratedJs.isZero,
    mathWithTransform,
    multiply: _pureFunctionsAnyGeneratedJs.multiply,
    parse,
    pow: _pureFunctionsAnyGeneratedJs.pow,
    subtract: _pureFunctionsAnyGeneratedJs.subtract,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
var derivative = _factoriesAnyJs.createDerivative({
    ConstantNode,
    FunctionNode,
    OperatorNode,
    ParenthesisNode,
    SymbolNode,
    config: _configReadonlyJs.config,
    equal: _pureFunctionsAnyGeneratedJs.equal,
    isZero: _pureFunctionsAnyGeneratedJs.isZero,
    numeric: _pureFunctionsAnyGeneratedJs.numeric,
    parse,
    simplify,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
var help = _factoriesAnyJs.createHelp({
    Help,
    mathWithTransform,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
var rationalize = _factoriesAnyJs.createRationalize({
    bignumber: _pureFunctionsAnyGeneratedJs.bignumber,
    fraction: _pureFunctionsAnyGeneratedJs.fraction,
    ConstantNode,
    FunctionNode,
    OperatorNode,
    ParenthesisNode,
    SymbolNode,
    add: _pureFunctionsAnyGeneratedJs.add,
    config: _configReadonlyJs.config,
    divide: _pureFunctionsAnyGeneratedJs.divide,
    equal: _pureFunctionsAnyGeneratedJs.equal,
    isZero: _pureFunctionsAnyGeneratedJs.isZero,
    mathWithTransform,
    multiply: _pureFunctionsAnyGeneratedJs.multiply,
    parse,
    pow: _pureFunctionsAnyGeneratedJs.pow,
    simplify,
    subtract: _pureFunctionsAnyGeneratedJs.subtract,
    typed: _pureFunctionsAnyGeneratedJs.typed
});
_extendsDefault.default(math, {
    e: _pureFunctionsAnyGeneratedJs.e,
    false: _pureFunctionsAnyGeneratedJs._false,
    fineStructure: _pureFunctionsAnyGeneratedJs.fineStructure,
    i: _pureFunctionsAnyGeneratedJs.i,
    Infinity: _pureFunctionsAnyGeneratedJs._Infinity,
    LN10: _pureFunctionsAnyGeneratedJs.LN10,
    LOG10E: _pureFunctionsAnyGeneratedJs.LOG10E,
    NaN: _pureFunctionsAnyGeneratedJs._NaN,
    null: _pureFunctionsAnyGeneratedJs._null,
    phi: _pureFunctionsAnyGeneratedJs.phi,
    SQRT1_2: _pureFunctionsAnyGeneratedJs.SQRT1_2,
    sackurTetrode: _pureFunctionsAnyGeneratedJs.sackurTetrode,
    tau: _pureFunctionsAnyGeneratedJs.tau,
    true: _pureFunctionsAnyGeneratedJs._true,
    'E': _pureFunctionsAnyGeneratedJs.e,
    version: _pureFunctionsAnyGeneratedJs.version,
    efimovFactor: _pureFunctionsAnyGeneratedJs.efimovFactor,
    LN2: _pureFunctionsAnyGeneratedJs.LN2,
    pi: _pureFunctionsAnyGeneratedJs.pi,
    replacer: _pureFunctionsAnyGeneratedJs.replacer,
    reviver,
    SQRT2: _pureFunctionsAnyGeneratedJs.SQRT2,
    typed: _pureFunctionsAnyGeneratedJs.typed,
    unaryPlus: _pureFunctionsAnyGeneratedJs.unaryPlus,
    'PI': _pureFunctionsAnyGeneratedJs.pi,
    weakMixingAngle: _pureFunctionsAnyGeneratedJs.weakMixingAngle,
    abs: _pureFunctionsAnyGeneratedJs.abs,
    acos: _pureFunctionsAnyGeneratedJs.acos,
    acot: _pureFunctionsAnyGeneratedJs.acot,
    acsc: _pureFunctionsAnyGeneratedJs.acsc,
    addScalar: _pureFunctionsAnyGeneratedJs.addScalar,
    arg: _pureFunctionsAnyGeneratedJs.arg,
    asech: _pureFunctionsAnyGeneratedJs.asech,
    asinh: _pureFunctionsAnyGeneratedJs.asinh,
    atan: _pureFunctionsAnyGeneratedJs.atan,
    atanh: _pureFunctionsAnyGeneratedJs.atanh,
    bignumber: _pureFunctionsAnyGeneratedJs.bignumber,
    bitNot: _pureFunctionsAnyGeneratedJs.bitNot,
    boolean: _pureFunctionsAnyGeneratedJs.boolean,
    chain,
    clone: _pureFunctionsAnyGeneratedJs.clone,
    combinations: _pureFunctionsAnyGeneratedJs.combinations,
    complex: _pureFunctionsAnyGeneratedJs.complex,
    conj: _pureFunctionsAnyGeneratedJs.conj,
    cosh: _pureFunctionsAnyGeneratedJs.cosh,
    coth: _pureFunctionsAnyGeneratedJs.coth,
    csc: _pureFunctionsAnyGeneratedJs.csc,
    cube: _pureFunctionsAnyGeneratedJs.cube,
    equalScalar: _pureFunctionsAnyGeneratedJs.equalScalar,
    erf: _pureFunctionsAnyGeneratedJs.erf,
    exp: _pureFunctionsAnyGeneratedJs.exp,
    expm1: _pureFunctionsAnyGeneratedJs.expm1,
    filter: _pureFunctionsAnyGeneratedJs.filter,
    forEach: _pureFunctionsAnyGeneratedJs.forEach,
    format: _pureFunctionsAnyGeneratedJs.format,
    getMatrixDataType: _pureFunctionsAnyGeneratedJs.getMatrixDataType,
    hex: _pureFunctionsAnyGeneratedJs.hex,
    im: _pureFunctionsAnyGeneratedJs.im,
    isInteger: _pureFunctionsAnyGeneratedJs.isInteger,
    isNegative: _pureFunctionsAnyGeneratedJs.isNegative,
    isPositive: _pureFunctionsAnyGeneratedJs.isPositive,
    isZero: _pureFunctionsAnyGeneratedJs.isZero,
    LOG2E: _pureFunctionsAnyGeneratedJs.LOG2E,
    log10: _pureFunctionsAnyGeneratedJs.log10,
    log2: _pureFunctionsAnyGeneratedJs.log2,
    map: _pureFunctionsAnyGeneratedJs.map,
    multiplyScalar: _pureFunctionsAnyGeneratedJs.multiplyScalar,
    not: _pureFunctionsAnyGeneratedJs.not,
    number: _pureFunctionsAnyGeneratedJs.number,
    oct: _pureFunctionsAnyGeneratedJs.oct,
    pickRandom: _pureFunctionsAnyGeneratedJs.pickRandom,
    print: _pureFunctionsAnyGeneratedJs.print,
    random: _pureFunctionsAnyGeneratedJs.random,
    re: _pureFunctionsAnyGeneratedJs.re,
    sec: _pureFunctionsAnyGeneratedJs.sec,
    sign: _pureFunctionsAnyGeneratedJs.sign,
    sin: _pureFunctionsAnyGeneratedJs.sin,
    splitUnit: _pureFunctionsAnyGeneratedJs.splitUnit,
    square: _pureFunctionsAnyGeneratedJs.square,
    string: _pureFunctionsAnyGeneratedJs.string,
    tan: _pureFunctionsAnyGeneratedJs.tan,
    typeOf: _pureFunctionsAnyGeneratedJs.typeOf,
    acosh: _pureFunctionsAnyGeneratedJs.acosh,
    acsch: _pureFunctionsAnyGeneratedJs.acsch,
    apply: _pureFunctionsAnyGeneratedJs.apply,
    asec: _pureFunctionsAnyGeneratedJs.asec,
    bin: _pureFunctionsAnyGeneratedJs.bin,
    combinationsWithRep: _pureFunctionsAnyGeneratedJs.combinationsWithRep,
    cos: _pureFunctionsAnyGeneratedJs.cos,
    csch: _pureFunctionsAnyGeneratedJs.csch,
    isNaN: _pureFunctionsAnyGeneratedJs.isNaN,
    isPrime: _pureFunctionsAnyGeneratedJs.isPrime,
    randomInt: _pureFunctionsAnyGeneratedJs.randomInt,
    sech: _pureFunctionsAnyGeneratedJs.sech,
    sinh: _pureFunctionsAnyGeneratedJs.sinh,
    sparse: _pureFunctionsAnyGeneratedJs.sparse,
    sqrt: _pureFunctionsAnyGeneratedJs.sqrt,
    tanh: _pureFunctionsAnyGeneratedJs.tanh,
    unaryMinus: _pureFunctionsAnyGeneratedJs.unaryMinus,
    acoth: _pureFunctionsAnyGeneratedJs.acoth,
    cot: _pureFunctionsAnyGeneratedJs.cot,
    fraction: _pureFunctionsAnyGeneratedJs.fraction,
    isNumeric: _pureFunctionsAnyGeneratedJs.isNumeric,
    matrix: _pureFunctionsAnyGeneratedJs.matrix,
    matrixFromFunction: _pureFunctionsAnyGeneratedJs.matrixFromFunction,
    mod: _pureFunctionsAnyGeneratedJs.mod,
    nthRoot: _pureFunctionsAnyGeneratedJs.nthRoot,
    numeric: _pureFunctionsAnyGeneratedJs.numeric,
    or: _pureFunctionsAnyGeneratedJs.or,
    prod: _pureFunctionsAnyGeneratedJs.prod,
    reshape: _pureFunctionsAnyGeneratedJs.reshape,
    size: _pureFunctionsAnyGeneratedJs.size,
    smaller: _pureFunctionsAnyGeneratedJs.smaller,
    squeeze: _pureFunctionsAnyGeneratedJs.squeeze,
    subset: _pureFunctionsAnyGeneratedJs.subset,
    subtract: _pureFunctionsAnyGeneratedJs.subtract,
    to: _pureFunctionsAnyGeneratedJs.to,
    transpose: _pureFunctionsAnyGeneratedJs.transpose,
    xgcd: _pureFunctionsAnyGeneratedJs.xgcd,
    zeros: _pureFunctionsAnyGeneratedJs.zeros,
    and: _pureFunctionsAnyGeneratedJs.and,
    bitAnd: _pureFunctionsAnyGeneratedJs.bitAnd,
    bitXor: _pureFunctionsAnyGeneratedJs.bitXor,
    cbrt: _pureFunctionsAnyGeneratedJs.cbrt,
    compare: _pureFunctionsAnyGeneratedJs.compare,
    compareText: _pureFunctionsAnyGeneratedJs.compareText,
    concat: _pureFunctionsAnyGeneratedJs.concat,
    count: _pureFunctionsAnyGeneratedJs.count,
    ctranspose: _pureFunctionsAnyGeneratedJs.ctranspose,
    diag: _pureFunctionsAnyGeneratedJs.diag,
    divideScalar: _pureFunctionsAnyGeneratedJs.divideScalar,
    dotDivide: _pureFunctionsAnyGeneratedJs.dotDivide,
    equal: _pureFunctionsAnyGeneratedJs.equal,
    flatten: _pureFunctionsAnyGeneratedJs.flatten,
    gcd: _pureFunctionsAnyGeneratedJs.gcd,
    hasNumericValue: _pureFunctionsAnyGeneratedJs.hasNumericValue,
    hypot: _pureFunctionsAnyGeneratedJs.hypot,
    kron: _pureFunctionsAnyGeneratedJs.kron,
    largerEq: _pureFunctionsAnyGeneratedJs.largerEq,
    leftShift: _pureFunctionsAnyGeneratedJs.leftShift,
    lsolve: _pureFunctionsAnyGeneratedJs.lsolve,
    matrixFromColumns: _pureFunctionsAnyGeneratedJs.matrixFromColumns,
    min: _pureFunctionsAnyGeneratedJs.min,
    mode: _pureFunctionsAnyGeneratedJs.mode,
    nthRoots: _pureFunctionsAnyGeneratedJs.nthRoots,
    ones: _pureFunctionsAnyGeneratedJs.ones,
    partitionSelect: _pureFunctionsAnyGeneratedJs.partitionSelect,
    resize: _pureFunctionsAnyGeneratedJs.resize,
    rightLogShift: _pureFunctionsAnyGeneratedJs.rightLogShift,
    round: _pureFunctionsAnyGeneratedJs.round,
    smallerEq: _pureFunctionsAnyGeneratedJs.smallerEq,
    unequal: _pureFunctionsAnyGeneratedJs.unequal,
    usolve: _pureFunctionsAnyGeneratedJs.usolve,
    xor: _pureFunctionsAnyGeneratedJs.xor,
    add: _pureFunctionsAnyGeneratedJs.add,
    atan2: _pureFunctionsAnyGeneratedJs.atan2,
    bitOr: _pureFunctionsAnyGeneratedJs.bitOr,
    catalan: _pureFunctionsAnyGeneratedJs.catalan,
    compareNatural: _pureFunctionsAnyGeneratedJs.compareNatural,
    deepEqual: _pureFunctionsAnyGeneratedJs.deepEqual,
    diff: _pureFunctionsAnyGeneratedJs.diff,
    dot: _pureFunctionsAnyGeneratedJs.dot,
    equalText: _pureFunctionsAnyGeneratedJs.equalText,
    floor: _pureFunctionsAnyGeneratedJs.floor,
    identity: _pureFunctionsAnyGeneratedJs.identity,
    larger: _pureFunctionsAnyGeneratedJs.larger,
    log: _pureFunctionsAnyGeneratedJs.log,
    lsolveAll: _pureFunctionsAnyGeneratedJs.lsolveAll,
    matrixFromRows: _pureFunctionsAnyGeneratedJs.matrixFromRows,
    multiply: _pureFunctionsAnyGeneratedJs.multiply,
    pow: _pureFunctionsAnyGeneratedJs.pow,
    qr: _pureFunctionsAnyGeneratedJs.qr,
    range: _pureFunctionsAnyGeneratedJs.range,
    rightArithShift: _pureFunctionsAnyGeneratedJs.rightArithShift,
    row: _pureFunctionsAnyGeneratedJs.row,
    setCartesian: _pureFunctionsAnyGeneratedJs.setCartesian,
    setDistinct: _pureFunctionsAnyGeneratedJs.setDistinct,
    setIsSubset: _pureFunctionsAnyGeneratedJs.setIsSubset,
    setPowerset: _pureFunctionsAnyGeneratedJs.setPowerset,
    slu: _pureFunctionsAnyGeneratedJs.slu,
    sum: _pureFunctionsAnyGeneratedJs.sum,
    trace: _pureFunctionsAnyGeneratedJs.trace,
    usolveAll: _pureFunctionsAnyGeneratedJs.usolveAll,
    asin: _pureFunctionsAnyGeneratedJs.asin,
    ceil: _pureFunctionsAnyGeneratedJs.ceil,
    column: _pureFunctionsAnyGeneratedJs.column,
    composition: _pureFunctionsAnyGeneratedJs.composition,
    cross: _pureFunctionsAnyGeneratedJs.cross,
    distance: _pureFunctionsAnyGeneratedJs.distance,
    dotMultiply: _pureFunctionsAnyGeneratedJs.dotMultiply,
    fix: _pureFunctionsAnyGeneratedJs.fix,
    gamma: _pureFunctionsAnyGeneratedJs.gamma,
    index: _pureFunctionsAnyGeneratedJs.index,
    lcm: _pureFunctionsAnyGeneratedJs.lcm,
    max: _pureFunctionsAnyGeneratedJs.max,
    quantileSeq: _pureFunctionsAnyGeneratedJs.quantileSeq,
    setDifference: _pureFunctionsAnyGeneratedJs.setDifference,
    setMultiplicity: _pureFunctionsAnyGeneratedJs.setMultiplicity,
    setSymDifference: _pureFunctionsAnyGeneratedJs.setSymDifference,
    sort: _pureFunctionsAnyGeneratedJs.sort,
    vacuumImpedance: _pureFunctionsAnyGeneratedJs.vacuumImpedance,
    wienDisplacement: _pureFunctionsAnyGeneratedJs.wienDisplacement,
    atomicMass: _pureFunctionsAnyGeneratedJs.atomicMass,
    bohrMagneton: _pureFunctionsAnyGeneratedJs.bohrMagneton,
    boltzmann: _pureFunctionsAnyGeneratedJs.boltzmann,
    conductanceQuantum: _pureFunctionsAnyGeneratedJs.conductanceQuantum,
    createUnit: _pureFunctionsAnyGeneratedJs.createUnit,
    deuteronMass: _pureFunctionsAnyGeneratedJs.deuteronMass,
    dotPow: _pureFunctionsAnyGeneratedJs.dotPow,
    electricConstant: _pureFunctionsAnyGeneratedJs.electricConstant,
    elementaryCharge: _pureFunctionsAnyGeneratedJs.elementaryCharge,
    factorial: _pureFunctionsAnyGeneratedJs.factorial,
    fermiCoupling: _pureFunctionsAnyGeneratedJs.fermiCoupling,
    gasConstant: _pureFunctionsAnyGeneratedJs.gasConstant,
    gravity: _pureFunctionsAnyGeneratedJs.gravity,
    intersect: _pureFunctionsAnyGeneratedJs.intersect,
    inverseConductanceQuantum: _pureFunctionsAnyGeneratedJs.inverseConductanceQuantum,
    klitzing: _pureFunctionsAnyGeneratedJs.klitzing,
    loschmidt: _pureFunctionsAnyGeneratedJs.loschmidt,
    magneticConstant: _pureFunctionsAnyGeneratedJs.magneticConstant,
    molarMass: _pureFunctionsAnyGeneratedJs.molarMass,
    molarPlanckConstant: _pureFunctionsAnyGeneratedJs.molarPlanckConstant,
    neutronMass: _pureFunctionsAnyGeneratedJs.neutronMass,
    nuclearMagneton: _pureFunctionsAnyGeneratedJs.nuclearMagneton,
    permutations: _pureFunctionsAnyGeneratedJs.permutations,
    planckConstant: _pureFunctionsAnyGeneratedJs.planckConstant,
    planckMass: _pureFunctionsAnyGeneratedJs.planckMass,
    planckTime: _pureFunctionsAnyGeneratedJs.planckTime,
    quantumOfCirculation: _pureFunctionsAnyGeneratedJs.quantumOfCirculation,
    reducedPlanckConstant: _pureFunctionsAnyGeneratedJs.reducedPlanckConstant,
    rydberg: _pureFunctionsAnyGeneratedJs.rydberg,
    setIntersect: _pureFunctionsAnyGeneratedJs.setIntersect,
    setUnion: _pureFunctionsAnyGeneratedJs.setUnion,
    stefanBoltzmann: _pureFunctionsAnyGeneratedJs.stefanBoltzmann,
    unit: _pureFunctionsAnyGeneratedJs.unit,
    avogadro: _pureFunctionsAnyGeneratedJs.avogadro,
    bohrRadius: _pureFunctionsAnyGeneratedJs.bohrRadius,
    coulomb: _pureFunctionsAnyGeneratedJs.coulomb,
    electronMass: _pureFunctionsAnyGeneratedJs.electronMass,
    faraday: _pureFunctionsAnyGeneratedJs.faraday,
    hartreeEnergy: _pureFunctionsAnyGeneratedJs.hartreeEnergy,
    log1p: _pureFunctionsAnyGeneratedJs.log1p,
    magneticFluxQuantum: _pureFunctionsAnyGeneratedJs.magneticFluxQuantum,
    molarMassC12: _pureFunctionsAnyGeneratedJs.molarMassC12,
    parse,
    planckCharge: _pureFunctionsAnyGeneratedJs.planckCharge,
    planckTemperature: _pureFunctionsAnyGeneratedJs.planckTemperature,
    secondRadiation: _pureFunctionsAnyGeneratedJs.secondRadiation,
    speedOfLight: _pureFunctionsAnyGeneratedJs.speedOfLight,
    stirlingS2: _pureFunctionsAnyGeneratedJs.stirlingS2,
    bellNumbers: _pureFunctionsAnyGeneratedJs.bellNumbers,
    compile,
    evaluate,
    firstRadiation: _pureFunctionsAnyGeneratedJs.firstRadiation,
    lup: _pureFunctionsAnyGeneratedJs.lup,
    molarVolume: _pureFunctionsAnyGeneratedJs.molarVolume,
    protonMass: _pureFunctionsAnyGeneratedJs.protonMass,
    setSize: _pureFunctionsAnyGeneratedJs.setSize,
    thomsonCrossSection: _pureFunctionsAnyGeneratedJs.thomsonCrossSection,
    classicalElectronRadius: _pureFunctionsAnyGeneratedJs.classicalElectronRadius,
    det: _pureFunctionsAnyGeneratedJs.det,
    gravitationConstant: _pureFunctionsAnyGeneratedJs.gravitationConstant,
    inv: _pureFunctionsAnyGeneratedJs.inv,
    lusolve: _pureFunctionsAnyGeneratedJs.lusolve,
    parser,
    sqrtm: _pureFunctionsAnyGeneratedJs.sqrtm,
    divide: _pureFunctionsAnyGeneratedJs.divide,
    expm: _pureFunctionsAnyGeneratedJs.expm,
    kldivergence: _pureFunctionsAnyGeneratedJs.kldivergence,
    mean: _pureFunctionsAnyGeneratedJs.mean,
    median: _pureFunctionsAnyGeneratedJs.median,
    planckLength: _pureFunctionsAnyGeneratedJs.planckLength,
    simplify,
    variance: _pureFunctionsAnyGeneratedJs.variance,
    derivative,
    help,
    rationalize,
    std: _pureFunctionsAnyGeneratedJs.std,
    eigs: _pureFunctionsAnyGeneratedJs.eigs,
    multinomial: _pureFunctionsAnyGeneratedJs.multinomial,
    mad: _pureFunctionsAnyGeneratedJs.mad,
    norm: _pureFunctionsAnyGeneratedJs.norm,
    rotationMatrix: _pureFunctionsAnyGeneratedJs.rotationMatrix,
    rotate: _pureFunctionsAnyGeneratedJs.rotate,
    config: _configReadonlyJs.config
});
_extendsDefault.default(mathWithTransform, math, {
    filter: _factoriesAnyJs.createFilterTransform({
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    forEach: _factoriesAnyJs.createForEachTransform({
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    map: _factoriesAnyJs.createMapTransform({
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    apply: _factoriesAnyJs.createApplyTransform({
        isInteger: _pureFunctionsAnyGeneratedJs.isInteger,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    diff: _factoriesAnyJs.createDiffTransform({
        bignumber: _pureFunctionsAnyGeneratedJs.bignumber,
        matrix: _pureFunctionsAnyGeneratedJs.matrix,
        number: _pureFunctionsAnyGeneratedJs.number,
        subtract: _pureFunctionsAnyGeneratedJs.subtract,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    index: _factoriesAnyJs.createIndexTransform({
        Index: _pureFunctionsAnyGeneratedJs.Index
    }),
    subset: _factoriesAnyJs.createSubsetTransform({
        matrix: _pureFunctionsAnyGeneratedJs.matrix,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    concat: _factoriesAnyJs.createConcatTransform({
        isInteger: _pureFunctionsAnyGeneratedJs.isInteger,
        matrix: _pureFunctionsAnyGeneratedJs.matrix,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    max: _factoriesAnyJs.createMaxTransform({
        config: _configReadonlyJs.config,
        larger: _pureFunctionsAnyGeneratedJs.larger,
        numeric: _pureFunctionsAnyGeneratedJs.numeric,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    min: _factoriesAnyJs.createMinTransform({
        config: _configReadonlyJs.config,
        numeric: _pureFunctionsAnyGeneratedJs.numeric,
        smaller: _pureFunctionsAnyGeneratedJs.smaller,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    range: _factoriesAnyJs.createRangeTransform({
        bignumber: _pureFunctionsAnyGeneratedJs.bignumber,
        matrix: _pureFunctionsAnyGeneratedJs.matrix,
        config: _configReadonlyJs.config,
        larger: _pureFunctionsAnyGeneratedJs.larger,
        largerEq: _pureFunctionsAnyGeneratedJs.largerEq,
        smaller: _pureFunctionsAnyGeneratedJs.smaller,
        smallerEq: _pureFunctionsAnyGeneratedJs.smallerEq,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    row: _factoriesAnyJs.createRowTransform({
        Index: _pureFunctionsAnyGeneratedJs.Index,
        matrix: _pureFunctionsAnyGeneratedJs.matrix,
        range: _pureFunctionsAnyGeneratedJs.range,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    sum: _factoriesAnyJs.createSumTransform({
        add: _pureFunctionsAnyGeneratedJs.add,
        config: _configReadonlyJs.config,
        numeric: _pureFunctionsAnyGeneratedJs.numeric,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    column: _factoriesAnyJs.createColumnTransform({
        Index: _pureFunctionsAnyGeneratedJs.Index,
        matrix: _pureFunctionsAnyGeneratedJs.matrix,
        range: _pureFunctionsAnyGeneratedJs.range,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    mean: _factoriesAnyJs.createMeanTransform({
        add: _pureFunctionsAnyGeneratedJs.add,
        divide: _pureFunctionsAnyGeneratedJs.divide,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    variance: _factoriesAnyJs.createVarianceTransform({
        add: _pureFunctionsAnyGeneratedJs.add,
        apply: _pureFunctionsAnyGeneratedJs.apply,
        divide: _pureFunctionsAnyGeneratedJs.divide,
        isNaN: _pureFunctionsAnyGeneratedJs.isNaN,
        multiply: _pureFunctionsAnyGeneratedJs.multiply,
        subtract: _pureFunctionsAnyGeneratedJs.subtract,
        typed: _pureFunctionsAnyGeneratedJs.typed
    }),
    std: _factoriesAnyJs.createStdTransform({
        sqrt: _pureFunctionsAnyGeneratedJs.sqrt,
        typed: _pureFunctionsAnyGeneratedJs.typed,
        variance: _pureFunctionsAnyGeneratedJs.variance
    })
});
_extendsDefault.default(classes, {
    BigNumber: _pureFunctionsAnyGeneratedJs.BigNumber,
    Chain,
    Complex: _pureFunctionsAnyGeneratedJs.Complex,
    Fraction: _pureFunctionsAnyGeneratedJs.Fraction,
    Matrix: _pureFunctionsAnyGeneratedJs.Matrix,
    Node,
    ObjectNode,
    OperatorNode,
    ParenthesisNode,
    Range: _pureFunctionsAnyGeneratedJs.Range,
    RelationalNode,
    ResultSet: _pureFunctionsAnyGeneratedJs.ResultSet,
    ArrayNode,
    BlockNode,
    ConditionalNode,
    ConstantNode,
    DenseMatrix: _pureFunctionsAnyGeneratedJs.DenseMatrix,
    RangeNode,
    FunctionAssignmentNode,
    SparseMatrix: _pureFunctionsAnyGeneratedJs.SparseMatrix,
    AccessorNode,
    AssignmentNode,
    ImmutableDenseMatrix: _pureFunctionsAnyGeneratedJs.ImmutableDenseMatrix,
    Index: _pureFunctionsAnyGeneratedJs.Index,
    IndexNode,
    FibonacciHeap: _pureFunctionsAnyGeneratedJs.FibonacciHeap,
    Unit: _pureFunctionsAnyGeneratedJs.Unit,
    Spa: _pureFunctionsAnyGeneratedJs.Spa,
    SymbolNode,
    FunctionNode,
    Help,
    Parser
});
Chain.createProxy(math);

},{"@babel/runtime/helpers/extends":"gyhTZ","./configReadonly.js":"lfECl","../factoriesAny.js":"epPmk","./pureFunctionsAny.generated.js":"f3Dk1","../expression/embeddedDocs/embeddedDocs.js":"7hv6I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bBAmF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// util functions
parcelHelpers.export(exports, "isAccessorNode", ()=>_isJs.isAccessorNode
);
parcelHelpers.export(exports, "isArray", ()=>_isJs.isArray
);
parcelHelpers.export(exports, "isArrayNode", ()=>_isJs.isArrayNode
);
parcelHelpers.export(exports, "isAssignmentNode", ()=>_isJs.isAssignmentNode
);
parcelHelpers.export(exports, "isBigNumber", ()=>_isJs.isBigNumber
);
parcelHelpers.export(exports, "isBlockNode", ()=>_isJs.isBlockNode
);
parcelHelpers.export(exports, "isBoolean", ()=>_isJs.isBoolean
);
parcelHelpers.export(exports, "isChain", ()=>_isJs.isChain
);
parcelHelpers.export(exports, "isCollection", ()=>_isJs.isCollection
);
parcelHelpers.export(exports, "isComplex", ()=>_isJs.isComplex
);
parcelHelpers.export(exports, "isConditionalNode", ()=>_isJs.isConditionalNode
);
parcelHelpers.export(exports, "isConstantNode", ()=>_isJs.isConstantNode
);
parcelHelpers.export(exports, "isDate", ()=>_isJs.isDate
);
parcelHelpers.export(exports, "isDenseMatrix", ()=>_isJs.isDenseMatrix
);
parcelHelpers.export(exports, "isFraction", ()=>_isJs.isFraction
);
parcelHelpers.export(exports, "isFunction", ()=>_isJs.isFunction
);
parcelHelpers.export(exports, "isFunctionAssignmentNode", ()=>_isJs.isFunctionAssignmentNode
);
parcelHelpers.export(exports, "isFunctionNode", ()=>_isJs.isFunctionNode
);
parcelHelpers.export(exports, "isHelp", ()=>_isJs.isHelp
);
parcelHelpers.export(exports, "isIndex", ()=>_isJs.isIndex
);
parcelHelpers.export(exports, "isIndexNode", ()=>_isJs.isIndexNode
);
parcelHelpers.export(exports, "isMatrix", ()=>_isJs.isMatrix
);
parcelHelpers.export(exports, "isNode", ()=>_isJs.isNode
);
parcelHelpers.export(exports, "isNull", ()=>_isJs.isNull
);
parcelHelpers.export(exports, "isNumber", ()=>_isJs.isNumber
);
parcelHelpers.export(exports, "isString", ()=>_isJs.isString
);
parcelHelpers.export(exports, "isUndefined", ()=>_isJs.isUndefined
);
parcelHelpers.export(exports, "isObject", ()=>_isJs.isObject
);
parcelHelpers.export(exports, "isObjectNode", ()=>_isJs.isObjectNode
);
parcelHelpers.export(exports, "isOperatorNode", ()=>_isJs.isOperatorNode
);
parcelHelpers.export(exports, "isParenthesisNode", ()=>_isJs.isParenthesisNode
);
parcelHelpers.export(exports, "isRange", ()=>_isJs.isRange
);
parcelHelpers.export(exports, "isRangeNode", ()=>_isJs.isRangeNode
);
parcelHelpers.export(exports, "isRegExp", ()=>_isJs.isRegExp
);
parcelHelpers.export(exports, "isResultSet", ()=>_isJs.isResultSet
);
parcelHelpers.export(exports, "isSparseMatrix", ()=>_isJs.isSparseMatrix
);
parcelHelpers.export(exports, "isSymbolNode", ()=>_isJs.isSymbolNode
);
parcelHelpers.export(exports, "isUnit", ()=>_isJs.isUnit
);
var _isJs = require("../utils/is.js");

},{"../utils/is.js":"iwdlF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2BTct":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ parcelHelpers.export(exports, "absDependencies", ()=>_dependenciesAbsGeneratedJs.absDependencies
);
parcelHelpers.export(exports, "AccessorNodeDependencies", ()=>_dependenciesAccessorNodeGeneratedJs.AccessorNodeDependencies
);
parcelHelpers.export(exports, "acosDependencies", ()=>_dependenciesAcosGeneratedJs.acosDependencies
);
parcelHelpers.export(exports, "acoshDependencies", ()=>_dependenciesAcoshGeneratedJs.acoshDependencies
);
parcelHelpers.export(exports, "acotDependencies", ()=>_dependenciesAcotGeneratedJs.acotDependencies
);
parcelHelpers.export(exports, "acothDependencies", ()=>_dependenciesAcothGeneratedJs.acothDependencies
);
parcelHelpers.export(exports, "acscDependencies", ()=>_dependenciesAcscGeneratedJs.acscDependencies
);
parcelHelpers.export(exports, "acschDependencies", ()=>_dependenciesAcschGeneratedJs.acschDependencies
);
parcelHelpers.export(exports, "addDependencies", ()=>_dependenciesAddGeneratedJs.addDependencies
);
parcelHelpers.export(exports, "addScalarDependencies", ()=>_dependenciesAddScalarGeneratedJs.addScalarDependencies
);
parcelHelpers.export(exports, "andDependencies", ()=>_dependenciesAndGeneratedJs.andDependencies
);
parcelHelpers.export(exports, "applyDependencies", ()=>_dependenciesApplyGeneratedJs.applyDependencies
);
parcelHelpers.export(exports, "applyTransformDependencies", ()=>_dependenciesApplyTransformGeneratedJs.applyTransformDependencies
);
parcelHelpers.export(exports, "argDependencies", ()=>_dependenciesArgGeneratedJs.argDependencies
);
parcelHelpers.export(exports, "ArrayNodeDependencies", ()=>_dependenciesArrayNodeGeneratedJs.ArrayNodeDependencies
);
parcelHelpers.export(exports, "asecDependencies", ()=>_dependenciesAsecGeneratedJs.asecDependencies
);
parcelHelpers.export(exports, "asechDependencies", ()=>_dependenciesAsechGeneratedJs.asechDependencies
);
parcelHelpers.export(exports, "asinDependencies", ()=>_dependenciesAsinGeneratedJs.asinDependencies
);
parcelHelpers.export(exports, "asinhDependencies", ()=>_dependenciesAsinhGeneratedJs.asinhDependencies
);
parcelHelpers.export(exports, "AssignmentNodeDependencies", ()=>_dependenciesAssignmentNodeGeneratedJs.AssignmentNodeDependencies
);
parcelHelpers.export(exports, "atanDependencies", ()=>_dependenciesAtanGeneratedJs.atanDependencies
);
parcelHelpers.export(exports, "atan2Dependencies", ()=>_dependenciesAtan2GeneratedJs.atan2Dependencies
);
parcelHelpers.export(exports, "atanhDependencies", ()=>_dependenciesAtanhGeneratedJs.atanhDependencies
);
parcelHelpers.export(exports, "atomicMassDependencies", ()=>_dependenciesAtomicMassGeneratedJs.atomicMassDependencies
);
parcelHelpers.export(exports, "avogadroDependencies", ()=>_dependenciesAvogadroGeneratedJs.avogadroDependencies
);
parcelHelpers.export(exports, "bellNumbersDependencies", ()=>_dependenciesBellNumbersGeneratedJs.bellNumbersDependencies
);
parcelHelpers.export(exports, "BigNumberDependencies", ()=>_dependenciesBigNumberClassGeneratedJs.BigNumberDependencies
);
parcelHelpers.export(exports, "bignumberDependencies", ()=>_dependenciesBignumberGeneratedJs.bignumberDependencies
);
parcelHelpers.export(exports, "binDependencies", ()=>_dependenciesBinGeneratedJs.binDependencies
);
parcelHelpers.export(exports, "bitAndDependencies", ()=>_dependenciesBitAndGeneratedJs.bitAndDependencies
);
parcelHelpers.export(exports, "bitNotDependencies", ()=>_dependenciesBitNotGeneratedJs.bitNotDependencies
);
parcelHelpers.export(exports, "bitOrDependencies", ()=>_dependenciesBitOrGeneratedJs.bitOrDependencies
);
parcelHelpers.export(exports, "bitXorDependencies", ()=>_dependenciesBitXorGeneratedJs.bitXorDependencies
);
parcelHelpers.export(exports, "BlockNodeDependencies", ()=>_dependenciesBlockNodeGeneratedJs.BlockNodeDependencies
);
parcelHelpers.export(exports, "bohrMagnetonDependencies", ()=>_dependenciesBohrMagnetonGeneratedJs.bohrMagnetonDependencies
);
parcelHelpers.export(exports, "bohrRadiusDependencies", ()=>_dependenciesBohrRadiusGeneratedJs.bohrRadiusDependencies
);
parcelHelpers.export(exports, "boltzmannDependencies", ()=>_dependenciesBoltzmannGeneratedJs.boltzmannDependencies
);
parcelHelpers.export(exports, "booleanDependencies", ()=>_dependenciesBooleanGeneratedJs.booleanDependencies
);
parcelHelpers.export(exports, "catalanDependencies", ()=>_dependenciesCatalanGeneratedJs.catalanDependencies
);
parcelHelpers.export(exports, "cbrtDependencies", ()=>_dependenciesCbrtGeneratedJs.cbrtDependencies
);
parcelHelpers.export(exports, "ceilDependencies", ()=>_dependenciesCeilGeneratedJs.ceilDependencies
);
parcelHelpers.export(exports, "chainDependencies", ()=>_dependenciesChainGeneratedJs.chainDependencies
);
parcelHelpers.export(exports, "ChainDependencies", ()=>_dependenciesChainClassGeneratedJs.ChainDependencies
);
parcelHelpers.export(exports, "classicalElectronRadiusDependencies", ()=>_dependenciesClassicalElectronRadiusGeneratedJs.classicalElectronRadiusDependencies
);
parcelHelpers.export(exports, "cloneDependencies", ()=>_dependenciesCloneGeneratedJs.cloneDependencies
);
parcelHelpers.export(exports, "columnDependencies", ()=>_dependenciesColumnGeneratedJs.columnDependencies
);
parcelHelpers.export(exports, "columnTransformDependencies", ()=>_dependenciesColumnTransformGeneratedJs.columnTransformDependencies
);
parcelHelpers.export(exports, "combinationsDependencies", ()=>_dependenciesCombinationsGeneratedJs.combinationsDependencies
);
parcelHelpers.export(exports, "combinationsWithRepDependencies", ()=>_dependenciesCombinationsWithRepGeneratedJs.combinationsWithRepDependencies
);
parcelHelpers.export(exports, "compareDependencies", ()=>_dependenciesCompareGeneratedJs.compareDependencies
);
parcelHelpers.export(exports, "compareNaturalDependencies", ()=>_dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies
);
parcelHelpers.export(exports, "compareTextDependencies", ()=>_dependenciesCompareTextGeneratedJs.compareTextDependencies
);
parcelHelpers.export(exports, "compileDependencies", ()=>_dependenciesCompileGeneratedJs.compileDependencies
);
parcelHelpers.export(exports, "complexDependencies", ()=>_dependenciesComplexGeneratedJs.complexDependencies
);
parcelHelpers.export(exports, "ComplexDependencies", ()=>_dependenciesComplexClassGeneratedJs.ComplexDependencies
);
parcelHelpers.export(exports, "compositionDependencies", ()=>_dependenciesCompositionGeneratedJs.compositionDependencies
);
parcelHelpers.export(exports, "concatDependencies", ()=>_dependenciesConcatGeneratedJs.concatDependencies
);
parcelHelpers.export(exports, "concatTransformDependencies", ()=>_dependenciesConcatTransformGeneratedJs.concatTransformDependencies
);
parcelHelpers.export(exports, "ConditionalNodeDependencies", ()=>_dependenciesConditionalNodeGeneratedJs.ConditionalNodeDependencies
);
parcelHelpers.export(exports, "conductanceQuantumDependencies", ()=>_dependenciesConductanceQuantumGeneratedJs.conductanceQuantumDependencies
);
parcelHelpers.export(exports, "conjDependencies", ()=>_dependenciesConjGeneratedJs.conjDependencies
);
parcelHelpers.export(exports, "ConstantNodeDependencies", ()=>_dependenciesConstantNodeGeneratedJs.ConstantNodeDependencies
);
parcelHelpers.export(exports, "cosDependencies", ()=>_dependenciesCosGeneratedJs.cosDependencies
);
parcelHelpers.export(exports, "coshDependencies", ()=>_dependenciesCoshGeneratedJs.coshDependencies
);
parcelHelpers.export(exports, "cotDependencies", ()=>_dependenciesCotGeneratedJs.cotDependencies
);
parcelHelpers.export(exports, "cothDependencies", ()=>_dependenciesCothGeneratedJs.cothDependencies
);
parcelHelpers.export(exports, "coulombDependencies", ()=>_dependenciesCoulombGeneratedJs.coulombDependencies
);
parcelHelpers.export(exports, "countDependencies", ()=>_dependenciesCountGeneratedJs.countDependencies
);
parcelHelpers.export(exports, "createUnitDependencies", ()=>_dependenciesCreateUnitGeneratedJs.createUnitDependencies
);
parcelHelpers.export(exports, "crossDependencies", ()=>_dependenciesCrossGeneratedJs.crossDependencies
);
parcelHelpers.export(exports, "cscDependencies", ()=>_dependenciesCscGeneratedJs.cscDependencies
);
parcelHelpers.export(exports, "cschDependencies", ()=>_dependenciesCschGeneratedJs.cschDependencies
);
parcelHelpers.export(exports, "ctransposeDependencies", ()=>_dependenciesCtransposeGeneratedJs.ctransposeDependencies
);
parcelHelpers.export(exports, "cubeDependencies", ()=>_dependenciesCubeGeneratedJs.cubeDependencies
);
parcelHelpers.export(exports, "deepEqualDependencies", ()=>_dependenciesDeepEqualGeneratedJs.deepEqualDependencies
);
parcelHelpers.export(exports, "DenseMatrixDependencies", ()=>_dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies
);
parcelHelpers.export(exports, "derivativeDependencies", ()=>_dependenciesDerivativeGeneratedJs.derivativeDependencies
);
parcelHelpers.export(exports, "detDependencies", ()=>_dependenciesDetGeneratedJs.detDependencies
);
parcelHelpers.export(exports, "deuteronMassDependencies", ()=>_dependenciesDeuteronMassGeneratedJs.deuteronMassDependencies
);
parcelHelpers.export(exports, "diagDependencies", ()=>_dependenciesDiagGeneratedJs.diagDependencies
);
parcelHelpers.export(exports, "diffDependencies", ()=>_dependenciesDiffGeneratedJs.diffDependencies
);
parcelHelpers.export(exports, "diffTransformDependencies", ()=>_dependenciesDiffTransformGeneratedJs.diffTransformDependencies
);
parcelHelpers.export(exports, "distanceDependencies", ()=>_dependenciesDistanceGeneratedJs.distanceDependencies
);
parcelHelpers.export(exports, "divideDependencies", ()=>_dependenciesDivideGeneratedJs.divideDependencies
);
parcelHelpers.export(exports, "divideScalarDependencies", ()=>_dependenciesDivideScalarGeneratedJs.divideScalarDependencies
);
parcelHelpers.export(exports, "dotDependencies", ()=>_dependenciesDotGeneratedJs.dotDependencies
);
parcelHelpers.export(exports, "dotDivideDependencies", ()=>_dependenciesDotDivideGeneratedJs.dotDivideDependencies
);
parcelHelpers.export(exports, "dotMultiplyDependencies", ()=>_dependenciesDotMultiplyGeneratedJs.dotMultiplyDependencies
);
parcelHelpers.export(exports, "dotPowDependencies", ()=>_dependenciesDotPowGeneratedJs.dotPowDependencies
);
parcelHelpers.export(exports, "eDependencies", ()=>_dependenciesEGeneratedJs.eDependencies
);
parcelHelpers.export(exports, "efimovFactorDependencies", ()=>_dependenciesEfimovFactorGeneratedJs.efimovFactorDependencies
);
parcelHelpers.export(exports, "eigsDependencies", ()=>_dependenciesEigsGeneratedJs.eigsDependencies
);
parcelHelpers.export(exports, "electricConstantDependencies", ()=>_dependenciesElectricConstantGeneratedJs.electricConstantDependencies
);
parcelHelpers.export(exports, "electronMassDependencies", ()=>_dependenciesElectronMassGeneratedJs.electronMassDependencies
);
parcelHelpers.export(exports, "elementaryChargeDependencies", ()=>_dependenciesElementaryChargeGeneratedJs.elementaryChargeDependencies
);
parcelHelpers.export(exports, "equalDependencies", ()=>_dependenciesEqualGeneratedJs.equalDependencies
);
parcelHelpers.export(exports, "equalScalarDependencies", ()=>_dependenciesEqualScalarGeneratedJs.equalScalarDependencies
);
parcelHelpers.export(exports, "equalTextDependencies", ()=>_dependenciesEqualTextGeneratedJs.equalTextDependencies
);
parcelHelpers.export(exports, "erfDependencies", ()=>_dependenciesErfGeneratedJs.erfDependencies
);
parcelHelpers.export(exports, "evaluateDependencies", ()=>_dependenciesEvaluateGeneratedJs.evaluateDependencies
);
parcelHelpers.export(exports, "expDependencies", ()=>_dependenciesExpGeneratedJs.expDependencies
);
parcelHelpers.export(exports, "expmDependencies", ()=>_dependenciesExpmGeneratedJs.expmDependencies
);
parcelHelpers.export(exports, "expm1Dependencies", ()=>_dependenciesExpm1GeneratedJs.expm1Dependencies
);
parcelHelpers.export(exports, "factorialDependencies", ()=>_dependenciesFactorialGeneratedJs.factorialDependencies
);
parcelHelpers.export(exports, "falseDependencies", ()=>_dependenciesFalseGeneratedJs.falseDependencies
);
parcelHelpers.export(exports, "faradayDependencies", ()=>_dependenciesFaradayGeneratedJs.faradayDependencies
);
parcelHelpers.export(exports, "fermiCouplingDependencies", ()=>_dependenciesFermiCouplingGeneratedJs.fermiCouplingDependencies
);
parcelHelpers.export(exports, "FibonacciHeapDependencies", ()=>_dependenciesFibonacciHeapClassGeneratedJs.FibonacciHeapDependencies
);
parcelHelpers.export(exports, "filterDependencies", ()=>_dependenciesFilterGeneratedJs.filterDependencies
);
parcelHelpers.export(exports, "filterTransformDependencies", ()=>_dependenciesFilterTransformGeneratedJs.filterTransformDependencies
);
parcelHelpers.export(exports, "fineStructureDependencies", ()=>_dependenciesFineStructureGeneratedJs.fineStructureDependencies
);
parcelHelpers.export(exports, "firstRadiationDependencies", ()=>_dependenciesFirstRadiationGeneratedJs.firstRadiationDependencies
);
parcelHelpers.export(exports, "fixDependencies", ()=>_dependenciesFixGeneratedJs.fixDependencies
);
parcelHelpers.export(exports, "flattenDependencies", ()=>_dependenciesFlattenGeneratedJs.flattenDependencies
);
parcelHelpers.export(exports, "floorDependencies", ()=>_dependenciesFloorGeneratedJs.floorDependencies
);
parcelHelpers.export(exports, "forEachDependencies", ()=>_dependenciesForEachGeneratedJs.forEachDependencies
);
parcelHelpers.export(exports, "forEachTransformDependencies", ()=>_dependenciesForEachTransformGeneratedJs.forEachTransformDependencies
);
parcelHelpers.export(exports, "formatDependencies", ()=>_dependenciesFormatGeneratedJs.formatDependencies
);
parcelHelpers.export(exports, "fractionDependencies", ()=>_dependenciesFractionGeneratedJs.fractionDependencies
);
parcelHelpers.export(exports, "FractionDependencies", ()=>_dependenciesFractionClassGeneratedJs.FractionDependencies
);
parcelHelpers.export(exports, "FunctionAssignmentNodeDependencies", ()=>_dependenciesFunctionAssignmentNodeGeneratedJs.FunctionAssignmentNodeDependencies
);
parcelHelpers.export(exports, "FunctionNodeDependencies", ()=>_dependenciesFunctionNodeGeneratedJs.FunctionNodeDependencies
);
parcelHelpers.export(exports, "gammaDependencies", ()=>_dependenciesGammaGeneratedJs.gammaDependencies
);
parcelHelpers.export(exports, "gasConstantDependencies", ()=>_dependenciesGasConstantGeneratedJs.gasConstantDependencies
);
parcelHelpers.export(exports, "gcdDependencies", ()=>_dependenciesGcdGeneratedJs.gcdDependencies
);
parcelHelpers.export(exports, "getMatrixDataTypeDependencies", ()=>_dependenciesGetMatrixDataTypeGeneratedJs.getMatrixDataTypeDependencies
);
parcelHelpers.export(exports, "gravitationConstantDependencies", ()=>_dependenciesGravitationConstantGeneratedJs.gravitationConstantDependencies
);
parcelHelpers.export(exports, "gravityDependencies", ()=>_dependenciesGravityGeneratedJs.gravityDependencies
);
parcelHelpers.export(exports, "hartreeEnergyDependencies", ()=>_dependenciesHartreeEnergyGeneratedJs.hartreeEnergyDependencies
);
parcelHelpers.export(exports, "hasNumericValueDependencies", ()=>_dependenciesHasNumericValueGeneratedJs.hasNumericValueDependencies
);
parcelHelpers.export(exports, "helpDependencies", ()=>_dependenciesHelpGeneratedJs.helpDependencies
);
parcelHelpers.export(exports, "HelpDependencies", ()=>_dependenciesHelpClassGeneratedJs.HelpDependencies
);
parcelHelpers.export(exports, "hexDependencies", ()=>_dependenciesHexGeneratedJs.hexDependencies
);
parcelHelpers.export(exports, "hypotDependencies", ()=>_dependenciesHypotGeneratedJs.hypotDependencies
);
parcelHelpers.export(exports, "iDependencies", ()=>_dependenciesIGeneratedJs.iDependencies
);
parcelHelpers.export(exports, "identityDependencies", ()=>_dependenciesIdentityGeneratedJs.identityDependencies
);
parcelHelpers.export(exports, "imDependencies", ()=>_dependenciesImGeneratedJs.imDependencies
);
parcelHelpers.export(exports, "ImmutableDenseMatrixDependencies", ()=>_dependenciesImmutableDenseMatrixClassGeneratedJs.ImmutableDenseMatrixDependencies
);
parcelHelpers.export(exports, "indexDependencies", ()=>_dependenciesIndexGeneratedJs.indexDependencies
);
parcelHelpers.export(exports, "IndexDependencies", ()=>_dependenciesIndexClassGeneratedJs.IndexDependencies
);
parcelHelpers.export(exports, "IndexNodeDependencies", ()=>_dependenciesIndexNodeGeneratedJs.IndexNodeDependencies
);
parcelHelpers.export(exports, "indexTransformDependencies", ()=>_dependenciesIndexTransformGeneratedJs.indexTransformDependencies
);
parcelHelpers.export(exports, "InfinityDependencies", ()=>_dependenciesInfinityGeneratedJs.InfinityDependencies
);
parcelHelpers.export(exports, "intersectDependencies", ()=>_dependenciesIntersectGeneratedJs.intersectDependencies
);
parcelHelpers.export(exports, "invDependencies", ()=>_dependenciesInvGeneratedJs.invDependencies
);
parcelHelpers.export(exports, "inverseConductanceQuantumDependencies", ()=>_dependenciesInverseConductanceQuantumGeneratedJs.inverseConductanceQuantumDependencies
);
parcelHelpers.export(exports, "isIntegerDependencies", ()=>_dependenciesIsIntegerGeneratedJs.isIntegerDependencies
);
parcelHelpers.export(exports, "isNaNDependencies", ()=>_dependenciesIsNaNGeneratedJs.isNaNDependencies
);
parcelHelpers.export(exports, "isNegativeDependencies", ()=>_dependenciesIsNegativeGeneratedJs.isNegativeDependencies
);
parcelHelpers.export(exports, "isNumericDependencies", ()=>_dependenciesIsNumericGeneratedJs.isNumericDependencies
);
parcelHelpers.export(exports, "isPositiveDependencies", ()=>_dependenciesIsPositiveGeneratedJs.isPositiveDependencies
);
parcelHelpers.export(exports, "isPrimeDependencies", ()=>_dependenciesIsPrimeGeneratedJs.isPrimeDependencies
);
parcelHelpers.export(exports, "isZeroDependencies", ()=>_dependenciesIsZeroGeneratedJs.isZeroDependencies
);
parcelHelpers.export(exports, "kldivergenceDependencies", ()=>_dependenciesKldivergenceGeneratedJs.kldivergenceDependencies
);
parcelHelpers.export(exports, "klitzingDependencies", ()=>_dependenciesKlitzingGeneratedJs.klitzingDependencies
);
parcelHelpers.export(exports, "kronDependencies", ()=>_dependenciesKronGeneratedJs.kronDependencies
);
parcelHelpers.export(exports, "LN10Dependencies", ()=>_dependenciesLN10GeneratedJs.LN10Dependencies
);
parcelHelpers.export(exports, "LN2Dependencies", ()=>_dependenciesLN2GeneratedJs.LN2Dependencies
);
parcelHelpers.export(exports, "LOG10EDependencies", ()=>_dependenciesLOG10EGeneratedJs.LOG10EDependencies
);
parcelHelpers.export(exports, "LOG2EDependencies", ()=>_dependenciesLOG2EGeneratedJs.LOG2EDependencies
);
parcelHelpers.export(exports, "largerDependencies", ()=>_dependenciesLargerGeneratedJs.largerDependencies
);
parcelHelpers.export(exports, "largerEqDependencies", ()=>_dependenciesLargerEqGeneratedJs.largerEqDependencies
);
parcelHelpers.export(exports, "lcmDependencies", ()=>_dependenciesLcmGeneratedJs.lcmDependencies
);
parcelHelpers.export(exports, "leftShiftDependencies", ()=>_dependenciesLeftShiftGeneratedJs.leftShiftDependencies
);
parcelHelpers.export(exports, "logDependencies", ()=>_dependenciesLogGeneratedJs.logDependencies
);
parcelHelpers.export(exports, "log10Dependencies", ()=>_dependenciesLog10GeneratedJs.log10Dependencies
);
parcelHelpers.export(exports, "log1pDependencies", ()=>_dependenciesLog1PGeneratedJs.log1pDependencies
);
parcelHelpers.export(exports, "log2Dependencies", ()=>_dependenciesLog2GeneratedJs.log2Dependencies
);
parcelHelpers.export(exports, "loschmidtDependencies", ()=>_dependenciesLoschmidtGeneratedJs.loschmidtDependencies
);
parcelHelpers.export(exports, "lsolveDependencies", ()=>_dependenciesLsolveGeneratedJs.lsolveDependencies
);
parcelHelpers.export(exports, "lsolveAllDependencies", ()=>_dependenciesLsolveAllGeneratedJs.lsolveAllDependencies
);
parcelHelpers.export(exports, "lupDependencies", ()=>_dependenciesLupGeneratedJs.lupDependencies
);
parcelHelpers.export(exports, "lusolveDependencies", ()=>_dependenciesLusolveGeneratedJs.lusolveDependencies
);
parcelHelpers.export(exports, "madDependencies", ()=>_dependenciesMadGeneratedJs.madDependencies
);
parcelHelpers.export(exports, "magneticConstantDependencies", ()=>_dependenciesMagneticConstantGeneratedJs.magneticConstantDependencies
);
parcelHelpers.export(exports, "magneticFluxQuantumDependencies", ()=>_dependenciesMagneticFluxQuantumGeneratedJs.magneticFluxQuantumDependencies
);
parcelHelpers.export(exports, "mapDependencies", ()=>_dependenciesMapGeneratedJs.mapDependencies
);
parcelHelpers.export(exports, "mapTransformDependencies", ()=>_dependenciesMapTransformGeneratedJs.mapTransformDependencies
);
parcelHelpers.export(exports, "matrixDependencies", ()=>_dependenciesMatrixGeneratedJs.matrixDependencies
);
parcelHelpers.export(exports, "MatrixDependencies", ()=>_dependenciesMatrixClassGeneratedJs.MatrixDependencies
);
parcelHelpers.export(exports, "matrixFromColumnsDependencies", ()=>_dependenciesMatrixFromColumnsGeneratedJs.matrixFromColumnsDependencies
);
parcelHelpers.export(exports, "matrixFromFunctionDependencies", ()=>_dependenciesMatrixFromFunctionGeneratedJs.matrixFromFunctionDependencies
);
parcelHelpers.export(exports, "matrixFromRowsDependencies", ()=>_dependenciesMatrixFromRowsGeneratedJs.matrixFromRowsDependencies
);
parcelHelpers.export(exports, "maxDependencies", ()=>_dependenciesMaxGeneratedJs.maxDependencies
);
parcelHelpers.export(exports, "maxTransformDependencies", ()=>_dependenciesMaxTransformGeneratedJs.maxTransformDependencies
);
parcelHelpers.export(exports, "meanDependencies", ()=>_dependenciesMeanGeneratedJs.meanDependencies
);
parcelHelpers.export(exports, "meanTransformDependencies", ()=>_dependenciesMeanTransformGeneratedJs.meanTransformDependencies
);
parcelHelpers.export(exports, "medianDependencies", ()=>_dependenciesMedianGeneratedJs.medianDependencies
);
parcelHelpers.export(exports, "minDependencies", ()=>_dependenciesMinGeneratedJs.minDependencies
);
parcelHelpers.export(exports, "minTransformDependencies", ()=>_dependenciesMinTransformGeneratedJs.minTransformDependencies
);
parcelHelpers.export(exports, "modDependencies", ()=>_dependenciesModGeneratedJs.modDependencies
);
parcelHelpers.export(exports, "modeDependencies", ()=>_dependenciesModeGeneratedJs.modeDependencies
);
parcelHelpers.export(exports, "molarMassDependencies", ()=>_dependenciesMolarMassGeneratedJs.molarMassDependencies
);
parcelHelpers.export(exports, "molarMassC12Dependencies", ()=>_dependenciesMolarMassC12GeneratedJs.molarMassC12Dependencies
);
parcelHelpers.export(exports, "molarPlanckConstantDependencies", ()=>_dependenciesMolarPlanckConstantGeneratedJs.molarPlanckConstantDependencies
);
parcelHelpers.export(exports, "molarVolumeDependencies", ()=>_dependenciesMolarVolumeGeneratedJs.molarVolumeDependencies
);
parcelHelpers.export(exports, "multinomialDependencies", ()=>_dependenciesMultinomialGeneratedJs.multinomialDependencies
);
parcelHelpers.export(exports, "multiplyDependencies", ()=>_dependenciesMultiplyGeneratedJs.multiplyDependencies
);
parcelHelpers.export(exports, "multiplyScalarDependencies", ()=>_dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies
);
parcelHelpers.export(exports, "NaNDependencies", ()=>_dependenciesNaNGeneratedJs.NaNDependencies
);
parcelHelpers.export(exports, "neutronMassDependencies", ()=>_dependenciesNeutronMassGeneratedJs.neutronMassDependencies
);
parcelHelpers.export(exports, "NodeDependencies", ()=>_dependenciesNodeGeneratedJs.NodeDependencies
);
parcelHelpers.export(exports, "normDependencies", ()=>_dependenciesNormGeneratedJs.normDependencies
);
parcelHelpers.export(exports, "notDependencies", ()=>_dependenciesNotGeneratedJs.notDependencies
);
parcelHelpers.export(exports, "nthRootDependencies", ()=>_dependenciesNthRootGeneratedJs.nthRootDependencies
);
parcelHelpers.export(exports, "nthRootsDependencies", ()=>_dependenciesNthRootsGeneratedJs.nthRootsDependencies
);
parcelHelpers.export(exports, "nuclearMagnetonDependencies", ()=>_dependenciesNuclearMagnetonGeneratedJs.nuclearMagnetonDependencies
);
parcelHelpers.export(exports, "nullDependencies", ()=>_dependenciesNullGeneratedJs.nullDependencies
);
parcelHelpers.export(exports, "numberDependencies", ()=>_dependenciesNumberGeneratedJs.numberDependencies
);
parcelHelpers.export(exports, "numericDependencies", ()=>_dependenciesNumericGeneratedJs.numericDependencies
);
parcelHelpers.export(exports, "ObjectNodeDependencies", ()=>_dependenciesObjectNodeGeneratedJs.ObjectNodeDependencies
);
parcelHelpers.export(exports, "octDependencies", ()=>_dependenciesOctGeneratedJs.octDependencies
);
parcelHelpers.export(exports, "onesDependencies", ()=>_dependenciesOnesGeneratedJs.onesDependencies
);
parcelHelpers.export(exports, "OperatorNodeDependencies", ()=>_dependenciesOperatorNodeGeneratedJs.OperatorNodeDependencies
);
parcelHelpers.export(exports, "orDependencies", ()=>_dependenciesOrGeneratedJs.orDependencies
);
parcelHelpers.export(exports, "ParenthesisNodeDependencies", ()=>_dependenciesParenthesisNodeGeneratedJs.ParenthesisNodeDependencies
);
parcelHelpers.export(exports, "parseDependencies", ()=>_dependenciesParseGeneratedJs.parseDependencies
);
parcelHelpers.export(exports, "parserDependencies", ()=>_dependenciesParserGeneratedJs.parserDependencies
);
parcelHelpers.export(exports, "ParserDependencies", ()=>_dependenciesParserClassGeneratedJs.ParserDependencies
);
parcelHelpers.export(exports, "partitionSelectDependencies", ()=>_dependenciesPartitionSelectGeneratedJs.partitionSelectDependencies
);
parcelHelpers.export(exports, "permutationsDependencies", ()=>_dependenciesPermutationsGeneratedJs.permutationsDependencies
);
parcelHelpers.export(exports, "phiDependencies", ()=>_dependenciesPhiGeneratedJs.phiDependencies
);
parcelHelpers.export(exports, "piDependencies", ()=>_dependenciesPiGeneratedJs.piDependencies
);
parcelHelpers.export(exports, "pickRandomDependencies", ()=>_dependenciesPickRandomGeneratedJs.pickRandomDependencies
);
parcelHelpers.export(exports, "planckChargeDependencies", ()=>_dependenciesPlanckChargeGeneratedJs.planckChargeDependencies
);
parcelHelpers.export(exports, "planckConstantDependencies", ()=>_dependenciesPlanckConstantGeneratedJs.planckConstantDependencies
);
parcelHelpers.export(exports, "planckLengthDependencies", ()=>_dependenciesPlanckLengthGeneratedJs.planckLengthDependencies
);
parcelHelpers.export(exports, "planckMassDependencies", ()=>_dependenciesPlanckMassGeneratedJs.planckMassDependencies
);
parcelHelpers.export(exports, "planckTemperatureDependencies", ()=>_dependenciesPlanckTemperatureGeneratedJs.planckTemperatureDependencies
);
parcelHelpers.export(exports, "planckTimeDependencies", ()=>_dependenciesPlanckTimeGeneratedJs.planckTimeDependencies
);
parcelHelpers.export(exports, "powDependencies", ()=>_dependenciesPowGeneratedJs.powDependencies
);
parcelHelpers.export(exports, "printDependencies", ()=>_dependenciesPrintGeneratedJs.printDependencies
);
parcelHelpers.export(exports, "prodDependencies", ()=>_dependenciesProdGeneratedJs.prodDependencies
);
parcelHelpers.export(exports, "protonMassDependencies", ()=>_dependenciesProtonMassGeneratedJs.protonMassDependencies
);
parcelHelpers.export(exports, "qrDependencies", ()=>_dependenciesQrGeneratedJs.qrDependencies
);
parcelHelpers.export(exports, "quantileSeqDependencies", ()=>_dependenciesQuantileSeqGeneratedJs.quantileSeqDependencies
);
parcelHelpers.export(exports, "quantumOfCirculationDependencies", ()=>_dependenciesQuantumOfCirculationGeneratedJs.quantumOfCirculationDependencies
);
parcelHelpers.export(exports, "randomDependencies", ()=>_dependenciesRandomGeneratedJs.randomDependencies
);
parcelHelpers.export(exports, "randomIntDependencies", ()=>_dependenciesRandomIntGeneratedJs.randomIntDependencies
);
parcelHelpers.export(exports, "rangeDependencies", ()=>_dependenciesRangeGeneratedJs.rangeDependencies
);
parcelHelpers.export(exports, "RangeDependencies", ()=>_dependenciesRangeClassGeneratedJs.RangeDependencies
);
parcelHelpers.export(exports, "RangeNodeDependencies", ()=>_dependenciesRangeNodeGeneratedJs.RangeNodeDependencies
);
parcelHelpers.export(exports, "rangeTransformDependencies", ()=>_dependenciesRangeTransformGeneratedJs.rangeTransformDependencies
);
parcelHelpers.export(exports, "rationalizeDependencies", ()=>_dependenciesRationalizeGeneratedJs.rationalizeDependencies
);
parcelHelpers.export(exports, "reDependencies", ()=>_dependenciesReGeneratedJs.reDependencies
);
parcelHelpers.export(exports, "reducedPlanckConstantDependencies", ()=>_dependenciesReducedPlanckConstantGeneratedJs.reducedPlanckConstantDependencies
);
parcelHelpers.export(exports, "RelationalNodeDependencies", ()=>_dependenciesRelationalNodeGeneratedJs.RelationalNodeDependencies
);
parcelHelpers.export(exports, "replacerDependencies", ()=>_dependenciesReplacerGeneratedJs.replacerDependencies
);
parcelHelpers.export(exports, "reshapeDependencies", ()=>_dependenciesReshapeGeneratedJs.reshapeDependencies
);
parcelHelpers.export(exports, "resizeDependencies", ()=>_dependenciesResizeGeneratedJs.resizeDependencies
);
parcelHelpers.export(exports, "ResultSetDependencies", ()=>_dependenciesResultSetGeneratedJs.ResultSetDependencies
);
parcelHelpers.export(exports, "reviverDependencies", ()=>_dependenciesReviverGeneratedJs.reviverDependencies
);
parcelHelpers.export(exports, "rightArithShiftDependencies", ()=>_dependenciesRightArithShiftGeneratedJs.rightArithShiftDependencies
);
parcelHelpers.export(exports, "rightLogShiftDependencies", ()=>_dependenciesRightLogShiftGeneratedJs.rightLogShiftDependencies
);
parcelHelpers.export(exports, "rotateDependencies", ()=>_dependenciesRotateGeneratedJs.rotateDependencies
);
parcelHelpers.export(exports, "rotationMatrixDependencies", ()=>_dependenciesRotationMatrixGeneratedJs.rotationMatrixDependencies
);
parcelHelpers.export(exports, "roundDependencies", ()=>_dependenciesRoundGeneratedJs.roundDependencies
);
parcelHelpers.export(exports, "rowDependencies", ()=>_dependenciesRowGeneratedJs.rowDependencies
);
parcelHelpers.export(exports, "rowTransformDependencies", ()=>_dependenciesRowTransformGeneratedJs.rowTransformDependencies
);
parcelHelpers.export(exports, "rydbergDependencies", ()=>_dependenciesRydbergGeneratedJs.rydbergDependencies
);
parcelHelpers.export(exports, "SQRT1_2Dependencies", ()=>_dependenciesSQRT12GeneratedJs.SQRT1_2Dependencies
) // eslint-disable-line camelcase
;
parcelHelpers.export(exports, "SQRT2Dependencies", ()=>_dependenciesSQRT2GeneratedJs.SQRT2Dependencies
);
parcelHelpers.export(exports, "sackurTetrodeDependencies", ()=>_dependenciesSackurTetrodeGeneratedJs.sackurTetrodeDependencies
);
parcelHelpers.export(exports, "secDependencies", ()=>_dependenciesSecGeneratedJs.secDependencies
);
parcelHelpers.export(exports, "sechDependencies", ()=>_dependenciesSechGeneratedJs.sechDependencies
);
parcelHelpers.export(exports, "secondRadiationDependencies", ()=>_dependenciesSecondRadiationGeneratedJs.secondRadiationDependencies
);
parcelHelpers.export(exports, "setCartesianDependencies", ()=>_dependenciesSetCartesianGeneratedJs.setCartesianDependencies
);
parcelHelpers.export(exports, "setDifferenceDependencies", ()=>_dependenciesSetDifferenceGeneratedJs.setDifferenceDependencies
);
parcelHelpers.export(exports, "setDistinctDependencies", ()=>_dependenciesSetDistinctGeneratedJs.setDistinctDependencies
);
parcelHelpers.export(exports, "setIntersectDependencies", ()=>_dependenciesSetIntersectGeneratedJs.setIntersectDependencies
);
parcelHelpers.export(exports, "setIsSubsetDependencies", ()=>_dependenciesSetIsSubsetGeneratedJs.setIsSubsetDependencies
);
parcelHelpers.export(exports, "setMultiplicityDependencies", ()=>_dependenciesSetMultiplicityGeneratedJs.setMultiplicityDependencies
);
parcelHelpers.export(exports, "setPowersetDependencies", ()=>_dependenciesSetPowersetGeneratedJs.setPowersetDependencies
);
parcelHelpers.export(exports, "setSizeDependencies", ()=>_dependenciesSetSizeGeneratedJs.setSizeDependencies
);
parcelHelpers.export(exports, "setSymDifferenceDependencies", ()=>_dependenciesSetSymDifferenceGeneratedJs.setSymDifferenceDependencies
);
parcelHelpers.export(exports, "setUnionDependencies", ()=>_dependenciesSetUnionGeneratedJs.setUnionDependencies
);
parcelHelpers.export(exports, "signDependencies", ()=>_dependenciesSignGeneratedJs.signDependencies
);
parcelHelpers.export(exports, "simplifyDependencies", ()=>_dependenciesSimplifyGeneratedJs.simplifyDependencies
);
parcelHelpers.export(exports, "sinDependencies", ()=>_dependenciesSinGeneratedJs.sinDependencies
);
parcelHelpers.export(exports, "sinhDependencies", ()=>_dependenciesSinhGeneratedJs.sinhDependencies
);
parcelHelpers.export(exports, "sizeDependencies", ()=>_dependenciesSizeGeneratedJs.sizeDependencies
);
parcelHelpers.export(exports, "sluDependencies", ()=>_dependenciesSluGeneratedJs.sluDependencies
);
parcelHelpers.export(exports, "smallerDependencies", ()=>_dependenciesSmallerGeneratedJs.smallerDependencies
);
parcelHelpers.export(exports, "smallerEqDependencies", ()=>_dependenciesSmallerEqGeneratedJs.smallerEqDependencies
);
parcelHelpers.export(exports, "sortDependencies", ()=>_dependenciesSortGeneratedJs.sortDependencies
);
parcelHelpers.export(exports, "SpaDependencies", ()=>_dependenciesSpaClassGeneratedJs.SpaDependencies
);
parcelHelpers.export(exports, "sparseDependencies", ()=>_dependenciesSparseGeneratedJs.sparseDependencies
);
parcelHelpers.export(exports, "SparseMatrixDependencies", ()=>_dependenciesSparseMatrixClassGeneratedJs.SparseMatrixDependencies
);
parcelHelpers.export(exports, "speedOfLightDependencies", ()=>_dependenciesSpeedOfLightGeneratedJs.speedOfLightDependencies
);
parcelHelpers.export(exports, "splitUnitDependencies", ()=>_dependenciesSplitUnitGeneratedJs.splitUnitDependencies
);
parcelHelpers.export(exports, "sqrtDependencies", ()=>_dependenciesSqrtGeneratedJs.sqrtDependencies
);
parcelHelpers.export(exports, "sqrtmDependencies", ()=>_dependenciesSqrtmGeneratedJs.sqrtmDependencies
);
parcelHelpers.export(exports, "squareDependencies", ()=>_dependenciesSquareGeneratedJs.squareDependencies
);
parcelHelpers.export(exports, "squeezeDependencies", ()=>_dependenciesSqueezeGeneratedJs.squeezeDependencies
);
parcelHelpers.export(exports, "stdDependencies", ()=>_dependenciesStdGeneratedJs.stdDependencies
);
parcelHelpers.export(exports, "stdTransformDependencies", ()=>_dependenciesStdTransformGeneratedJs.stdTransformDependencies
);
parcelHelpers.export(exports, "stefanBoltzmannDependencies", ()=>_dependenciesStefanBoltzmannGeneratedJs.stefanBoltzmannDependencies
);
parcelHelpers.export(exports, "stirlingS2Dependencies", ()=>_dependenciesStirlingS2GeneratedJs.stirlingS2Dependencies
);
parcelHelpers.export(exports, "stringDependencies", ()=>_dependenciesStringGeneratedJs.stringDependencies
);
parcelHelpers.export(exports, "subsetDependencies", ()=>_dependenciesSubsetGeneratedJs.subsetDependencies
);
parcelHelpers.export(exports, "subsetTransformDependencies", ()=>_dependenciesSubsetTransformGeneratedJs.subsetTransformDependencies
);
parcelHelpers.export(exports, "subtractDependencies", ()=>_dependenciesSubtractGeneratedJs.subtractDependencies
);
parcelHelpers.export(exports, "sumDependencies", ()=>_dependenciesSumGeneratedJs.sumDependencies
);
parcelHelpers.export(exports, "sumTransformDependencies", ()=>_dependenciesSumTransformGeneratedJs.sumTransformDependencies
);
parcelHelpers.export(exports, "SymbolNodeDependencies", ()=>_dependenciesSymbolNodeGeneratedJs.SymbolNodeDependencies
);
parcelHelpers.export(exports, "tanDependencies", ()=>_dependenciesTanGeneratedJs.tanDependencies
);
parcelHelpers.export(exports, "tanhDependencies", ()=>_dependenciesTanhGeneratedJs.tanhDependencies
);
parcelHelpers.export(exports, "tauDependencies", ()=>_dependenciesTauGeneratedJs.tauDependencies
);
parcelHelpers.export(exports, "thomsonCrossSectionDependencies", ()=>_dependenciesThomsonCrossSectionGeneratedJs.thomsonCrossSectionDependencies
);
parcelHelpers.export(exports, "toDependencies", ()=>_dependenciesToGeneratedJs.toDependencies
);
parcelHelpers.export(exports, "traceDependencies", ()=>_dependenciesTraceGeneratedJs.traceDependencies
);
parcelHelpers.export(exports, "transposeDependencies", ()=>_dependenciesTransposeGeneratedJs.transposeDependencies
);
parcelHelpers.export(exports, "trueDependencies", ()=>_dependenciesTrueGeneratedJs.trueDependencies
);
parcelHelpers.export(exports, "typeOfDependencies", ()=>_dependenciesTypeOfGeneratedJs.typeOfDependencies
);
parcelHelpers.export(exports, "typedDependencies", ()=>_dependenciesTypedGeneratedJs.typedDependencies
);
parcelHelpers.export(exports, "unaryMinusDependencies", ()=>_dependenciesUnaryMinusGeneratedJs.unaryMinusDependencies
);
parcelHelpers.export(exports, "unaryPlusDependencies", ()=>_dependenciesUnaryPlusGeneratedJs.unaryPlusDependencies
);
parcelHelpers.export(exports, "unequalDependencies", ()=>_dependenciesUnequalGeneratedJs.unequalDependencies
);
parcelHelpers.export(exports, "UnitDependencies", ()=>_dependenciesUnitClassGeneratedJs.UnitDependencies
);
parcelHelpers.export(exports, "unitDependencies", ()=>_dependenciesUnitFunctionGeneratedJs.unitDependencies
);
parcelHelpers.export(exports, "EDependencies", ()=>_dependenciesUppercaseEGeneratedJs.EDependencies
);
parcelHelpers.export(exports, "PIDependencies", ()=>_dependenciesUppercasePiGeneratedJs.PIDependencies
);
parcelHelpers.export(exports, "usolveDependencies", ()=>_dependenciesUsolveGeneratedJs.usolveDependencies
);
parcelHelpers.export(exports, "usolveAllDependencies", ()=>_dependenciesUsolveAllGeneratedJs.usolveAllDependencies
);
parcelHelpers.export(exports, "vacuumImpedanceDependencies", ()=>_dependenciesVacuumImpedanceGeneratedJs.vacuumImpedanceDependencies
);
parcelHelpers.export(exports, "varianceDependencies", ()=>_dependenciesVarianceGeneratedJs.varianceDependencies
);
parcelHelpers.export(exports, "varianceTransformDependencies", ()=>_dependenciesVarianceTransformGeneratedJs.varianceTransformDependencies
);
parcelHelpers.export(exports, "versionDependencies", ()=>_dependenciesVersionGeneratedJs.versionDependencies
);
parcelHelpers.export(exports, "weakMixingAngleDependencies", ()=>_dependenciesWeakMixingAngleGeneratedJs.weakMixingAngleDependencies
);
parcelHelpers.export(exports, "wienDisplacementDependencies", ()=>_dependenciesWienDisplacementGeneratedJs.wienDisplacementDependencies
);
parcelHelpers.export(exports, "xgcdDependencies", ()=>_dependenciesXgcdGeneratedJs.xgcdDependencies
);
parcelHelpers.export(exports, "xorDependencies", ()=>_dependenciesXorGeneratedJs.xorDependencies
);
parcelHelpers.export(exports, "zerosDependencies", ()=>_dependenciesZerosGeneratedJs.zerosDependencies
);
parcelHelpers.export(exports, "all", ()=>_allFactoriesAnyJs.all
);
var _dependenciesAbsGeneratedJs = require("./dependenciesAny/dependenciesAbs.generated.js");
var _dependenciesAccessorNodeGeneratedJs = require("./dependenciesAny/dependenciesAccessorNode.generated.js");
var _dependenciesAcosGeneratedJs = require("./dependenciesAny/dependenciesAcos.generated.js");
var _dependenciesAcoshGeneratedJs = require("./dependenciesAny/dependenciesAcosh.generated.js");
var _dependenciesAcotGeneratedJs = require("./dependenciesAny/dependenciesAcot.generated.js");
var _dependenciesAcothGeneratedJs = require("./dependenciesAny/dependenciesAcoth.generated.js");
var _dependenciesAcscGeneratedJs = require("./dependenciesAny/dependenciesAcsc.generated.js");
var _dependenciesAcschGeneratedJs = require("./dependenciesAny/dependenciesAcsch.generated.js");
var _dependenciesAddGeneratedJs = require("./dependenciesAny/dependenciesAdd.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAny/dependenciesAddScalar.generated.js");
var _dependenciesAndGeneratedJs = require("./dependenciesAny/dependenciesAnd.generated.js");
var _dependenciesApplyGeneratedJs = require("./dependenciesAny/dependenciesApply.generated.js");
var _dependenciesApplyTransformGeneratedJs = require("./dependenciesAny/dependenciesApplyTransform.generated.js");
var _dependenciesArgGeneratedJs = require("./dependenciesAny/dependenciesArg.generated.js");
var _dependenciesArrayNodeGeneratedJs = require("./dependenciesAny/dependenciesArrayNode.generated.js");
var _dependenciesAsecGeneratedJs = require("./dependenciesAny/dependenciesAsec.generated.js");
var _dependenciesAsechGeneratedJs = require("./dependenciesAny/dependenciesAsech.generated.js");
var _dependenciesAsinGeneratedJs = require("./dependenciesAny/dependenciesAsin.generated.js");
var _dependenciesAsinhGeneratedJs = require("./dependenciesAny/dependenciesAsinh.generated.js");
var _dependenciesAssignmentNodeGeneratedJs = require("./dependenciesAny/dependenciesAssignmentNode.generated.js");
var _dependenciesAtanGeneratedJs = require("./dependenciesAny/dependenciesAtan.generated.js");
var _dependenciesAtan2GeneratedJs = require("./dependenciesAny/dependenciesAtan2.generated.js");
var _dependenciesAtanhGeneratedJs = require("./dependenciesAny/dependenciesAtanh.generated.js");
var _dependenciesAtomicMassGeneratedJs = require("./dependenciesAny/dependenciesAtomicMass.generated.js");
var _dependenciesAvogadroGeneratedJs = require("./dependenciesAny/dependenciesAvogadro.generated.js");
var _dependenciesBellNumbersGeneratedJs = require("./dependenciesAny/dependenciesBellNumbers.generated.js");
var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesAny/dependenciesBigNumberClass.generated.js");
var _dependenciesBignumberGeneratedJs = require("./dependenciesAny/dependenciesBignumber.generated.js");
var _dependenciesBinGeneratedJs = require("./dependenciesAny/dependenciesBin.generated.js");
var _dependenciesBitAndGeneratedJs = require("./dependenciesAny/dependenciesBitAnd.generated.js");
var _dependenciesBitNotGeneratedJs = require("./dependenciesAny/dependenciesBitNot.generated.js");
var _dependenciesBitOrGeneratedJs = require("./dependenciesAny/dependenciesBitOr.generated.js");
var _dependenciesBitXorGeneratedJs = require("./dependenciesAny/dependenciesBitXor.generated.js");
var _dependenciesBlockNodeGeneratedJs = require("./dependenciesAny/dependenciesBlockNode.generated.js");
var _dependenciesBohrMagnetonGeneratedJs = require("./dependenciesAny/dependenciesBohrMagneton.generated.js");
var _dependenciesBohrRadiusGeneratedJs = require("./dependenciesAny/dependenciesBohrRadius.generated.js");
var _dependenciesBoltzmannGeneratedJs = require("./dependenciesAny/dependenciesBoltzmann.generated.js");
var _dependenciesBooleanGeneratedJs = require("./dependenciesAny/dependenciesBoolean.generated.js");
var _dependenciesCatalanGeneratedJs = require("./dependenciesAny/dependenciesCatalan.generated.js");
var _dependenciesCbrtGeneratedJs = require("./dependenciesAny/dependenciesCbrt.generated.js");
var _dependenciesCeilGeneratedJs = require("./dependenciesAny/dependenciesCeil.generated.js");
var _dependenciesChainGeneratedJs = require("./dependenciesAny/dependenciesChain.generated.js");
var _dependenciesChainClassGeneratedJs = require("./dependenciesAny/dependenciesChainClass.generated.js");
var _dependenciesClassicalElectronRadiusGeneratedJs = require("./dependenciesAny/dependenciesClassicalElectronRadius.generated.js");
var _dependenciesCloneGeneratedJs = require("./dependenciesAny/dependenciesClone.generated.js");
var _dependenciesColumnGeneratedJs = require("./dependenciesAny/dependenciesColumn.generated.js");
var _dependenciesColumnTransformGeneratedJs = require("./dependenciesAny/dependenciesColumnTransform.generated.js");
var _dependenciesCombinationsGeneratedJs = require("./dependenciesAny/dependenciesCombinations.generated.js");
var _dependenciesCombinationsWithRepGeneratedJs = require("./dependenciesAny/dependenciesCombinationsWithRep.generated.js");
var _dependenciesCompareGeneratedJs = require("./dependenciesAny/dependenciesCompare.generated.js");
var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesAny/dependenciesCompareNatural.generated.js");
var _dependenciesCompareTextGeneratedJs = require("./dependenciesAny/dependenciesCompareText.generated.js");
var _dependenciesCompileGeneratedJs = require("./dependenciesAny/dependenciesCompile.generated.js");
var _dependenciesComplexGeneratedJs = require("./dependenciesAny/dependenciesComplex.generated.js");
var _dependenciesComplexClassGeneratedJs = require("./dependenciesAny/dependenciesComplexClass.generated.js");
var _dependenciesCompositionGeneratedJs = require("./dependenciesAny/dependenciesComposition.generated.js");
var _dependenciesConcatGeneratedJs = require("./dependenciesAny/dependenciesConcat.generated.js");
var _dependenciesConcatTransformGeneratedJs = require("./dependenciesAny/dependenciesConcatTransform.generated.js");
var _dependenciesConditionalNodeGeneratedJs = require("./dependenciesAny/dependenciesConditionalNode.generated.js");
var _dependenciesConductanceQuantumGeneratedJs = require("./dependenciesAny/dependenciesConductanceQuantum.generated.js");
var _dependenciesConjGeneratedJs = require("./dependenciesAny/dependenciesConj.generated.js");
var _dependenciesConstantNodeGeneratedJs = require("./dependenciesAny/dependenciesConstantNode.generated.js");
var _dependenciesCosGeneratedJs = require("./dependenciesAny/dependenciesCos.generated.js");
var _dependenciesCoshGeneratedJs = require("./dependenciesAny/dependenciesCosh.generated.js");
var _dependenciesCotGeneratedJs = require("./dependenciesAny/dependenciesCot.generated.js");
var _dependenciesCothGeneratedJs = require("./dependenciesAny/dependenciesCoth.generated.js");
var _dependenciesCoulombGeneratedJs = require("./dependenciesAny/dependenciesCoulomb.generated.js");
var _dependenciesCountGeneratedJs = require("./dependenciesAny/dependenciesCount.generated.js");
var _dependenciesCreateUnitGeneratedJs = require("./dependenciesAny/dependenciesCreateUnit.generated.js");
var _dependenciesCrossGeneratedJs = require("./dependenciesAny/dependenciesCross.generated.js");
var _dependenciesCscGeneratedJs = require("./dependenciesAny/dependenciesCsc.generated.js");
var _dependenciesCschGeneratedJs = require("./dependenciesAny/dependenciesCsch.generated.js");
var _dependenciesCtransposeGeneratedJs = require("./dependenciesAny/dependenciesCtranspose.generated.js");
var _dependenciesCubeGeneratedJs = require("./dependenciesAny/dependenciesCube.generated.js");
var _dependenciesDeepEqualGeneratedJs = require("./dependenciesAny/dependenciesDeepEqual.generated.js");
var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesAny/dependenciesDenseMatrixClass.generated.js");
var _dependenciesDerivativeGeneratedJs = require("./dependenciesAny/dependenciesDerivative.generated.js");
var _dependenciesDetGeneratedJs = require("./dependenciesAny/dependenciesDet.generated.js");
var _dependenciesDeuteronMassGeneratedJs = require("./dependenciesAny/dependenciesDeuteronMass.generated.js");
var _dependenciesDiagGeneratedJs = require("./dependenciesAny/dependenciesDiag.generated.js");
var _dependenciesDiffGeneratedJs = require("./dependenciesAny/dependenciesDiff.generated.js");
var _dependenciesDiffTransformGeneratedJs = require("./dependenciesAny/dependenciesDiffTransform.generated.js");
var _dependenciesDistanceGeneratedJs = require("./dependenciesAny/dependenciesDistance.generated.js");
var _dependenciesDivideGeneratedJs = require("./dependenciesAny/dependenciesDivide.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesAny/dependenciesDivideScalar.generated.js");
var _dependenciesDotGeneratedJs = require("./dependenciesAny/dependenciesDot.generated.js");
var _dependenciesDotDivideGeneratedJs = require("./dependenciesAny/dependenciesDotDivide.generated.js");
var _dependenciesDotMultiplyGeneratedJs = require("./dependenciesAny/dependenciesDotMultiply.generated.js");
var _dependenciesDotPowGeneratedJs = require("./dependenciesAny/dependenciesDotPow.generated.js");
var _dependenciesEGeneratedJs = require("./dependenciesAny/dependenciesE.generated.js");
var _dependenciesEfimovFactorGeneratedJs = require("./dependenciesAny/dependenciesEfimovFactor.generated.js");
var _dependenciesEigsGeneratedJs = require("./dependenciesAny/dependenciesEigs.generated.js");
var _dependenciesElectricConstantGeneratedJs = require("./dependenciesAny/dependenciesElectricConstant.generated.js");
var _dependenciesElectronMassGeneratedJs = require("./dependenciesAny/dependenciesElectronMass.generated.js");
var _dependenciesElementaryChargeGeneratedJs = require("./dependenciesAny/dependenciesElementaryCharge.generated.js");
var _dependenciesEqualGeneratedJs = require("./dependenciesAny/dependenciesEqual.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesAny/dependenciesEqualScalar.generated.js");
var _dependenciesEqualTextGeneratedJs = require("./dependenciesAny/dependenciesEqualText.generated.js");
var _dependenciesErfGeneratedJs = require("./dependenciesAny/dependenciesErf.generated.js");
var _dependenciesEvaluateGeneratedJs = require("./dependenciesAny/dependenciesEvaluate.generated.js");
var _dependenciesExpGeneratedJs = require("./dependenciesAny/dependenciesExp.generated.js");
var _dependenciesExpmGeneratedJs = require("./dependenciesAny/dependenciesExpm.generated.js");
var _dependenciesExpm1GeneratedJs = require("./dependenciesAny/dependenciesExpm1.generated.js");
var _dependenciesFactorialGeneratedJs = require("./dependenciesAny/dependenciesFactorial.generated.js");
var _dependenciesFalseGeneratedJs = require("./dependenciesAny/dependenciesFalse.generated.js");
var _dependenciesFaradayGeneratedJs = require("./dependenciesAny/dependenciesFaraday.generated.js");
var _dependenciesFermiCouplingGeneratedJs = require("./dependenciesAny/dependenciesFermiCoupling.generated.js");
var _dependenciesFibonacciHeapClassGeneratedJs = require("./dependenciesAny/dependenciesFibonacciHeapClass.generated.js");
var _dependenciesFilterGeneratedJs = require("./dependenciesAny/dependenciesFilter.generated.js");
var _dependenciesFilterTransformGeneratedJs = require("./dependenciesAny/dependenciesFilterTransform.generated.js");
var _dependenciesFineStructureGeneratedJs = require("./dependenciesAny/dependenciesFineStructure.generated.js");
var _dependenciesFirstRadiationGeneratedJs = require("./dependenciesAny/dependenciesFirstRadiation.generated.js");
var _dependenciesFixGeneratedJs = require("./dependenciesAny/dependenciesFix.generated.js");
var _dependenciesFlattenGeneratedJs = require("./dependenciesAny/dependenciesFlatten.generated.js");
var _dependenciesFloorGeneratedJs = require("./dependenciesAny/dependenciesFloor.generated.js");
var _dependenciesForEachGeneratedJs = require("./dependenciesAny/dependenciesForEach.generated.js");
var _dependenciesForEachTransformGeneratedJs = require("./dependenciesAny/dependenciesForEachTransform.generated.js");
var _dependenciesFormatGeneratedJs = require("./dependenciesAny/dependenciesFormat.generated.js");
var _dependenciesFractionGeneratedJs = require("./dependenciesAny/dependenciesFraction.generated.js");
var _dependenciesFractionClassGeneratedJs = require("./dependenciesAny/dependenciesFractionClass.generated.js");
var _dependenciesFunctionAssignmentNodeGeneratedJs = require("./dependenciesAny/dependenciesFunctionAssignmentNode.generated.js");
var _dependenciesFunctionNodeGeneratedJs = require("./dependenciesAny/dependenciesFunctionNode.generated.js");
var _dependenciesGammaGeneratedJs = require("./dependenciesAny/dependenciesGamma.generated.js");
var _dependenciesGasConstantGeneratedJs = require("./dependenciesAny/dependenciesGasConstant.generated.js");
var _dependenciesGcdGeneratedJs = require("./dependenciesAny/dependenciesGcd.generated.js");
var _dependenciesGetMatrixDataTypeGeneratedJs = require("./dependenciesAny/dependenciesGetMatrixDataType.generated.js");
var _dependenciesGravitationConstantGeneratedJs = require("./dependenciesAny/dependenciesGravitationConstant.generated.js");
var _dependenciesGravityGeneratedJs = require("./dependenciesAny/dependenciesGravity.generated.js");
var _dependenciesHartreeEnergyGeneratedJs = require("./dependenciesAny/dependenciesHartreeEnergy.generated.js");
var _dependenciesHasNumericValueGeneratedJs = require("./dependenciesAny/dependenciesHasNumericValue.generated.js");
var _dependenciesHelpGeneratedJs = require("./dependenciesAny/dependenciesHelp.generated.js");
var _dependenciesHelpClassGeneratedJs = require("./dependenciesAny/dependenciesHelpClass.generated.js");
var _dependenciesHexGeneratedJs = require("./dependenciesAny/dependenciesHex.generated.js");
var _dependenciesHypotGeneratedJs = require("./dependenciesAny/dependenciesHypot.generated.js");
var _dependenciesIGeneratedJs = require("./dependenciesAny/dependenciesI.generated.js");
var _dependenciesIdentityGeneratedJs = require("./dependenciesAny/dependenciesIdentity.generated.js");
var _dependenciesImGeneratedJs = require("./dependenciesAny/dependenciesIm.generated.js");
var _dependenciesImmutableDenseMatrixClassGeneratedJs = require("./dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js");
var _dependenciesIndexGeneratedJs = require("./dependenciesAny/dependenciesIndex.generated.js");
var _dependenciesIndexClassGeneratedJs = require("./dependenciesAny/dependenciesIndexClass.generated.js");
var _dependenciesIndexNodeGeneratedJs = require("./dependenciesAny/dependenciesIndexNode.generated.js");
var _dependenciesIndexTransformGeneratedJs = require("./dependenciesAny/dependenciesIndexTransform.generated.js");
var _dependenciesInfinityGeneratedJs = require("./dependenciesAny/dependenciesInfinity.generated.js");
var _dependenciesIntersectGeneratedJs = require("./dependenciesAny/dependenciesIntersect.generated.js");
var _dependenciesInvGeneratedJs = require("./dependenciesAny/dependenciesInv.generated.js");
var _dependenciesInverseConductanceQuantumGeneratedJs = require("./dependenciesAny/dependenciesInverseConductanceQuantum.generated.js");
var _dependenciesIsIntegerGeneratedJs = require("./dependenciesAny/dependenciesIsInteger.generated.js");
var _dependenciesIsNaNGeneratedJs = require("./dependenciesAny/dependenciesIsNaN.generated.js");
var _dependenciesIsNegativeGeneratedJs = require("./dependenciesAny/dependenciesIsNegative.generated.js");
var _dependenciesIsNumericGeneratedJs = require("./dependenciesAny/dependenciesIsNumeric.generated.js");
var _dependenciesIsPositiveGeneratedJs = require("./dependenciesAny/dependenciesIsPositive.generated.js");
var _dependenciesIsPrimeGeneratedJs = require("./dependenciesAny/dependenciesIsPrime.generated.js");
var _dependenciesIsZeroGeneratedJs = require("./dependenciesAny/dependenciesIsZero.generated.js");
var _dependenciesKldivergenceGeneratedJs = require("./dependenciesAny/dependenciesKldivergence.generated.js");
var _dependenciesKlitzingGeneratedJs = require("./dependenciesAny/dependenciesKlitzing.generated.js");
var _dependenciesKronGeneratedJs = require("./dependenciesAny/dependenciesKron.generated.js");
var _dependenciesLN10GeneratedJs = require("./dependenciesAny/dependenciesLN10.generated.js");
var _dependenciesLN2GeneratedJs = require("./dependenciesAny/dependenciesLN2.generated.js");
var _dependenciesLOG10EGeneratedJs = require("./dependenciesAny/dependenciesLOG10E.generated.js");
var _dependenciesLOG2EGeneratedJs = require("./dependenciesAny/dependenciesLOG2E.generated.js");
var _dependenciesLargerGeneratedJs = require("./dependenciesAny/dependenciesLarger.generated.js");
var _dependenciesLargerEqGeneratedJs = require("./dependenciesAny/dependenciesLargerEq.generated.js");
var _dependenciesLcmGeneratedJs = require("./dependenciesAny/dependenciesLcm.generated.js");
var _dependenciesLeftShiftGeneratedJs = require("./dependenciesAny/dependenciesLeftShift.generated.js");
var _dependenciesLogGeneratedJs = require("./dependenciesAny/dependenciesLog.generated.js");
var _dependenciesLog10GeneratedJs = require("./dependenciesAny/dependenciesLog10.generated.js");
var _dependenciesLog1PGeneratedJs = require("./dependenciesAny/dependenciesLog1p.generated.js");
var _dependenciesLog2GeneratedJs = require("./dependenciesAny/dependenciesLog2.generated.js");
var _dependenciesLoschmidtGeneratedJs = require("./dependenciesAny/dependenciesLoschmidt.generated.js");
var _dependenciesLsolveGeneratedJs = require("./dependenciesAny/dependenciesLsolve.generated.js");
var _dependenciesLsolveAllGeneratedJs = require("./dependenciesAny/dependenciesLsolveAll.generated.js");
var _dependenciesLupGeneratedJs = require("./dependenciesAny/dependenciesLup.generated.js");
var _dependenciesLusolveGeneratedJs = require("./dependenciesAny/dependenciesLusolve.generated.js");
var _dependenciesMadGeneratedJs = require("./dependenciesAny/dependenciesMad.generated.js");
var _dependenciesMagneticConstantGeneratedJs = require("./dependenciesAny/dependenciesMagneticConstant.generated.js");
var _dependenciesMagneticFluxQuantumGeneratedJs = require("./dependenciesAny/dependenciesMagneticFluxQuantum.generated.js");
var _dependenciesMapGeneratedJs = require("./dependenciesAny/dependenciesMap.generated.js");
var _dependenciesMapTransformGeneratedJs = require("./dependenciesAny/dependenciesMapTransform.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesAny/dependenciesMatrix.generated.js");
var _dependenciesMatrixClassGeneratedJs = require("./dependenciesAny/dependenciesMatrixClass.generated.js");
var _dependenciesMatrixFromColumnsGeneratedJs = require("./dependenciesAny/dependenciesMatrixFromColumns.generated.js");
var _dependenciesMatrixFromFunctionGeneratedJs = require("./dependenciesAny/dependenciesMatrixFromFunction.generated.js");
var _dependenciesMatrixFromRowsGeneratedJs = require("./dependenciesAny/dependenciesMatrixFromRows.generated.js");
var _dependenciesMaxGeneratedJs = require("./dependenciesAny/dependenciesMax.generated.js");
var _dependenciesMaxTransformGeneratedJs = require("./dependenciesAny/dependenciesMaxTransform.generated.js");
var _dependenciesMeanGeneratedJs = require("./dependenciesAny/dependenciesMean.generated.js");
var _dependenciesMeanTransformGeneratedJs = require("./dependenciesAny/dependenciesMeanTransform.generated.js");
var _dependenciesMedianGeneratedJs = require("./dependenciesAny/dependenciesMedian.generated.js");
var _dependenciesMinGeneratedJs = require("./dependenciesAny/dependenciesMin.generated.js");
var _dependenciesMinTransformGeneratedJs = require("./dependenciesAny/dependenciesMinTransform.generated.js");
var _dependenciesModGeneratedJs = require("./dependenciesAny/dependenciesMod.generated.js");
var _dependenciesModeGeneratedJs = require("./dependenciesAny/dependenciesMode.generated.js");
var _dependenciesMolarMassGeneratedJs = require("./dependenciesAny/dependenciesMolarMass.generated.js");
var _dependenciesMolarMassC12GeneratedJs = require("./dependenciesAny/dependenciesMolarMassC12.generated.js");
var _dependenciesMolarPlanckConstantGeneratedJs = require("./dependenciesAny/dependenciesMolarPlanckConstant.generated.js");
var _dependenciesMolarVolumeGeneratedJs = require("./dependenciesAny/dependenciesMolarVolume.generated.js");
var _dependenciesMultinomialGeneratedJs = require("./dependenciesAny/dependenciesMultinomial.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesAny/dependenciesMultiply.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesAny/dependenciesMultiplyScalar.generated.js");
var _dependenciesNaNGeneratedJs = require("./dependenciesAny/dependenciesNaN.generated.js");
var _dependenciesNeutronMassGeneratedJs = require("./dependenciesAny/dependenciesNeutronMass.generated.js");
var _dependenciesNodeGeneratedJs = require("./dependenciesAny/dependenciesNode.generated.js");
var _dependenciesNormGeneratedJs = require("./dependenciesAny/dependenciesNorm.generated.js");
var _dependenciesNotGeneratedJs = require("./dependenciesAny/dependenciesNot.generated.js");
var _dependenciesNthRootGeneratedJs = require("./dependenciesAny/dependenciesNthRoot.generated.js");
var _dependenciesNthRootsGeneratedJs = require("./dependenciesAny/dependenciesNthRoots.generated.js");
var _dependenciesNuclearMagnetonGeneratedJs = require("./dependenciesAny/dependenciesNuclearMagneton.generated.js");
var _dependenciesNullGeneratedJs = require("./dependenciesAny/dependenciesNull.generated.js");
var _dependenciesNumberGeneratedJs = require("./dependenciesAny/dependenciesNumber.generated.js");
var _dependenciesNumericGeneratedJs = require("./dependenciesAny/dependenciesNumeric.generated.js");
var _dependenciesObjectNodeGeneratedJs = require("./dependenciesAny/dependenciesObjectNode.generated.js");
var _dependenciesOctGeneratedJs = require("./dependenciesAny/dependenciesOct.generated.js");
var _dependenciesOnesGeneratedJs = require("./dependenciesAny/dependenciesOnes.generated.js");
var _dependenciesOperatorNodeGeneratedJs = require("./dependenciesAny/dependenciesOperatorNode.generated.js");
var _dependenciesOrGeneratedJs = require("./dependenciesAny/dependenciesOr.generated.js");
var _dependenciesParenthesisNodeGeneratedJs = require("./dependenciesAny/dependenciesParenthesisNode.generated.js");
var _dependenciesParseGeneratedJs = require("./dependenciesAny/dependenciesParse.generated.js");
var _dependenciesParserGeneratedJs = require("./dependenciesAny/dependenciesParser.generated.js");
var _dependenciesParserClassGeneratedJs = require("./dependenciesAny/dependenciesParserClass.generated.js");
var _dependenciesPartitionSelectGeneratedJs = require("./dependenciesAny/dependenciesPartitionSelect.generated.js");
var _dependenciesPermutationsGeneratedJs = require("./dependenciesAny/dependenciesPermutations.generated.js");
var _dependenciesPhiGeneratedJs = require("./dependenciesAny/dependenciesPhi.generated.js");
var _dependenciesPiGeneratedJs = require("./dependenciesAny/dependenciesPi.generated.js");
var _dependenciesPickRandomGeneratedJs = require("./dependenciesAny/dependenciesPickRandom.generated.js");
var _dependenciesPlanckChargeGeneratedJs = require("./dependenciesAny/dependenciesPlanckCharge.generated.js");
var _dependenciesPlanckConstantGeneratedJs = require("./dependenciesAny/dependenciesPlanckConstant.generated.js");
var _dependenciesPlanckLengthGeneratedJs = require("./dependenciesAny/dependenciesPlanckLength.generated.js");
var _dependenciesPlanckMassGeneratedJs = require("./dependenciesAny/dependenciesPlanckMass.generated.js");
var _dependenciesPlanckTemperatureGeneratedJs = require("./dependenciesAny/dependenciesPlanckTemperature.generated.js");
var _dependenciesPlanckTimeGeneratedJs = require("./dependenciesAny/dependenciesPlanckTime.generated.js");
var _dependenciesPowGeneratedJs = require("./dependenciesAny/dependenciesPow.generated.js");
var _dependenciesPrintGeneratedJs = require("./dependenciesAny/dependenciesPrint.generated.js");
var _dependenciesProdGeneratedJs = require("./dependenciesAny/dependenciesProd.generated.js");
var _dependenciesProtonMassGeneratedJs = require("./dependenciesAny/dependenciesProtonMass.generated.js");
var _dependenciesQrGeneratedJs = require("./dependenciesAny/dependenciesQr.generated.js");
var _dependenciesQuantileSeqGeneratedJs = require("./dependenciesAny/dependenciesQuantileSeq.generated.js");
var _dependenciesQuantumOfCirculationGeneratedJs = require("./dependenciesAny/dependenciesQuantumOfCirculation.generated.js");
var _dependenciesRandomGeneratedJs = require("./dependenciesAny/dependenciesRandom.generated.js");
var _dependenciesRandomIntGeneratedJs = require("./dependenciesAny/dependenciesRandomInt.generated.js");
var _dependenciesRangeGeneratedJs = require("./dependenciesAny/dependenciesRange.generated.js");
var _dependenciesRangeClassGeneratedJs = require("./dependenciesAny/dependenciesRangeClass.generated.js");
var _dependenciesRangeNodeGeneratedJs = require("./dependenciesAny/dependenciesRangeNode.generated.js");
var _dependenciesRangeTransformGeneratedJs = require("./dependenciesAny/dependenciesRangeTransform.generated.js");
var _dependenciesRationalizeGeneratedJs = require("./dependenciesAny/dependenciesRationalize.generated.js");
var _dependenciesReGeneratedJs = require("./dependenciesAny/dependenciesRe.generated.js");
var _dependenciesReducedPlanckConstantGeneratedJs = require("./dependenciesAny/dependenciesReducedPlanckConstant.generated.js");
var _dependenciesRelationalNodeGeneratedJs = require("./dependenciesAny/dependenciesRelationalNode.generated.js");
var _dependenciesReplacerGeneratedJs = require("./dependenciesAny/dependenciesReplacer.generated.js");
var _dependenciesReshapeGeneratedJs = require("./dependenciesAny/dependenciesReshape.generated.js");
var _dependenciesResizeGeneratedJs = require("./dependenciesAny/dependenciesResize.generated.js");
var _dependenciesResultSetGeneratedJs = require("./dependenciesAny/dependenciesResultSet.generated.js");
var _dependenciesReviverGeneratedJs = require("./dependenciesAny/dependenciesReviver.generated.js");
var _dependenciesRightArithShiftGeneratedJs = require("./dependenciesAny/dependenciesRightArithShift.generated.js");
var _dependenciesRightLogShiftGeneratedJs = require("./dependenciesAny/dependenciesRightLogShift.generated.js");
var _dependenciesRotateGeneratedJs = require("./dependenciesAny/dependenciesRotate.generated.js");
var _dependenciesRotationMatrixGeneratedJs = require("./dependenciesAny/dependenciesRotationMatrix.generated.js");
var _dependenciesRoundGeneratedJs = require("./dependenciesAny/dependenciesRound.generated.js");
var _dependenciesRowGeneratedJs = require("./dependenciesAny/dependenciesRow.generated.js");
var _dependenciesRowTransformGeneratedJs = require("./dependenciesAny/dependenciesRowTransform.generated.js");
var _dependenciesRydbergGeneratedJs = require("./dependenciesAny/dependenciesRydberg.generated.js");
var _dependenciesSQRT12GeneratedJs = require("./dependenciesAny/dependenciesSQRT1_2.generated.js");
var _dependenciesSQRT2GeneratedJs = require("./dependenciesAny/dependenciesSQRT2.generated.js");
var _dependenciesSackurTetrodeGeneratedJs = require("./dependenciesAny/dependenciesSackurTetrode.generated.js");
var _dependenciesSecGeneratedJs = require("./dependenciesAny/dependenciesSec.generated.js");
var _dependenciesSechGeneratedJs = require("./dependenciesAny/dependenciesSech.generated.js");
var _dependenciesSecondRadiationGeneratedJs = require("./dependenciesAny/dependenciesSecondRadiation.generated.js");
var _dependenciesSetCartesianGeneratedJs = require("./dependenciesAny/dependenciesSetCartesian.generated.js");
var _dependenciesSetDifferenceGeneratedJs = require("./dependenciesAny/dependenciesSetDifference.generated.js");
var _dependenciesSetDistinctGeneratedJs = require("./dependenciesAny/dependenciesSetDistinct.generated.js");
var _dependenciesSetIntersectGeneratedJs = require("./dependenciesAny/dependenciesSetIntersect.generated.js");
var _dependenciesSetIsSubsetGeneratedJs = require("./dependenciesAny/dependenciesSetIsSubset.generated.js");
var _dependenciesSetMultiplicityGeneratedJs = require("./dependenciesAny/dependenciesSetMultiplicity.generated.js");
var _dependenciesSetPowersetGeneratedJs = require("./dependenciesAny/dependenciesSetPowerset.generated.js");
var _dependenciesSetSizeGeneratedJs = require("./dependenciesAny/dependenciesSetSize.generated.js");
var _dependenciesSetSymDifferenceGeneratedJs = require("./dependenciesAny/dependenciesSetSymDifference.generated.js");
var _dependenciesSetUnionGeneratedJs = require("./dependenciesAny/dependenciesSetUnion.generated.js");
var _dependenciesSignGeneratedJs = require("./dependenciesAny/dependenciesSign.generated.js");
var _dependenciesSimplifyGeneratedJs = require("./dependenciesAny/dependenciesSimplify.generated.js");
var _dependenciesSinGeneratedJs = require("./dependenciesAny/dependenciesSin.generated.js");
var _dependenciesSinhGeneratedJs = require("./dependenciesAny/dependenciesSinh.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesAny/dependenciesSize.generated.js");
var _dependenciesSluGeneratedJs = require("./dependenciesAny/dependenciesSlu.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesAny/dependenciesSmaller.generated.js");
var _dependenciesSmallerEqGeneratedJs = require("./dependenciesAny/dependenciesSmallerEq.generated.js");
var _dependenciesSortGeneratedJs = require("./dependenciesAny/dependenciesSort.generated.js");
var _dependenciesSpaClassGeneratedJs = require("./dependenciesAny/dependenciesSpaClass.generated.js");
var _dependenciesSparseGeneratedJs = require("./dependenciesAny/dependenciesSparse.generated.js");
var _dependenciesSparseMatrixClassGeneratedJs = require("./dependenciesAny/dependenciesSparseMatrixClass.generated.js");
var _dependenciesSpeedOfLightGeneratedJs = require("./dependenciesAny/dependenciesSpeedOfLight.generated.js");
var _dependenciesSplitUnitGeneratedJs = require("./dependenciesAny/dependenciesSplitUnit.generated.js");
var _dependenciesSqrtGeneratedJs = require("./dependenciesAny/dependenciesSqrt.generated.js");
var _dependenciesSqrtmGeneratedJs = require("./dependenciesAny/dependenciesSqrtm.generated.js");
var _dependenciesSquareGeneratedJs = require("./dependenciesAny/dependenciesSquare.generated.js");
var _dependenciesSqueezeGeneratedJs = require("./dependenciesAny/dependenciesSqueeze.generated.js");
var _dependenciesStdGeneratedJs = require("./dependenciesAny/dependenciesStd.generated.js");
var _dependenciesStdTransformGeneratedJs = require("./dependenciesAny/dependenciesStdTransform.generated.js");
var _dependenciesStefanBoltzmannGeneratedJs = require("./dependenciesAny/dependenciesStefanBoltzmann.generated.js");
var _dependenciesStirlingS2GeneratedJs = require("./dependenciesAny/dependenciesStirlingS2.generated.js");
var _dependenciesStringGeneratedJs = require("./dependenciesAny/dependenciesString.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesAny/dependenciesSubset.generated.js");
var _dependenciesSubsetTransformGeneratedJs = require("./dependenciesAny/dependenciesSubsetTransform.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesAny/dependenciesSubtract.generated.js");
var _dependenciesSumGeneratedJs = require("./dependenciesAny/dependenciesSum.generated.js");
var _dependenciesSumTransformGeneratedJs = require("./dependenciesAny/dependenciesSumTransform.generated.js");
var _dependenciesSymbolNodeGeneratedJs = require("./dependenciesAny/dependenciesSymbolNode.generated.js");
var _dependenciesTanGeneratedJs = require("./dependenciesAny/dependenciesTan.generated.js");
var _dependenciesTanhGeneratedJs = require("./dependenciesAny/dependenciesTanh.generated.js");
var _dependenciesTauGeneratedJs = require("./dependenciesAny/dependenciesTau.generated.js");
var _dependenciesThomsonCrossSectionGeneratedJs = require("./dependenciesAny/dependenciesThomsonCrossSection.generated.js");
var _dependenciesToGeneratedJs = require("./dependenciesAny/dependenciesTo.generated.js");
var _dependenciesTraceGeneratedJs = require("./dependenciesAny/dependenciesTrace.generated.js");
var _dependenciesTransposeGeneratedJs = require("./dependenciesAny/dependenciesTranspose.generated.js");
var _dependenciesTrueGeneratedJs = require("./dependenciesAny/dependenciesTrue.generated.js");
var _dependenciesTypeOfGeneratedJs = require("./dependenciesAny/dependenciesTypeOf.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesAny/dependenciesTyped.generated.js");
var _dependenciesUnaryMinusGeneratedJs = require("./dependenciesAny/dependenciesUnaryMinus.generated.js");
var _dependenciesUnaryPlusGeneratedJs = require("./dependenciesAny/dependenciesUnaryPlus.generated.js");
var _dependenciesUnequalGeneratedJs = require("./dependenciesAny/dependenciesUnequal.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesAny/dependenciesUnitClass.generated.js");
var _dependenciesUnitFunctionGeneratedJs = require("./dependenciesAny/dependenciesUnitFunction.generated.js");
var _dependenciesUppercaseEGeneratedJs = require("./dependenciesAny/dependenciesUppercaseE.generated.js");
var _dependenciesUppercasePiGeneratedJs = require("./dependenciesAny/dependenciesUppercasePi.generated.js");
var _dependenciesUsolveGeneratedJs = require("./dependenciesAny/dependenciesUsolve.generated.js");
var _dependenciesUsolveAllGeneratedJs = require("./dependenciesAny/dependenciesUsolveAll.generated.js");
var _dependenciesVacuumImpedanceGeneratedJs = require("./dependenciesAny/dependenciesVacuumImpedance.generated.js");
var _dependenciesVarianceGeneratedJs = require("./dependenciesAny/dependenciesVariance.generated.js");
var _dependenciesVarianceTransformGeneratedJs = require("./dependenciesAny/dependenciesVarianceTransform.generated.js");
var _dependenciesVersionGeneratedJs = require("./dependenciesAny/dependenciesVersion.generated.js");
var _dependenciesWeakMixingAngleGeneratedJs = require("./dependenciesAny/dependenciesWeakMixingAngle.generated.js");
var _dependenciesWienDisplacementGeneratedJs = require("./dependenciesAny/dependenciesWienDisplacement.generated.js");
var _dependenciesXgcdGeneratedJs = require("./dependenciesAny/dependenciesXgcd.generated.js");
var _dependenciesXorGeneratedJs = require("./dependenciesAny/dependenciesXor.generated.js");
var _dependenciesZerosGeneratedJs = require("./dependenciesAny/dependenciesZeros.generated.js");
var _allFactoriesAnyJs = require("./allFactoriesAny.js");

},{"./dependenciesAny/dependenciesAbs.generated.js":"hsFbf","./dependenciesAny/dependenciesAccessorNode.generated.js":"gLBRt","./dependenciesAny/dependenciesAcos.generated.js":"gYGYt","./dependenciesAny/dependenciesAcosh.generated.js":"8E5j1","./dependenciesAny/dependenciesAcot.generated.js":"eUThs","./dependenciesAny/dependenciesAcoth.generated.js":"bb6rr","./dependenciesAny/dependenciesAcsc.generated.js":"4d3kG","./dependenciesAny/dependenciesAcsch.generated.js":"kReYY","./dependenciesAny/dependenciesAdd.generated.js":"4SXJy","./dependenciesAny/dependenciesAddScalar.generated.js":"dHHAK","./dependenciesAny/dependenciesAnd.generated.js":"brC1m","./dependenciesAny/dependenciesApply.generated.js":"85NY1","./dependenciesAny/dependenciesApplyTransform.generated.js":"ivOss","./dependenciesAny/dependenciesArg.generated.js":"7b6q4","./dependenciesAny/dependenciesArrayNode.generated.js":"bq4RM","./dependenciesAny/dependenciesAsec.generated.js":"a91bo","./dependenciesAny/dependenciesAsech.generated.js":"leRiu","./dependenciesAny/dependenciesAsin.generated.js":"74s4N","./dependenciesAny/dependenciesAsinh.generated.js":"9S5oC","./dependenciesAny/dependenciesAssignmentNode.generated.js":"lxQrb","./dependenciesAny/dependenciesAtan.generated.js":"g5vni","./dependenciesAny/dependenciesAtan2.generated.js":"apOCu","./dependenciesAny/dependenciesAtanh.generated.js":"8UAXO","./dependenciesAny/dependenciesAtomicMass.generated.js":"6ucnn","./dependenciesAny/dependenciesAvogadro.generated.js":"fz0B3","./dependenciesAny/dependenciesBellNumbers.generated.js":"5vNrY","./dependenciesAny/dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesAny/dependenciesBignumber.generated.js":"86lZk","./dependenciesAny/dependenciesBin.generated.js":"6TWOZ","./dependenciesAny/dependenciesBitAnd.generated.js":"cKzoD","./dependenciesAny/dependenciesBitNot.generated.js":"76YYY","./dependenciesAny/dependenciesBitOr.generated.js":"akjM5","./dependenciesAny/dependenciesBitXor.generated.js":"cE4X7","./dependenciesAny/dependenciesBlockNode.generated.js":"QP0i0","./dependenciesAny/dependenciesBohrMagneton.generated.js":"dl0xP","./dependenciesAny/dependenciesBohrRadius.generated.js":"6o9EJ","./dependenciesAny/dependenciesBoltzmann.generated.js":"78wJI","./dependenciesAny/dependenciesBoolean.generated.js":"kdRBd","./dependenciesAny/dependenciesCatalan.generated.js":"9KnPf","./dependenciesAny/dependenciesCbrt.generated.js":"gkS4Q","./dependenciesAny/dependenciesCeil.generated.js":"2GuF6","./dependenciesAny/dependenciesChain.generated.js":"fESW2","./dependenciesAny/dependenciesChainClass.generated.js":"kixe4","./dependenciesAny/dependenciesClassicalElectronRadius.generated.js":"9eZpj","./dependenciesAny/dependenciesClone.generated.js":"Fx8pi","./dependenciesAny/dependenciesColumn.generated.js":"dXLVl","./dependenciesAny/dependenciesColumnTransform.generated.js":"1i4VL","./dependenciesAny/dependenciesCombinations.generated.js":"BUtH9","./dependenciesAny/dependenciesCombinationsWithRep.generated.js":"4KqkW","./dependenciesAny/dependenciesCompare.generated.js":"fXl0j","./dependenciesAny/dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesAny/dependenciesCompareText.generated.js":"cRYGT","./dependenciesAny/dependenciesCompile.generated.js":"dv4jK","./dependenciesAny/dependenciesComplex.generated.js":"5d4Bc","./dependenciesAny/dependenciesComplexClass.generated.js":"ltHxT","./dependenciesAny/dependenciesComposition.generated.js":"azHfn","./dependenciesAny/dependenciesConcat.generated.js":"dlGD2","./dependenciesAny/dependenciesConcatTransform.generated.js":"3fNUn","./dependenciesAny/dependenciesConditionalNode.generated.js":"bwUon","./dependenciesAny/dependenciesConductanceQuantum.generated.js":"c1w6R","./dependenciesAny/dependenciesConj.generated.js":"aXJbj","./dependenciesAny/dependenciesConstantNode.generated.js":"gnju0","./dependenciesAny/dependenciesCos.generated.js":"3onA8","./dependenciesAny/dependenciesCosh.generated.js":"779pF","./dependenciesAny/dependenciesCot.generated.js":"jbVBY","./dependenciesAny/dependenciesCoth.generated.js":"kX7VQ","./dependenciesAny/dependenciesCoulomb.generated.js":"9c8ui","./dependenciesAny/dependenciesCount.generated.js":"cmbR8","./dependenciesAny/dependenciesCreateUnit.generated.js":"3blbW","./dependenciesAny/dependenciesCross.generated.js":"aa0Vd","./dependenciesAny/dependenciesCsc.generated.js":"crgiz","./dependenciesAny/dependenciesCsch.generated.js":"hx88I","./dependenciesAny/dependenciesCtranspose.generated.js":"1SxQI","./dependenciesAny/dependenciesCube.generated.js":"a5W6U","./dependenciesAny/dependenciesDeepEqual.generated.js":"dkAmJ","./dependenciesAny/dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesAny/dependenciesDerivative.generated.js":"16IN6","./dependenciesAny/dependenciesDet.generated.js":"a5f1B","./dependenciesAny/dependenciesDeuteronMass.generated.js":"eeEjN","./dependenciesAny/dependenciesDiag.generated.js":"deSgl","./dependenciesAny/dependenciesDiff.generated.js":"fryC6","./dependenciesAny/dependenciesDiffTransform.generated.js":"gc8je","./dependenciesAny/dependenciesDistance.generated.js":"8J4CQ","./dependenciesAny/dependenciesDivide.generated.js":"2obV7","./dependenciesAny/dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesAny/dependenciesDot.generated.js":"1OCrr","./dependenciesAny/dependenciesDotDivide.generated.js":"h4cGC","./dependenciesAny/dependenciesDotMultiply.generated.js":"kEq0c","./dependenciesAny/dependenciesDotPow.generated.js":"3gNDx","./dependenciesAny/dependenciesE.generated.js":"4AN4k","./dependenciesAny/dependenciesEfimovFactor.generated.js":"gXYth","./dependenciesAny/dependenciesEigs.generated.js":"ZLWZF","./dependenciesAny/dependenciesElectricConstant.generated.js":"3kVx3","./dependenciesAny/dependenciesElectronMass.generated.js":"fSLcn","./dependenciesAny/dependenciesElementaryCharge.generated.js":"gx8ml","./dependenciesAny/dependenciesEqual.generated.js":"6NP7z","./dependenciesAny/dependenciesEqualScalar.generated.js":"knZCK","./dependenciesAny/dependenciesEqualText.generated.js":"c5Rd6","./dependenciesAny/dependenciesErf.generated.js":"lEU32","./dependenciesAny/dependenciesEvaluate.generated.js":"2OgIy","./dependenciesAny/dependenciesExp.generated.js":"4zmsB","./dependenciesAny/dependenciesExpm.generated.js":"03ivA","./dependenciesAny/dependenciesExpm1.generated.js":"lWdbb","./dependenciesAny/dependenciesFactorial.generated.js":"96H03","./dependenciesAny/dependenciesFalse.generated.js":"5VPHZ","./dependenciesAny/dependenciesFaraday.generated.js":"6Tnji","./dependenciesAny/dependenciesFermiCoupling.generated.js":"59msd","./dependenciesAny/dependenciesFibonacciHeapClass.generated.js":"8rcEh","./dependenciesAny/dependenciesFilter.generated.js":"jPSwi","./dependenciesAny/dependenciesFilterTransform.generated.js":"dkYQv","./dependenciesAny/dependenciesFineStructure.generated.js":"fesrA","./dependenciesAny/dependenciesFirstRadiation.generated.js":"5Zkes","./dependenciesAny/dependenciesFix.generated.js":"7KZRX","./dependenciesAny/dependenciesFlatten.generated.js":"1K1mT","./dependenciesAny/dependenciesFloor.generated.js":"lTlof","./dependenciesAny/dependenciesForEach.generated.js":"3XYHd","./dependenciesAny/dependenciesForEachTransform.generated.js":"3EDgA","./dependenciesAny/dependenciesFormat.generated.js":"jRoQ8","./dependenciesAny/dependenciesFraction.generated.js":"ldLGf","./dependenciesAny/dependenciesFractionClass.generated.js":"5yj1G","./dependenciesAny/dependenciesFunctionAssignmentNode.generated.js":"6603M","./dependenciesAny/dependenciesFunctionNode.generated.js":"3dMKC","./dependenciesAny/dependenciesGamma.generated.js":"7ssrj","./dependenciesAny/dependenciesGasConstant.generated.js":"CKEdf","./dependenciesAny/dependenciesGcd.generated.js":"4u1M9","./dependenciesAny/dependenciesGetMatrixDataType.generated.js":"UKWio","./dependenciesAny/dependenciesGravitationConstant.generated.js":"ghvP1","./dependenciesAny/dependenciesGravity.generated.js":"39kYV","./dependenciesAny/dependenciesHartreeEnergy.generated.js":"6AWLz","./dependenciesAny/dependenciesHasNumericValue.generated.js":"6zwXn","./dependenciesAny/dependenciesHelp.generated.js":"8QD6d","./dependenciesAny/dependenciesHelpClass.generated.js":"1Emjx","./dependenciesAny/dependenciesHex.generated.js":"5xQQK","./dependenciesAny/dependenciesHypot.generated.js":"5n593","./dependenciesAny/dependenciesI.generated.js":"2BUEq","./dependenciesAny/dependenciesIdentity.generated.js":"b189C","./dependenciesAny/dependenciesIm.generated.js":"b6Qo0","./dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js":"byKRV","./dependenciesAny/dependenciesIndex.generated.js":"2iz8R","./dependenciesAny/dependenciesIndexClass.generated.js":"kxuYR","./dependenciesAny/dependenciesIndexNode.generated.js":"402IA","./dependenciesAny/dependenciesIndexTransform.generated.js":"dXdfp","./dependenciesAny/dependenciesInfinity.generated.js":"2e6kw","./dependenciesAny/dependenciesIntersect.generated.js":"azZz5","./dependenciesAny/dependenciesInv.generated.js":"ikCOZ","./dependenciesAny/dependenciesInverseConductanceQuantum.generated.js":"kxvcR","./dependenciesAny/dependenciesIsInteger.generated.js":"hrdur","./dependenciesAny/dependenciesIsNaN.generated.js":"67c75","./dependenciesAny/dependenciesIsNegative.generated.js":"10Pj9","./dependenciesAny/dependenciesIsNumeric.generated.js":"548t6","./dependenciesAny/dependenciesIsPositive.generated.js":"8nw9o","./dependenciesAny/dependenciesIsPrime.generated.js":"8Y29j","./dependenciesAny/dependenciesIsZero.generated.js":"40RxJ","./dependenciesAny/dependenciesKldivergence.generated.js":"khIlw","./dependenciesAny/dependenciesKlitzing.generated.js":"3huxz","./dependenciesAny/dependenciesKron.generated.js":"1Azon","./dependenciesAny/dependenciesLN10.generated.js":"e8J6l","./dependenciesAny/dependenciesLN2.generated.js":"geEco","./dependenciesAny/dependenciesLOG10E.generated.js":"7MdsF","./dependenciesAny/dependenciesLOG2E.generated.js":"aonED","./dependenciesAny/dependenciesLarger.generated.js":"8woKJ","./dependenciesAny/dependenciesLargerEq.generated.js":"esvJ0","./dependenciesAny/dependenciesLcm.generated.js":"gpBM1","./dependenciesAny/dependenciesLeftShift.generated.js":"laeE1","./dependenciesAny/dependenciesLog.generated.js":"4uZZg","./dependenciesAny/dependenciesLog10.generated.js":"j1rTk","./dependenciesAny/dependenciesLog1p.generated.js":"34zyj","./dependenciesAny/dependenciesLog2.generated.js":"5Xy4O","./dependenciesAny/dependenciesLoschmidt.generated.js":"gio9h","./dependenciesAny/dependenciesLsolve.generated.js":"cKPxc","./dependenciesAny/dependenciesLsolveAll.generated.js":"efxQa","./dependenciesAny/dependenciesLup.generated.js":"ewfpR","./dependenciesAny/dependenciesLusolve.generated.js":"lqpN2","./dependenciesAny/dependenciesMad.generated.js":"4fDjN","./dependenciesAny/dependenciesMagneticConstant.generated.js":"ERlni","./dependenciesAny/dependenciesMagneticFluxQuantum.generated.js":"73SJ9","./dependenciesAny/dependenciesMap.generated.js":"dxF97","./dependenciesAny/dependenciesMapTransform.generated.js":"bhlbI","./dependenciesAny/dependenciesMatrix.generated.js":"4rxln","./dependenciesAny/dependenciesMatrixClass.generated.js":"7tRmY","./dependenciesAny/dependenciesMatrixFromColumns.generated.js":"hdk7X","./dependenciesAny/dependenciesMatrixFromFunction.generated.js":"1VMiU","./dependenciesAny/dependenciesMatrixFromRows.generated.js":"704UR","./dependenciesAny/dependenciesMax.generated.js":"c436u","./dependenciesAny/dependenciesMaxTransform.generated.js":"cu1ol","./dependenciesAny/dependenciesMean.generated.js":"6Oh8O","./dependenciesAny/dependenciesMeanTransform.generated.js":"ao2PD","./dependenciesAny/dependenciesMedian.generated.js":"fSmxw","./dependenciesAny/dependenciesMin.generated.js":"6KVAw","./dependenciesAny/dependenciesMinTransform.generated.js":"er9Cw","./dependenciesAny/dependenciesMod.generated.js":"fs7CI","./dependenciesAny/dependenciesMode.generated.js":"hcWcp","./dependenciesAny/dependenciesMolarMass.generated.js":"fjHTK","./dependenciesAny/dependenciesMolarMassC12.generated.js":"59jCV","./dependenciesAny/dependenciesMolarPlanckConstant.generated.js":"2JcDZ","./dependenciesAny/dependenciesMolarVolume.generated.js":"kQTll","./dependenciesAny/dependenciesMultinomial.generated.js":"dOxWd","./dependenciesAny/dependenciesMultiply.generated.js":"Jvfmb","./dependenciesAny/dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesAny/dependenciesNaN.generated.js":"4luXH","./dependenciesAny/dependenciesNeutronMass.generated.js":"7kt3p","./dependenciesAny/dependenciesNode.generated.js":"ixeAR","./dependenciesAny/dependenciesNorm.generated.js":"8f1vI","./dependenciesAny/dependenciesNot.generated.js":"bobsJ","./dependenciesAny/dependenciesNthRoot.generated.js":"6xEEJ","./dependenciesAny/dependenciesNthRoots.generated.js":"cYm7Z","./dependenciesAny/dependenciesNuclearMagneton.generated.js":"79MSx","./dependenciesAny/dependenciesNull.generated.js":"fk7D0","./dependenciesAny/dependenciesNumber.generated.js":"cyWvt","./dependenciesAny/dependenciesNumeric.generated.js":"lvmaZ","./dependenciesAny/dependenciesObjectNode.generated.js":"1ts77","./dependenciesAny/dependenciesOct.generated.js":"dEPkx","./dependenciesAny/dependenciesOnes.generated.js":"5SC8x","./dependenciesAny/dependenciesOperatorNode.generated.js":"it3bh","./dependenciesAny/dependenciesOr.generated.js":"gcEGz","./dependenciesAny/dependenciesParenthesisNode.generated.js":"lEX1B","./dependenciesAny/dependenciesParse.generated.js":"cjHgf","./dependenciesAny/dependenciesParser.generated.js":"iMJYp","./dependenciesAny/dependenciesParserClass.generated.js":"eZ6Bv","./dependenciesAny/dependenciesPartitionSelect.generated.js":"6zpsE","./dependenciesAny/dependenciesPermutations.generated.js":"5Vv7U","./dependenciesAny/dependenciesPhi.generated.js":"iQu4H","./dependenciesAny/dependenciesPi.generated.js":"2furj","./dependenciesAny/dependenciesPickRandom.generated.js":"70c7y","./dependenciesAny/dependenciesPlanckCharge.generated.js":"8iFL8","./dependenciesAny/dependenciesPlanckConstant.generated.js":"aDwD9","./dependenciesAny/dependenciesPlanckLength.generated.js":"aGcbI","./dependenciesAny/dependenciesPlanckMass.generated.js":"2u7LA","./dependenciesAny/dependenciesPlanckTemperature.generated.js":"6NIbA","./dependenciesAny/dependenciesPlanckTime.generated.js":"dSBRW","./dependenciesAny/dependenciesPow.generated.js":"af84U","./dependenciesAny/dependenciesPrint.generated.js":"7NAV3","./dependenciesAny/dependenciesProd.generated.js":"k0LFk","./dependenciesAny/dependenciesProtonMass.generated.js":"kB5P4","./dependenciesAny/dependenciesQr.generated.js":"6f0v5","./dependenciesAny/dependenciesQuantileSeq.generated.js":"81vqP","./dependenciesAny/dependenciesQuantumOfCirculation.generated.js":"2tCeC","./dependenciesAny/dependenciesRandom.generated.js":"PbZnq","./dependenciesAny/dependenciesRandomInt.generated.js":"ltdwI","./dependenciesAny/dependenciesRange.generated.js":"dWHiI","./dependenciesAny/dependenciesRangeClass.generated.js":"k0sWU","./dependenciesAny/dependenciesRangeNode.generated.js":"3aQ2b","./dependenciesAny/dependenciesRangeTransform.generated.js":"gTQm7","./dependenciesAny/dependenciesRationalize.generated.js":"goM95","./dependenciesAny/dependenciesRe.generated.js":"o5BIH","./dependenciesAny/dependenciesReducedPlanckConstant.generated.js":"lHo43","./dependenciesAny/dependenciesRelationalNode.generated.js":"jVX6H","./dependenciesAny/dependenciesReplacer.generated.js":"llQ5O","./dependenciesAny/dependenciesReshape.generated.js":"kYZ7o","./dependenciesAny/dependenciesResize.generated.js":"dYPNH","./dependenciesAny/dependenciesResultSet.generated.js":"ajJzG","./dependenciesAny/dependenciesReviver.generated.js":"5Pldw","./dependenciesAny/dependenciesRightArithShift.generated.js":"j5lq6","./dependenciesAny/dependenciesRightLogShift.generated.js":"5RIlk","./dependenciesAny/dependenciesRotate.generated.js":"lRyvo","./dependenciesAny/dependenciesRotationMatrix.generated.js":"dtsZO","./dependenciesAny/dependenciesRound.generated.js":"g7mMx","./dependenciesAny/dependenciesRow.generated.js":"eG4mn","./dependenciesAny/dependenciesRowTransform.generated.js":"hHGFK","./dependenciesAny/dependenciesRydberg.generated.js":"4iH0u","./dependenciesAny/dependenciesSQRT1_2.generated.js":"lAXsa","./dependenciesAny/dependenciesSQRT2.generated.js":"d4WRc","./dependenciesAny/dependenciesSackurTetrode.generated.js":"ltuL4","./dependenciesAny/dependenciesSec.generated.js":"01E1Y","./dependenciesAny/dependenciesSech.generated.js":"cgy6g","./dependenciesAny/dependenciesSecondRadiation.generated.js":"6simO","./dependenciesAny/dependenciesSetCartesian.generated.js":"831kB","./dependenciesAny/dependenciesSetDifference.generated.js":"2LALd","./dependenciesAny/dependenciesSetDistinct.generated.js":"cNogM","./dependenciesAny/dependenciesSetIntersect.generated.js":"gcC1H","./dependenciesAny/dependenciesSetIsSubset.generated.js":"3hZYC","./dependenciesAny/dependenciesSetMultiplicity.generated.js":"8b4qW","./dependenciesAny/dependenciesSetPowerset.generated.js":"ABoaT","./dependenciesAny/dependenciesSetSize.generated.js":"kmAmD","./dependenciesAny/dependenciesSetSymDifference.generated.js":"3Z0aV","./dependenciesAny/dependenciesSetUnion.generated.js":"6dGvR","./dependenciesAny/dependenciesSign.generated.js":"4ciB6","./dependenciesAny/dependenciesSimplify.generated.js":"gOMmu","./dependenciesAny/dependenciesSin.generated.js":"b9aA7","./dependenciesAny/dependenciesSinh.generated.js":"hvmLR","./dependenciesAny/dependenciesSize.generated.js":"eLnXM","./dependenciesAny/dependenciesSlu.generated.js":"3D1g2","./dependenciesAny/dependenciesSmaller.generated.js":"6Qoje","./dependenciesAny/dependenciesSmallerEq.generated.js":"7a63q","./dependenciesAny/dependenciesSort.generated.js":"aKKcC","./dependenciesAny/dependenciesSpaClass.generated.js":"9Eh5H","./dependenciesAny/dependenciesSparse.generated.js":"iv9L3","./dependenciesAny/dependenciesSparseMatrixClass.generated.js":"737h0","./dependenciesAny/dependenciesSpeedOfLight.generated.js":"d9PIc","./dependenciesAny/dependenciesSplitUnit.generated.js":"jb73h","./dependenciesAny/dependenciesSqrt.generated.js":"gNTi8","./dependenciesAny/dependenciesSqrtm.generated.js":"5xthX","./dependenciesAny/dependenciesSquare.generated.js":"hf05n","./dependenciesAny/dependenciesSqueeze.generated.js":"hfxvV","./dependenciesAny/dependenciesStd.generated.js":"1ZPDR","./dependenciesAny/dependenciesStdTransform.generated.js":"gLBrY","./dependenciesAny/dependenciesStefanBoltzmann.generated.js":"f0Wv3","./dependenciesAny/dependenciesStirlingS2.generated.js":"6oboV","./dependenciesAny/dependenciesString.generated.js":"eK1Z7","./dependenciesAny/dependenciesSubset.generated.js":"2Leii","./dependenciesAny/dependenciesSubsetTransform.generated.js":"hGDZp","./dependenciesAny/dependenciesSubtract.generated.js":"531Vr","./dependenciesAny/dependenciesSum.generated.js":"3POxQ","./dependenciesAny/dependenciesSumTransform.generated.js":"8BAUC","./dependenciesAny/dependenciesSymbolNode.generated.js":"ac2uv","./dependenciesAny/dependenciesTan.generated.js":"8kXX6","./dependenciesAny/dependenciesTanh.generated.js":"80EBR","./dependenciesAny/dependenciesTau.generated.js":"53vou","./dependenciesAny/dependenciesThomsonCrossSection.generated.js":"dRAfr","./dependenciesAny/dependenciesTo.generated.js":"1y5dO","./dependenciesAny/dependenciesTrace.generated.js":"689Fg","./dependenciesAny/dependenciesTranspose.generated.js":"f0PPA","./dependenciesAny/dependenciesTrue.generated.js":"g0Xbw","./dependenciesAny/dependenciesTypeOf.generated.js":"5v1r9","./dependenciesAny/dependenciesTyped.generated.js":"er9ks","./dependenciesAny/dependenciesUnaryMinus.generated.js":"kr3cQ","./dependenciesAny/dependenciesUnaryPlus.generated.js":"b2tm0","./dependenciesAny/dependenciesUnequal.generated.js":"h8OqD","./dependenciesAny/dependenciesUnitClass.generated.js":"eyfE4","./dependenciesAny/dependenciesUnitFunction.generated.js":"4YAGy","./dependenciesAny/dependenciesUppercaseE.generated.js":"dHehh","./dependenciesAny/dependenciesUppercasePi.generated.js":"bJ2nJ","./dependenciesAny/dependenciesUsolve.generated.js":"bjLlx","./dependenciesAny/dependenciesUsolveAll.generated.js":"iB7a8","./dependenciesAny/dependenciesVacuumImpedance.generated.js":"wYBJv","./dependenciesAny/dependenciesVariance.generated.js":"2gk4W","./dependenciesAny/dependenciesVarianceTransform.generated.js":"1D7hF","./dependenciesAny/dependenciesVersion.generated.js":"fZ7f6","./dependenciesAny/dependenciesWeakMixingAngle.generated.js":"aCIwE","./dependenciesAny/dependenciesWienDisplacement.generated.js":"lcNDJ","./dependenciesAny/dependenciesXgcd.generated.js":"ibfWt","./dependenciesAny/dependenciesXor.generated.js":"a5X1v","./dependenciesAny/dependenciesZeros.generated.js":"fMpFa","./allFactoriesAny.js":"3MWwk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hsFbf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "absDependencies", ()=>absDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var absDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAbs: _factoriesAnyJs.createAbs
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"er9ks":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typedDependencies", ()=>typedDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesFractionClassGeneratedJs = require("./dependenciesFractionClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var typedDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    FractionDependencies: _dependenciesFractionClassGeneratedJs.FractionDependencies,
    createTyped: _factoriesAnyJs.createTyped
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesFractionClass.generated.js":"5yj1G","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2NFhO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BigNumberDependencies", ()=>BigNumberDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var BigNumberDependencies = {
    createBigNumberClass: _factoriesAnyJs.createBigNumberClass
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ltHxT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ComplexDependencies", ()=>ComplexDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var ComplexDependencies = {
    createComplexClass: _factoriesAnyJs.createComplexClass
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"55PdN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DenseMatrixDependencies", ()=>DenseMatrixDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixClassGeneratedJs = require("./dependenciesMatrixClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var DenseMatrixDependencies = {
    MatrixDependencies: _dependenciesMatrixClassGeneratedJs.MatrixDependencies,
    createDenseMatrixClass: _factoriesAnyJs.createDenseMatrixClass
};

},{"./dependenciesMatrixClass.generated.js":"7tRmY","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7tRmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MatrixDependencies", ()=>MatrixDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var MatrixDependencies = {
    createMatrixClass: _factoriesAnyJs.createMatrixClass
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5yj1G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FractionDependencies", ()=>FractionDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var FractionDependencies = {
    createFractionClass: _factoriesAnyJs.createFractionClass
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gLBRt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AccessorNodeDependencies", ()=>AccessorNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var AccessorNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    createAccessorNode: _factoriesAnyJs.createAccessorNode
};

},{"./dependenciesNode.generated.js":"ixeAR","./dependenciesSubset.generated.js":"2Leii","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ixeAR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NodeDependencies", ()=>NodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var NodeDependencies = {
    createNode: _factoriesAnyJs.createNode
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2Leii":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subsetDependencies", ()=>subsetDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var subsetDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSubset: _factoriesAnyJs.createSubset
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4rxln":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matrixDependencies", ()=>matrixDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesMatrixClassGeneratedJs = require("./dependenciesMatrixClass.generated.js");
var _dependenciesSparseMatrixClassGeneratedJs = require("./dependenciesSparseMatrixClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var matrixDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    MatrixDependencies: _dependenciesMatrixClassGeneratedJs.MatrixDependencies,
    SparseMatrixDependencies: _dependenciesSparseMatrixClassGeneratedJs.SparseMatrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMatrix: _factoriesAnyJs.createMatrix
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesMatrixClass.generated.js":"7tRmY","./dependenciesSparseMatrixClass.generated.js":"737h0","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"737h0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SparseMatrixDependencies", ()=>SparseMatrixDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixClassGeneratedJs = require("./dependenciesMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var SparseMatrixDependencies = {
    MatrixDependencies: _dependenciesMatrixClassGeneratedJs.MatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSparseMatrixClass: _factoriesAnyJs.createSparseMatrixClass
};

},{"./dependenciesMatrixClass.generated.js":"7tRmY","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"knZCK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalScalarDependencies", ()=>equalScalarDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var equalScalarDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createEqualScalar: _factoriesAnyJs.createEqualScalar
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gYGYt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acosDependencies", ()=>acosDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var acosDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAcos: _factoriesAnyJs.createAcos
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8E5j1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acoshDependencies", ()=>acoshDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var acoshDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAcosh: _factoriesAnyJs.createAcosh
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eUThs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acotDependencies", ()=>acotDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var acotDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAcot: _factoriesAnyJs.createAcot
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bb6rr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acothDependencies", ()=>acothDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var acothDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAcoth: _factoriesAnyJs.createAcoth
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4d3kG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acscDependencies", ()=>acscDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var acscDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAcsc: _factoriesAnyJs.createAcsc
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kReYY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acschDependencies", ()=>acschDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var acschDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAcsch: _factoriesAnyJs.createAcsch
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4SXJy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addDependencies", ()=>addDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesSparseMatrixClassGeneratedJs = require("./dependenciesSparseMatrixClass.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var addDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    SparseMatrixDependencies: _dependenciesSparseMatrixClassGeneratedJs.SparseMatrixDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAdd: _factoriesAnyJs.createAdd
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesSparseMatrixClass.generated.js":"737h0","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dHHAK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addScalarDependencies", ()=>addScalarDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var addScalarDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAddScalar: _factoriesAnyJs.createAddScalar
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"brC1m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "andDependencies", ()=>andDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesNotGeneratedJs = require("./dependenciesNot.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesZerosGeneratedJs = require("./dependenciesZeros.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var andDependencies = {
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    notDependencies: _dependenciesNotGeneratedJs.notDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    zerosDependencies: _dependenciesZerosGeneratedJs.zerosDependencies,
    createAnd: _factoriesAnyJs.createAnd
};

},{"./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesNot.generated.js":"bobsJ","./dependenciesTyped.generated.js":"er9ks","./dependenciesZeros.generated.js":"fMpFa","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bobsJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "notDependencies", ()=>notDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var notDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createNot: _factoriesAnyJs.createNot
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fMpFa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zerosDependencies", ()=>zerosDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var zerosDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createZeros: _factoriesAnyJs.createZeros
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"85NY1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyDependencies", ()=>applyDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var applyDependencies = {
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createApply: _factoriesAnyJs.createApply
};

},{"./dependenciesIsInteger.generated.js":"hrdur","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hrdur":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isIntegerDependencies", ()=>isIntegerDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var isIntegerDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIsInteger: _factoriesAnyJs.createIsInteger
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ivOss":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyTransformDependencies", ()=>applyTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var applyTransformDependencies = {
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createApplyTransform: _factoriesAnyJs.createApplyTransform
};

},{"./dependenciesIsInteger.generated.js":"hrdur","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7b6q4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "argDependencies", ()=>argDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var argDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createArg: _factoriesAnyJs.createArg
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bq4RM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ArrayNodeDependencies", ()=>ArrayNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var ArrayNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    createArrayNode: _factoriesAnyJs.createArrayNode
};

},{"./dependenciesNode.generated.js":"ixeAR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a91bo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asecDependencies", ()=>asecDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var asecDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAsec: _factoriesAnyJs.createAsec
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"leRiu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asechDependencies", ()=>asechDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var asechDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAsech: _factoriesAnyJs.createAsech
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"74s4N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asinDependencies", ()=>asinDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var asinDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAsin: _factoriesAnyJs.createAsin
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9S5oC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asinhDependencies", ()=>asinhDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var asinhDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAsinh: _factoriesAnyJs.createAsinh
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lxQrb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AssignmentNodeDependencies", ()=>AssignmentNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var AssignmentNodeDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    createAssignmentNode: _factoriesAnyJs.createAssignmentNode
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesNode.generated.js":"ixeAR","./dependenciesSubset.generated.js":"2Leii","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g5vni":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atanDependencies", ()=>atanDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var atanDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAtan: _factoriesAnyJs.createAtan
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"apOCu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atan2Dependencies", ()=>atan2Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var atan2Dependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAtan2: _factoriesAnyJs.createAtan2
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8UAXO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atanhDependencies", ()=>atanhDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var atanhDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createAtanh: _factoriesAnyJs.createAtanh
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6ucnn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atomicMassDependencies", ()=>atomicMassDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var atomicMassDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createAtomicMass: _factoriesAnyJs.createAtomicMass
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eyfE4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnitDependencies", ()=>UnitDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesFractionClassGeneratedJs = require("./dependenciesFractionClass.generated.js");
var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualGeneratedJs = require("./dependenciesEqual.generated.js");
var _dependenciesFixGeneratedJs = require("./dependenciesFix.generated.js");
var _dependenciesFormatGeneratedJs = require("./dependenciesFormat.generated.js");
var _dependenciesIsNumericGeneratedJs = require("./dependenciesIsNumeric.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesNumberGeneratedJs = require("./dependenciesNumber.generated.js");
var _dependenciesPowGeneratedJs = require("./dependenciesPow.generated.js");
var _dependenciesRoundGeneratedJs = require("./dependenciesRound.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var UnitDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    FractionDependencies: _dependenciesFractionClassGeneratedJs.FractionDependencies,
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalDependencies: _dependenciesEqualGeneratedJs.equalDependencies,
    fixDependencies: _dependenciesFixGeneratedJs.fixDependencies,
    formatDependencies: _dependenciesFormatGeneratedJs.formatDependencies,
    isNumericDependencies: _dependenciesIsNumericGeneratedJs.isNumericDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    numberDependencies: _dependenciesNumberGeneratedJs.numberDependencies,
    powDependencies: _dependenciesPowGeneratedJs.powDependencies,
    roundDependencies: _dependenciesRoundGeneratedJs.roundDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    createUnitClass: _factoriesAnyJs.createUnitClass
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesFractionClass.generated.js":"5yj1G","./dependenciesAbs.generated.js":"hsFbf","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqual.generated.js":"6NP7z","./dependenciesFix.generated.js":"7KZRX","./dependenciesFormat.generated.js":"jRoQ8","./dependenciesIsNumeric.generated.js":"548t6","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesNumber.generated.js":"cyWvt","./dependenciesPow.generated.js":"af84U","./dependenciesRound.generated.js":"g7mMx","./dependenciesSubtract.generated.js":"531Vr","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8JTJ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divideScalarDependencies", ()=>divideScalarDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var divideScalarDependencies = {
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDivideScalar: _factoriesAnyJs.createDivideScalar
};

},{"./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lvmaZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numericDependencies", ()=>numericDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBignumberGeneratedJs = require("./dependenciesBignumber.generated.js");
var _dependenciesFractionGeneratedJs = require("./dependenciesFraction.generated.js");
var _dependenciesNumberGeneratedJs = require("./dependenciesNumber.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var numericDependencies = {
    bignumberDependencies: _dependenciesBignumberGeneratedJs.bignumberDependencies,
    fractionDependencies: _dependenciesFractionGeneratedJs.fractionDependencies,
    numberDependencies: _dependenciesNumberGeneratedJs.numberDependencies,
    createNumeric: _factoriesAnyJs.createNumeric
};

},{"./dependenciesBignumber.generated.js":"86lZk","./dependenciesFraction.generated.js":"ldLGf","./dependenciesNumber.generated.js":"cyWvt","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"86lZk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bignumberDependencies", ()=>bignumberDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var bignumberDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createBignumber: _factoriesAnyJs.createBignumber
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ldLGf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fractionDependencies", ()=>fractionDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesFractionClassGeneratedJs = require("./dependenciesFractionClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var fractionDependencies = {
    FractionDependencies: _dependenciesFractionClassGeneratedJs.FractionDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createFraction: _factoriesAnyJs.createFraction
};

},{"./dependenciesFractionClass.generated.js":"5yj1G","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cyWvt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numberDependencies", ()=>numberDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var numberDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createNumber: _factoriesAnyJs.createNumber
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6NP7z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalDependencies", ()=>equalDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var equalDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createEqual: _factoriesAnyJs.createEqual
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7KZRX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fixDependencies", ()=>fixDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesCeilGeneratedJs = require("./dependenciesCeil.generated.js");
var _dependenciesFloorGeneratedJs = require("./dependenciesFloor.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var fixDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    ceilDependencies: _dependenciesCeilGeneratedJs.ceilDependencies,
    floorDependencies: _dependenciesFloorGeneratedJs.floorDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createFix: _factoriesAnyJs.createFix
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesCeil.generated.js":"2GuF6","./dependenciesFloor.generated.js":"lTlof","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2GuF6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ceilDependencies", ()=>ceilDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesRoundGeneratedJs = require("./dependenciesRound.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var ceilDependencies = {
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    roundDependencies: _dependenciesRoundGeneratedJs.roundDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCeil: _factoriesAnyJs.createCeil
};

},{"./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesRound.generated.js":"g7mMx","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g7mMx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "roundDependencies", ()=>roundDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesZerosGeneratedJs = require("./dependenciesZeros.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var roundDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    zerosDependencies: _dependenciesZerosGeneratedJs.zerosDependencies,
    createRound: _factoriesAnyJs.createRound
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","./dependenciesZeros.generated.js":"fMpFa","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lTlof":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floorDependencies", ()=>floorDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesRoundGeneratedJs = require("./dependenciesRound.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var floorDependencies = {
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    roundDependencies: _dependenciesRoundGeneratedJs.roundDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createFloor: _factoriesAnyJs.createFloor
};

},{"./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesRound.generated.js":"g7mMx","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jRoQ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatDependencies", ()=>formatDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var formatDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createFormat: _factoriesAnyJs.createFormat
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"548t6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNumericDependencies", ()=>isNumericDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var isNumericDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIsNumeric: _factoriesAnyJs.createIsNumeric
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ZEOmC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multiplyScalarDependencies", ()=>multiplyScalarDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var multiplyScalarDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMultiplyScalar: _factoriesAnyJs.createMultiplyScalar
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"af84U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "powDependencies", ()=>powDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesFractionGeneratedJs = require("./dependenciesFraction.generated.js");
var _dependenciesIdentityGeneratedJs = require("./dependenciesIdentity.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesNumberGeneratedJs = require("./dependenciesNumber.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var powDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    fractionDependencies: _dependenciesFractionGeneratedJs.fractionDependencies,
    identityDependencies: _dependenciesIdentityGeneratedJs.identityDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    numberDependencies: _dependenciesNumberGeneratedJs.numberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createPow: _factoriesAnyJs.createPow
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesFraction.generated.js":"ldLGf","./dependenciesIdentity.generated.js":"b189C","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesNumber.generated.js":"cyWvt","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b189C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identityDependencies", ()=>identityDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesSparseMatrixClassGeneratedJs = require("./dependenciesSparseMatrixClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var identityDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    SparseMatrixDependencies: _dependenciesSparseMatrixClassGeneratedJs.SparseMatrixDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIdentity: _factoriesAnyJs.createIdentity
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesSparseMatrixClass.generated.js":"737h0","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"Jvfmb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multiplyDependencies", ()=>multiplyDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesDotGeneratedJs = require("./dependenciesDot.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var multiplyDependencies = {
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    dotDependencies: _dependenciesDotGeneratedJs.dotDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMultiply: _factoriesAnyJs.createMultiply
};

},{"./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesDot.generated.js":"1OCrr","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1OCrr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dotDependencies", ()=>dotDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesConjGeneratedJs = require("./dependenciesConj.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var dotDependencies = {
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    conjDependencies: _dependenciesConjGeneratedJs.conjDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDot: _factoriesAnyJs.createDot
};

},{"./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesConj.generated.js":"aXJbj","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSize.generated.js":"eLnXM","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aXJbj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conjDependencies", ()=>conjDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var conjDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createConj: _factoriesAnyJs.createConj
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eLnXM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sizeDependencies", ()=>sizeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sizeDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSize: _factoriesAnyJs.createSize
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"531Vr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subtractDependencies", ()=>subtractDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUnaryMinusGeneratedJs = require("./dependenciesUnaryMinus.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var subtractDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    unaryMinusDependencies: _dependenciesUnaryMinusGeneratedJs.unaryMinusDependencies,
    createSubtract: _factoriesAnyJs.createSubtract
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","./dependenciesUnaryMinus.generated.js":"kr3cQ","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kr3cQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unaryMinusDependencies", ()=>unaryMinusDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var unaryMinusDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createUnaryMinus: _factoriesAnyJs.createUnaryMinus
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fz0B3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avogadroDependencies", ()=>avogadroDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var avogadroDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createAvogadro: _factoriesAnyJs.createAvogadro
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5vNrY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bellNumbersDependencies", ()=>bellNumbersDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesIsNegativeGeneratedJs = require("./dependenciesIsNegative.generated.js");
var _dependenciesStirlingS2GeneratedJs = require("./dependenciesStirlingS2.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var bellNumbersDependencies = {
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    isNegativeDependencies: _dependenciesIsNegativeGeneratedJs.isNegativeDependencies,
    stirlingS2Dependencies: _dependenciesStirlingS2GeneratedJs.stirlingS2Dependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createBellNumbers: _factoriesAnyJs.createBellNumbers
};

},{"./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesIsInteger.generated.js":"hrdur","./dependenciesIsNegative.generated.js":"10Pj9","./dependenciesStirlingS2.generated.js":"6oboV","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"10Pj9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNegativeDependencies", ()=>isNegativeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var isNegativeDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIsNegative: _factoriesAnyJs.createIsNegative
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6oboV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stirlingS2Dependencies", ()=>stirlingS2Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesCombinationsGeneratedJs = require("./dependenciesCombinations.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesFactorialGeneratedJs = require("./dependenciesFactorial.generated.js");
var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesIsNegativeGeneratedJs = require("./dependenciesIsNegative.generated.js");
var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesPowGeneratedJs = require("./dependenciesPow.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var stirlingS2Dependencies = {
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    combinationsDependencies: _dependenciesCombinationsGeneratedJs.combinationsDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    factorialDependencies: _dependenciesFactorialGeneratedJs.factorialDependencies,
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    isNegativeDependencies: _dependenciesIsNegativeGeneratedJs.isNegativeDependencies,
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    powDependencies: _dependenciesPowGeneratedJs.powDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createStirlingS2: _factoriesAnyJs.createStirlingS2
};

},{"./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesCombinations.generated.js":"BUtH9","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesFactorial.generated.js":"96H03","./dependenciesIsInteger.generated.js":"hrdur","./dependenciesIsNegative.generated.js":"10Pj9","./dependenciesLarger.generated.js":"8woKJ","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesPow.generated.js":"af84U","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"BUtH9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "combinationsDependencies", ()=>combinationsDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var combinationsDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCombinations: _factoriesAnyJs.createCombinations
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"96H03":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "factorialDependencies", ()=>factorialDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesGammaGeneratedJs = require("./dependenciesGamma.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var factorialDependencies = {
    gammaDependencies: _dependenciesGammaGeneratedJs.gammaDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createFactorial: _factoriesAnyJs.createFactorial
};

},{"./dependenciesGamma.generated.js":"7ssrj","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7ssrj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gammaDependencies", ()=>gammaDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesPowGeneratedJs = require("./dependenciesPow.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var gammaDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    powDependencies: _dependenciesPowGeneratedJs.powDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createGamma: _factoriesAnyJs.createGamma
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesPow.generated.js":"af84U","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8woKJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "largerDependencies", ()=>largerDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var largerDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createLarger: _factoriesAnyJs.createLarger
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6TWOZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "binDependencies", ()=>binDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesFormatGeneratedJs = require("./dependenciesFormat.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var binDependencies = {
    formatDependencies: _dependenciesFormatGeneratedJs.formatDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createBin: _factoriesAnyJs.createBin
};

},{"./dependenciesFormat.generated.js":"jRoQ8","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cKzoD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitAndDependencies", ()=>bitAndDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var bitAndDependencies = {
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createBitAnd: _factoriesAnyJs.createBitAnd
};

},{"./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"76YYY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitNotDependencies", ()=>bitNotDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var bitNotDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createBitNot: _factoriesAnyJs.createBitNot
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"akjM5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitOrDependencies", ()=>bitOrDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var bitOrDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createBitOr: _factoriesAnyJs.createBitOr
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cE4X7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitXorDependencies", ()=>bitXorDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var bitXorDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createBitXor: _factoriesAnyJs.createBitXor
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"QP0i0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BlockNodeDependencies", ()=>BlockNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _dependenciesResultSetGeneratedJs = require("./dependenciesResultSet.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var BlockNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    ResultSetDependencies: _dependenciesResultSetGeneratedJs.ResultSetDependencies,
    createBlockNode: _factoriesAnyJs.createBlockNode
};

},{"./dependenciesNode.generated.js":"ixeAR","./dependenciesResultSet.generated.js":"ajJzG","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ajJzG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ResultSetDependencies", ()=>ResultSetDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var ResultSetDependencies = {
    createResultSet: _factoriesAnyJs.createResultSet
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dl0xP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bohrMagnetonDependencies", ()=>bohrMagnetonDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var bohrMagnetonDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createBohrMagneton: _factoriesAnyJs.createBohrMagneton
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6o9EJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bohrRadiusDependencies", ()=>bohrRadiusDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var bohrRadiusDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createBohrRadius: _factoriesAnyJs.createBohrRadius
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"78wJI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "boltzmannDependencies", ()=>boltzmannDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var boltzmannDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createBoltzmann: _factoriesAnyJs.createBoltzmann
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kdRBd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "booleanDependencies", ()=>booleanDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var booleanDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createBoolean: _factoriesAnyJs.createBoolean
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9KnPf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "catalanDependencies", ()=>catalanDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesCombinationsGeneratedJs = require("./dependenciesCombinations.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesIsNegativeGeneratedJs = require("./dependenciesIsNegative.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var catalanDependencies = {
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    combinationsDependencies: _dependenciesCombinationsGeneratedJs.combinationsDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    isNegativeDependencies: _dependenciesIsNegativeGeneratedJs.isNegativeDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCatalan: _factoriesAnyJs.createCatalan
};

},{"./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesCombinations.generated.js":"BUtH9","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesIsInteger.generated.js":"hrdur","./dependenciesIsNegative.generated.js":"10Pj9","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gkS4Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cbrtDependencies", ()=>cbrtDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesFractionClassGeneratedJs = require("./dependenciesFractionClass.generated.js");
var _dependenciesIsNegativeGeneratedJs = require("./dependenciesIsNegative.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUnaryMinusGeneratedJs = require("./dependenciesUnaryMinus.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var cbrtDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    FractionDependencies: _dependenciesFractionClassGeneratedJs.FractionDependencies,
    isNegativeDependencies: _dependenciesIsNegativeGeneratedJs.isNegativeDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    unaryMinusDependencies: _dependenciesUnaryMinusGeneratedJs.unaryMinusDependencies,
    createCbrt: _factoriesAnyJs.createCbrt
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesFractionClass.generated.js":"5yj1G","./dependenciesIsNegative.generated.js":"10Pj9","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","./dependenciesUnaryMinus.generated.js":"kr3cQ","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fESW2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "chainDependencies", ()=>chainDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesChainClassGeneratedJs = require("./dependenciesChainClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var chainDependencies = {
    ChainDependencies: _dependenciesChainClassGeneratedJs.ChainDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createChain: _factoriesAnyJs.createChain
};

},{"./dependenciesChainClass.generated.js":"kixe4","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kixe4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChainDependencies", ()=>ChainDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var ChainDependencies = {
    createChainClass: _factoriesAnyJs.createChainClass
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9eZpj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "classicalElectronRadiusDependencies", ()=>classicalElectronRadiusDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var classicalElectronRadiusDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createClassicalElectronRadius: _factoriesAnyJs.createClassicalElectronRadius
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"Fx8pi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cloneDependencies", ()=>cloneDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var cloneDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createClone: _factoriesAnyJs.createClone
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dXLVl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "columnDependencies", ()=>columnDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesRangeGeneratedJs = require("./dependenciesRange.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var columnDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    rangeDependencies: _dependenciesRangeGeneratedJs.rangeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createColumn: _factoriesAnyJs.createColumn
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesMatrix.generated.js":"4rxln","./dependenciesRange.generated.js":"dWHiI","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kxuYR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IndexDependencies", ()=>IndexDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesImmutableDenseMatrixClassGeneratedJs = require("./dependenciesImmutableDenseMatrixClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var IndexDependencies = {
    ImmutableDenseMatrixDependencies: _dependenciesImmutableDenseMatrixClassGeneratedJs.ImmutableDenseMatrixDependencies,
    createIndexClass: _factoriesAnyJs.createIndexClass
};

},{"./dependenciesImmutableDenseMatrixClass.generated.js":"byKRV","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"byKRV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImmutableDenseMatrixDependencies", ()=>ImmutableDenseMatrixDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var ImmutableDenseMatrixDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    createImmutableDenseMatrixClass: _factoriesAnyJs.createImmutableDenseMatrixClass
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesSmaller.generated.js":"6Qoje","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Qoje":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "smallerDependencies", ()=>smallerDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var smallerDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSmaller: _factoriesAnyJs.createSmaller
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dWHiI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rangeDependencies", ()=>rangeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBignumberGeneratedJs = require("./dependenciesBignumber.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesLargerEqGeneratedJs = require("./dependenciesLargerEq.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _dependenciesSmallerEqGeneratedJs = require("./dependenciesSmallerEq.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rangeDependencies = {
    bignumberDependencies: _dependenciesBignumberGeneratedJs.bignumberDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    largerEqDependencies: _dependenciesLargerEqGeneratedJs.largerEqDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    smallerEqDependencies: _dependenciesSmallerEqGeneratedJs.smallerEqDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createRange: _factoriesAnyJs.createRange
};

},{"./dependenciesBignumber.generated.js":"86lZk","./dependenciesMatrix.generated.js":"4rxln","./dependenciesLarger.generated.js":"8woKJ","./dependenciesLargerEq.generated.js":"esvJ0","./dependenciesSmaller.generated.js":"6Qoje","./dependenciesSmallerEq.generated.js":"7a63q","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"esvJ0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "largerEqDependencies", ()=>largerEqDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var largerEqDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createLargerEq: _factoriesAnyJs.createLargerEq
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7a63q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "smallerEqDependencies", ()=>smallerEqDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var smallerEqDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSmallerEq: _factoriesAnyJs.createSmallerEq
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1i4VL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "columnTransformDependencies", ()=>columnTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesRangeGeneratedJs = require("./dependenciesRange.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var columnTransformDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    rangeDependencies: _dependenciesRangeGeneratedJs.rangeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createColumnTransform: _factoriesAnyJs.createColumnTransform
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesMatrix.generated.js":"4rxln","./dependenciesRange.generated.js":"dWHiI","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4KqkW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "combinationsWithRepDependencies", ()=>combinationsWithRepDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var combinationsWithRepDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCombinationsWithRep: _factoriesAnyJs.createCombinationsWithRep
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fXl0j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareDependencies", ()=>compareDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesFractionClassGeneratedJs = require("./dependenciesFractionClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var compareDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    FractionDependencies: _dependenciesFractionClassGeneratedJs.FractionDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCompare: _factoriesAnyJs.createCompare
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesFractionClass.generated.js":"5yj1G","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kkjX7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareNaturalDependencies", ()=>compareNaturalDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesCompareGeneratedJs = require("./dependenciesCompare.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var compareNaturalDependencies = {
    compareDependencies: _dependenciesCompareGeneratedJs.compareDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCompareNatural: _factoriesAnyJs.createCompareNatural
};

},{"./dependenciesCompare.generated.js":"fXl0j","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cRYGT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareTextDependencies", ()=>compareTextDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var compareTextDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCompareText: _factoriesAnyJs.createCompareText
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dv4jK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compileDependencies", ()=>compileDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesParseGeneratedJs = require("./dependenciesParse.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var compileDependencies = {
    parseDependencies: _dependenciesParseGeneratedJs.parseDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCompile: _factoriesAnyJs.createCompile
};

},{"./dependenciesParse.generated.js":"cjHgf","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cjHgf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseDependencies", ()=>parseDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAccessorNodeGeneratedJs = require("./dependenciesAccessorNode.generated.js");
var _dependenciesArrayNodeGeneratedJs = require("./dependenciesArrayNode.generated.js");
var _dependenciesAssignmentNodeGeneratedJs = require("./dependenciesAssignmentNode.generated.js");
var _dependenciesBlockNodeGeneratedJs = require("./dependenciesBlockNode.generated.js");
var _dependenciesConditionalNodeGeneratedJs = require("./dependenciesConditionalNode.generated.js");
var _dependenciesConstantNodeGeneratedJs = require("./dependenciesConstantNode.generated.js");
var _dependenciesFunctionAssignmentNodeGeneratedJs = require("./dependenciesFunctionAssignmentNode.generated.js");
var _dependenciesFunctionNodeGeneratedJs = require("./dependenciesFunctionNode.generated.js");
var _dependenciesIndexNodeGeneratedJs = require("./dependenciesIndexNode.generated.js");
var _dependenciesObjectNodeGeneratedJs = require("./dependenciesObjectNode.generated.js");
var _dependenciesOperatorNodeGeneratedJs = require("./dependenciesOperatorNode.generated.js");
var _dependenciesParenthesisNodeGeneratedJs = require("./dependenciesParenthesisNode.generated.js");
var _dependenciesRangeNodeGeneratedJs = require("./dependenciesRangeNode.generated.js");
var _dependenciesRelationalNodeGeneratedJs = require("./dependenciesRelationalNode.generated.js");
var _dependenciesSymbolNodeGeneratedJs = require("./dependenciesSymbolNode.generated.js");
var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var parseDependencies = {
    AccessorNodeDependencies: _dependenciesAccessorNodeGeneratedJs.AccessorNodeDependencies,
    ArrayNodeDependencies: _dependenciesArrayNodeGeneratedJs.ArrayNodeDependencies,
    AssignmentNodeDependencies: _dependenciesAssignmentNodeGeneratedJs.AssignmentNodeDependencies,
    BlockNodeDependencies: _dependenciesBlockNodeGeneratedJs.BlockNodeDependencies,
    ConditionalNodeDependencies: _dependenciesConditionalNodeGeneratedJs.ConditionalNodeDependencies,
    ConstantNodeDependencies: _dependenciesConstantNodeGeneratedJs.ConstantNodeDependencies,
    FunctionAssignmentNodeDependencies: _dependenciesFunctionAssignmentNodeGeneratedJs.FunctionAssignmentNodeDependencies,
    FunctionNodeDependencies: _dependenciesFunctionNodeGeneratedJs.FunctionNodeDependencies,
    IndexNodeDependencies: _dependenciesIndexNodeGeneratedJs.IndexNodeDependencies,
    ObjectNodeDependencies: _dependenciesObjectNodeGeneratedJs.ObjectNodeDependencies,
    OperatorNodeDependencies: _dependenciesOperatorNodeGeneratedJs.OperatorNodeDependencies,
    ParenthesisNodeDependencies: _dependenciesParenthesisNodeGeneratedJs.ParenthesisNodeDependencies,
    RangeNodeDependencies: _dependenciesRangeNodeGeneratedJs.RangeNodeDependencies,
    RelationalNodeDependencies: _dependenciesRelationalNodeGeneratedJs.RelationalNodeDependencies,
    SymbolNodeDependencies: _dependenciesSymbolNodeGeneratedJs.SymbolNodeDependencies,
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createParse: _factoriesAnyJs.createParse
};

},{"./dependenciesAccessorNode.generated.js":"gLBRt","./dependenciesArrayNode.generated.js":"bq4RM","./dependenciesAssignmentNode.generated.js":"lxQrb","./dependenciesBlockNode.generated.js":"QP0i0","./dependenciesConditionalNode.generated.js":"bwUon","./dependenciesConstantNode.generated.js":"gnju0","./dependenciesFunctionAssignmentNode.generated.js":"6603M","./dependenciesFunctionNode.generated.js":"3dMKC","./dependenciesIndexNode.generated.js":"402IA","./dependenciesObjectNode.generated.js":"1ts77","./dependenciesOperatorNode.generated.js":"it3bh","./dependenciesParenthesisNode.generated.js":"lEX1B","./dependenciesRangeNode.generated.js":"3aQ2b","./dependenciesRelationalNode.generated.js":"jVX6H","./dependenciesSymbolNode.generated.js":"ac2uv","./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bwUon":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConditionalNodeDependencies", ()=>ConditionalNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var ConditionalNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    createConditionalNode: _factoriesAnyJs.createConditionalNode
};

},{"./dependenciesNode.generated.js":"ixeAR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gnju0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConstantNodeDependencies", ()=>ConstantNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var ConstantNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    createConstantNode: _factoriesAnyJs.createConstantNode
};

},{"./dependenciesNode.generated.js":"ixeAR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6603M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FunctionAssignmentNodeDependencies", ()=>FunctionAssignmentNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var FunctionAssignmentNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createFunctionAssignmentNode: _factoriesAnyJs.createFunctionAssignmentNode
};

},{"./dependenciesNode.generated.js":"ixeAR","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3dMKC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FunctionNodeDependencies", ()=>FunctionNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _dependenciesSymbolNodeGeneratedJs = require("./dependenciesSymbolNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var FunctionNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    SymbolNodeDependencies: _dependenciesSymbolNodeGeneratedJs.SymbolNodeDependencies,
    createFunctionNode: _factoriesAnyJs.createFunctionNode
};

},{"./dependenciesNode.generated.js":"ixeAR","./dependenciesSymbolNode.generated.js":"ac2uv","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ac2uv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SymbolNodeDependencies", ()=>SymbolNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var SymbolNodeDependencies = {
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    createSymbolNode: _factoriesAnyJs.createSymbolNode
};

},{"./dependenciesUnitClass.generated.js":"eyfE4","./dependenciesNode.generated.js":"ixeAR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"402IA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IndexNodeDependencies", ()=>IndexNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _dependenciesRangeClassGeneratedJs = require("./dependenciesRangeClass.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var IndexNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    RangeDependencies: _dependenciesRangeClassGeneratedJs.RangeDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    createIndexNode: _factoriesAnyJs.createIndexNode
};

},{"./dependenciesNode.generated.js":"ixeAR","./dependenciesRangeClass.generated.js":"k0sWU","./dependenciesSize.generated.js":"eLnXM","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k0sWU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RangeDependencies", ()=>RangeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var RangeDependencies = {
    createRangeClass: _factoriesAnyJs.createRangeClass
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1ts77":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObjectNodeDependencies", ()=>ObjectNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var ObjectNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    createObjectNode: _factoriesAnyJs.createObjectNode
};

},{"./dependenciesNode.generated.js":"ixeAR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"it3bh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OperatorNodeDependencies", ()=>OperatorNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var OperatorNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    createOperatorNode: _factoriesAnyJs.createOperatorNode
};

},{"./dependenciesNode.generated.js":"ixeAR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lEX1B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ParenthesisNodeDependencies", ()=>ParenthesisNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var ParenthesisNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    createParenthesisNode: _factoriesAnyJs.createParenthesisNode
};

},{"./dependenciesNode.generated.js":"ixeAR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3aQ2b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RangeNodeDependencies", ()=>RangeNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var RangeNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    createRangeNode: _factoriesAnyJs.createRangeNode
};

},{"./dependenciesNode.generated.js":"ixeAR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jVX6H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RelationalNodeDependencies", ()=>RelationalNodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNodeGeneratedJs = require("./dependenciesNode.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var RelationalNodeDependencies = {
    NodeDependencies: _dependenciesNodeGeneratedJs.NodeDependencies,
    createRelationalNode: _factoriesAnyJs.createRelationalNode
};

},{"./dependenciesNode.generated.js":"ixeAR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5d4Bc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "complexDependencies", ()=>complexDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var complexDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createComplex: _factoriesAnyJs.createComplex
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"azHfn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compositionDependencies", ()=>compositionDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesCombinationsGeneratedJs = require("./dependenciesCombinations.generated.js");
var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesIsNegativeGeneratedJs = require("./dependenciesIsNegative.generated.js");
var _dependenciesIsPositiveGeneratedJs = require("./dependenciesIsPositive.generated.js");
var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var compositionDependencies = {
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    combinationsDependencies: _dependenciesCombinationsGeneratedJs.combinationsDependencies,
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    isNegativeDependencies: _dependenciesIsNegativeGeneratedJs.isNegativeDependencies,
    isPositiveDependencies: _dependenciesIsPositiveGeneratedJs.isPositiveDependencies,
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createComposition: _factoriesAnyJs.createComposition
};

},{"./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesCombinations.generated.js":"BUtH9","./dependenciesIsInteger.generated.js":"hrdur","./dependenciesIsNegative.generated.js":"10Pj9","./dependenciesIsPositive.generated.js":"8nw9o","./dependenciesLarger.generated.js":"8woKJ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8nw9o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPositiveDependencies", ()=>isPositiveDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var isPositiveDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIsPositive: _factoriesAnyJs.createIsPositive
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dlGD2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concatDependencies", ()=>concatDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var concatDependencies = {
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createConcat: _factoriesAnyJs.createConcat
};

},{"./dependenciesIsInteger.generated.js":"hrdur","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3fNUn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concatTransformDependencies", ()=>concatTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var concatTransformDependencies = {
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createConcatTransform: _factoriesAnyJs.createConcatTransform
};

},{"./dependenciesIsInteger.generated.js":"hrdur","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c1w6R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conductanceQuantumDependencies", ()=>conductanceQuantumDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var conductanceQuantumDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createConductanceQuantum: _factoriesAnyJs.createConductanceQuantum
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3onA8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cosDependencies", ()=>cosDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var cosDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCos: _factoriesAnyJs.createCos
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"779pF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "coshDependencies", ()=>coshDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var coshDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCosh: _factoriesAnyJs.createCosh
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jbVBY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cotDependencies", ()=>cotDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var cotDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCot: _factoriesAnyJs.createCot
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kX7VQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cothDependencies", ()=>cothDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var cothDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCoth: _factoriesAnyJs.createCoth
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9c8ui":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "coulombDependencies", ()=>coulombDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var coulombDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createCoulomb: _factoriesAnyJs.createCoulomb
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cmbR8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "countDependencies", ()=>countDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesProdGeneratedJs = require("./dependenciesProd.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var countDependencies = {
    prodDependencies: _dependenciesProdGeneratedJs.prodDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCount: _factoriesAnyJs.createCount
};

},{"./dependenciesProd.generated.js":"k0LFk","./dependenciesSize.generated.js":"eLnXM","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k0LFk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prodDependencies", ()=>prodDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var prodDependencies = {
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createProd: _factoriesAnyJs.createProd
};

},{"./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3blbW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnitDependencies", ()=>createUnitDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var createUnitDependencies = {
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCreateUnit: _factoriesAnyJs.createCreateUnit
};

},{"./dependenciesUnitClass.generated.js":"eyfE4","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aa0Vd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "crossDependencies", ()=>crossDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var crossDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCross: _factoriesAnyJs.createCross
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"crgiz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cscDependencies", ()=>cscDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var cscDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCsc: _factoriesAnyJs.createCsc
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hx88I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cschDependencies", ()=>cschDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var cschDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCsch: _factoriesAnyJs.createCsch
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1SxQI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ctransposeDependencies", ()=>ctransposeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesConjGeneratedJs = require("./dependenciesConj.generated.js");
var _dependenciesTransposeGeneratedJs = require("./dependenciesTranspose.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var ctransposeDependencies = {
    conjDependencies: _dependenciesConjGeneratedJs.conjDependencies,
    transposeDependencies: _dependenciesTransposeGeneratedJs.transposeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCtranspose: _factoriesAnyJs.createCtranspose
};

},{"./dependenciesConj.generated.js":"aXJbj","./dependenciesTranspose.generated.js":"f0PPA","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"f0PPA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transposeDependencies", ()=>transposeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var transposeDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createTranspose: _factoriesAnyJs.createTranspose
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a5W6U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubeDependencies", ()=>cubeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var cubeDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createCube: _factoriesAnyJs.createCube
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dkAmJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deepEqualDependencies", ()=>deepEqualDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesEqualGeneratedJs = require("./dependenciesEqual.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var deepEqualDependencies = {
    equalDependencies: _dependenciesEqualGeneratedJs.equalDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDeepEqual: _factoriesAnyJs.createDeepEqual
};

},{"./dependenciesEqual.generated.js":"6NP7z","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"16IN6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "derivativeDependencies", ()=>derivativeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesConstantNodeGeneratedJs = require("./dependenciesConstantNode.generated.js");
var _dependenciesFunctionNodeGeneratedJs = require("./dependenciesFunctionNode.generated.js");
var _dependenciesOperatorNodeGeneratedJs = require("./dependenciesOperatorNode.generated.js");
var _dependenciesParenthesisNodeGeneratedJs = require("./dependenciesParenthesisNode.generated.js");
var _dependenciesSymbolNodeGeneratedJs = require("./dependenciesSymbolNode.generated.js");
var _dependenciesEqualGeneratedJs = require("./dependenciesEqual.generated.js");
var _dependenciesIsZeroGeneratedJs = require("./dependenciesIsZero.generated.js");
var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesParseGeneratedJs = require("./dependenciesParse.generated.js");
var _dependenciesSimplifyGeneratedJs = require("./dependenciesSimplify.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var derivativeDependencies = {
    ConstantNodeDependencies: _dependenciesConstantNodeGeneratedJs.ConstantNodeDependencies,
    FunctionNodeDependencies: _dependenciesFunctionNodeGeneratedJs.FunctionNodeDependencies,
    OperatorNodeDependencies: _dependenciesOperatorNodeGeneratedJs.OperatorNodeDependencies,
    ParenthesisNodeDependencies: _dependenciesParenthesisNodeGeneratedJs.ParenthesisNodeDependencies,
    SymbolNodeDependencies: _dependenciesSymbolNodeGeneratedJs.SymbolNodeDependencies,
    equalDependencies: _dependenciesEqualGeneratedJs.equalDependencies,
    isZeroDependencies: _dependenciesIsZeroGeneratedJs.isZeroDependencies,
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    parseDependencies: _dependenciesParseGeneratedJs.parseDependencies,
    simplifyDependencies: _dependenciesSimplifyGeneratedJs.simplifyDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDerivative: _factoriesAnyJs.createDerivative
};

},{"./dependenciesConstantNode.generated.js":"gnju0","./dependenciesFunctionNode.generated.js":"3dMKC","./dependenciesOperatorNode.generated.js":"it3bh","./dependenciesParenthesisNode.generated.js":"lEX1B","./dependenciesSymbolNode.generated.js":"ac2uv","./dependenciesEqual.generated.js":"6NP7z","./dependenciesIsZero.generated.js":"40RxJ","./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesParse.generated.js":"cjHgf","./dependenciesSimplify.generated.js":"gOMmu","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"40RxJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isZeroDependencies", ()=>isZeroDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var isZeroDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIsZero: _factoriesAnyJs.createIsZero
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gOMmu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "simplifyDependencies", ()=>simplifyDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBignumberGeneratedJs = require("./dependenciesBignumber.generated.js");
var _dependenciesFractionGeneratedJs = require("./dependenciesFraction.generated.js");
var _dependenciesConstantNodeGeneratedJs = require("./dependenciesConstantNode.generated.js");
var _dependenciesFunctionNodeGeneratedJs = require("./dependenciesFunctionNode.generated.js");
var _dependenciesOperatorNodeGeneratedJs = require("./dependenciesOperatorNode.generated.js");
var _dependenciesParenthesisNodeGeneratedJs = require("./dependenciesParenthesisNode.generated.js");
var _dependenciesSymbolNodeGeneratedJs = require("./dependenciesSymbolNode.generated.js");
var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesDivideGeneratedJs = require("./dependenciesDivide.generated.js");
var _dependenciesEqualGeneratedJs = require("./dependenciesEqual.generated.js");
var _dependenciesIsZeroGeneratedJs = require("./dependenciesIsZero.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesParseGeneratedJs = require("./dependenciesParse.generated.js");
var _dependenciesPowGeneratedJs = require("./dependenciesPow.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var simplifyDependencies = {
    bignumberDependencies: _dependenciesBignumberGeneratedJs.bignumberDependencies,
    fractionDependencies: _dependenciesFractionGeneratedJs.fractionDependencies,
    ConstantNodeDependencies: _dependenciesConstantNodeGeneratedJs.ConstantNodeDependencies,
    FunctionNodeDependencies: _dependenciesFunctionNodeGeneratedJs.FunctionNodeDependencies,
    OperatorNodeDependencies: _dependenciesOperatorNodeGeneratedJs.OperatorNodeDependencies,
    ParenthesisNodeDependencies: _dependenciesParenthesisNodeGeneratedJs.ParenthesisNodeDependencies,
    SymbolNodeDependencies: _dependenciesSymbolNodeGeneratedJs.SymbolNodeDependencies,
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    divideDependencies: _dependenciesDivideGeneratedJs.divideDependencies,
    equalDependencies: _dependenciesEqualGeneratedJs.equalDependencies,
    isZeroDependencies: _dependenciesIsZeroGeneratedJs.isZeroDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    parseDependencies: _dependenciesParseGeneratedJs.parseDependencies,
    powDependencies: _dependenciesPowGeneratedJs.powDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSimplify: _factoriesAnyJs.createSimplify
};

},{"./dependenciesBignumber.generated.js":"86lZk","./dependenciesFraction.generated.js":"ldLGf","./dependenciesConstantNode.generated.js":"gnju0","./dependenciesFunctionNode.generated.js":"3dMKC","./dependenciesOperatorNode.generated.js":"it3bh","./dependenciesParenthesisNode.generated.js":"lEX1B","./dependenciesSymbolNode.generated.js":"ac2uv","./dependenciesAdd.generated.js":"4SXJy","./dependenciesDivide.generated.js":"2obV7","./dependenciesEqual.generated.js":"6NP7z","./dependenciesIsZero.generated.js":"40RxJ","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesParse.generated.js":"cjHgf","./dependenciesPow.generated.js":"af84U","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2obV7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divideDependencies", ()=>divideDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesInvGeneratedJs = require("./dependenciesInv.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var divideDependencies = {
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    invDependencies: _dependenciesInvGeneratedJs.invDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDivide: _factoriesAnyJs.createDivide
};

},{"./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesInv.generated.js":"ikCOZ","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ikCOZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invDependencies", ()=>invDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesDetGeneratedJs = require("./dependenciesDet.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesIdentityGeneratedJs = require("./dependenciesIdentity.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUnaryMinusGeneratedJs = require("./dependenciesUnaryMinus.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var invDependencies = {
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    detDependencies: _dependenciesDetGeneratedJs.detDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    identityDependencies: _dependenciesIdentityGeneratedJs.identityDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    unaryMinusDependencies: _dependenciesUnaryMinusGeneratedJs.unaryMinusDependencies,
    createInv: _factoriesAnyJs.createInv
};

},{"./dependenciesAbs.generated.js":"hsFbf","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesDet.generated.js":"a5f1B","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesIdentity.generated.js":"b189C","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesTyped.generated.js":"er9ks","./dependenciesUnaryMinus.generated.js":"kr3cQ","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a5f1B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "detDependencies", ()=>detDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesLupGeneratedJs = require("./dependenciesLup.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUnaryMinusGeneratedJs = require("./dependenciesUnaryMinus.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var detDependencies = {
    lupDependencies: _dependenciesLupGeneratedJs.lupDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    unaryMinusDependencies: _dependenciesUnaryMinusGeneratedJs.unaryMinusDependencies,
    createDet: _factoriesAnyJs.createDet
};

},{"./dependenciesLup.generated.js":"ewfpR","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","./dependenciesUnaryMinus.generated.js":"kr3cQ","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ewfpR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lupDependencies", ()=>lupDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesSpaClassGeneratedJs = require("./dependenciesSpaClass.generated.js");
var _dependenciesSparseMatrixClassGeneratedJs = require("./dependenciesSparseMatrixClass.generated.js");
var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUnaryMinusGeneratedJs = require("./dependenciesUnaryMinus.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var lupDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    SpaDependencies: _dependenciesSpaClassGeneratedJs.SpaDependencies,
    SparseMatrixDependencies: _dependenciesSparseMatrixClassGeneratedJs.SparseMatrixDependencies,
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    unaryMinusDependencies: _dependenciesUnaryMinusGeneratedJs.unaryMinusDependencies,
    createLup: _factoriesAnyJs.createLup
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesSpaClass.generated.js":"9Eh5H","./dependenciesSparseMatrixClass.generated.js":"737h0","./dependenciesAbs.generated.js":"hsFbf","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesLarger.generated.js":"8woKJ","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","./dependenciesUnaryMinus.generated.js":"kr3cQ","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9Eh5H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SpaDependencies", ()=>SpaDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesFibonacciHeapClassGeneratedJs = require("./dependenciesFibonacciHeapClass.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var SpaDependencies = {
    FibonacciHeapDependencies: _dependenciesFibonacciHeapClassGeneratedJs.FibonacciHeapDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    createSpaClass: _factoriesAnyJs.createSpaClass
};

},{"./dependenciesFibonacciHeapClass.generated.js":"8rcEh","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesEqualScalar.generated.js":"knZCK","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8rcEh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FibonacciHeapDependencies", ()=>FibonacciHeapDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var FibonacciHeapDependencies = {
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    createFibonacciHeapClass: _factoriesAnyJs.createFibonacciHeapClass
};

},{"./dependenciesLarger.generated.js":"8woKJ","./dependenciesSmaller.generated.js":"6Qoje","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eeEjN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deuteronMassDependencies", ()=>deuteronMassDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var deuteronMassDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createDeuteronMass: _factoriesAnyJs.createDeuteronMass
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"deSgl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diagDependencies", ()=>diagDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesSparseMatrixClassGeneratedJs = require("./dependenciesSparseMatrixClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var diagDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    SparseMatrixDependencies: _dependenciesSparseMatrixClassGeneratedJs.SparseMatrixDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDiag: _factoriesAnyJs.createDiag
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesSparseMatrixClass.generated.js":"737h0","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fryC6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diffDependencies", ()=>diffDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesNumberGeneratedJs = require("./dependenciesNumber.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var diffDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    numberDependencies: _dependenciesNumberGeneratedJs.numberDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDiff: _factoriesAnyJs.createDiff
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesNumber.generated.js":"cyWvt","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gc8je":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diffTransformDependencies", ()=>diffTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBignumberGeneratedJs = require("./dependenciesBignumber.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesNumberGeneratedJs = require("./dependenciesNumber.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var diffTransformDependencies = {
    bignumberDependencies: _dependenciesBignumberGeneratedJs.bignumberDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    numberDependencies: _dependenciesNumberGeneratedJs.numberDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDiffTransform: _factoriesAnyJs.createDiffTransform
};

},{"./dependenciesBignumber.generated.js":"86lZk","./dependenciesMatrix.generated.js":"4rxln","./dependenciesNumber.generated.js":"cyWvt","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8J4CQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceDependencies", ()=>distanceDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSqrtGeneratedJs = require("./dependenciesSqrt.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUnaryMinusGeneratedJs = require("./dependenciesUnaryMinus.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var distanceDependencies = {
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    sqrtDependencies: _dependenciesSqrtGeneratedJs.sqrtDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    unaryMinusDependencies: _dependenciesUnaryMinusGeneratedJs.unaryMinusDependencies,
    createDistance: _factoriesAnyJs.createDistance
};

},{"./dependenciesAbs.generated.js":"hsFbf","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSqrt.generated.js":"gNTi8","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","./dependenciesUnaryMinus.generated.js":"kr3cQ","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gNTi8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sqrtDependencies", ()=>sqrtDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sqrtDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSqrt: _factoriesAnyJs.createSqrt
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"h4cGC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dotDivideDependencies", ()=>dotDivideDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var dotDivideDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDotDivide: _factoriesAnyJs.createDotDivide
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kEq0c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dotMultiplyDependencies", ()=>dotMultiplyDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var dotMultiplyDependencies = {
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDotMultiply: _factoriesAnyJs.createDotMultiply
};

},{"./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3gNDx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dotPowDependencies", ()=>dotPowDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesPowGeneratedJs = require("./dependenciesPow.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var dotPowDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    powDependencies: _dependenciesPowGeneratedJs.powDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createDotPow: _factoriesAnyJs.createDotPow
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesPow.generated.js":"af84U","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4AN4k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eDependencies", ()=>eDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var eDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createE: _factoriesAnyJs.createE
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gXYth":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "efimovFactorDependencies", ()=>efimovFactorDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var efimovFactorDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createEfimovFactor: _factoriesAnyJs.createEfimovFactor
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ZLWZF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eigsDependencies", ()=>eigsDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesAtanGeneratedJs = require("./dependenciesAtan.generated.js");
var _dependenciesBignumberGeneratedJs = require("./dependenciesBignumber.generated.js");
var _dependenciesColumnGeneratedJs = require("./dependenciesColumn.generated.js");
var _dependenciesComplexGeneratedJs = require("./dependenciesComplex.generated.js");
var _dependenciesCosGeneratedJs = require("./dependenciesCos.generated.js");
var _dependenciesDiagGeneratedJs = require("./dependenciesDiag.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesDotGeneratedJs = require("./dependenciesDot.generated.js");
var _dependenciesEqualGeneratedJs = require("./dependenciesEqual.generated.js");
var _dependenciesFlattenGeneratedJs = require("./dependenciesFlatten.generated.js");
var _dependenciesImGeneratedJs = require("./dependenciesIm.generated.js");
var _dependenciesInvGeneratedJs = require("./dependenciesInv.generated.js");
var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMatrixFromColumnsGeneratedJs = require("./dependenciesMatrixFromColumns.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesNumberGeneratedJs = require("./dependenciesNumber.generated.js");
var _dependenciesQrGeneratedJs = require("./dependenciesQr.generated.js");
var _dependenciesReGeneratedJs = require("./dependenciesRe.generated.js");
var _dependenciesSinGeneratedJs = require("./dependenciesSin.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _dependenciesSqrtGeneratedJs = require("./dependenciesSqrt.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUsolveGeneratedJs = require("./dependenciesUsolve.generated.js");
var _dependenciesUsolveAllGeneratedJs = require("./dependenciesUsolveAll.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var eigsDependencies = {
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    atanDependencies: _dependenciesAtanGeneratedJs.atanDependencies,
    bignumberDependencies: _dependenciesBignumberGeneratedJs.bignumberDependencies,
    columnDependencies: _dependenciesColumnGeneratedJs.columnDependencies,
    complexDependencies: _dependenciesComplexGeneratedJs.complexDependencies,
    cosDependencies: _dependenciesCosGeneratedJs.cosDependencies,
    diagDependencies: _dependenciesDiagGeneratedJs.diagDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    dotDependencies: _dependenciesDotGeneratedJs.dotDependencies,
    equalDependencies: _dependenciesEqualGeneratedJs.equalDependencies,
    flattenDependencies: _dependenciesFlattenGeneratedJs.flattenDependencies,
    imDependencies: _dependenciesImGeneratedJs.imDependencies,
    invDependencies: _dependenciesInvGeneratedJs.invDependencies,
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    matrixFromColumnsDependencies: _dependenciesMatrixFromColumnsGeneratedJs.matrixFromColumnsDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    numberDependencies: _dependenciesNumberGeneratedJs.numberDependencies,
    qrDependencies: _dependenciesQrGeneratedJs.qrDependencies,
    reDependencies: _dependenciesReGeneratedJs.reDependencies,
    sinDependencies: _dependenciesSinGeneratedJs.sinDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    sqrtDependencies: _dependenciesSqrtGeneratedJs.sqrtDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    usolveDependencies: _dependenciesUsolveGeneratedJs.usolveDependencies,
    usolveAllDependencies: _dependenciesUsolveAllGeneratedJs.usolveAllDependencies,
    createEigs: _factoriesAnyJs.createEigs
};

},{"./dependenciesAbs.generated.js":"hsFbf","./dependenciesAdd.generated.js":"4SXJy","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesAtan.generated.js":"g5vni","./dependenciesBignumber.generated.js":"86lZk","./dependenciesColumn.generated.js":"dXLVl","./dependenciesComplex.generated.js":"5d4Bc","./dependenciesCos.generated.js":"3onA8","./dependenciesDiag.generated.js":"deSgl","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesDot.generated.js":"1OCrr","./dependenciesEqual.generated.js":"6NP7z","./dependenciesFlatten.generated.js":"1K1mT","./dependenciesIm.generated.js":"b6Qo0","./dependenciesInv.generated.js":"ikCOZ","./dependenciesLarger.generated.js":"8woKJ","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMatrixFromColumns.generated.js":"hdk7X","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesNumber.generated.js":"cyWvt","./dependenciesQr.generated.js":"6f0v5","./dependenciesRe.generated.js":"o5BIH","./dependenciesSin.generated.js":"b9aA7","./dependenciesSmaller.generated.js":"6Qoje","./dependenciesSqrt.generated.js":"gNTi8","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","./dependenciesUsolve.generated.js":"bjLlx","./dependenciesUsolveAll.generated.js":"iB7a8","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1K1mT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flattenDependencies", ()=>flattenDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var flattenDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createFlatten: _factoriesAnyJs.createFlatten
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b6Qo0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "imDependencies", ()=>imDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var imDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIm: _factoriesAnyJs.createIm
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hdk7X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matrixFromColumnsDependencies", ()=>matrixFromColumnsDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesFlattenGeneratedJs = require("./dependenciesFlatten.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var matrixFromColumnsDependencies = {
    flattenDependencies: _dependenciesFlattenGeneratedJs.flattenDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMatrixFromColumns: _factoriesAnyJs.createMatrixFromColumns
};

},{"./dependenciesFlatten.generated.js":"1K1mT","./dependenciesMatrix.generated.js":"4rxln","./dependenciesSize.generated.js":"eLnXM","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6f0v5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "qrDependencies", ()=>qrDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesComplexGeneratedJs = require("./dependenciesComplex.generated.js");
var _dependenciesConjGeneratedJs = require("./dependenciesConj.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualGeneratedJs = require("./dependenciesEqual.generated.js");
var _dependenciesIdentityGeneratedJs = require("./dependenciesIdentity.generated.js");
var _dependenciesIsZeroGeneratedJs = require("./dependenciesIsZero.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSignGeneratedJs = require("./dependenciesSign.generated.js");
var _dependenciesSqrtGeneratedJs = require("./dependenciesSqrt.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUnaryMinusGeneratedJs = require("./dependenciesUnaryMinus.generated.js");
var _dependenciesZerosGeneratedJs = require("./dependenciesZeros.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var qrDependencies = {
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    complexDependencies: _dependenciesComplexGeneratedJs.complexDependencies,
    conjDependencies: _dependenciesConjGeneratedJs.conjDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalDependencies: _dependenciesEqualGeneratedJs.equalDependencies,
    identityDependencies: _dependenciesIdentityGeneratedJs.identityDependencies,
    isZeroDependencies: _dependenciesIsZeroGeneratedJs.isZeroDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    signDependencies: _dependenciesSignGeneratedJs.signDependencies,
    sqrtDependencies: _dependenciesSqrtGeneratedJs.sqrtDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    unaryMinusDependencies: _dependenciesUnaryMinusGeneratedJs.unaryMinusDependencies,
    zerosDependencies: _dependenciesZerosGeneratedJs.zerosDependencies,
    createQr: _factoriesAnyJs.createQr
};

},{"./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesComplex.generated.js":"5d4Bc","./dependenciesConj.generated.js":"aXJbj","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqual.generated.js":"6NP7z","./dependenciesIdentity.generated.js":"b189C","./dependenciesIsZero.generated.js":"40RxJ","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSign.generated.js":"4ciB6","./dependenciesSqrt.generated.js":"gNTi8","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","./dependenciesUnaryMinus.generated.js":"kr3cQ","./dependenciesZeros.generated.js":"fMpFa","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4ciB6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signDependencies", ()=>signDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesFractionClassGeneratedJs = require("./dependenciesFractionClass.generated.js");
var _dependenciesComplexGeneratedJs = require("./dependenciesComplex.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var signDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    FractionDependencies: _dependenciesFractionClassGeneratedJs.FractionDependencies,
    complexDependencies: _dependenciesComplexGeneratedJs.complexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSign: _factoriesAnyJs.createSign
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesFractionClass.generated.js":"5yj1G","./dependenciesComplex.generated.js":"5d4Bc","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"o5BIH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reDependencies", ()=>reDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var reDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createRe: _factoriesAnyJs.createRe
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b9aA7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sinDependencies", ()=>sinDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sinDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSin: _factoriesAnyJs.createSin
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bjLlx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usolveDependencies", ()=>usolveDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var usolveDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createUsolve: _factoriesAnyJs.createUsolve
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iB7a8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "usolveAllDependencies", ()=>usolveAllDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var usolveAllDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createUsolveAll: _factoriesAnyJs.createUsolveAll
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3kVx3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "electricConstantDependencies", ()=>electricConstantDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var electricConstantDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createElectricConstant: _factoriesAnyJs.createElectricConstant
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fSLcn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "electronMassDependencies", ()=>electronMassDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var electronMassDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createElectronMass: _factoriesAnyJs.createElectronMass
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gx8ml":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "elementaryChargeDependencies", ()=>elementaryChargeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var elementaryChargeDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createElementaryCharge: _factoriesAnyJs.createElementaryCharge
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c5Rd6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalTextDependencies", ()=>equalTextDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesCompareTextGeneratedJs = require("./dependenciesCompareText.generated.js");
var _dependenciesIsZeroGeneratedJs = require("./dependenciesIsZero.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var equalTextDependencies = {
    compareTextDependencies: _dependenciesCompareTextGeneratedJs.compareTextDependencies,
    isZeroDependencies: _dependenciesIsZeroGeneratedJs.isZeroDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createEqualText: _factoriesAnyJs.createEqualText
};

},{"./dependenciesCompareText.generated.js":"cRYGT","./dependenciesIsZero.generated.js":"40RxJ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lEU32":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "erfDependencies", ()=>erfDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var erfDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createErf: _factoriesAnyJs.createErf
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2OgIy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateDependencies", ()=>evaluateDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesParseGeneratedJs = require("./dependenciesParse.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var evaluateDependencies = {
    parseDependencies: _dependenciesParseGeneratedJs.parseDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createEvaluate: _factoriesAnyJs.createEvaluate
};

},{"./dependenciesParse.generated.js":"cjHgf","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4zmsB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expDependencies", ()=>expDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var expDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createExp: _factoriesAnyJs.createExp
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"03ivA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expmDependencies", ()=>expmDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesIdentityGeneratedJs = require("./dependenciesIdentity.generated.js");
var _dependenciesInvGeneratedJs = require("./dependenciesInv.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var expmDependencies = {
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    identityDependencies: _dependenciesIdentityGeneratedJs.identityDependencies,
    invDependencies: _dependenciesInvGeneratedJs.invDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createExpm: _factoriesAnyJs.createExpm
};

},{"./dependenciesAbs.generated.js":"hsFbf","./dependenciesAdd.generated.js":"4SXJy","./dependenciesIdentity.generated.js":"b189C","./dependenciesInv.generated.js":"ikCOZ","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lWdbb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expm1Dependencies", ()=>expm1Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var expm1Dependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createExpm1: _factoriesAnyJs.createExpm1
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5VPHZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "falseDependencies", ()=>falseDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var falseDependencies = {
    createFalse: _factoriesAnyJs.createFalse
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Tnji":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "faradayDependencies", ()=>faradayDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var faradayDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createFaraday: _factoriesAnyJs.createFaraday
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"59msd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fermiCouplingDependencies", ()=>fermiCouplingDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var fermiCouplingDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createFermiCoupling: _factoriesAnyJs.createFermiCoupling
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jPSwi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterDependencies", ()=>filterDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var filterDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createFilter: _factoriesAnyJs.createFilter
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dkYQv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterTransformDependencies", ()=>filterTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var filterTransformDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createFilterTransform: _factoriesAnyJs.createFilterTransform
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fesrA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fineStructureDependencies", ()=>fineStructureDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var fineStructureDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createFineStructure: _factoriesAnyJs.createFineStructure
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5Zkes":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "firstRadiationDependencies", ()=>firstRadiationDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var firstRadiationDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createFirstRadiation: _factoriesAnyJs.createFirstRadiation
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3XYHd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "forEachDependencies", ()=>forEachDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var forEachDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createForEach: _factoriesAnyJs.createForEach
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3EDgA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "forEachTransformDependencies", ()=>forEachTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var forEachTransformDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createForEachTransform: _factoriesAnyJs.createForEachTransform
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"CKEdf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gasConstantDependencies", ()=>gasConstantDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var gasConstantDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createGasConstant: _factoriesAnyJs.createGasConstant
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4u1M9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gcdDependencies", ()=>gcdDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var gcdDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createGcd: _factoriesAnyJs.createGcd
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"UKWio":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMatrixDataTypeDependencies", ()=>getMatrixDataTypeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var getMatrixDataTypeDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createGetMatrixDataType: _factoriesAnyJs.createGetMatrixDataType
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ghvP1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gravitationConstantDependencies", ()=>gravitationConstantDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var gravitationConstantDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createGravitationConstant: _factoriesAnyJs.createGravitationConstant
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"39kYV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gravityDependencies", ()=>gravityDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var gravityDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createGravity: _factoriesAnyJs.createGravity
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6AWLz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hartreeEnergyDependencies", ()=>hartreeEnergyDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var hartreeEnergyDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createHartreeEnergy: _factoriesAnyJs.createHartreeEnergy
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6zwXn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasNumericValueDependencies", ()=>hasNumericValueDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIsNumericGeneratedJs = require("./dependenciesIsNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var hasNumericValueDependencies = {
    isNumericDependencies: _dependenciesIsNumericGeneratedJs.isNumericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createHasNumericValue: _factoriesAnyJs.createHasNumericValue
};

},{"./dependenciesIsNumeric.generated.js":"548t6","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8QD6d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "helpDependencies", ()=>helpDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesHelpClassGeneratedJs = require("./dependenciesHelpClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var helpDependencies = {
    HelpDependencies: _dependenciesHelpClassGeneratedJs.HelpDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createHelp: _factoriesAnyJs.createHelp
};

},{"./dependenciesHelpClass.generated.js":"1Emjx","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1Emjx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HelpDependencies", ()=>HelpDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesParseGeneratedJs = require("./dependenciesParse.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var HelpDependencies = {
    parseDependencies: _dependenciesParseGeneratedJs.parseDependencies,
    createHelpClass: _factoriesAnyJs.createHelpClass
};

},{"./dependenciesParse.generated.js":"cjHgf","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5xQQK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hexDependencies", ()=>hexDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesFormatGeneratedJs = require("./dependenciesFormat.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var hexDependencies = {
    formatDependencies: _dependenciesFormatGeneratedJs.formatDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createHex: _factoriesAnyJs.createHex
};

},{"./dependenciesFormat.generated.js":"jRoQ8","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5n593":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hypotDependencies", ()=>hypotDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesIsPositiveGeneratedJs = require("./dependenciesIsPositive.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _dependenciesSqrtGeneratedJs = require("./dependenciesSqrt.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var hypotDependencies = {
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    isPositiveDependencies: _dependenciesIsPositiveGeneratedJs.isPositiveDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    sqrtDependencies: _dependenciesSqrtGeneratedJs.sqrtDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createHypot: _factoriesAnyJs.createHypot
};

},{"./dependenciesAbs.generated.js":"hsFbf","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesIsPositive.generated.js":"8nw9o","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSmaller.generated.js":"6Qoje","./dependenciesSqrt.generated.js":"gNTi8","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2BUEq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iDependencies", ()=>iDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var iDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    createI: _factoriesAnyJs.createI
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2iz8R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "indexDependencies", ()=>indexDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var indexDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIndex: _factoriesAnyJs.createIndex
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dXdfp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "indexTransformDependencies", ()=>indexTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var indexTransformDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    createIndexTransform: _factoriesAnyJs.createIndexTransform
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2e6kw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InfinityDependencies", ()=>InfinityDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var InfinityDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createInfinity: _factoriesAnyJs.createInfinity
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"azZz5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "intersectDependencies", ()=>intersectDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesFlattenGeneratedJs = require("./dependenciesFlatten.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var intersectDependencies = {
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    flattenDependencies: _dependenciesFlattenGeneratedJs.flattenDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIntersect: _factoriesAnyJs.createIntersect
};

},{"./dependenciesAbs.generated.js":"hsFbf","./dependenciesAdd.generated.js":"4SXJy","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesFlatten.generated.js":"1K1mT","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSmaller.generated.js":"6Qoje","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kxvcR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inverseConductanceQuantumDependencies", ()=>inverseConductanceQuantumDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var inverseConductanceQuantumDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createInverseConductanceQuantum: _factoriesAnyJs.createInverseConductanceQuantum
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"67c75":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNaNDependencies", ()=>isNaNDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var isNaNDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIsNaN: _factoriesAnyJs.createIsNaN
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8Y29j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPrimeDependencies", ()=>isPrimeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var isPrimeDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createIsPrime: _factoriesAnyJs.createIsPrime
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"khIlw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "kldivergenceDependencies", ()=>kldivergenceDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDivideGeneratedJs = require("./dependenciesDivide.generated.js");
var _dependenciesDotDivideGeneratedJs = require("./dependenciesDotDivide.generated.js");
var _dependenciesIsNumericGeneratedJs = require("./dependenciesIsNumeric.generated.js");
var _dependenciesLogGeneratedJs = require("./dependenciesLog.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesSumGeneratedJs = require("./dependenciesSum.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var kldivergenceDependencies = {
    divideDependencies: _dependenciesDivideGeneratedJs.divideDependencies,
    dotDivideDependencies: _dependenciesDotDivideGeneratedJs.dotDivideDependencies,
    isNumericDependencies: _dependenciesIsNumericGeneratedJs.isNumericDependencies,
    logDependencies: _dependenciesLogGeneratedJs.logDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    sumDependencies: _dependenciesSumGeneratedJs.sumDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createKldivergence: _factoriesAnyJs.createKldivergence
};

},{"./dependenciesDivide.generated.js":"2obV7","./dependenciesDotDivide.generated.js":"h4cGC","./dependenciesIsNumeric.generated.js":"548t6","./dependenciesLog.generated.js":"4uZZg","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesSum.generated.js":"3POxQ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4uZZg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logDependencies", ()=>logDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var logDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createLog: _factoriesAnyJs.createLog
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3POxQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sumDependencies", ()=>sumDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sumDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSum: _factoriesAnyJs.createSum
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3huxz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "klitzingDependencies", ()=>klitzingDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var klitzingDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createKlitzing: _factoriesAnyJs.createKlitzing
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1Azon":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "kronDependencies", ()=>kronDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var kronDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createKron: _factoriesAnyJs.createKron
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e8J6l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LN10Dependencies", ()=>LN10Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var LN10Dependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createLN10: _factoriesAnyJs.createLN10
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"geEco":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LN2Dependencies", ()=>LN2Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var LN2Dependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createLN2: _factoriesAnyJs.createLN2
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7MdsF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LOG10EDependencies", ()=>LOG10EDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var LOG10EDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createLOG10E: _factoriesAnyJs.createLOG10E
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aonED":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LOG2EDependencies", ()=>LOG2EDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var LOG2EDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createLOG2E: _factoriesAnyJs.createLOG2E
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gpBM1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lcmDependencies", ()=>lcmDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var lcmDependencies = {
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createLcm: _factoriesAnyJs.createLcm
};

},{"./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"laeE1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "leftShiftDependencies", ()=>leftShiftDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesZerosGeneratedJs = require("./dependenciesZeros.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var leftShiftDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    zerosDependencies: _dependenciesZerosGeneratedJs.zerosDependencies,
    createLeftShift: _factoriesAnyJs.createLeftShift
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","./dependenciesZeros.generated.js":"fMpFa","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"j1rTk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log10Dependencies", ()=>log10Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var log10Dependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createLog10: _factoriesAnyJs.createLog10
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"34zyj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log1pDependencies", ()=>log1pDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesLogGeneratedJs = require("./dependenciesLog.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var log1pDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    logDependencies: _dependenciesLogGeneratedJs.logDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createLog1p: _factoriesAnyJs.createLog1p
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesLog.generated.js":"4uZZg","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5Xy4O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log2Dependencies", ()=>log2Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var log2Dependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createLog2: _factoriesAnyJs.createLog2
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gio9h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loschmidtDependencies", ()=>loschmidtDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var loschmidtDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createLoschmidt: _factoriesAnyJs.createLoschmidt
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cKPxc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lsolveDependencies", ()=>lsolveDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var lsolveDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createLsolve: _factoriesAnyJs.createLsolve
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"efxQa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lsolveAllDependencies", ()=>lsolveAllDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var lsolveAllDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createLsolveAll: _factoriesAnyJs.createLsolveAll
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lqpN2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lusolveDependencies", ()=>lusolveDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesLsolveGeneratedJs = require("./dependenciesLsolve.generated.js");
var _dependenciesLupGeneratedJs = require("./dependenciesLup.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesSluGeneratedJs = require("./dependenciesSlu.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUsolveGeneratedJs = require("./dependenciesUsolve.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var lusolveDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    lsolveDependencies: _dependenciesLsolveGeneratedJs.lsolveDependencies,
    lupDependencies: _dependenciesLupGeneratedJs.lupDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    sluDependencies: _dependenciesSluGeneratedJs.sluDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    usolveDependencies: _dependenciesUsolveGeneratedJs.usolveDependencies,
    createLusolve: _factoriesAnyJs.createLusolve
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesLsolve.generated.js":"cKPxc","./dependenciesLup.generated.js":"ewfpR","./dependenciesMatrix.generated.js":"4rxln","./dependenciesSlu.generated.js":"3D1g2","./dependenciesTyped.generated.js":"er9ks","./dependenciesUsolve.generated.js":"bjLlx","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3D1g2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sluDependencies", ()=>sluDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesSparseMatrixClassGeneratedJs = require("./dependenciesSparseMatrixClass.generated.js");
var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesLargerEqGeneratedJs = require("./dependenciesLargerEq.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTransposeGeneratedJs = require("./dependenciesTranspose.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sluDependencies = {
    SparseMatrixDependencies: _dependenciesSparseMatrixClassGeneratedJs.SparseMatrixDependencies,
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    largerEqDependencies: _dependenciesLargerEqGeneratedJs.largerEqDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    transposeDependencies: _dependenciesTransposeGeneratedJs.transposeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSlu: _factoriesAnyJs.createSlu
};

},{"./dependenciesSparseMatrixClass.generated.js":"737h0","./dependenciesAbs.generated.js":"hsFbf","./dependenciesAdd.generated.js":"4SXJy","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesLarger.generated.js":"8woKJ","./dependenciesLargerEq.generated.js":"esvJ0","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTranspose.generated.js":"f0PPA","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4fDjN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "madDependencies", ()=>madDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesMapGeneratedJs = require("./dependenciesMap.generated.js");
var _dependenciesMedianGeneratedJs = require("./dependenciesMedian.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var madDependencies = {
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    mapDependencies: _dependenciesMapGeneratedJs.mapDependencies,
    medianDependencies: _dependenciesMedianGeneratedJs.medianDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMad: _factoriesAnyJs.createMad
};

},{"./dependenciesAbs.generated.js":"hsFbf","./dependenciesMap.generated.js":"dxF97","./dependenciesMedian.generated.js":"fSmxw","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dxF97":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapDependencies", ()=>mapDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var mapDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMap: _factoriesAnyJs.createMap
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fSmxw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "medianDependencies", ()=>medianDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesCompareGeneratedJs = require("./dependenciesCompare.generated.js");
var _dependenciesDivideGeneratedJs = require("./dependenciesDivide.generated.js");
var _dependenciesPartitionSelectGeneratedJs = require("./dependenciesPartitionSelect.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var medianDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    compareDependencies: _dependenciesCompareGeneratedJs.compareDependencies,
    divideDependencies: _dependenciesDivideGeneratedJs.divideDependencies,
    partitionSelectDependencies: _dependenciesPartitionSelectGeneratedJs.partitionSelectDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMedian: _factoriesAnyJs.createMedian
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesCompare.generated.js":"fXl0j","./dependenciesDivide.generated.js":"2obV7","./dependenciesPartitionSelect.generated.js":"6zpsE","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6zpsE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "partitionSelectDependencies", ()=>partitionSelectDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesCompareGeneratedJs = require("./dependenciesCompare.generated.js");
var _dependenciesIsNaNGeneratedJs = require("./dependenciesIsNaN.generated.js");
var _dependenciesIsNumericGeneratedJs = require("./dependenciesIsNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var partitionSelectDependencies = {
    compareDependencies: _dependenciesCompareGeneratedJs.compareDependencies,
    isNaNDependencies: _dependenciesIsNaNGeneratedJs.isNaNDependencies,
    isNumericDependencies: _dependenciesIsNumericGeneratedJs.isNumericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createPartitionSelect: _factoriesAnyJs.createPartitionSelect
};

},{"./dependenciesCompare.generated.js":"fXl0j","./dependenciesIsNaN.generated.js":"67c75","./dependenciesIsNumeric.generated.js":"548t6","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ERlni":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "magneticConstantDependencies", ()=>magneticConstantDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var magneticConstantDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createMagneticConstant: _factoriesAnyJs.createMagneticConstant
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"73SJ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "magneticFluxQuantumDependencies", ()=>magneticFluxQuantumDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var magneticFluxQuantumDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createMagneticFluxQuantum: _factoriesAnyJs.createMagneticFluxQuantum
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bhlbI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapTransformDependencies", ()=>mapTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var mapTransformDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMapTransform: _factoriesAnyJs.createMapTransform
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1VMiU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matrixFromFunctionDependencies", ()=>matrixFromFunctionDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIsZeroGeneratedJs = require("./dependenciesIsZero.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var matrixFromFunctionDependencies = {
    isZeroDependencies: _dependenciesIsZeroGeneratedJs.isZeroDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMatrixFromFunction: _factoriesAnyJs.createMatrixFromFunction
};

},{"./dependenciesIsZero.generated.js":"40RxJ","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"704UR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "matrixFromRowsDependencies", ()=>matrixFromRowsDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesFlattenGeneratedJs = require("./dependenciesFlatten.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var matrixFromRowsDependencies = {
    flattenDependencies: _dependenciesFlattenGeneratedJs.flattenDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMatrixFromRows: _factoriesAnyJs.createMatrixFromRows
};

},{"./dependenciesFlatten.generated.js":"1K1mT","./dependenciesMatrix.generated.js":"4rxln","./dependenciesSize.generated.js":"eLnXM","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c436u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxDependencies", ()=>maxDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var maxDependencies = {
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMax: _factoriesAnyJs.createMax
};

},{"./dependenciesLarger.generated.js":"8woKJ","./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cu1ol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxTransformDependencies", ()=>maxTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var maxTransformDependencies = {
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMaxTransform: _factoriesAnyJs.createMaxTransform
};

},{"./dependenciesLarger.generated.js":"8woKJ","./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Oh8O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "meanDependencies", ()=>meanDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesDivideGeneratedJs = require("./dependenciesDivide.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var meanDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    divideDependencies: _dependenciesDivideGeneratedJs.divideDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMean: _factoriesAnyJs.createMean
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesDivide.generated.js":"2obV7","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ao2PD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "meanTransformDependencies", ()=>meanTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesDivideGeneratedJs = require("./dependenciesDivide.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var meanTransformDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    divideDependencies: _dependenciesDivideGeneratedJs.divideDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMeanTransform: _factoriesAnyJs.createMeanTransform
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesDivide.generated.js":"2obV7","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6KVAw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minDependencies", ()=>minDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var minDependencies = {
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMin: _factoriesAnyJs.createMin
};

},{"./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesSmaller.generated.js":"6Qoje","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"er9Cw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minTransformDependencies", ()=>minTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var minTransformDependencies = {
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMinTransform: _factoriesAnyJs.createMinTransform
};

},{"./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesSmaller.generated.js":"6Qoje","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fs7CI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modDependencies", ()=>modDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var modDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMod: _factoriesAnyJs.createMod
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hcWcp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modeDependencies", ()=>modeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIsNaNGeneratedJs = require("./dependenciesIsNaN.generated.js");
var _dependenciesIsNumericGeneratedJs = require("./dependenciesIsNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var modeDependencies = {
    isNaNDependencies: _dependenciesIsNaNGeneratedJs.isNaNDependencies,
    isNumericDependencies: _dependenciesIsNumericGeneratedJs.isNumericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMode: _factoriesAnyJs.createMode
};

},{"./dependenciesIsNaN.generated.js":"67c75","./dependenciesIsNumeric.generated.js":"548t6","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fjHTK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "molarMassDependencies", ()=>molarMassDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var molarMassDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createMolarMass: _factoriesAnyJs.createMolarMass
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"59jCV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "molarMassC12Dependencies", ()=>molarMassC12Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var molarMassC12Dependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createMolarMassC12: _factoriesAnyJs.createMolarMassC12
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2JcDZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "molarPlanckConstantDependencies", ()=>molarPlanckConstantDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var molarPlanckConstantDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createMolarPlanckConstant: _factoriesAnyJs.createMolarPlanckConstant
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kQTll":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "molarVolumeDependencies", ()=>molarVolumeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var molarVolumeDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createMolarVolume: _factoriesAnyJs.createMolarVolume
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dOxWd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multinomialDependencies", ()=>multinomialDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesDivideGeneratedJs = require("./dependenciesDivide.generated.js");
var _dependenciesFactorialGeneratedJs = require("./dependenciesFactorial.generated.js");
var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesIsPositiveGeneratedJs = require("./dependenciesIsPositive.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var multinomialDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    divideDependencies: _dependenciesDivideGeneratedJs.divideDependencies,
    factorialDependencies: _dependenciesFactorialGeneratedJs.factorialDependencies,
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    isPositiveDependencies: _dependenciesIsPositiveGeneratedJs.isPositiveDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createMultinomial: _factoriesAnyJs.createMultinomial
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesDivide.generated.js":"2obV7","./dependenciesFactorial.generated.js":"96H03","./dependenciesIsInteger.generated.js":"hrdur","./dependenciesIsPositive.generated.js":"8nw9o","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4luXH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NaNDependencies", ()=>NaNDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var NaNDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createNaN: _factoriesAnyJs.createNaN
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7kt3p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "neutronMassDependencies", ()=>neutronMassDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var neutronMassDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createNeutronMass: _factoriesAnyJs.createNeutronMass
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8f1vI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normDependencies", ()=>normDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesConjGeneratedJs = require("./dependenciesConj.generated.js");
var _dependenciesCtransposeGeneratedJs = require("./dependenciesCtranspose.generated.js");
var _dependenciesEigsGeneratedJs = require("./dependenciesEigs.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesPowGeneratedJs = require("./dependenciesPow.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _dependenciesSqrtGeneratedJs = require("./dependenciesSqrt.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var normDependencies = {
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    conjDependencies: _dependenciesConjGeneratedJs.conjDependencies,
    ctransposeDependencies: _dependenciesCtransposeGeneratedJs.ctransposeDependencies,
    eigsDependencies: _dependenciesEigsGeneratedJs.eigsDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    powDependencies: _dependenciesPowGeneratedJs.powDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    sqrtDependencies: _dependenciesSqrtGeneratedJs.sqrtDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createNorm: _factoriesAnyJs.createNorm
};

},{"./dependenciesAbs.generated.js":"hsFbf","./dependenciesAdd.generated.js":"4SXJy","./dependenciesConj.generated.js":"aXJbj","./dependenciesCtranspose.generated.js":"1SxQI","./dependenciesEigs.generated.js":"ZLWZF","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesLarger.generated.js":"8woKJ","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesPow.generated.js":"af84U","./dependenciesSmaller.generated.js":"6Qoje","./dependenciesSqrt.generated.js":"gNTi8","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6xEEJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nthRootDependencies", ()=>nthRootDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var nthRootDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createNthRoot: _factoriesAnyJs.createNthRoot
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cYm7Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nthRootsDependencies", ()=>nthRootsDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesComplexClassGeneratedJs = require("./dependenciesComplexClass.generated.js");
var _dependenciesDivideScalarGeneratedJs = require("./dependenciesDivideScalar.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var nthRootsDependencies = {
    ComplexDependencies: _dependenciesComplexClassGeneratedJs.ComplexDependencies,
    divideScalarDependencies: _dependenciesDivideScalarGeneratedJs.divideScalarDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createNthRoots: _factoriesAnyJs.createNthRoots
};

},{"./dependenciesComplexClass.generated.js":"ltHxT","./dependenciesDivideScalar.generated.js":"8JTJ4","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"79MSx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nuclearMagnetonDependencies", ()=>nuclearMagnetonDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var nuclearMagnetonDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createNuclearMagneton: _factoriesAnyJs.createNuclearMagneton
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fk7D0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nullDependencies", ()=>nullDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var nullDependencies = {
    createNull: _factoriesAnyJs.createNull
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dEPkx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "octDependencies", ()=>octDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesFormatGeneratedJs = require("./dependenciesFormat.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var octDependencies = {
    formatDependencies: _dependenciesFormatGeneratedJs.formatDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createOct: _factoriesAnyJs.createOct
};

},{"./dependenciesFormat.generated.js":"jRoQ8","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5SC8x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "onesDependencies", ()=>onesDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var onesDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createOnes: _factoriesAnyJs.createOnes
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gcEGz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orDependencies", ()=>orDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var orDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createOr: _factoriesAnyJs.createOr
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iMJYp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parserDependencies", ()=>parserDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesParserClassGeneratedJs = require("./dependenciesParserClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var parserDependencies = {
    ParserDependencies: _dependenciesParserClassGeneratedJs.ParserDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createParser: _factoriesAnyJs.createParser
};

},{"./dependenciesParserClass.generated.js":"eZ6Bv","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eZ6Bv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ParserDependencies", ()=>ParserDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesEvaluateGeneratedJs = require("./dependenciesEvaluate.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var ParserDependencies = {
    evaluateDependencies: _dependenciesEvaluateGeneratedJs.evaluateDependencies,
    createParserClass: _factoriesAnyJs.createParserClass
};

},{"./dependenciesEvaluate.generated.js":"2OgIy","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5Vv7U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "permutationsDependencies", ()=>permutationsDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesFactorialGeneratedJs = require("./dependenciesFactorial.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var permutationsDependencies = {
    factorialDependencies: _dependenciesFactorialGeneratedJs.factorialDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createPermutations: _factoriesAnyJs.createPermutations
};

},{"./dependenciesFactorial.generated.js":"96H03","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iQu4H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "phiDependencies", ()=>phiDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var phiDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createPhi: _factoriesAnyJs.createPhi
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2furj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "piDependencies", ()=>piDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var piDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createPi: _factoriesAnyJs.createPi
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"70c7y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pickRandomDependencies", ()=>pickRandomDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var pickRandomDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createPickRandom: _factoriesAnyJs.createPickRandom
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8iFL8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "planckChargeDependencies", ()=>planckChargeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var planckChargeDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createPlanckCharge: _factoriesAnyJs.createPlanckCharge
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aDwD9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "planckConstantDependencies", ()=>planckConstantDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var planckConstantDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createPlanckConstant: _factoriesAnyJs.createPlanckConstant
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aGcbI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "planckLengthDependencies", ()=>planckLengthDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var planckLengthDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createPlanckLength: _factoriesAnyJs.createPlanckLength
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2u7LA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "planckMassDependencies", ()=>planckMassDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var planckMassDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createPlanckMass: _factoriesAnyJs.createPlanckMass
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6NIbA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "planckTemperatureDependencies", ()=>planckTemperatureDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var planckTemperatureDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createPlanckTemperature: _factoriesAnyJs.createPlanckTemperature
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dSBRW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "planckTimeDependencies", ()=>planckTimeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var planckTimeDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createPlanckTime: _factoriesAnyJs.createPlanckTime
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7NAV3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "printDependencies", ()=>printDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var printDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createPrint: _factoriesAnyJs.createPrint
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kB5P4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "protonMassDependencies", ()=>protonMassDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var protonMassDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createProtonMass: _factoriesAnyJs.createProtonMass
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"81vqP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "quantileSeqDependencies", ()=>quantileSeqDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesCompareGeneratedJs = require("./dependenciesCompare.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesPartitionSelectGeneratedJs = require("./dependenciesPartitionSelect.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var quantileSeqDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    compareDependencies: _dependenciesCompareGeneratedJs.compareDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    partitionSelectDependencies: _dependenciesPartitionSelectGeneratedJs.partitionSelectDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createQuantileSeq: _factoriesAnyJs.createQuantileSeq
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesCompare.generated.js":"fXl0j","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesPartitionSelect.generated.js":"6zpsE","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2tCeC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "quantumOfCirculationDependencies", ()=>quantumOfCirculationDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var quantumOfCirculationDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createQuantumOfCirculation: _factoriesAnyJs.createQuantumOfCirculation
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"PbZnq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomDependencies", ()=>randomDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var randomDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createRandom: _factoriesAnyJs.createRandom
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ltdwI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomIntDependencies", ()=>randomIntDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var randomIntDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createRandomInt: _factoriesAnyJs.createRandomInt
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gTQm7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rangeTransformDependencies", ()=>rangeTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBignumberGeneratedJs = require("./dependenciesBignumber.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesLargerGeneratedJs = require("./dependenciesLarger.generated.js");
var _dependenciesLargerEqGeneratedJs = require("./dependenciesLargerEq.generated.js");
var _dependenciesSmallerGeneratedJs = require("./dependenciesSmaller.generated.js");
var _dependenciesSmallerEqGeneratedJs = require("./dependenciesSmallerEq.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rangeTransformDependencies = {
    bignumberDependencies: _dependenciesBignumberGeneratedJs.bignumberDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    largerDependencies: _dependenciesLargerGeneratedJs.largerDependencies,
    largerEqDependencies: _dependenciesLargerEqGeneratedJs.largerEqDependencies,
    smallerDependencies: _dependenciesSmallerGeneratedJs.smallerDependencies,
    smallerEqDependencies: _dependenciesSmallerEqGeneratedJs.smallerEqDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createRangeTransform: _factoriesAnyJs.createRangeTransform
};

},{"./dependenciesBignumber.generated.js":"86lZk","./dependenciesMatrix.generated.js":"4rxln","./dependenciesLarger.generated.js":"8woKJ","./dependenciesLargerEq.generated.js":"esvJ0","./dependenciesSmaller.generated.js":"6Qoje","./dependenciesSmallerEq.generated.js":"7a63q","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"goM95":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rationalizeDependencies", ()=>rationalizeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBignumberGeneratedJs = require("./dependenciesBignumber.generated.js");
var _dependenciesFractionGeneratedJs = require("./dependenciesFraction.generated.js");
var _dependenciesConstantNodeGeneratedJs = require("./dependenciesConstantNode.generated.js");
var _dependenciesFunctionNodeGeneratedJs = require("./dependenciesFunctionNode.generated.js");
var _dependenciesOperatorNodeGeneratedJs = require("./dependenciesOperatorNode.generated.js");
var _dependenciesParenthesisNodeGeneratedJs = require("./dependenciesParenthesisNode.generated.js");
var _dependenciesSymbolNodeGeneratedJs = require("./dependenciesSymbolNode.generated.js");
var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesDivideGeneratedJs = require("./dependenciesDivide.generated.js");
var _dependenciesEqualGeneratedJs = require("./dependenciesEqual.generated.js");
var _dependenciesIsZeroGeneratedJs = require("./dependenciesIsZero.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesParseGeneratedJs = require("./dependenciesParse.generated.js");
var _dependenciesPowGeneratedJs = require("./dependenciesPow.generated.js");
var _dependenciesSimplifyGeneratedJs = require("./dependenciesSimplify.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rationalizeDependencies = {
    bignumberDependencies: _dependenciesBignumberGeneratedJs.bignumberDependencies,
    fractionDependencies: _dependenciesFractionGeneratedJs.fractionDependencies,
    ConstantNodeDependencies: _dependenciesConstantNodeGeneratedJs.ConstantNodeDependencies,
    FunctionNodeDependencies: _dependenciesFunctionNodeGeneratedJs.FunctionNodeDependencies,
    OperatorNodeDependencies: _dependenciesOperatorNodeGeneratedJs.OperatorNodeDependencies,
    ParenthesisNodeDependencies: _dependenciesParenthesisNodeGeneratedJs.ParenthesisNodeDependencies,
    SymbolNodeDependencies: _dependenciesSymbolNodeGeneratedJs.SymbolNodeDependencies,
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    divideDependencies: _dependenciesDivideGeneratedJs.divideDependencies,
    equalDependencies: _dependenciesEqualGeneratedJs.equalDependencies,
    isZeroDependencies: _dependenciesIsZeroGeneratedJs.isZeroDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    parseDependencies: _dependenciesParseGeneratedJs.parseDependencies,
    powDependencies: _dependenciesPowGeneratedJs.powDependencies,
    simplifyDependencies: _dependenciesSimplifyGeneratedJs.simplifyDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createRationalize: _factoriesAnyJs.createRationalize
};

},{"./dependenciesBignumber.generated.js":"86lZk","./dependenciesFraction.generated.js":"ldLGf","./dependenciesConstantNode.generated.js":"gnju0","./dependenciesFunctionNode.generated.js":"3dMKC","./dependenciesOperatorNode.generated.js":"it3bh","./dependenciesParenthesisNode.generated.js":"lEX1B","./dependenciesSymbolNode.generated.js":"ac2uv","./dependenciesAdd.generated.js":"4SXJy","./dependenciesDivide.generated.js":"2obV7","./dependenciesEqual.generated.js":"6NP7z","./dependenciesIsZero.generated.js":"40RxJ","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesParse.generated.js":"cjHgf","./dependenciesPow.generated.js":"af84U","./dependenciesSimplify.generated.js":"gOMmu","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lHo43":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reducedPlanckConstantDependencies", ()=>reducedPlanckConstantDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var reducedPlanckConstantDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createReducedPlanckConstant: _factoriesAnyJs.createReducedPlanckConstant
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"llQ5O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "replacerDependencies", ()=>replacerDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var replacerDependencies = {
    createReplacer: _factoriesAnyJs.createReplacer
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kYZ7o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reshapeDependencies", ()=>reshapeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIsIntegerGeneratedJs = require("./dependenciesIsInteger.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var reshapeDependencies = {
    isIntegerDependencies: _dependenciesIsIntegerGeneratedJs.isIntegerDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createReshape: _factoriesAnyJs.createReshape
};

},{"./dependenciesIsInteger.generated.js":"hrdur","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dYPNH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeDependencies", ()=>resizeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var resizeDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    createResize: _factoriesAnyJs.createResize
};

},{"./dependenciesMatrix.generated.js":"4rxln","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5Pldw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reviverDependencies", ()=>reviverDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var reviverDependencies = {
    createReviver: _factoriesAnyJs.createReviver
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"j5lq6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rightArithShiftDependencies", ()=>rightArithShiftDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesZerosGeneratedJs = require("./dependenciesZeros.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rightArithShiftDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    zerosDependencies: _dependenciesZerosGeneratedJs.zerosDependencies,
    createRightArithShift: _factoriesAnyJs.createRightArithShift
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","./dependenciesZeros.generated.js":"fMpFa","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5RIlk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rightLogShiftDependencies", ()=>rightLogShiftDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesZerosGeneratedJs = require("./dependenciesZeros.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rightLogShiftDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    zerosDependencies: _dependenciesZerosGeneratedJs.zerosDependencies,
    createRightLogShift: _factoriesAnyJs.createRightLogShift
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","./dependenciesZeros.generated.js":"fMpFa","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lRyvo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotateDependencies", ()=>rotateDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesRotationMatrixGeneratedJs = require("./dependenciesRotationMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rotateDependencies = {
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    rotationMatrixDependencies: _dependenciesRotationMatrixGeneratedJs.rotationMatrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createRotate: _factoriesAnyJs.createRotate
};

},{"./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesRotationMatrix.generated.js":"dtsZO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dtsZO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotationMatrixDependencies", ()=>rotationMatrixDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesSparseMatrixClassGeneratedJs = require("./dependenciesSparseMatrixClass.generated.js");
var _dependenciesAddScalarGeneratedJs = require("./dependenciesAddScalar.generated.js");
var _dependenciesCosGeneratedJs = require("./dependenciesCos.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesMultiplyScalarGeneratedJs = require("./dependenciesMultiplyScalar.generated.js");
var _dependenciesNormGeneratedJs = require("./dependenciesNorm.generated.js");
var _dependenciesSinGeneratedJs = require("./dependenciesSin.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesUnaryMinusGeneratedJs = require("./dependenciesUnaryMinus.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rotationMatrixDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    SparseMatrixDependencies: _dependenciesSparseMatrixClassGeneratedJs.SparseMatrixDependencies,
    addScalarDependencies: _dependenciesAddScalarGeneratedJs.addScalarDependencies,
    cosDependencies: _dependenciesCosGeneratedJs.cosDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    multiplyScalarDependencies: _dependenciesMultiplyScalarGeneratedJs.multiplyScalarDependencies,
    normDependencies: _dependenciesNormGeneratedJs.normDependencies,
    sinDependencies: _dependenciesSinGeneratedJs.sinDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    unaryMinusDependencies: _dependenciesUnaryMinusGeneratedJs.unaryMinusDependencies,
    createRotationMatrix: _factoriesAnyJs.createRotationMatrix
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesSparseMatrixClass.generated.js":"737h0","./dependenciesAddScalar.generated.js":"dHHAK","./dependenciesCos.generated.js":"3onA8","./dependenciesMatrix.generated.js":"4rxln","./dependenciesMultiplyScalar.generated.js":"ZEOmC","./dependenciesNorm.generated.js":"8f1vI","./dependenciesSin.generated.js":"b9aA7","./dependenciesTyped.generated.js":"er9ks","./dependenciesUnaryMinus.generated.js":"kr3cQ","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eG4mn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rowDependencies", ()=>rowDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesRangeGeneratedJs = require("./dependenciesRange.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rowDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    rangeDependencies: _dependenciesRangeGeneratedJs.rangeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createRow: _factoriesAnyJs.createRow
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesMatrix.generated.js":"4rxln","./dependenciesRange.generated.js":"dWHiI","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hHGFK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rowTransformDependencies", ()=>rowTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesRangeGeneratedJs = require("./dependenciesRange.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rowTransformDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    rangeDependencies: _dependenciesRangeGeneratedJs.rangeDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createRowTransform: _factoriesAnyJs.createRowTransform
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesMatrix.generated.js":"4rxln","./dependenciesRange.generated.js":"dWHiI","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4iH0u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rydbergDependencies", ()=>rydbergDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var rydbergDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createRydberg: _factoriesAnyJs.createRydberg
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lAXsa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SQRT1_2Dependencies", ()=>SQRT1_2Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js"); // eslint-disable-line camelcase
var SQRT1_2Dependencies = {
    BigNumberDependencies: // eslint-disable-line camelcase
    _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createSQRT1_2: _factoriesAnyJs.createSQRT1_2
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"d4WRc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SQRT2Dependencies", ()=>SQRT2Dependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var SQRT2Dependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createSQRT2: _factoriesAnyJs.createSQRT2
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ltuL4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sackurTetrodeDependencies", ()=>sackurTetrodeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sackurTetrodeDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createSackurTetrode: _factoriesAnyJs.createSackurTetrode
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"01E1Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "secDependencies", ()=>secDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var secDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSec: _factoriesAnyJs.createSec
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cgy6g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sechDependencies", ()=>sechDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sechDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSech: _factoriesAnyJs.createSech
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6simO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "secondRadiationDependencies", ()=>secondRadiationDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var secondRadiationDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createSecondRadiation: _factoriesAnyJs.createSecondRadiation
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"831kB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setCartesianDependencies", ()=>setCartesianDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesCompareNatural.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setCartesianDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    compareNaturalDependencies: _dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetCartesian: _factoriesAnyJs.createSetCartesian
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesSize.generated.js":"eLnXM","./dependenciesSubset.generated.js":"2Leii","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2LALd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setDifferenceDependencies", ()=>setDifferenceDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesCompareNatural.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setDifferenceDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    compareNaturalDependencies: _dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetDifference: _factoriesAnyJs.createSetDifference
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesSize.generated.js":"eLnXM","./dependenciesSubset.generated.js":"2Leii","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cNogM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setDistinctDependencies", ()=>setDistinctDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesCompareNatural.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setDistinctDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    compareNaturalDependencies: _dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetDistinct: _factoriesAnyJs.createSetDistinct
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesSize.generated.js":"eLnXM","./dependenciesSubset.generated.js":"2Leii","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gcC1H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setIntersectDependencies", ()=>setIntersectDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesCompareNatural.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setIntersectDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    compareNaturalDependencies: _dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetIntersect: _factoriesAnyJs.createSetIntersect
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesSize.generated.js":"eLnXM","./dependenciesSubset.generated.js":"2Leii","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3hZYC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setIsSubsetDependencies", ()=>setIsSubsetDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesCompareNatural.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setIsSubsetDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    compareNaturalDependencies: _dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetIsSubset: _factoriesAnyJs.createSetIsSubset
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesSize.generated.js":"eLnXM","./dependenciesSubset.generated.js":"2Leii","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8b4qW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setMultiplicityDependencies", ()=>setMultiplicityDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesCompareNatural.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setMultiplicityDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    compareNaturalDependencies: _dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetMultiplicity: _factoriesAnyJs.createSetMultiplicity
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesSize.generated.js":"eLnXM","./dependenciesSubset.generated.js":"2Leii","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ABoaT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setPowersetDependencies", ()=>setPowersetDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesCompareNatural.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setPowersetDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    compareNaturalDependencies: _dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetPowerset: _factoriesAnyJs.createSetPowerset
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesSize.generated.js":"eLnXM","./dependenciesSubset.generated.js":"2Leii","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kmAmD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setSizeDependencies", ()=>setSizeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesCompareNatural.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setSizeDependencies = {
    compareNaturalDependencies: _dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetSize: _factoriesAnyJs.createSetSize
};

},{"./dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3Z0aV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setSymDifferenceDependencies", ()=>setSymDifferenceDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesConcatGeneratedJs = require("./dependenciesConcat.generated.js");
var _dependenciesSetDifferenceGeneratedJs = require("./dependenciesSetDifference.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setSymDifferenceDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    concatDependencies: _dependenciesConcatGeneratedJs.concatDependencies,
    setDifferenceDependencies: _dependenciesSetDifferenceGeneratedJs.setDifferenceDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetSymDifference: _factoriesAnyJs.createSetSymDifference
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesConcat.generated.js":"dlGD2","./dependenciesSetDifference.generated.js":"2LALd","./dependenciesSize.generated.js":"eLnXM","./dependenciesSubset.generated.js":"2Leii","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6dGvR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setUnionDependencies", ()=>setUnionDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesIndexClassGeneratedJs = require("./dependenciesIndexClass.generated.js");
var _dependenciesConcatGeneratedJs = require("./dependenciesConcat.generated.js");
var _dependenciesSetIntersectGeneratedJs = require("./dependenciesSetIntersect.generated.js");
var _dependenciesSetSymDifferenceGeneratedJs = require("./dependenciesSetSymDifference.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSubsetGeneratedJs = require("./dependenciesSubset.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var setUnionDependencies = {
    IndexDependencies: _dependenciesIndexClassGeneratedJs.IndexDependencies,
    concatDependencies: _dependenciesConcatGeneratedJs.concatDependencies,
    setIntersectDependencies: _dependenciesSetIntersectGeneratedJs.setIntersectDependencies,
    setSymDifferenceDependencies: _dependenciesSetSymDifferenceGeneratedJs.setSymDifferenceDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    subsetDependencies: _dependenciesSubsetGeneratedJs.subsetDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSetUnion: _factoriesAnyJs.createSetUnion
};

},{"./dependenciesIndexClass.generated.js":"kxuYR","./dependenciesConcat.generated.js":"dlGD2","./dependenciesSetIntersect.generated.js":"gcC1H","./dependenciesSetSymDifference.generated.js":"3Z0aV","./dependenciesSize.generated.js":"eLnXM","./dependenciesSubset.generated.js":"2Leii","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hvmLR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sinhDependencies", ()=>sinhDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sinhDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSinh: _factoriesAnyJs.createSinh
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aKKcC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sortDependencies", ()=>sortDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesCompareGeneratedJs = require("./dependenciesCompare.generated.js");
var _dependenciesCompareNaturalGeneratedJs = require("./dependenciesCompareNatural.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sortDependencies = {
    compareDependencies: _dependenciesCompareGeneratedJs.compareDependencies,
    compareNaturalDependencies: _dependenciesCompareNaturalGeneratedJs.compareNaturalDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSort: _factoriesAnyJs.createSort
};

},{"./dependenciesCompare.generated.js":"fXl0j","./dependenciesCompareNatural.generated.js":"kkjX7","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iv9L3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseDependencies", ()=>sparseDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesSparseMatrixClassGeneratedJs = require("./dependenciesSparseMatrixClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sparseDependencies = {
    SparseMatrixDependencies: _dependenciesSparseMatrixClassGeneratedJs.SparseMatrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSparse: _factoriesAnyJs.createSparse
};

},{"./dependenciesSparseMatrixClass.generated.js":"737h0","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"d9PIc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "speedOfLightDependencies", ()=>speedOfLightDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var speedOfLightDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createSpeedOfLight: _factoriesAnyJs.createSpeedOfLight
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jb73h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitUnitDependencies", ()=>splitUnitDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var splitUnitDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSplitUnit: _factoriesAnyJs.createSplitUnit
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5xthX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sqrtmDependencies", ()=>sqrtmDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAbsGeneratedJs = require("./dependenciesAbs.generated.js");
var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesIdentityGeneratedJs = require("./dependenciesIdentity.generated.js");
var _dependenciesInvGeneratedJs = require("./dependenciesInv.generated.js");
var _dependenciesMaxGeneratedJs = require("./dependenciesMax.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesSizeGeneratedJs = require("./dependenciesSize.generated.js");
var _dependenciesSqrtGeneratedJs = require("./dependenciesSqrt.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sqrtmDependencies = {
    absDependencies: _dependenciesAbsGeneratedJs.absDependencies,
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    identityDependencies: _dependenciesIdentityGeneratedJs.identityDependencies,
    invDependencies: _dependenciesInvGeneratedJs.invDependencies,
    maxDependencies: _dependenciesMaxGeneratedJs.maxDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    sizeDependencies: _dependenciesSizeGeneratedJs.sizeDependencies,
    sqrtDependencies: _dependenciesSqrtGeneratedJs.sqrtDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSqrtm: _factoriesAnyJs.createSqrtm
};

},{"./dependenciesAbs.generated.js":"hsFbf","./dependenciesAdd.generated.js":"4SXJy","./dependenciesIdentity.generated.js":"b189C","./dependenciesInv.generated.js":"ikCOZ","./dependenciesMax.generated.js":"c436u","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesSize.generated.js":"eLnXM","./dependenciesSqrt.generated.js":"gNTi8","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hf05n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squareDependencies", ()=>squareDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var squareDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSquare: _factoriesAnyJs.createSquare
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hfxvV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squeezeDependencies", ()=>squeezeDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var squeezeDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSqueeze: _factoriesAnyJs.createSqueeze
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1ZPDR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stdDependencies", ()=>stdDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesSqrtGeneratedJs = require("./dependenciesSqrt.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesVarianceGeneratedJs = require("./dependenciesVariance.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var stdDependencies = {
    sqrtDependencies: _dependenciesSqrtGeneratedJs.sqrtDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    varianceDependencies: _dependenciesVarianceGeneratedJs.varianceDependencies,
    createStd: _factoriesAnyJs.createStd
};

},{"./dependenciesSqrt.generated.js":"gNTi8","./dependenciesTyped.generated.js":"er9ks","./dependenciesVariance.generated.js":"2gk4W","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2gk4W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "varianceDependencies", ()=>varianceDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesApplyGeneratedJs = require("./dependenciesApply.generated.js");
var _dependenciesDivideGeneratedJs = require("./dependenciesDivide.generated.js");
var _dependenciesIsNaNGeneratedJs = require("./dependenciesIsNaN.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var varianceDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    applyDependencies: _dependenciesApplyGeneratedJs.applyDependencies,
    divideDependencies: _dependenciesDivideGeneratedJs.divideDependencies,
    isNaNDependencies: _dependenciesIsNaNGeneratedJs.isNaNDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createVariance: _factoriesAnyJs.createVariance
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesApply.generated.js":"85NY1","./dependenciesDivide.generated.js":"2obV7","./dependenciesIsNaN.generated.js":"67c75","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gLBrY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stdTransformDependencies", ()=>stdTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesSqrtGeneratedJs = require("./dependenciesSqrt.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _dependenciesVarianceGeneratedJs = require("./dependenciesVariance.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var stdTransformDependencies = {
    sqrtDependencies: _dependenciesSqrtGeneratedJs.sqrtDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    varianceDependencies: _dependenciesVarianceGeneratedJs.varianceDependencies,
    createStdTransform: _factoriesAnyJs.createStdTransform
};

},{"./dependenciesSqrt.generated.js":"gNTi8","./dependenciesTyped.generated.js":"er9ks","./dependenciesVariance.generated.js":"2gk4W","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"f0Wv3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stefanBoltzmannDependencies", ()=>stefanBoltzmannDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var stefanBoltzmannDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createStefanBoltzmann: _factoriesAnyJs.createStefanBoltzmann
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eK1Z7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringDependencies", ()=>stringDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var stringDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createString: _factoriesAnyJs.createString
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hGDZp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subsetTransformDependencies", ()=>subsetTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var subsetTransformDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSubsetTransform: _factoriesAnyJs.createSubsetTransform
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8BAUC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sumTransformDependencies", ()=>sumTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesNumericGeneratedJs = require("./dependenciesNumeric.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var sumTransformDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    numericDependencies: _dependenciesNumericGeneratedJs.numericDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createSumTransform: _factoriesAnyJs.createSumTransform
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesNumeric.generated.js":"lvmaZ","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8kXX6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tanDependencies", ()=>tanDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var tanDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createTan: _factoriesAnyJs.createTan
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"80EBR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tanhDependencies", ()=>tanhDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var tanhDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createTanh: _factoriesAnyJs.createTanh
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"53vou":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tauDependencies", ()=>tauDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var tauDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createTau: _factoriesAnyJs.createTau
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dRAfr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "thomsonCrossSectionDependencies", ()=>thomsonCrossSectionDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var thomsonCrossSectionDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createThomsonCrossSection: _factoriesAnyJs.createThomsonCrossSection
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1y5dO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toDependencies", ()=>toDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var toDependencies = {
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createTo: _factoriesAnyJs.createTo
};

},{"./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"689Fg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "traceDependencies", ()=>traceDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var traceDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createTrace: _factoriesAnyJs.createTrace
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g0Xbw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "trueDependencies", ()=>trueDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var trueDependencies = {
    createTrue: _factoriesAnyJs.createTrue
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5v1r9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "typeOfDependencies", ()=>typeOfDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var typeOfDependencies = {
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createTypeOf: _factoriesAnyJs.createTypeOf
};

},{"./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b2tm0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unaryPlusDependencies", ()=>unaryPlusDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var unaryPlusDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createUnaryPlus: _factoriesAnyJs.createUnaryPlus
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"h8OqD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unequalDependencies", ()=>unequalDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesEqualScalarGeneratedJs = require("./dependenciesEqualScalar.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var unequalDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    equalScalarDependencies: _dependenciesEqualScalarGeneratedJs.equalScalarDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createUnequal: _factoriesAnyJs.createUnequal
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesEqualScalar.generated.js":"knZCK","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4YAGy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unitDependencies", ()=>unitDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var unitDependencies = {
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createUnitFunction: _factoriesAnyJs.createUnitFunction
};

},{"./dependenciesUnitClass.generated.js":"eyfE4","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dHehh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EDependencies", ()=>EDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesEGeneratedJs = require("./dependenciesE.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var EDependencies = {
    eDependencies: _dependenciesEGeneratedJs.eDependencies,
    createUppercaseE: _factoriesAnyJs.createUppercaseE
};

},{"./dependenciesE.generated.js":"4AN4k","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bJ2nJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PIDependencies", ()=>PIDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesPiGeneratedJs = require("./dependenciesPi.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var PIDependencies = {
    piDependencies: _dependenciesPiGeneratedJs.piDependencies,
    createUppercasePi: _factoriesAnyJs.createUppercasePi
};

},{"./dependenciesPi.generated.js":"2furj","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"wYBJv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "vacuumImpedanceDependencies", ()=>vacuumImpedanceDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var vacuumImpedanceDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createVacuumImpedance: _factoriesAnyJs.createVacuumImpedance
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1D7hF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "varianceTransformDependencies", ()=>varianceTransformDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesAddGeneratedJs = require("./dependenciesAdd.generated.js");
var _dependenciesApplyGeneratedJs = require("./dependenciesApply.generated.js");
var _dependenciesDivideGeneratedJs = require("./dependenciesDivide.generated.js");
var _dependenciesIsNaNGeneratedJs = require("./dependenciesIsNaN.generated.js");
var _dependenciesMultiplyGeneratedJs = require("./dependenciesMultiply.generated.js");
var _dependenciesSubtractGeneratedJs = require("./dependenciesSubtract.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var varianceTransformDependencies = {
    addDependencies: _dependenciesAddGeneratedJs.addDependencies,
    applyDependencies: _dependenciesApplyGeneratedJs.applyDependencies,
    divideDependencies: _dependenciesDivideGeneratedJs.divideDependencies,
    isNaNDependencies: _dependenciesIsNaNGeneratedJs.isNaNDependencies,
    multiplyDependencies: _dependenciesMultiplyGeneratedJs.multiplyDependencies,
    subtractDependencies: _dependenciesSubtractGeneratedJs.subtractDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createVarianceTransform: _factoriesAnyJs.createVarianceTransform
};

},{"./dependenciesAdd.generated.js":"4SXJy","./dependenciesApply.generated.js":"85NY1","./dependenciesDivide.generated.js":"2obV7","./dependenciesIsNaN.generated.js":"67c75","./dependenciesMultiply.generated.js":"Jvfmb","./dependenciesSubtract.generated.js":"531Vr","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fZ7f6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "versionDependencies", ()=>versionDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _factoriesAnyJs = require("../../factoriesAny.js");
var versionDependencies = {
    createVersion: _factoriesAnyJs.createVersion
};

},{"../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aCIwE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "weakMixingAngleDependencies", ()=>weakMixingAngleDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var weakMixingAngleDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    createWeakMixingAngle: _factoriesAnyJs.createWeakMixingAngle
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lcNDJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wienDisplacementDependencies", ()=>wienDisplacementDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesUnitClassGeneratedJs = require("./dependenciesUnitClass.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var wienDisplacementDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    UnitDependencies: _dependenciesUnitClassGeneratedJs.UnitDependencies,
    createWienDisplacement: _factoriesAnyJs.createWienDisplacement
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesUnitClass.generated.js":"eyfE4","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ibfWt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xgcdDependencies", ()=>xgcdDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesBigNumberClassGeneratedJs = require("./dependenciesBigNumberClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var xgcdDependencies = {
    BigNumberDependencies: _dependenciesBigNumberClassGeneratedJs.BigNumberDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createXgcd: _factoriesAnyJs.createXgcd
};

},{"./dependenciesBigNumberClass.generated.js":"2NFhO","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a5X1v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xorDependencies", ()=>xorDependencies
);
/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */ var _dependenciesDenseMatrixClassGeneratedJs = require("./dependenciesDenseMatrixClass.generated.js");
var _dependenciesMatrixGeneratedJs = require("./dependenciesMatrix.generated.js");
var _dependenciesTypedGeneratedJs = require("./dependenciesTyped.generated.js");
var _factoriesAnyJs = require("../../factoriesAny.js");
var xorDependencies = {
    DenseMatrixDependencies: _dependenciesDenseMatrixClassGeneratedJs.DenseMatrixDependencies,
    matrixDependencies: _dependenciesMatrixGeneratedJs.matrixDependencies,
    typedDependencies: _dependenciesTypedGeneratedJs.typedDependencies,
    createXor: _factoriesAnyJs.createXor
};

},{"./dependenciesDenseMatrixClass.generated.js":"55PdN","./dependenciesMatrix.generated.js":"4rxln","./dependenciesTyped.generated.js":"er9ks","../../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3MWwk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "all", ()=>all
);
// creating all factories here in a separate file is needed to get tree-shaking working
var _factoriesAnyJs = require("../factoriesAny.js");
var all = _factoriesAnyJs;

},{"../factoriesAny.js":"epPmk","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hdeGv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a mathjs instance from given factory functions and optionally config
 *
 * Usage:
 *
 *     const mathjs1 = create({ createAdd, createMultiply, ...})
 *     const config = { number: 'BigNumber' }
 *     const mathjs2 = create(all, config)
 *
 * @param {Object} [factories] An object with factory functions
 *                             The object can contain nested objects,
 *                             all nested objects will be flattened.
 * @param {Object} [config]    Available options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'Matrix' (default) or 'Array'.
 *                            {string} number
 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-4)`
 *                              returns `complex('2i')` when predictable is false, and
 *                              returns `NaN` when true.
 *                            {string} randomSeed
 *                              Random seed for seeded pseudo random number generator.
 *                              Set to null to randomly seed.
 * @returns {Object} Returns a bare-bone math.js instance containing
 *                   functions:
 *                   - `import` to add new functions
 *                   - `config` to change configuration
 *                   - `on`, `off`, `once`, `emit` for events
 */ parcelHelpers.export(exports, "create", ()=>create
);
var _extends = require("@babel/runtime/helpers/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _polyfillsJs = require("./../utils/polyfills.js");
var _objectJs = require("../utils/object.js");
var _emitterJs = require("./../utils/emitter.js");
var _importJs = require("./function/import.js");
var _configJs = require("./function/config.js");
var _factoryJs = require("../utils/factory.js");
var _isJs = require("../utils/is.js");
var _argumentsErrorJs = require("../error/ArgumentsError.js");
var _dimensionErrorJs = require("../error/DimensionError.js");
var _indexErrorJs = require("../error/IndexError.js");
var _configJs1 = require("./config.js");
function create(factories, config) {
    var configInternal = _extendsDefault.default({
    }, _configJs1.DEFAULT_CONFIG, config); // simple test for ES5 support
    if (typeof Object.create !== 'function') throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");
     // create the mathjs instance
    var math = _emitterJs.mixin({
        isNumber: // only here for backward compatibility for legacy factory functions
        _isJs.isNumber,
        isComplex: _isJs.isComplex,
        isBigNumber: _isJs.isBigNumber,
        isFraction: _isJs.isFraction,
        isUnit: _isJs.isUnit,
        isString: _isJs.isString,
        isArray: _isJs.isArray,
        isMatrix: _isJs.isMatrix,
        isCollection: _isJs.isCollection,
        isDenseMatrix: _isJs.isDenseMatrix,
        isSparseMatrix: _isJs.isSparseMatrix,
        isRange: _isJs.isRange,
        isIndex: _isJs.isIndex,
        isBoolean: _isJs.isBoolean,
        isResultSet: _isJs.isResultSet,
        isHelp: _isJs.isHelp,
        isFunction: _isJs.isFunction,
        isDate: _isJs.isDate,
        isRegExp: _isJs.isRegExp,
        isObject: _isJs.isObject,
        isNull: _isJs.isNull,
        isUndefined: _isJs.isUndefined,
        isAccessorNode: _isJs.isAccessorNode,
        isArrayNode: _isJs.isArrayNode,
        isAssignmentNode: _isJs.isAssignmentNode,
        isBlockNode: _isJs.isBlockNode,
        isConditionalNode: _isJs.isConditionalNode,
        isConstantNode: _isJs.isConstantNode,
        isFunctionAssignmentNode: _isJs.isFunctionAssignmentNode,
        isFunctionNode: _isJs.isFunctionNode,
        isIndexNode: _isJs.isIndexNode,
        isNode: _isJs.isNode,
        isObjectNode: _isJs.isObjectNode,
        isOperatorNode: _isJs.isOperatorNode,
        isParenthesisNode: _isJs.isParenthesisNode,
        isRangeNode: _isJs.isRangeNode,
        isSymbolNode: _isJs.isSymbolNode,
        isChain: _isJs.isChain
    }); // load config function and apply provided config
    math.config = _configJs.configFactory(configInternal, math.emit);
    math.expression = {
        transform: {
        },
        mathWithTransform: {
            config: math.config
        }
    }; // cached factories and instances used by function load
    var legacyFactories = [];
    var legacyInstances = [];
    /**
   * Load a function or data type from a factory.
   * If the function or data type already exists, the existing instance is
   * returned.
   * @param {Function} factory
   * @returns {*}
   */ function load(factory) {
        if (_factoryJs.isFactory(factory)) return factory(math);
        var firstProperty = factory[Object.keys(factory)[0]];
        if (_factoryJs.isFactory(firstProperty)) return firstProperty(math);
        if (!_objectJs.isLegacyFactory(factory)) {
            console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);
            throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
        }
        var index = legacyFactories.indexOf(factory);
        var instance;
        if (index === -1) {
            // doesn't yet exist
            if (factory.math === true) // pass with math namespace
            instance = factory.factory(math.type, configInternal, load, math.typed, math);
            else instance = factory.factory(math.type, configInternal, load, math.typed);
             // append to the cache
            legacyFactories.push(factory);
            legacyInstances.push(instance);
        } else // already existing function, return the cached instance
        instance = legacyInstances[index];
        return instance;
    }
    var importedFactories = {
    }; // load the import function
    function lazyTyped() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        return math.typed.apply(math.typed, args);
    }
    var internalImport = _importJs.importFactory(lazyTyped, load, math, importedFactories);
    math.import = internalImport; // listen for changes in config, import all functions again when changed
    // TODO: move this listener into the import function?
    math.on('config', ()=>{
        _objectJs.values(importedFactories).forEach((factory)=>{
            if (factory && factory.meta && factory.meta.recreateOnConfigChange) // FIXME: only re-create when the current instance is the same as was initially created
            // FIXME: delete the functions/constants before importing them again?
            internalImport(factory, {
                override: true
            });
        });
    }); // the create function exposed on the mathjs instance is bound to
    // the factory functions passed before
    math.create = create.bind(null, factories); // export factory function
    math.factory = _factoryJs.factory; // import the factory functions like createAdd as an array instead of object,
    // else they will get a different naming (`createAdd` instead of `add`).
    math.import(_objectJs.values(_objectJs.deepFlatten(factories)));
    math.ArgumentsError = _argumentsErrorJs.ArgumentsError;
    math.DimensionError = _dimensionErrorJs.DimensionError;
    math.IndexError = _indexErrorJs.IndexError;
    return math;
}

},{"@babel/runtime/helpers/extends":"gyhTZ","./../utils/polyfills.js":"3utEw","../utils/object.js":"eRHhH","./../utils/emitter.js":"4IucJ","./function/import.js":"amYx8","./function/config.js":"5CHjx","../utils/factory.js":"26foW","../utils/is.js":"iwdlF","../error/ArgumentsError.js":"botyZ","../error/DimensionError.js":"49REC","../error/IndexError.js":"bCMLn","./config.js":"jWj50","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3utEw":[function(require,module,exports) {
// TODO: remove these polyfills as soon as we have a build process that transpiles the code to ES5
// Polyfill for IE 11 (Number.isFinite is used in `complex.js`)
// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
Number.isFinite = Number.isFinite || function(value) {
    return typeof value === 'number' && isFinite(value);
}; // Polyfill for IE 11
// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
Number.isNaN = Number.isNaN || function(value) {
    return value !== value; // eslint-disable-line no-self-compare
};

},{}],"4IucJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
 * @param {Object} obj
 * @return {Object} obj
 */ parcelHelpers.export(exports, "mixin", ()=>mixin
);
var _tinyEmitter = require("tiny-emitter");
var _tinyEmitterDefault = parcelHelpers.interopDefault(_tinyEmitter);
function mixin(obj) {
    // create event emitter
    var emitter = new _tinyEmitterDefault.default(); // bind methods to obj (we don't want to expose the emitter.e Array...)
    obj.on = emitter.on.bind(emitter);
    obj.off = emitter.off.bind(emitter);
    obj.once = emitter.once.bind(emitter);
    obj.emit = emitter.emit.bind(emitter);
    return obj;
}

},{"tiny-emitter":"4AQcu","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4AQcu":[function(require,module,exports) {
function E() {
// Keep this empty so it's easier to inherit from
// (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}
E.prototype = {
    on: function(name, callback, ctx) {
        var e = this.e || (this.e = {
        });
        (e[name] || (e[name] = [])).push({
            fn: callback,
            ctx: ctx
        });
        return this;
    },
    once: function(name, callback, ctx) {
        var self = this;
        function listener() {
            self.off(name, listener);
            callback.apply(ctx, arguments);
        }
        listener._ = callback;
        return this.on(name, listener, ctx);
    },
    emit: function(name) {
        var data = [].slice.call(arguments, 1);
        var evtArr = ((this.e || (this.e = {
        }))[name] || []).slice();
        var i = 0;
        var len = evtArr.length;
        for(; i < len; i++)evtArr[i].fn.apply(evtArr[i].ctx, data);
        return this;
    },
    off: function(name, callback) {
        var e = this.e || (this.e = {
        });
        var evts = e[name];
        var liveEvents = [];
        if (evts && callback) {
            for(var i = 0, len = evts.length; i < len; i++)if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
        }
        // Remove event from queue to prevent memory leak
        // Suggested by https://github.com/lazd
        // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910
        liveEvents.length ? e[name] = liveEvents : delete e[name];
        return this;
    }
};
module.exports = E;
module.exports.TinyEmitter = E;

},{}],"amYx8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "importFactory", ()=>importFactory
);
var _isJs = require("../../utils/is.js");
var _factoryJs = require("../../utils/factory.js");
var _objectJs = require("../../utils/object.js");
var _arrayJs = require("../../utils/array.js");
var _argumentsErrorJs = require("../../error/ArgumentsError.js");
function importFactory(typed, load, math, importedFactories) {
    /**
   * Import functions from an object or a module.
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *    math.import(functions)
   *    math.import(functions, options)
   *
   * Where:
   *
   * - `functions: Object`
   *   An object with functions or factories to be imported.
   * - `options: Object` An object with import options. Available options:
   *   - `override: boolean`
   *     If true, existing functions will be overwritten. False by default.
   *   - `silent: boolean`
   *     If true, the function will not throw errors on duplicates or invalid
   *     types. False by default.
   *   - `wrap: boolean`
   *     If true, the functions will be wrapped in a wrapper function
   *     which converts data types like Matrix to primitive data types like Array.
   *     The wrapper is needed when extending math.js with libraries which do not
   *     support these data type. False by default.
   *
   * Examples:
   *
   *    import { create, all } from 'mathjs'
   *    import * as numbers from 'numbers'
   *
   *    // create a mathjs instance
   *    const math = create(all)
   *
   *    // define new functions and variables
   *    math.import({
   *      myvalue: 42,
   *      hello: function (name) {
   *        return 'hello, ' + name + '!'
   *      }
   *    })
   *
   *    // use the imported function and variable
   *    math.myvalue * 2               // 84
   *    math.hello('user')             // 'hello, user!'
   *
   *    // import the npm module 'numbers'
   *    // (must be installed first with `npm install numbers`)
   *    math.import(numbers, {wrap: true})
   *
   *    math.fibonacci(7) // returns 13
   *
   * @param {Object | Array} functions  Object with functions to be imported.
   * @param {Object} [options]          Import options.
   */ function mathImport(functions, options) {
        var num = arguments.length;
        if (num !== 1 && num !== 2) throw new _argumentsErrorJs.ArgumentsError('import', num, 1, 2);
        if (!options) options = {
        };
        function flattenImports(flatValues, value, name) {
            if (Array.isArray(value)) value.forEach((item)=>flattenImports(flatValues, item)
            );
            else if (typeof value === 'object') {
                for(var _name in value)if (_objectJs.hasOwnProperty(value, _name)) flattenImports(flatValues, value[_name], _name);
            } else if (_factoryJs.isFactory(value) || name !== undefined) {
                var flatName = _factoryJs.isFactory(value) ? isTransformFunctionFactory(value) ? value.fn + '.transform' // TODO: this is ugly
                 : value.fn : name; // we allow importing the same function twice if it points to the same implementation
                if (_objectJs.hasOwnProperty(flatValues, flatName) && flatValues[flatName] !== value && !options.silent) throw new Error('Cannot import "' + flatName + '" twice');
                flatValues[flatName] = value;
            } else {
                if (!options.silent) throw new TypeError('Factory, Object, or Array expected');
            }
        }
        var flatValues1 = {
        };
        flattenImports(flatValues1, functions);
        for(var name1 in flatValues1)if (_objectJs.hasOwnProperty(flatValues1, name1)) {
            // console.log('import', name)
            var value1 = flatValues1[name1];
            if (_factoryJs.isFactory(value1)) // we ignore name here and enforce the name of the factory
            // maybe at some point we do want to allow overriding it
            // in that case we can implement an option overrideFactoryNames: true
            _importFactory(value1, options);
            else if (isSupportedType(value1)) _import(name1, value1, options);
            else {
                if (!options.silent) throw new TypeError('Factory, Object, or Array expected');
            }
        }
    }
    /**
   * Add a property to the math namespace
   * @param {string} name
   * @param {*} value
   * @param {Object} options  See import for a description of the options
   * @private
   */ function _import(name, value, options) {
        // TODO: refactor this function, it's to complicated and contains duplicate code
        if (options.wrap && typeof value === 'function') // create a wrapper around the function
        value = _wrap(value);
         // turn a plain function with a typed-function signature into a typed-function
        if (hasTypedFunctionSignature(value)) value = typed(name, {
            [value.signature]: value
        });
        if (isTypedFunction(math[name]) && isTypedFunction(value)) {
            if (options.override) // give the typed function the right name
            value = typed(name, value.signatures);
            else // merge the existing and typed function
            value = typed(math[name], value);
            math[name] = value;
            delete importedFactories[name];
            _importTransform(name, value);
            math.emit('import', name, function resolver() {
                return value;
            });
            return;
        }
        if (math[name] === undefined || options.override) {
            math[name] = value;
            delete importedFactories[name];
            _importTransform(name, value);
            math.emit('import', name, function resolver() {
                return value;
            });
            return;
        }
        if (!options.silent) throw new Error('Cannot import "' + name + '": already exists');
    }
    function _importTransform(name, value) {
        if (value && typeof value.transform === 'function') {
            math.expression.transform[name] = value.transform;
            if (allowedInExpressions(name)) math.expression.mathWithTransform[name] = value.transform;
        } else {
            // remove existing transform
            delete math.expression.transform[name];
            if (allowedInExpressions(name)) math.expression.mathWithTransform[name] = value;
        }
    }
    function _deleteTransform(name) {
        delete math.expression.transform[name];
        if (allowedInExpressions(name)) math.expression.mathWithTransform[name] = math[name];
        else delete math.expression.mathWithTransform[name];
    }
    /**
   * Create a wrapper a round an function which converts the arguments
   * to their primitive values (like convert a Matrix to Array)
   * @param {Function} fn
   * @return {Function} Returns the wrapped function
   * @private
   */ function _wrap(fn) {
        var wrapper = function wrapper() {
            var args = [];
            for(var i = 0, len = arguments.length; i < len; i++){
                var arg = arguments[i];
                args[i] = arg && arg.valueOf();
            }
            return fn.apply(math, args);
        };
        if (fn.transform) wrapper.transform = fn.transform;
        return wrapper;
    }
    /**
   * Import an instance of a factory into math.js
   * @param {function(scope: object)} factory
   * @param {Object} options  See import for a description of the options
   * @param {string} [name=factory.name] Optional custom name
   * @private
   */ function _importFactory(factory, options) {
        var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : factory.fn;
        if (_arrayJs.contains(name, '.')) throw new Error("Factory name should not contain a nested path. Name: " + JSON.stringify(name));
        var namespace = isTransformFunctionFactory(factory) ? math.expression.transform : math;
        var existingTransform = name in math.expression.transform;
        var existing = _objectJs.hasOwnProperty(namespace, name) ? namespace[name] : undefined;
        var resolver = function resolver() {
            // collect all dependencies, handle finding both functions and classes and other special cases
            var dependencies = {
            };
            factory.dependencies.map(_factoryJs.stripOptionalNotation).forEach((dependency)=>{
                if (_arrayJs.contains(dependency, '.')) throw new Error("Factory dependency should not contain a nested path. Name: " + JSON.stringify(dependency));
                if (dependency === 'math') dependencies.math = math;
                else if (dependency === 'mathWithTransform') dependencies.mathWithTransform = math.expression.mathWithTransform;
                else if (dependency === 'classes') // special case for json reviver
                dependencies.classes = math;
                else dependencies[dependency] = math[dependency];
            });
            var instance = /* #__PURE__ */ factory(dependencies);
            if (instance && typeof instance.transform === 'function') throw new Error("Transforms cannot be attached to factory functions. Please create a separate function for it with exports.path=\"expression.transform\"");
            if (existing === undefined || options.override) return instance;
            if (isTypedFunction(existing) && isTypedFunction(instance)) // merge the existing and new typed function
            return typed(existing, instance);
            if (options.silent) // keep existing, ignore imported function
            return existing;
            else throw new Error('Cannot import "' + name + '": already exists');
        }; // TODO: add unit test with non-lazy factory
        if (!factory.meta || factory.meta.lazy !== false) {
            _objectJs.lazy(namespace, name, resolver); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)
            if (existing && existingTransform) _deleteTransform(name);
            else if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) _objectJs.lazy(math.expression.mathWithTransform, name, ()=>namespace[name]
            );
        } else {
            namespace[name] = resolver(); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)
            if (existing && existingTransform) _deleteTransform(name);
            else if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) _objectJs.lazy(math.expression.mathWithTransform, name, ()=>namespace[name]
            );
        } // TODO: improve factories, store a list with imports instead which can be re-played
        importedFactories[name] = factory;
        math.emit('import', name, resolver);
    }
    /**
   * Check whether given object is a type which can be imported
   * @param {Function | number | string | boolean | null | Unit | Complex} object
   * @return {boolean}
   * @private
   */ function isSupportedType(object) {
        return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || _isJs.isUnit(object) || _isJs.isComplex(object) || _isJs.isBigNumber(object) || _isJs.isFraction(object) || _isJs.isMatrix(object) || Array.isArray(object);
    }
    /**
   * Test whether a given thing is a typed-function
   * @param {*} fn
   * @return {boolean} Returns true when `fn` is a typed-function
   */ function isTypedFunction(fn) {
        return typeof fn === 'function' && typeof fn.signatures === 'object';
    }
    function hasTypedFunctionSignature(fn) {
        return typeof fn === 'function' && typeof fn.signature === 'string';
    }
    function allowedInExpressions(name) {
        return !_objectJs.hasOwnProperty(unsafe, name);
    }
    function factoryAllowedInExpressions(factory) {
        return factory.fn.indexOf('.') === -1 && !_objectJs.hasOwnProperty(unsafe, factory.fn) && (!factory.meta || !factory.meta.isClass);
    }
    function isTransformFunctionFactory(factory) {
        return factory !== undefined && factory.meta !== undefined && factory.meta.isTransformFunction === true || false;
    } // namespaces and functions not available in the parser for safety reasons
    var unsafe = {
        expression: true,
        type: true,
        docs: true,
        error: true,
        json: true,
        chain: true // chain method not supported. Note that there is a unit chain too.
    };
    return mathImport;
}

},{"../../utils/is.js":"iwdlF","../../utils/factory.js":"26foW","../../utils/object.js":"eRHhH","../../utils/array.js":"3R6c8","../../error/ArgumentsError.js":"botyZ","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}]},["dHVtd","int3P"], "int3P", "parcelRequire94c2")

//# sourceMappingURL=index.94538dff.js.map
